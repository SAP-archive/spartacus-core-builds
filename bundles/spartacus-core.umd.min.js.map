{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","OccConfig","_super","SiteContextConfig","AnonymousConsentsConfig","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","entityStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","LoadClientToken","_this","StateLoaderActions.LoaderLoadAction","LoadClientTokenFail","StateLoaderActions.LoaderFailAction","LoadClientTokenSuccess","StateLoaderActions.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","RoutingConfig","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","OccEndpointsService","baseSiteService","SCOPE_SUFFIX","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","encodeURIComponent","httpParamsOptions","fromString","httpParams_1","HttpParams","toString","endpointsConfig","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","useExisting","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateLoaderActions.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateLoaderSelectors.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateLoaderSelectors.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateLoaderSelectors.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateLoaderSelectors.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","decodeURIComponent","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","substr","isFeatureEnabled","feature","featureConfig","DeferLoadingStrategy","FeatureConfigService","isLevel","isEnabled","FeaturesConfig","OccCartEntryAdapter","featureConfigService","getCartEndpoint","cartEndpoint","cartId","productCode","quantity","toAdd","legacyAdd","code","qty","update","entryNumber","pickupStore","legacyUpdate","patch","remove","legacyRemove","queryString","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","DETAILS_PARAMS","OccCartAdapter","loadAll","pluck","legacyLoadAll","legacyLoad","oldCartId","toMergeCartGuid","legacyCreate","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","CustomEncoder","encodeKey","encodeValue","decodeKey","decodeValue","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","encoder","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","product_scopes","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","getOrderEndpoint","orderCode","orderId","loadHistory","legacyLoadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","EventService","eventsMeta","eventType","source$","getEventMeta","sources$","unregister","newSources","s$","output$","getInputSubject","eventMeta","inputSubject$","Subject","validateEventType","createEventMeta","BehaviorSubject","merge","share","getValidatedEventStream","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateEntityLoaderSelectors.entityStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateEntityLoaderActions.EntityLoadAction","CancelOrderFail","StateEntityLoaderActions.EntityFailAction","CancelOrderSuccess","StateEntityLoaderActions.EntitySuccessAction","ResetCancelOrderProcess","StateEntityLoaderActions.EntityResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","initializeContext","langService","currService","configInit","contextServiceProviders","APP_INITIALIZER","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","val","unsubscribe","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","ngOnDestroy","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","activateLanguage$","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","activateCurrency$","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","BadGatewayHandler","responseStatus","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","subject","subjectType","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","HttpErrorInterceptor","handlers","reverse","handleErrorResponse","handler","getResponseHandler","h","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","GlobalMessageConfig","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","customerId","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","getCartIdByUserId","getWishlistName","isTempCartId","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","switchMapTo","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","err","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartAddEntryEvent","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","SelectiveCartService","userService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateEntitySelectors.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","initialState$9","getDeliveryAddressSelector","getDeliveryModeSelector","deliveryMode","getPaymentDetailsSelector","getOrderDetailsSelector","orderDetails","getCheckoutState","checkoutState","steps","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","supported","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","initialState$a","cardTypesEntities","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","CmsStructureConfig","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentLoader","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesConfig","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","cmsComponentConnector","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","matchingResolvers","resolver","DynamicAttributeService","addDynamicAttributes","element","renderer","groupProps","propName","propValue","classItem","classList","setAttribute","toLowerCase","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","debug","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","defaultI18nConfig","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","Observable","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_enabled","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","PersonalizationConfig","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","cmsService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","codes","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","SmartEditService","zone","isPreviewPage","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","attr","classes","run","NgZone","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","StoreFinderConfig","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\n\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig =\n      this.config && this.config.routing && this.config.routing.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  private readonly SCOPE_SUFFIX = '_scopes';\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope = ''\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions;\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = { fromString: queryParamsFromEndpoint };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope: string): string {\n    const endpointsConfig =\n      this.config.backend &&\n      this.config.backend.occ &&\n      this.config.backend.occ.endpoints;\n\n    if (scope) {\n      const endpointConfig = endpointsConfig[`${endpoint}${this.SCOPE_SUFFIX}`];\n      if (endpointConfig && endpointConfig[scope]) {\n        return endpointConfig[scope];\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return endpointsConfig[endpoint] || endpoint;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(\n    config: AuthConfig,\n    http: HttpClient,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(config: AuthConfig, http: HttpClient);\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(\n    http: HttpClient,\n    config: AuthConfig,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(http: HttpClient, config: AuthConfig);\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { StateConfig } from './config/state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n        { provide: StateConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        ...AuthServices,\n        { provide: AuthConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { LoaderState } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","export abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyAdd(userId, cartId, productCode, quantity);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyUpdate(userId, cartId, entryNumber, qty, pickupStore);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyRemove(userId, cartId, entryNumber);\n    }\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyAdd(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const url = this.getCartEndpoint(userId) + cartId + '/entries';\n\n    const params = new HttpParams({\n      fromString: 'code=' + productCode + '&qty=' + quantity,\n    });\n\n    const toAdd = JSON.stringify({});\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyUpdate(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n    let queryString = 'qty=' + qty;\n\n    if (pickupStore) {\n      queryString = queryString + '&pickupStore=' + pickupStore;\n    }\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http\n      .patch<CartModification>(url, {}, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyRemove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_CART_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n// TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.\nconst DETAILS_PARAMS =\n  'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +\n  'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +\n  'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +\n  'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +\n  'appliedVouchers,productDiscounts(formattedValue),user';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = `users/${userId}/carts/`;\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadAll(userId);\n    }\n\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      // TODO: Deprecated, remove Issue: #4125.\n      if (!this.featureConfigService.isLevel('1.1')) {\n        return this.legacyLoad(userId, cartId);\n      }\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);\n    }\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadAll(userId: string): Observable<Cart[]> {\n    const url = this.getCartEndpoint(userId);\n    const params = new HttpParams({\n      fromString: `fields=carts(${DETAILS_PARAMS},saveTime)`,\n    });\n\n    return this.http\n      .get<Occ.CartList>(url, { params })\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, cartId: string): Observable<Cart> {\n    const url = this.getCartEndpoint(userId) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${DETAILS_PARAMS}`,\n    });\n\n    return this.http\n      .get<Occ.Cart>(url, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyCreate(\n    userId: string,\n    toAdd: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId);\n    let queryString = `fields=${DETAILS_PARAMS}`;\n\n    if (oldCartId) {\n      queryString = `${queryString}&oldCartId=${oldCartId}`;\n    }\n    if (toMergeCartGuid) {\n      queryString = `${queryString}&toMergeCartGuid=${toMergeCartGuid}`;\n    }\n\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n\n    return this.http\n      .post<Occ.Cart>(url, toAdd, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product:\n          'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n        product_scopes: {\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(\n      this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER)\n    );\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String('10000000');\n    } else {\n      params['query'] = query;\n    }\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getOrderEndpoint(userId: string): string {\n    const orderEndpoint = 'users/' + userId + '/orders';\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoad(userId, orderCode);\n    }\n\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadHistory(userId, pageSize, currentPage, sort);\n    }\n\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, orderCode: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId) + '/' + orderCode;\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<Occ.Order>(url, {\n        params,\n      })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const url = this.getOrderEndpoint(userId);\n    let params = new HttpParams();\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (sort) {\n      params = params.set('sort', sort);\n    }\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url, { params: params })\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { OccConfig } from './config/occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        { provide: OccConfig, useExisting: Config },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (event instanceof HttpResponse) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { share, switchMap, tap } from 'rxjs/operators';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * Observable with array of sources of the event\n   */\n  sources$: BehaviorSubject<Observable<T>[]>;\n\n  /**\n   * Output observable with merged all event sources\n   */\n  output$: Observable<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const event = this.getEventMeta(eventType);\n    const sources: Observable<T>[] = event.sources$.value;\n    if (sources.includes(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      event.sources$.next([...sources, source$]);\n    }\n\n    return () => this.unregister(eventType, source$);\n  }\n\n  /**\n   * Unregisters an event source for the given event type\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   */\n  private unregister<T>(eventType: Type<T>, source$: Observable<T>): void {\n    const event = this.getEventMeta(eventType);\n    const newSources: Observable<T>[] = event.sources$.value.filter(\n      (s$) => s$ !== source$\n    );\n    event.sources$.next(newSources);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    return this.getEventMeta(eventType).output$;\n  }\n\n  /**\n   * Dispatches a single event.\n   *\n   * However, it's recommended to use method `register` instead, whenever the event can come from some stream.\n   *  It allows for lazy computations in the event source stream -\n   *  if no one subscribes to the event, the logic of the event source stream won't be evaluated.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    const sources$ = new BehaviorSubject<Observable<T>[]>([]);\n    let output$ = sources$.pipe(\n      switchMap((sources: Observable<T>[]) => merge(...sources)),\n      share() // share the result observable to avoid merging sources for each subscriber\n    );\n\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      sources$,\n      output$,\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateEntityLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateEntityLoaderSelectors.entityStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { LoaderState } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  consents: LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: LoaderState<Order>;\n  orderReturn: LoaderState<ReturnRequest>;\n  orderReturnList: LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: LoaderState<NotificationPreference[]>;\n  productInterests: LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateLoaderSelectors.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateLoaderSelectors.loaderSuccessSelector(state),\n    loading: StateLoaderSelectors.loaderLoadingSelector(state),\n    regions: StateLoaderSelectors.loaderValueSelector(state).entities,\n    country: StateLoaderSelectors.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(() =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      baseSiteService.initialize();\n      langService.initialize();\n      currService.initialize();\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.router.url);\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init();\n    });\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler, ConfigInitializerService],\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        { provide: SiteContextConfig, useExisting: Config },\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AnonymousConsentsConfig } from './config/anonymous-consents-config';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        { provide: AnonymousConsentsConfig, useExisting: Config },\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateLoaderActions.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  abstract responseStatus: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.subjectType === 'cart' && e.reason === 'notFound')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpResponseStatus } from '../models/response-status.model';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {\n    // We reverse the handlers to allow for custom handlers\n    // that replace standard handlers\n    this.handlers.reverse();\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    const status = response.status;\n    let handler = this.handlers.find((h) => h.responseStatus === status);\n    if (!handler) {\n      handler = this.handlers.find(\n        (h) => h.responseStatus === HttpResponseStatus.UNKNOWN\n      );\n    }\n    return handler;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { GlobalMessageConfig } from './config/global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),\n    GlobalMessageService,\n    { provide: GlobalMessageConfig, useExisting: Config },\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmConfig } from './config/asm-config';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [\n        { provide: AsmConfig, useExisting: Config },\n        ...interceptors,\n        provideDefaultConfig(defaultAsmConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi) {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart lifecycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) => {\n            if (error?.error?.errors) {\n              error.error.errors.forEach((err) => {\n                if (err.message) {\n                  this.messageService.add(\n                    err.message,\n                    GlobalMessageType.MSG_TYPE_ERROR\n                  );\n                }\n              });\n            }\n            return from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ]);\n          })\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) => err.reason === 'notFound' || 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend.\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable()\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\nimport { UserService } from '../../user/facade/user.service';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport { Cart } from '../../model/cart.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { map, filter, tap, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { OrderEntry } from '../../model/order.model';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\n\n@Injectable()\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsComponent } from '../../model';\nimport { EntityState, LoaderState } from '../../state/index';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: EntityLoaderState<string>;\n  product: EntityLoaderState<string>;\n  category: EntityLoaderState<string>;\n  catalog: EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport {\n  initialLoaderState,\n  LoaderState,\n  StateEntitySelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateEntitySelectors.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      initialLoaderState\n  );\n};\n\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) =>\n      StateLoaderSelectors.loaderValueSelector(loaderState) || false\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      if (componentState && exists) {\n        return componentState;\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateEntityLoaderSelectors.entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateLoaderSelectors.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateLoaderSelectors.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value: boolean) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      // TODO(issue:6431) - this `filter` should be removed.\n      // The reason for removal: with `filter` in place, when moving to a page that has restrictions, the component data will still emit the previous value.\n      // Removing it causes some components to fail, because they are not checking\n      // if the data is actually there. I noticed these that this component is failing, but there are possibly more:\n      // - `tab-paragraph-container.component.ts` when visiting any PDP page\n      filter((component) => !!component)\n    ) as Observable<T>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { ActiveCartService } from './facade/active-cart.service';\nimport {\n  CartVoucherService,\n  SelectiveCartService,\n  WishListService,\n} from './facade/index';\nimport { MultiCartService } from './facade/multi-cart.service';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartVoucherService,\n        MultiCartService,\n        WishListService,\n        ActiveCartService,\n        SelectiveCartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentLoader: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentLoader.getList(componentUids, pageContext).pipe(\n      switchMap((components) =>\n        from(\n          components.map(\n            (component) =>\n              new CmsActions.LoadCmsComponentSuccess({\n                component,\n                uid: component.uid,\n                pageContext,\n              })\n          )\n        )\n      ),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","export abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable()\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        ExternalRoutesService,\n        { provide: ExternalRoutesConfig, useExisting: Config },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { Config } from '../config/config.module';\nimport { RoutingConfig } from './configurable-routes/config/routing-config';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n        { provide: RoutingConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state = false,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { CmsConfig } from './config/cms-config';\nimport { CmsStructureConfig } from './config/cms-structure.config';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [\n        CmsService,\n        { provide: CmsConfig, useExisting: Config },\n        { provide: CmsStructureConfig, useExisting: Config },\n        provideDefaultConfig(defaultCmsModuleConfig),\n      ],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: any[] = Object.keys(this.resolverMethods)\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    const matchingResolvers = this.resolvers.filter(\n      (resolver) => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function (a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param properties: properties in each cms item response data\n   * @param element: slot or cms component element\n   * @param renderer\n   */\n  addDynamicAttributes(\n    properties: any,\n    element: Element,\n    renderer: Renderer2\n  ): void {\n    if (properties) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n        {\n          provide: FeaturesConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\n\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable()\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslatePipe } from './translate.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { I18nConfig } from './config/i18n-config';\nimport { TranslationService } from './translation.service';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { CxDatePipe } from './date.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: I18nConfig, useExisting: Config },\n        { provide: TranslationService, useClass: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    /**\n     * If set to `true`, the integration with kyma will be enabled, and Open ID token will be retrieved when registering/logging in,\n     */\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_enabled: false,\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { iif, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<KymaActions.LoadOpenIdToken> = iif<\n    KymaActions.LoadOpenIdToken,\n    KymaActions.LoadOpenIdToken\n  >(\n    () => this.config.authentication && this.config.authentication.kyma_enabled,\n    this.actions$.pipe(\n      ofType<KymaActions.LoadOpenIdTokenSuccess>(\n        AuthActions.LOAD_USER_TOKEN_SUCCESS\n      ),\n      withLatestFrom(\n        this.actions$.pipe(\n          ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n        )\n      ),\n      map(\n        ([, loginAction]) =>\n          new KymaActions.LoadOpenIdToken({\n            username: loginAction.payload.userId,\n            password: loginAction.payload.password,\n          })\n      )\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService,\n    private config: KymaConfig\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaConfig } from './config/kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [\n    provideDefaultConfig(defaultKymaConfig),\n    ...KymaServices,\n    { provide: KymaConfig, useExisting: Config },\n  ],\n})\nexport class KymaModule {}\n","export abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { PersonalizationConfig } from './config/personalization-config';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  providers: [{ provide: PersonalizationConfig, useExisting: Config }],\n})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  initialLoaderState,\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductsFactory = (\n  codes: string[]\n): MemoizedSelector<StateWithProduct, Product[]> => {\n  return createSelector(\n    getProductState,\n    (details: EntityLoaderState<Product>) => {\n      return codes\n        .map((code) =>\n          details.entities[code] ? details.entities[code].value : undefined\n        )\n        .filter((product) => product !== undefined);\n    }\n  );\n};\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(getProductState, (details) =>\n    scope\n      ? StateEntityLoaderSelectors.entityStateSelector(details, code)[scope] ||\n        initialLoaderState\n      : StateEntityLoaderSelectors.entityStateSelector(details, code)\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = ''\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY).zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { LoaderState } from '../loader/loader-state';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * For backward compatibility, we accommodate scopes alongside current\n * loading/error/success/value flags, thus those names can't be used as scope\n * names.\n *\n * TODO: Improve, issue #5445\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T> | LoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> | LoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> | LoaderState<T> = initialLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> | LoaderState<T> => {\n    if (\n      action &&\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.scope\n    ) {\n      return {\n        ...state,\n        [action.meta.scope]: loader(state[action.meta.scope], action),\n      };\n    } else {\n      return loader(state, action);\n    }\n  };\n}\n","import { ScopedLoaderState } from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from '../entity-loader/entity-loader-state';\nimport { EntityLoaderAction } from '../entity-loader/entity-loader.action';\nimport { LoaderState } from '../loader/loader-state';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T> | LoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this.cmsService.launchInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useExisting: Config },\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) =>\n            of(new UserActions.CancelOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","export const testestsd = 'sare';\n"]}