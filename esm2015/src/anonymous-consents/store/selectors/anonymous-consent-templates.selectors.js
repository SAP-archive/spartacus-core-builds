/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getAnonymousConsentState } from './feature.selector';
const ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
state => state.templates;
/** @type {?} */
export const getAnonymousConsentTemplatesState = createSelector(getAnonymousConsentState, (ɵ0));
/** @type {?} */
export const getAnonymousConsentTemplatesValue = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderValueSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesLoading = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderLoadingSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesSuccess = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderSuccessSelector);
/** @type {?} */
export const getAnonymousConsentTemplatesError = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderErrorSelector);
/** @type {?} */
export const getAnonymousConsentTemplate = (/**
 * @param {?} templateCode
 * @return {?}
 */
(templateCode) => {
    return createSelector(getAnonymousConsentTemplatesValue, (/**
     * @param {?} templates
     * @return {?}
     */
    templates => templates.find((/**
     * @param {?} template
     * @return {?}
     */
    template => template.id === templateCode))));
});
const ɵ1 = /**
 * @param {?} state
 * @return {?}
 */
state => state.updated;
/** @type {?} */
export const getAnonymousConsentTemplatesUpdate = createSelector(getAnonymousConsentState, (ɵ1));
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtdGVtcGxhdGVzLnNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvc2VsZWN0b3JzL2Fub255bW91cy1jb25zZW50LXRlbXBsYXRlcy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR2xFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7OztBQU81RCxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTOztBQUwxQixNQUFNLE9BQU8saUNBQWlDLEdBRzFDLGNBQWMsQ0FDaEIsd0JBQXdCLE9BRXpCOztBQUVELE1BQU0sT0FBTyxpQ0FBaUMsR0FHMUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMsbUJBQW1CLENBQ3pDOztBQUVELE1BQU0sT0FBTyxtQ0FBbUMsR0FHNUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMscUJBQXFCLENBQzNDOztBQUVELE1BQU0sT0FBTyxtQ0FBbUMsR0FHNUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMscUJBQXFCLENBQzNDOztBQUVELE1BQU0sT0FBTyxpQ0FBaUMsR0FHMUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsb0JBQW9CLENBQUMsbUJBQW1CLENBQ3pDOztBQUVELE1BQU0sT0FBTywyQkFBMkI7Ozs7QUFBRyxDQUN6QyxZQUFvQixFQUMyQyxFQUFFO0lBQ2pFLE9BQU8sY0FBYyxDQUNuQixpQ0FBaUM7Ozs7SUFDakMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSTs7OztJQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxZQUFZLEVBQUMsRUFDdEUsQ0FBQztBQUNKLENBQUMsQ0FBQTs7Ozs7QUFPQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPOztBQUx4QixNQUFNLE9BQU8sa0NBQWtDLEdBRzNDLGNBQWMsQ0FDaEIsd0JBQXdCLE9BRXpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDb25zZW50VGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jb25zZW50Lm1vZGVsJztcbmltcG9ydCB7IFN0YXRlTG9hZGVyU2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7IFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcbmltcG9ydCB7IGdldEFub255bW91c0NvbnNlbnRTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBMb2FkZXJTdGF0ZTxDb25zZW50VGVtcGxhdGVbXT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFN0YXRlLFxuICBzdGF0ZSA9PiBzdGF0ZS50ZW1wbGF0ZXNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzVmFsdWU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBDb25zZW50VGVtcGxhdGVbXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGUsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2VzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzRXJyb3I6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyRXJyb3JTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZSA9IChcbiAgdGVtcGxhdGVDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsIENvbnNlbnRUZW1wbGF0ZT4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1ZhbHVlLFxuICAgIHRlbXBsYXRlcyA9PiB0ZW1wbGF0ZXMuZmluZCh0ZW1wbGF0ZSA9PiB0ZW1wbGF0ZS5pZCA9PT0gdGVtcGxhdGVDb2RlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNVcGRhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRTdGF0ZSxcbiAgc3RhdGUgPT4gc3RhdGUudXBkYXRlZFxuKTtcbiJdfQ==