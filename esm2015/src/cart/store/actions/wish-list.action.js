import { EntityFailAction, EntityLoadAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { getCartIdByUserId } from '../../utils/utils';
import { MULTI_CART_DATA } from '../multi-cart-state';
export const CREATE_WISH_LIST = '[Wish List] Create Wish List';
export const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';
export const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';
export const LOAD_WISH_LIST = '[Wish List] Load Wish List';
export const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';
export const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';
export const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';
export class CreateWishList {
    constructor(payload) {
        this.payload = payload;
        this.type = CREATE_WISH_LIST;
    }
}
export class CreateWishListSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));
        this.payload = payload;
        this.type = CREATE_WISH_LIST_SUCCESS;
    }
}
export class CreateWishListFail extends EntityFailAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId, payload.error);
        this.payload = payload;
        this.type = CREATE_WISH_LIST_FAIL;
    }
}
export class LoadWishList extends EntityLoadAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.tempCartId);
        this.payload = payload;
        this.type = LOAD_WISH_LIST;
    }
}
export class LoadWishListSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = LOAD_WISH_LIST_SUCCESS;
    }
}
export class LoadWishListFail extends EntityFailAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId, payload.error);
        this.payload = payload;
        this.type = LOAD_WISH_LIST_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lzaC1saXN0LmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2NhcnQvc3RvcmUvYWN0aW9ucy93aXNoLWxpc3QuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixHQUNwQixNQUFNLHlEQUF5RCxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyw4QkFBOEIsQ0FBQztBQUMvRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxtQ0FBbUMsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxzQ0FBc0MsQ0FBQztBQUUvRSxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsNEJBQTRCLENBQUM7QUFDM0QsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsb0NBQW9DLENBQUM7QUFDM0UsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsaUNBQWlDLENBQUM7QUFFckUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsNkJBQTZCLENBQUM7QUFFckUsTUFBTSxPQUFPLGNBQWM7SUFFekIsWUFDUyxPQUlOO1FBSk0sWUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFNBQUksR0FBRyxnQkFBZ0IsQ0FBQztJQU85QixDQUFDO0NBQ0w7QUFFRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsbUJBQW1CO0lBRTVELFlBQW1CLE9BQXVDO1FBQ3hELEtBQUssQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUR2RCxZQUFPLEdBQVAsT0FBTyxDQUFnQztRQURqRCxTQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHekMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGdCQUFnQjtJQUV0RCxZQUFtQixPQUF3QztRQUN6RCxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRHJDLFlBQU8sR0FBUCxPQUFPLENBQWlDO1FBRGxELFNBQUksR0FBRyxxQkFBcUIsQ0FBQztJQUd0QyxDQUFDO0NBQ0Y7QUFlRCxNQUFNLE9BQU8sWUFBYSxTQUFRLGdCQUFnQjtJQUVoRCxZQUFtQixPQUE0QjtRQUM3QyxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUQxQixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUR0QyxTQUFJLEdBQUcsY0FBYyxDQUFDO0lBRy9CLENBQUM7Q0FDRjtBQXNCRCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsbUJBQW1CO0lBRTFELFlBQW1CLE9BQW1DO1FBQ3BELEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRHRCLFlBQU8sR0FBUCxPQUFPLENBQTRCO1FBRDdDLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUd2QyxDQUFDO0NBQ0Y7QUFpQkQsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGdCQUFnQjtJQUVwRCxZQUFtQixPQUFnQztRQUNqRCxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRHJDLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBRDFDLFNBQUksR0FBRyxtQkFBbUIsQ0FBQztJQUdwQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQge1xuICBFbnRpdHlGYWlsQWN0aW9uLFxuICBFbnRpdHlMb2FkQWN0aW9uLFxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uJztcbmltcG9ydCB7IGdldENhcnRJZEJ5VXNlcklkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgTVVMVElfQ0FSVF9EQVRBIH0gZnJvbSAnLi4vbXVsdGktY2FydC1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBDUkVBVEVfV0lTSF9MSVNUID0gJ1tXaXNoIExpc3RdIENyZWF0ZSBXaXNoIExpc3QnO1xuZXhwb3J0IGNvbnN0IENSRUFURV9XSVNIX0xJU1RfRkFJTCA9ICdbV2lzaCBMaXN0XSBDcmVhdGUgV2lzaCBMaXN0IEZhaWwnO1xuZXhwb3J0IGNvbnN0IENSRUFURV9XSVNIX0xJU1RfU1VDQ0VTUyA9ICdbV2lzaCBMaXN0XSBDcmVhdGUgV2lzaCBMaXN0IFN1Y2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9XSVNIX0xJU1QgPSAnW1dpc2ggTGlzdF0gTG9hZCBXaXNoIExpc3QnO1xuZXhwb3J0IGNvbnN0IExPQURfV0lTSF9MSVNUX1NVQ0NFU1MgPSAnW1dpc2ggTGlzdF0gTG9hZCBXaXNoIExpc3QgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgTE9BRF9XSVNIX0xJU1RfRkFJTCA9ICdbV2lzaCBMaXN0XSBMb2FkIFdpc2ggTGlzdCBGYWlsJztcblxuZXhwb3J0IGNvbnN0IFJFU0VUX1dJU0hfTElTVF9ERVRBSUxTID0gJ1tXaXNoIExpc3RdIFJlc2V0IFdpc2ggTGlzdCc7XG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVXaXNoTGlzdCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDUkVBVEVfV0lTSF9MSVNUO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICB9XG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIENyZWF0ZVdpc2hMaXN0U3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX1dJU0hfTElTVF9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBjYXJ0OiBDYXJ0OyB1c2VySWQ6IHN0cmluZyB9KSB7XG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBnZXRDYXJ0SWRCeVVzZXJJZChwYXlsb2FkLmNhcnQsIHBheWxvYWQudXNlcklkKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENyZWF0ZVdpc2hMaXN0RmFpbCBleHRlbmRzIEVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX1dJU0hfTElTVF9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBjYXJ0SWQ6IHN0cmluZzsgZXJyb3I/OiBhbnkgfSkge1xuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmludGVyZmFjZSBMb2FkV2lzaExpc3RQYXlsb2FkIHtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBVc2VkIHRvIGNvbXB1dGUgd2lzaGxpc3QgY2FydCBuYW1lIGFuZCBmaW5kIGl0IGluIGxpc3Qgb2YgYWxsIGNhcnRzLlxuICAgKi9cbiAgY3VzdG9tZXJJZDogc3RyaW5nO1xuICAvKipcbiAgICogV2hlbiB3ZSB0cnkgbG9hZCB3aXNobGlzdCBmb3IgdGhlIGZpcnN0IHRpbWUgd2UgZG9uJ3Qga25vdyBjYXJ0IGlkLlxuICAgKiBJbnN0ZWFkIHdlIGNyZWF0ZSB0ZW1wb3JhcnkgY2FydCB3aXRoIGlkIGVxdWFsIHRvIHdpc2hsaXN0IG5hbWUgdG8ga2VlcCB0cmFjayBvZiBsb2FkaW5nL2Vycm9yIHN0YXRlLlxuICAgKi9cbiAgdGVtcENhcnRJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgTG9hZFdpc2hMaXN0IGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1dJU0hfTElTVDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IExvYWRXaXNoTGlzdFBheWxvYWQpIHtcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQudGVtcENhcnRJZCk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIExvYWRXaXNoTGlzdFN1Y2Nlc3NQYXlsb2FkIHtcbiAgY2FydDogQ2FydDtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGVuIExvYWRXaXNoTGlzdFN1Y2Nlc3MgYWN0aW9uIHdhcyBkaXNwYXRjaGVkIGFzIGFuIGNvbXBsZXRpb24gdG8gTG9hZFdpc2hMaXN0IGFjdGlvblxuICAgKiB3ZSBnZXQgdGVtcG9yYXJ5IGNhcnRJZCB0aGF0IHdhcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgbG9hZGluZyBzdGF0ZS5cbiAgICogSW4gY2FzZSBvZiBsb2FkaW5nIHdpc2ggbGlzdCB3aXRoIGtub3duIGNhcnRJZCB0aGlzIHByb3BlcnR5IHdpbGwgYmUgZW1wdHkuXG4gICAqL1xuICB0ZW1wQ2FydElkPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCB0byBjb21wdXRlIHdpc2hsaXN0IGNhcnQgbmFtZSBhbmQgZmluZCBpdCBpbiBsaXN0IG9mIGFsbCBjYXJ0cy5cbiAgICogSW4gY2FzZSBvZiBsb2FkaW5nIHdpc2ggbGlzdCB3aXRoIGtub3duIGNhcnRJZCB0aGlzIHByb3BlcnR5IHdpbGwgYmUgZW1wdHkuXG4gICAqL1xuICBjdXN0b21lcklkPzogc3RyaW5nO1xuICAvKipcbiAgICogV2lzaCBsaXN0IGNhcnQgaWQuIEV4dHJhY3RlZCBmcm9tIGNhcnQgY29udGVudCAoY29kZSBwcm9wZXJ0eSkuXG4gICAqL1xuICBjYXJ0SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIExvYWRXaXNoTGlzdFN1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfV0lTSF9MSVNUX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBMb2FkV2lzaExpc3RTdWNjZXNzUGF5bG9hZCkge1xuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xuICB9XG59XG5cbmludGVyZmFjZSBMb2FkV2lzaExpc3RGYWlsUGF5bG9hZCB7XG4gIHVzZXJJZDogc3RyaW5nO1xuICAvKipcbiAgICogVXNlZCB0byBjb21wdXRlIHdpc2hsaXN0IGNhcnQgbmFtZSBhbmQgZmluZCBpdCBpbiBsaXN0IG9mIGFsbCBjYXJ0cy5cbiAgICogSW4gY2FzZSBvZiBsb2FkaW5nIHdpc2ggbGlzdCB3aXRoIGtub3duIGNhcnRJZCB0aGlzIHByb3BlcnR5IHdpbGwgYmUgZW1wdHkuXG4gICAqL1xuICBjdXN0b21lcklkPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2FydCBpZCB1c2VkIGFzIGEgc3RvcmUgZW50aXR5IGtleS4gVGhpcyBjb3VsZCBwb2ludCBlaXRoZXIgdG8gc29tZVxuICAgKiB0ZW1wb3JhcnkgY2FydCB1c2VkIHRvIHRyYWNrIGxvYWRpbmcvZXJyb3Igc3RhdGUgb3IgdG8gbm9ybWFsIHdpc2ggbGlzdCBlbnRpdHkuXG4gICAqL1xuICBjYXJ0SWQ6IHN0cmluZztcbiAgZXJyb3I6IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIExvYWRXaXNoTGlzdEZhaWwgZXh0ZW5kcyBFbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfV0lTSF9MSVNUX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBMb2FkV2lzaExpc3RGYWlsUGF5bG9hZCkge1xuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFdpc2hMaXN0QWN0aW9ucyA9XG4gIHwgQ3JlYXRlV2lzaExpc3RcbiAgfCBDcmVhdGVXaXNoTGlzdFN1Y2Nlc3NcbiAgfCBDcmVhdGVXaXNoTGlzdEZhaWxcbiAgfCBMb2FkV2lzaExpc3RcbiAgfCBMb2FkV2lzaExpc3RTdWNjZXNzXG4gIHwgTG9hZFdpc2hMaXN0RmFpbDtcbiJdfQ==