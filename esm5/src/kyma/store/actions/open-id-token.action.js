import { __extends } from "tslib";
import { StateUtils } from '../../../state/utils/index';
import { OPEN_ID_TOKEN_DATA } from '../kyma-state';
export var LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';
export var LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';
export var LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';
var LoadOpenIdToken = /** @class */ (function (_super) {
    __extends(LoadOpenIdToken, _super);
    function LoadOpenIdToken(payload) {
        var _this = _super.call(this, OPEN_ID_TOKEN_DATA) || this;
        _this.payload = payload;
        _this.type = LOAD_OPEN_ID_TOKEN;
        return _this;
    }
    return LoadOpenIdToken;
}(StateUtils.LoaderLoadAction));
export { LoadOpenIdToken };
var LoadOpenIdTokenFail = /** @class */ (function (_super) {
    __extends(LoadOpenIdTokenFail, _super);
    function LoadOpenIdTokenFail(payload) {
        var _this = _super.call(this, OPEN_ID_TOKEN_DATA, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_OPEN_ID_TOKEN_FAIL;
        return _this;
    }
    return LoadOpenIdTokenFail;
}(StateUtils.LoaderFailAction));
export { LoadOpenIdTokenFail };
var LoadOpenIdTokenSuccess = /** @class */ (function (_super) {
    __extends(LoadOpenIdTokenSuccess, _super);
    function LoadOpenIdTokenSuccess(payload) {
        var _this = _super.call(this, OPEN_ID_TOKEN_DATA) || this;
        _this.payload = payload;
        _this.type = LOAD_OPEN_ID_TOKEN_SUCCESS;
        return _this;
    }
    return LoadOpenIdTokenSuccess;
}(StateUtils.LoaderSuccessAction));
export { LoadOpenIdTokenSuccess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1pZC10b2tlbi5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMva3ltYS9zdG9yZS9hY3Rpb25zL29wZW4taWQtdG9rZW4uYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLGdDQUFnQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLG1DQUFtQyxDQUFDO0FBRTlFO0lBQXFDLG1DQUEyQjtJQUU5RCx5QkFBbUIsT0FBK0M7UUFBbEUsWUFDRSxrQkFBTSxrQkFBa0IsQ0FBQyxTQUMxQjtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUF3QztRQUR6RCxVQUFJLEdBQUcsa0JBQWtCLENBQUM7O0lBR25DLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFMRCxDQUFxQyxVQUFVLENBQUMsZ0JBQWdCLEdBSy9EOztBQUVEO0lBQXlDLHVDQUEyQjtJQUVsRSw2QkFBbUIsT0FBWTtRQUEvQixZQUNFLGtCQUFNLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxTQUNuQztRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFVBQUksR0FBRyx1QkFBdUIsQ0FBQzs7SUFHeEMsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXlDLFVBQVUsQ0FBQyxnQkFBZ0IsR0FLbkU7O0FBRUQ7SUFBNEMsMENBQThCO0lBRXhFLGdDQUFtQixPQUFvQjtRQUF2QyxZQUNFLGtCQUFNLGtCQUFrQixDQUFDLFNBQzFCO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQWE7UUFEOUIsVUFBSSxHQUFHLDBCQUEwQixDQUFDOztJQUczQyxDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBNEMsVUFBVSxDQUFDLG1CQUFtQixHQUt6RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBPcGVuSWRUb2tlbiB9IGZyb20gJy4uLy4uL21vZGVscy9reW1hLXRva2VuLXR5cGVzLm1vZGVsJztcbmltcG9ydCB7IE9QRU5fSURfVE9LRU5fREFUQSB9IGZyb20gJy4uL2t5bWEtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9PUEVOX0lEX1RPS0VOID0gJ1tLeW1hXSBMb2FkIE9wZW4gSUQgVG9rZW4nO1xuZXhwb3J0IGNvbnN0IExPQURfT1BFTl9JRF9UT0tFTl9GQUlMID0gJ1tLeW1hXSBMb2FkIE9wZW4gSUQgVG9rZW4gRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9PUEVOX0lEX1RPS0VOX1NVQ0NFU1MgPSAnW0t5bWFdIExvYWQgT3BlbiBJRCBUb2tlbiBTdWNjZXNzJztcblxuZXhwb3J0IGNsYXNzIExvYWRPcGVuSWRUb2tlbiBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyTG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX09QRU5fSURfVE9LRU47XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJuYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSkge1xuICAgIHN1cGVyKE9QRU5fSURfVE9LRU5fREFUQSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRPcGVuSWRUb2tlbkZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9PUEVOX0lEX1RPS0VOX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihPUEVOX0lEX1RPS0VOX0RBVEEsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3BlbklkVG9rZW5TdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1BFTl9JRF9UT0tFTl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogT3BlbklkVG9rZW4pIHtcbiAgICBzdXBlcihPUEVOX0lEX1RPS0VOX0RBVEEpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE9wZW5JZFRva2VuQWN0aW9ucyA9XG4gIHwgTG9hZE9wZW5JZFRva2VuXG4gIHwgTG9hZE9wZW5JZFRva2VuRmFpbFxuICB8IExvYWRPcGVuSWRUb2tlblN1Y2Nlc3M7XG4iXX0=