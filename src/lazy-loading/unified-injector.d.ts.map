{"version":3,"file":"unified-injector.d.ts","sources":["unified-injector.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { AbstractType, InjectionToken, Injector, Type } from '@angular/core';\nimport { LazyModulesService } from './lazy-modules.service';\nimport { Observable } from 'rxjs';\n/**\n * UnifiedInjector provides a way to get instances of tokens not only once, from the root injector,\n * but also from lazy loaded module injectors that can be initialized over time.\n */\nexport declare class UnifiedInjector {\n    protected rootInjector: Injector;\n    protected lazyModules: LazyModulesService;\n    /**\n     * Gather all the injectors, with the root injector as a first one\n     *\n     */\n    readonly injectors$: Observable<Injector>;\n    constructor(rootInjector: Injector, lazyModules: LazyModulesService);\n    /**\n     * Gen instances for specified tokens.\n     *\n     * When notFoundValue is provided, it will consistently emit once per injector,\n     * even if injector doesn't contain instances for specified token.\n     * Otherwise, emissions will only involve cases, where new instances will be found.\n     *\n     * @param token\n     * @param notFoundValue\n     */\n    get<T>(token: Type<T> | InjectionToken<T> | AbstractType<T>, notFoundValue?: T): Observable<T>;\n    /**\n     * Get multi provided instances for a specified token\n     *\n     * @param token\n     */\n    getMulti<T>(token: Type<T> | InjectionToken<T> | AbstractType<T>): Observable<T[]>;\n    getMulti<T>(token: any): Observable<T>;\n}\n"]}