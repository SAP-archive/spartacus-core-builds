import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/index';
import { SiteContextActions } from '../../../site-context/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { ANONYMOUS_CONSENTS, } from '../anonymous-consents-state';
import * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';
import * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';
import * as fromAnonymousConsents from './anonymous-consents.reducer';
export function getReducers() {
    return {
        templates: loaderReducer(ANONYMOUS_CONSENTS),
        consents: fromAnonymousConsents.reducer,
        ui: combineReducers({
            bannerDismissed: fromAnonymousConsentsBanner.reducer,
            updated: fromAnonymousConsentsUpdate.reducer,
        }),
    };
}
export const reducerToken = new InjectionToken('AnonymousConsentsReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearAnonymousConsentTemplates(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT ||
            action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = Object.assign(Object.assign({}, state), { templates: undefined });
        }
        return reducer(state, action);
    };
}
export const metaReducers = [
    clearAnonymousConsentTemplates,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvcmVkdWNlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBSUwsZUFBZSxHQUVoQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFFTCxrQkFBa0IsR0FDbkIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEtBQUssMkJBQTJCLE1BQU0scUNBQXFDLENBQUM7QUFDbkYsT0FBTyxLQUFLLDJCQUEyQixNQUFNLHFDQUFxQyxDQUFDO0FBQ25GLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSw4QkFBOEIsQ0FBQztBQUV0RSxNQUFNLFVBQVUsV0FBVztJQUN6QixPQUFPO1FBQ0wsU0FBUyxFQUFFLGFBQWEsQ0FBb0Isa0JBQWtCLENBQUM7UUFDL0QsUUFBUSxFQUFFLHFCQUFxQixDQUFDLE9BQU87UUFDdkMsRUFBRSxFQUFFLGVBQWUsQ0FBQztZQUNsQixlQUFlLEVBQUUsMkJBQTJCLENBQUMsT0FBTztZQUNwRCxPQUFPLEVBQUUsMkJBQTJCLENBQUMsT0FBTztTQUM3QyxDQUFDO0tBQ0gsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBRXBCLElBQUksY0FBYyxDQUNyQiwyQkFBMkIsQ0FDNUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBYTtJQUN2QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixVQUFVLEVBQUUsV0FBVztDQUN4QixDQUFDO0FBRUYsTUFBTSxVQUFVLDhCQUE4QixDQUM1QyxPQUFzRDtJQUV0RCxPQUFPLFVBQVUsS0FBSyxFQUFFLE1BQU07UUFDNUIsSUFDRSxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxNQUFNO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLEtBQUssa0JBQWtCLENBQUMsZUFBZSxFQUNsRDtZQUNBLEtBQUssbUNBQ0EsS0FBSyxLQUNSLFNBQVMsRUFBRSxTQUFTLEdBQ3JCLENBQUM7U0FDSDtRQUNELE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUF1QjtJQUM5Qyw4QkFBOEI7Q0FDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWN0aW9uLFxuICBBY3Rpb25SZWR1Y2VyLFxuICBBY3Rpb25SZWR1Y2VyTWFwLFxuICBjb21iaW5lUmVkdWNlcnMsXG4gIE1ldGFSZWR1Y2VyLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBdXRoQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2F1dGgvaW5kZXgnO1xuaW1wb3J0IHsgQ29uc2VudFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5pbXBvcnQgeyBTaXRlQ29udGV4dEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zaXRlLWNvbnRleHQvaW5kZXgnO1xuaW1wb3J0IHsgbG9hZGVyUmVkdWNlciB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIucmVkdWNlcic7XG5pbXBvcnQge1xuICBBbm9ueW1vdXNDb25zZW50c1N0YXRlLFxuICBBTk9OWU1PVVNfQ09OU0VOVFMsXG59IGZyb20gJy4uL2Fub255bW91cy1jb25zZW50cy1zdGF0ZSc7XG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHNCYW5uZXIgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMtYmFubmVyLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzVXBkYXRlIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLXVwZGF0ZS5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Bbm9ueW1vdXNDb25zZW50cyBmcm9tICcuL2Fub255bW91cy1jb25zZW50cy5yZWR1Y2VyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZHVjZXJzKCk6IEFjdGlvblJlZHVjZXJNYXA8QW5vbnltb3VzQ29uc2VudHNTdGF0ZT4ge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlczogbG9hZGVyUmVkdWNlcjxDb25zZW50VGVtcGxhdGVbXT4oQU5PTllNT1VTX0NPTlNFTlRTKSxcbiAgICBjb25zZW50czogZnJvbUFub255bW91c0NvbnNlbnRzLnJlZHVjZXIsXG4gICAgdWk6IGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICBiYW5uZXJEaXNtaXNzZWQ6IGZyb21Bbm9ueW1vdXNDb25zZW50c0Jhbm5lci5yZWR1Y2VyLFxuICAgICAgdXBkYXRlZDogZnJvbUFub255bW91c0NvbnNlbnRzVXBkYXRlLnJlZHVjZXIsXG4gICAgfSksXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyVG9rZW46IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8XG4gIEFub255bW91c0NvbnNlbnRzU3RhdGVcbj4+ID0gbmV3IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8QW5vbnltb3VzQ29uc2VudHNTdGF0ZT4+KFxuICAnQW5vbnltb3VzQ29uc2VudHNSZWR1Y2Vycydcbik7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlOiByZWR1Y2VyVG9rZW4sXG4gIHVzZUZhY3Rvcnk6IGdldFJlZHVjZXJzLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlcyhcbiAgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxBbm9ueW1vdXNDb25zZW50c1N0YXRlLCBBY3Rpb24+XG4pOiBBY3Rpb25SZWR1Y2VyPEFub255bW91c0NvbnNlbnRzU3RhdGUsIEFjdGlvbj4ge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoXG4gICAgICBhY3Rpb24udHlwZSA9PT0gQXV0aEFjdGlvbnMuTE9HT1VUIHx8XG4gICAgICBhY3Rpb24udHlwZSA9PT0gU2l0ZUNvbnRleHRBY3Rpb25zLkxBTkdVQUdFX0NIQU5HRVxuICAgICkge1xuICAgICAgc3RhdGUgPSB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0ZW1wbGF0ZXM6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbXG4gIGNsZWFyQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlcyxcbl07XG4iXX0=