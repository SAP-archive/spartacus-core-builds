/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/store/actions/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { REGIONS, USER_ADDRESSES, USER_CONSENTS, USER_ORDERS, USER_PAYMENT_METHODS, NOTIFICATION_PREFERENCES, PRODUCT_INTERESTS, } from '../user-state';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import * as fromNotificationPreferenceReducer from './notification-preference.reducer';
import * as fromOrderDetailsReducer from './order-details.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromResetPasswordReducer from './reset-password.reducer';
import * as fromTitlesReducer from './titles.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserConsentsReducer from './user-consents.reducer';
import * as fromUserDetailsReducer from './user-details.reducer';
import * as fromUserOrdersReducer from './user-orders.reducer';
import * as fromInterestsReducer from './product-interests.reducer';
/**
 * @return {?}
 */
export function getReducers() {
    return {
        account: combineReducers({
            details: fromUserDetailsReducer.reducer,
        }),
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        consents: loaderReducer(USER_CONSENTS, fromUserConsentsReducer.reducer),
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        orders: loaderReducer(USER_ORDERS, fromUserOrdersReducer.reducer),
        order: fromOrderDetailsReducer.reducer,
        countries: fromDeliveryCountries.reducer,
        titles: fromTitlesReducer.reducer,
        regions: loaderReducer(REGIONS, fromRegionsReducer.reducer),
        resetPassword: fromResetPasswordReducer.reducer,
        consignmentTracking: fromConsignmentTrackingReducer.reducer,
        notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, fromNotificationPreferenceReducer.reducer),
        productInterests: loaderReducer(PRODUCT_INTERESTS, fromInterestsReducer.reducer),
    };
}
/** @type {?} */
export var reducerToken = new InjectionToken('UserReducers');
/** @type {?} */
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
/**
 * @param {?} reducer
 * @return {?}
 */
export function clearUserState(reducer) {
    return (/**
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    function (state, action) {
        if (action.type === AuthActions.LOGOUT) {
            state = undefined;
        }
        return reducer(state, action);
    });
}
/** @type {?} */
export var metaReducers = [clearUserState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBR0wsZUFBZSxHQUVoQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFPaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFDTCxPQUFPLEVBR1AsY0FBYyxFQUNkLGFBQWEsRUFDYixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLHdCQUF3QixFQUN4QixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxLQUFLLDJCQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBQzNFLE9BQU8sS0FBSyw4QkFBOEIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRixPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxLQUFLLGlDQUFpQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZGLE9BQU8sS0FBSyx1QkFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxLQUFLLGtCQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sS0FBSyx3QkFBd0IsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEtBQUssaUJBQWlCLE1BQU0sa0JBQWtCLENBQUM7QUFDdEQsT0FBTyxLQUFLLG9CQUFvQixNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sS0FBSyx1QkFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEtBQUssc0JBQXNCLE1BQU0sd0JBQXdCLENBQUM7QUFDakUsT0FBTyxLQUFLLHFCQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sS0FBSyxvQkFBb0IsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUVwRSxNQUFNLFVBQVUsV0FBVztJQUN6QixPQUFPO1FBQ0wsT0FBTyxFQUFFLGVBQWUsQ0FBQztZQUN2QixPQUFPLEVBQUUsc0JBQXNCLENBQUMsT0FBTztTQUN4QyxDQUFDO1FBQ0YsU0FBUyxFQUFFLGFBQWEsQ0FDdEIsY0FBYyxFQUNkLG9CQUFvQixDQUFDLE9BQU8sQ0FDN0I7UUFDRCxnQkFBZ0IsRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1FBQ3JELFFBQVEsRUFBRSxhQUFhLENBQ3JCLGFBQWEsRUFDYix1QkFBdUIsQ0FBQyxPQUFPLENBQ2hDO1FBQ0QsUUFBUSxFQUFFLGFBQWEsQ0FDckIsb0JBQW9CLEVBQ3BCLGtCQUFrQixDQUFDLE9BQU8sQ0FDM0I7UUFDRCxNQUFNLEVBQUUsYUFBYSxDQUNuQixXQUFXLEVBQ1gscUJBQXFCLENBQUMsT0FBTyxDQUM5QjtRQUNELEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxPQUFPO1FBQ3RDLFNBQVMsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPO1FBQ3hDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxPQUFPO1FBQ2pDLE9BQU8sRUFBRSxhQUFhLENBQWUsT0FBTyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUN6RSxhQUFhLEVBQUUsd0JBQXdCLENBQUMsT0FBTztRQUMvQyxtQkFBbUIsRUFBRSw4QkFBOEIsQ0FBQyxPQUFPO1FBQzNELHVCQUF1QixFQUFFLGFBQWEsQ0FDcEMsd0JBQXdCLEVBQ3hCLGlDQUFpQyxDQUFDLE9BQU8sQ0FDMUM7UUFDRCxnQkFBZ0IsRUFBRSxhQUFhLENBQzdCLGlCQUFpQixFQUNqQixvQkFBb0IsQ0FBQyxPQUFPLENBQzdCO0tBQ0YsQ0FBQztBQUNKLENBQUM7O0FBRUQsTUFBTSxLQUFPLFlBQVksR0FFckIsSUFBSSxjQUFjLENBQThCLGNBQWMsQ0FBQzs7QUFFbkUsTUFBTSxLQUFPLGVBQWUsR0FBYTtJQUN2QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixVQUFVLEVBQUUsV0FBVztDQUN4Qjs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixPQUEyQjtJQUUzQjs7Ozs7SUFBTyxVQUFTLEtBQUssRUFBRSxNQUFNO1FBQzNCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3RDLEtBQUssR0FBRyxTQUFTLENBQUM7U0FDbkI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxFQUFDO0FBQ0osQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUF1QixDQUFDLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWN0aW9uUmVkdWNlcixcbiAgQWN0aW9uUmVkdWNlck1hcCxcbiAgY29tYmluZVJlZHVjZXJzLFxuICBNZXRhUmVkdWNlcixcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQXV0aEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9hdXRoL3N0b3JlL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FkZHJlc3MubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudERldGFpbHMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7IENvbnNlbnRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLm1vZGVsJztcbmltcG9ydCB7IE9yZGVySGlzdG9yeUxpc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBQcm9kdWN0SW50ZXJlc3RTZWFyY2hSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wcm9kdWN0LWludGVyZXN0Lm1vZGVsJztcbmltcG9ydCB7IGxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLnJlZHVjZXInO1xuaW1wb3J0IHtcbiAgUkVHSU9OUyxcbiAgUmVnaW9uc1N0YXRlLFxuICBVc2VyU3RhdGUsXG4gIFVTRVJfQUREUkVTU0VTLFxuICBVU0VSX0NPTlNFTlRTLFxuICBVU0VSX09SREVSUyxcbiAgVVNFUl9QQVlNRU5UX01FVEhPRFMsXG4gIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcbiAgUFJPRFVDVF9JTlRFUkVTVFMsXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0ICogYXMgZnJvbUJpbGxpbmdDb3VudHJpZXNSZWR1Y2VyIGZyb20gJy4vYmlsbGluZy1jb3VudHJpZXMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQ29uc2lnbm1lbnRUcmFja2luZ1JlZHVjZXIgZnJvbSAnLi9jb25zaWdubWVudC10cmFja2luZy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21EZWxpdmVyeUNvdW50cmllcyBmcm9tICcuL2RlbGl2ZXJ5LWNvdW50cmllcy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Ob3RpZmljYXRpb25QcmVmZXJlbmNlUmVkdWNlciBmcm9tICcuL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbU9yZGVyRGV0YWlsc1JlZHVjZXIgZnJvbSAnLi9vcmRlci1kZXRhaWxzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVBheW1lbnRSZWR1Y2VyIGZyb20gJy4vcGF5bWVudC1tZXRob2RzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVJlZ2lvbnNSZWR1Y2VyIGZyb20gJy4vcmVnaW9ucy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21SZXNldFBhc3N3b3JkUmVkdWNlciBmcm9tICcuL3Jlc2V0LXBhc3N3b3JkLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVRpdGxlc1JlZHVjZXIgZnJvbSAnLi90aXRsZXMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQWRkcmVzc2VzUmVkdWNlciBmcm9tICcuL3VzZXItYWRkcmVzc2VzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJDb25zZW50c1JlZHVjZXIgZnJvbSAnLi91c2VyLWNvbnNlbnRzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJEZXRhaWxzUmVkdWNlciBmcm9tICcuL3VzZXItZGV0YWlscy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Vc2VyT3JkZXJzUmVkdWNlciBmcm9tICcuL3VzZXItb3JkZXJzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUludGVyZXN0c1JlZHVjZXIgZnJvbSAnLi9wcm9kdWN0LWludGVyZXN0cy5yZWR1Y2VyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZHVjZXJzKCk6IEFjdGlvblJlZHVjZXJNYXA8VXNlclN0YXRlPiB7XG4gIHJldHVybiB7XG4gICAgYWNjb3VudDogY29tYmluZVJlZHVjZXJzKHtcbiAgICAgIGRldGFpbHM6IGZyb21Vc2VyRGV0YWlsc1JlZHVjZXIucmVkdWNlcixcbiAgICB9KSxcbiAgICBhZGRyZXNzZXM6IGxvYWRlclJlZHVjZXI8QWRkcmVzc1tdPihcbiAgICAgIFVTRVJfQUREUkVTU0VTLFxuICAgICAgZnJvbUFkZHJlc3Nlc1JlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgYmlsbGluZ0NvdW50cmllczogZnJvbUJpbGxpbmdDb3VudHJpZXNSZWR1Y2VyLnJlZHVjZXIsXG4gICAgY29uc2VudHM6IGxvYWRlclJlZHVjZXI8Q29uc2VudFRlbXBsYXRlW10+KFxuICAgICAgVVNFUl9DT05TRU5UUyxcbiAgICAgIGZyb21Vc2VyQ29uc2VudHNSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIHBheW1lbnRzOiBsb2FkZXJSZWR1Y2VyPFBheW1lbnREZXRhaWxzW10+KFxuICAgICAgVVNFUl9QQVlNRU5UX01FVEhPRFMsXG4gICAgICBmcm9tUGF5bWVudFJlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgb3JkZXJzOiBsb2FkZXJSZWR1Y2VyPE9yZGVySGlzdG9yeUxpc3Q+KFxuICAgICAgVVNFUl9PUkRFUlMsXG4gICAgICBmcm9tVXNlck9yZGVyc1JlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgb3JkZXI6IGZyb21PcmRlckRldGFpbHNSZWR1Y2VyLnJlZHVjZXIsXG4gICAgY291bnRyaWVzOiBmcm9tRGVsaXZlcnlDb3VudHJpZXMucmVkdWNlcixcbiAgICB0aXRsZXM6IGZyb21UaXRsZXNSZWR1Y2VyLnJlZHVjZXIsXG4gICAgcmVnaW9uczogbG9hZGVyUmVkdWNlcjxSZWdpb25zU3RhdGU+KFJFR0lPTlMsIGZyb21SZWdpb25zUmVkdWNlci5yZWR1Y2VyKSxcbiAgICByZXNldFBhc3N3b3JkOiBmcm9tUmVzZXRQYXNzd29yZFJlZHVjZXIucmVkdWNlcixcbiAgICBjb25zaWdubWVudFRyYWNraW5nOiBmcm9tQ29uc2lnbm1lbnRUcmFja2luZ1JlZHVjZXIucmVkdWNlcixcbiAgICBub3RpZmljYXRpb25QcmVmZXJlbmNlczogbG9hZGVyUmVkdWNlcjxOb3RpZmljYXRpb25QcmVmZXJlbmNlW10+KFxuICAgICAgTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTLFxuICAgICAgZnJvbU5vdGlmaWNhdGlvblByZWZlcmVuY2VSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIHByb2R1Y3RJbnRlcmVzdHM6IGxvYWRlclJlZHVjZXI8UHJvZHVjdEludGVyZXN0U2VhcmNoUmVzdWx0PihcbiAgICAgIFBST0RVQ1RfSU5URVJFU1RTLFxuICAgICAgZnJvbUludGVyZXN0c1JlZHVjZXIucmVkdWNlclxuICAgICksXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyVG9rZW46IEluamVjdGlvblRva2VuPFxuICBBY3Rpb25SZWR1Y2VyTWFwPFVzZXJTdGF0ZT5cbj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxVc2VyU3RhdGU+PignVXNlclJlZHVjZXJzJyk7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlOiByZWR1Y2VyVG9rZW4sXG4gIHVzZUZhY3Rvcnk6IGdldFJlZHVjZXJzLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVXNlclN0YXRlKFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueT5cbik6IEFjdGlvblJlZHVjZXI8YW55PiB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBBdXRoQWN0aW9ucy5MT0dPVVQpIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbY2xlYXJVc2VyU3RhdGVdO1xuIl19