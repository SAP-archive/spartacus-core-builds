import { StateUtils } from '../../../state/utils/index';
import { USER_ADDRESSES } from '../user-state';
export const LOAD_USER_ADDRESSES = '[User] Load User Addresses';
export const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';
export const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';
export const ADD_USER_ADDRESS = '[User] Add User Address';
export const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';
export const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';
export const UPDATE_USER_ADDRESS = '[User] Update User Address';
export const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';
export const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';
export const DELETE_USER_ADDRESS = '[User] Delete User Address';
export const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';
export const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';
export class LoadUserAddresses extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = LOAD_USER_ADDRESSES;
    }
}
export class LoadUserAddressesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_ADDRESSES, payload);
        this.payload = payload;
        this.type = LOAD_USER_ADDRESSES_FAIL;
    }
}
export class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = LOAD_USER_ADDRESSES_SUCCESS;
    }
}
// Adding address actions
export class AddUserAddress extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = ADD_USER_ADDRESS;
    }
}
export class AddUserAddressFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_ADDRESSES, payload);
        this.payload = payload;
        this.type = ADD_USER_ADDRESS_FAIL;
    }
}
export class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = ADD_USER_ADDRESS_SUCCESS;
    }
}
// Updating address actions
export class UpdateUserAddress extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = UPDATE_USER_ADDRESS;
    }
}
export class UpdateUserAddressFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_ADDRESSES, payload);
        this.payload = payload;
        this.type = UPDATE_USER_ADDRESS_FAIL;
    }
}
export class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = UPDATE_USER_ADDRESS_SUCCESS;
    }
}
// Deleting address actions
export class DeleteUserAddress extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = DELETE_USER_ADDRESS;
    }
}
export class DeleteUserAddressFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_ADDRESSES, payload);
        this.payload = payload;
        this.type = DELETE_USER_ADDRESS_FAIL;
    }
}
export class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_ADDRESSES);
        this.payload = payload;
        this.type = DELETE_USER_ADDRESS_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,