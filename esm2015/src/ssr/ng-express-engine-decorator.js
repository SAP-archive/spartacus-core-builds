import { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';
/**
 * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
 * @param ngExpressEngine
 */
export class NgExpressEngineDecorator {
    /**
     * Returns the higher order ngExpressEngine with provided tokens for Spartacus
     *
     * @param ngExpressEngine
     */
    static get(ngExpressEngine) {
        const result = function cxNgExpressEngine(setupOptions) {
            return (filePath, options, callback) => {
                const engineInstance = ngExpressEngine(Object.assign(Object.assign({}, setupOptions), { providers: [
                        ...getServerRequestProviders(options),
                        ...(setupOptions.providers || []),
                    ] }));
                return engineInstance(filePath, options, callback);
            };
        };
        return result;
    }
}
/**
 * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)
 *
 * @param options
 */
export function getServerRequestProviders(options) {
    return [
        {
            provide: SERVER_REQUEST_URL,
            useValue: getRequestUrl(options.req),
        },
        {
            provide: SERVER_REQUEST_ORIGIN,
            useValue: getRequestOrigin(options.req),
        },
    ];
}
function getRequestUrl(req) {
    return getRequestOrigin(req) + req.originalUrl;
}
function getRequestOrigin(req) {
    return req.protocol + '://' + req.get('host');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZXhwcmVzcy1lbmdpbmUtZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvc3NyL25nLWV4cHJlc3MtZW5naW5lLWRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWtDNUU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQzs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFnQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxTQUFTLGlCQUFpQixDQUN2QyxZQUE0QjtZQUU1QixPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxjQUFjLEdBQUcsZUFBZSxpQ0FDakMsWUFBWSxLQUNmLFNBQVMsRUFBRTt3QkFDVCxHQUFHLHlCQUF5QixDQUFDLE9BQU8sQ0FBQzt3QkFDckMsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO3FCQUNsQyxJQUNELENBQUM7Z0JBQ0gsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNyRCxDQUFDLENBQUM7UUFDSixDQUFDLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUN2QyxPQUFzQjtJQUV0QixPQUFPO1FBQ0w7WUFDRSxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLFFBQVEsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztTQUNyQztRQUNEO1lBQ0UsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixRQUFRLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztTQUN4QztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBUTtJQUM3QixPQUFPLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7QUFDakQsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsR0FBUTtJQUNoQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlRmFjdG9yeSwgU3RhdGljUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNFUlZFUl9SRVFVRVNUX09SSUdJTiwgU0VSVkVSX1JFUVVFU1RfVVJMIH0gZnJvbSAnLi9zc3IucHJvdmlkZXJzJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIGVuZ2luZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nU2V0dXBPcHRpb25zIHtcbiAgYm9vdHN0cmFwOiBUeXBlPHt9PiB8IE5nTW9kdWxlRmFjdG9yeTx7fT47XG4gIHByb3ZpZGVycz86IFN0YXRpY1Byb3ZpZGVyW107XG59XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBhbGxvd2VkIG9wdGlvbnMgZm9yIHRoZSByZW5kZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJPcHRpb25zIGV4dGVuZHMgTmdTZXR1cE9wdGlvbnMge1xuICByZXE6IHtcbiAgICBwcm90b2NvbDogc3RyaW5nO1xuICAgIG9yaWdpbmFsVXJsOiBzdHJpbmc7XG4gICAgZ2V0OiAoXzogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIH07IC8vIFJlcXVlc3Q7XG4gIHJlcz86IGFueTsgLy8gUmVzcG9uc2U7XG4gIHVybD86IHN0cmluZztcbiAgZG9jdW1lbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE5nRXhwcmVzc0VuZ2luZUluc3RhbmNlID0gKFxuICBmaWxlUGF0aDogc3RyaW5nLFxuICBvcHRpb25zOiBSZW5kZXJPcHRpb25zLFxuICBjYWxsYmFjazogKGVycj86IEVycm9yIHwgbnVsbCB8IHVuZGVmaW5lZCwgaHRtbD86IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4gdm9pZFxuKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBOZ0V4cHJlc3NFbmdpbmUgPSAoXG4gIHNldHVwT3B0aW9uczogTmdTZXR1cE9wdGlvbnNcbikgPT4gTmdFeHByZXNzRW5naW5lSW5zdGFuY2U7XG5cbi8qKlxuICogVGhlIHdyYXBwZXIgb3ZlciB0aGUgc3RhbmRhcmQgbmdFeHByZXNzRW5naW5lLCB0aGF0IHByb3ZpZGVzIHRva2VucyBmb3IgU3BhcnRhY3VzXG4gKiBAcGFyYW0gbmdFeHByZXNzRW5naW5lXG4gKi9cbmV4cG9ydCBjbGFzcyBOZ0V4cHJlc3NFbmdpbmVEZWNvcmF0b3Ige1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGlnaGVyIG9yZGVyIG5nRXhwcmVzc0VuZ2luZSB3aXRoIHByb3ZpZGVkIHRva2VucyBmb3IgU3BhcnRhY3VzXG4gICAqXG4gICAqIEBwYXJhbSBuZ0V4cHJlc3NFbmdpbmVcbiAgICovXG4gIHN0YXRpYyBnZXQobmdFeHByZXNzRW5naW5lOiBOZ0V4cHJlc3NFbmdpbmUpOiBOZ0V4cHJlc3NFbmdpbmUge1xuICAgIGNvbnN0IHJlc3VsdCA9IGZ1bmN0aW9uIGN4TmdFeHByZXNzRW5naW5lKFxuICAgICAgc2V0dXBPcHRpb25zOiBOZ1NldHVwT3B0aW9uc1xuICAgICk6IE5nRXhwcmVzc0VuZ2luZUluc3RhbmNlIHtcbiAgICAgIHJldHVybiAoZmlsZVBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IGVuZ2luZUluc3RhbmNlID0gbmdFeHByZXNzRW5naW5lKHtcbiAgICAgICAgICAuLi5zZXR1cE9wdGlvbnMsXG4gICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAuLi5nZXRTZXJ2ZXJSZXF1ZXN0UHJvdmlkZXJzKG9wdGlvbnMpLFxuICAgICAgICAgICAgLi4uKHNldHVwT3B0aW9ucy5wcm92aWRlcnMgfHwgW10pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZW5naW5lSW5zdGFuY2UoZmlsZVBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBTcGFydGFjdXMnIHByb3ZpZGVycyB0byBiZSBwYXNzZWQgdG8gdGhlIEFuZ3VsYXIgZXhwcmVzcyBlbmdpbmUgKGluIFNTUilcbiAqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyUmVxdWVzdFByb3ZpZGVycyhcbiAgb3B0aW9uczogUmVuZGVyT3B0aW9uc1xuKTogU3RhdGljUHJvdmlkZXJbXSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogU0VSVkVSX1JFUVVFU1RfVVJMLFxuICAgICAgdXNlVmFsdWU6IGdldFJlcXVlc3RVcmwob3B0aW9ucy5yZXEpLFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogU0VSVkVSX1JFUVVFU1RfT1JJR0lOLFxuICAgICAgdXNlVmFsdWU6IGdldFJlcXVlc3RPcmlnaW4ob3B0aW9ucy5yZXEpLFxuICAgIH0sXG4gIF07XG59XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3RVcmwocmVxOiBhbnkpOiBzdHJpbmcge1xuICByZXR1cm4gZ2V0UmVxdWVzdE9yaWdpbihyZXEpICsgcmVxLm9yaWdpbmFsVXJsO1xufVxuXG5mdW5jdGlvbiBnZXRSZXF1ZXN0T3JpZ2luKHJlcTogYW55KTogc3RyaW5nIHtcbiAgcmV0dXJuIHJlcS5wcm90b2NvbCArICc6Ly8nICsgcmVxLmdldCgnaG9zdCcpO1xufVxuIl19