import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getProductsState } from './feature.selector';
const ɵ0 = (state) => state.details;
export const getProductState = createSelector(getProductsState, ɵ0);
export const getSelectedProductStateFactory = (code, scope = '') => {
    return createSelector(getProductState, (details) => StateUtils.entityLoaderStateSelector(details, code)[scope] ||
        StateUtils.initialLoaderState);
};
export const getSelectedProductFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderValueSelector(productState));
};
export const getSelectedProductLoadingFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderLoadingSelector(productState));
};
export const getSelectedProductSuccessFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderSuccessSelector(productState));
};
export const getSelectedProductErrorFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderErrorSelector(productState));
};
const ɵ1 = (details) => {
    return Object.keys(details.entities);
};
export const getAllProductCodes = createSelector(getProductState, ɵ1);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9wcm9kdWN0L3N0b3JlL3NlbGVjdG9ycy9wcm9kdWN0LnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7V0FLakIsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTztBQUg1RSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBR3hCLGNBQWMsQ0FBQyxnQkFBZ0IsS0FBMEMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUM1QyxJQUFZLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDMkQsRUFBRTtJQUN2RSxPQUFPLGNBQWMsQ0FDbkIsZUFBZSxFQUNmLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDVixVQUFVLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMxRCxVQUFVLENBQUMsa0JBQWtCLENBQ2hDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUN2QyxJQUFZLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDbUMsRUFBRTtJQUMvQyxPQUFPLGNBQWMsQ0FDbkIsOEJBQThCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUMvRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsQ0FDOUMsSUFBWSxFQUNaLEtBQUssR0FBRyxFQUFFLEVBQ21DLEVBQUU7SUFDL0MsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FDakUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLENBQzlDLElBQVksRUFDWixLQUFLLEdBQUcsRUFBRSxFQUNtQyxFQUFFO0lBQy9DLE9BQU8sY0FBYyxDQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQ2pFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUM1QyxJQUFZLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDbUMsRUFBRTtJQUMvQyxPQUFPLGNBQWMsQ0FDbkIsOEJBQThCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUMvRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO1dBS2tDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDOUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBTEQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FBQyxlQUFlLEtBRWhDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wcm9kdWN0Lm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBQcm9kdWN0c1N0YXRlLCBTdGF0ZVdpdGhQcm9kdWN0IH0gZnJvbSAnLi4vcHJvZHVjdC1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRQcm9kdWN0c1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcblxuZXhwb3J0IGNvbnN0IGdldFByb2R1Y3RTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoUHJvZHVjdCxcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQcm9kdWN0PlxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFByb2R1Y3RzU3RhdGUsIChzdGF0ZTogUHJvZHVjdHNTdGF0ZSkgPT4gc3RhdGUuZGV0YWlscyk7XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgc2NvcGUgPSAnJ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPFByb2R1Y3Q+PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQcm9kdWN0U3RhdGUsXG4gICAgKGRldGFpbHMpID0+XG4gICAgICBTdGF0ZVV0aWxzLmVudGl0eUxvYWRlclN0YXRlU2VsZWN0b3IoZGV0YWlscywgY29kZSlbc2NvcGVdIHx8XG4gICAgICBTdGF0ZVV0aWxzLmluaXRpYWxMb2FkZXJTdGF0ZVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEZhY3RvcnkgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgc2NvcGUgPSAnJ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBQcm9kdWN0PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihwcm9kdWN0U3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9kdWN0TG9hZGluZ0ZhY3RvcnkgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgc2NvcGUgPSAnJ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RTdWNjZXNzRmFjdG9yeSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBzY29wZSA9ICcnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeShjb2RlLCBzY29wZSksXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEVycm9yRmFjdG9yeSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBzY29wZSA9ICcnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeShjb2RlLCBzY29wZSksXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJFcnJvclNlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxQcm9kdWN0Q29kZXM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFByb2R1Y3QsXG4gIHN0cmluZ1tdXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZHVjdFN0YXRlLCAoZGV0YWlscykgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGV0YWlscy5lbnRpdGllcyk7XG59KTtcbiJdfQ==