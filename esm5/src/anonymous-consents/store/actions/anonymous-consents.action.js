import { __extends } from "tslib";
import { StateUtils } from '../../../state/utils/index';
import { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
export var RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
export var GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
export var GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
export var SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
export var GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
export var WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
export var TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
export var TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
var LoadAnonymousConsentTemplates = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplates, _super);
    function LoadAnonymousConsentTemplates() {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
        return _this;
    }
    return LoadAnonymousConsentTemplates;
}(StateUtils.LoaderLoadAction));
export { LoadAnonymousConsentTemplates };
var LoadAnonymousConsentTemplatesSuccess = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplatesSuccess, _super);
    function LoadAnonymousConsentTemplatesSuccess(payload) {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.payload = payload;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
        return _this;
    }
    return LoadAnonymousConsentTemplatesSuccess;
}(StateUtils.LoaderSuccessAction));
export { LoadAnonymousConsentTemplatesSuccess };
var LoadAnonymousConsentTemplatesFail = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplatesFail, _super);
    function LoadAnonymousConsentTemplatesFail(payload) {
        var _this = _super.call(this, ANONYMOUS_CONSENTS, payload) || this;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
        return _this;
    }
    return LoadAnonymousConsentTemplatesFail;
}(StateUtils.LoaderFailAction));
export { LoadAnonymousConsentTemplatesFail };
var ResetLoadAnonymousConsentTemplates = /** @class */ (function (_super) {
    __extends(ResetLoadAnonymousConsentTemplates, _super);
    function ResetLoadAnonymousConsentTemplates() {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
        return _this;
    }
    return ResetLoadAnonymousConsentTemplates;
}(StateUtils.LoaderResetAction));
export { ResetLoadAnonymousConsentTemplates };
var GetAllAnonymousConsents = /** @class */ (function () {
    function GetAllAnonymousConsents() {
        this.type = GET_ALL_ANONYMOUS_CONSENTS;
    }
    return GetAllAnonymousConsents;
}());
export { GetAllAnonymousConsents };
var GetAnonymousConsent = /** @class */ (function () {
    function GetAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = GET_ANONYMOUS_CONSENT;
    }
    return GetAnonymousConsent;
}());
export { GetAnonymousConsent };
var SetAnonymousConsents = /** @class */ (function () {
    function SetAnonymousConsents(payload) {
        this.payload = payload;
        this.type = SET_ANONYMOUS_CONSENTS;
    }
    return SetAnonymousConsents;
}());
export { SetAnonymousConsents };
var GiveAnonymousConsent = /** @class */ (function () {
    function GiveAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = GIVE_ANONYMOUS_CONSENT;
    }
    return GiveAnonymousConsent;
}());
export { GiveAnonymousConsent };
var WithdrawAnonymousConsent = /** @class */ (function () {
    function WithdrawAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = WITHDRAW_ANONYMOUS_CONSENT;
    }
    return WithdrawAnonymousConsent;
}());
export { WithdrawAnonymousConsent };
var ToggleAnonymousConsentsBannerDissmissed = /** @class */ (function () {
    function ToggleAnonymousConsentsBannerDissmissed(dismissed) {
        this.dismissed = dismissed;
        this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
    }
    return ToggleAnonymousConsentsBannerDissmissed;
}());
export { ToggleAnonymousConsentsBannerDissmissed };
var ToggleAnonymousConsentTemplatesUpdated = /** @class */ (function () {
    function ToggleAnonymousConsentTemplatesUpdated(updated) {
        this.updated = updated;
        this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
    }
    return ToggleAnonymousConsentTemplatesUpdated;
}());
export { ToggleAnonymousConsentTemplatesUpdated };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnRzLmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvYWN0aW9ucy9hbm9ueW1vdXMtY29uc2VudHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFakUsTUFBTSxDQUFDLElBQU0sZ0NBQWdDLEdBQzNDLHVEQUF1RCxDQUFDO0FBQzFELE1BQU0sQ0FBQyxJQUFNLHdDQUF3QyxHQUNuRCwrREFBK0QsQ0FBQztBQUNsRSxNQUFNLENBQUMsSUFBTSxxQ0FBcUMsR0FDaEQsNERBQTRELENBQUM7QUFDL0QsTUFBTSxDQUFDLElBQU0sc0NBQXNDLEdBQ2pELDZEQUE2RCxDQUFDO0FBRWhFLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUNyQyxpREFBaUQsQ0FBQztBQUNwRCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FDaEMsNENBQTRDLENBQUM7QUFDL0MsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQ2pDLDZDQUE2QyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUNqQyw2Q0FBNkMsQ0FBQztBQUNoRCxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FDckMsaURBQWlELENBQUM7QUFFcEQsTUFBTSxDQUFDLElBQU0sMENBQTBDLEdBQ3JELGlFQUFpRSxDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxJQUFNLDBDQUEwQyxHQUNyRCwwREFBMEQsQ0FBQztBQUU3RDtJQUFtRCxpREFBMkI7SUFFNUU7UUFBQSxZQUNFLGtCQUFNLGtCQUFrQixDQUFDLFNBQzFCO1FBSFEsVUFBSSxHQUFHLGdDQUFnQyxDQUFDOztJQUdqRCxDQUFDO0lBQ0gsb0NBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBbUQsVUFBVSxDQUFDLGdCQUFnQixHQUs3RTs7QUFFRDtJQUEwRCx3REFBOEI7SUFFdEYsOENBQW1CLE9BQTBCO1FBQTdDLFlBQ0Usa0JBQU0sa0JBQWtCLENBQUMsU0FDMUI7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFEcEMsVUFBSSxHQUFHLHdDQUF3QyxDQUFDOztJQUd6RCxDQUFDO0lBQ0gsMkNBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBMEQsVUFBVSxDQUFDLG1CQUFtQixHQUt2Rjs7QUFDRDtJQUF1RCxxREFBMkI7SUFFaEYsMkNBQVksT0FBWTtRQUF4QixZQUNFLGtCQUFNLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxTQUNuQztRQUhRLFVBQUksR0FBRyxxQ0FBcUMsQ0FBQzs7SUFHdEQsQ0FBQztJQUNILHdDQUFDO0FBQUQsQ0FBQyxBQUxELENBQXVELFVBQVUsQ0FBQyxnQkFBZ0IsR0FLakY7O0FBRUQ7SUFBd0Qsc0RBQTRCO0lBRWxGO1FBQUEsWUFDRSxrQkFBTSxrQkFBa0IsQ0FBQyxTQUMxQjtRQUhRLFVBQUksR0FBRyxzQ0FBc0MsQ0FBQzs7SUFHdkQsQ0FBQztJQUNILHlDQUFDO0FBQUQsQ0FBQyxBQUxELENBQXdELFVBQVUsQ0FBQyxpQkFBaUIsR0FLbkY7O0FBRUQ7SUFFRTtRQURTLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQUM1QixDQUFDO0lBQ2xCLDhCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7O0FBRUQ7SUFFRSw2QkFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0ksQ0FBQztJQUM3QywwQkFBQztBQUFELENBQUMsQUFIRCxJQUdDOztBQUVEO0lBRUUsOEJBQW1CLE9BQTJCO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBRHJDLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUNVLENBQUM7SUFDcEQsMkJBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7QUFFRDtJQUVFLDhCQUFtQixZQUFvQjtRQUFwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUQ5QixTQUFJLEdBQUcsc0JBQXNCLENBQUM7SUFDRyxDQUFDO0lBQzdDLDJCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7O0FBRUQ7SUFFRSxrQ0FBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBQ0QsQ0FBQztJQUM3QywrQkFBQztBQUFELENBQUMsQUFIRCxJQUdDOztBQUVEO0lBRUUsaURBQW1CLFNBQWtCO1FBQWxCLGNBQVMsR0FBVCxTQUFTLENBQVM7UUFENUIsU0FBSSxHQUFHLDBDQUEwQyxDQUFDO0lBQ25CLENBQUM7SUFDM0MsOENBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7QUFFRDtJQUVFLGdEQUFtQixPQUFnQjtRQUFoQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBRDFCLFNBQUksR0FBRywwQ0FBMEMsQ0FBQztJQUNyQixDQUFDO0lBQ3pDLDZDQUFDO0FBQUQsQ0FBQyxBQUhELElBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbm9ueW1vdXNDb25zZW50LFxuICBDb25zZW50VGVtcGxhdGUsXG59IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IEFOT05ZTU9VU19DT05TRU5UUyB9IGZyb20gJy4uL2Fub255bW91cy1jb25zZW50cy1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFUyA9XG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBMb2FkIEFub255bW91cyBDb25zZW50IFRlbXBsYXRlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVNfU1VDQ0VTUyA9XG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBMb2FkIEFub255bW91cyBDb25zZW50IFRlbXBsYXRlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19GQUlMID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIExvYWQgQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0xPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIFJlc2V0IExvYWQgQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzJztcblxuZXhwb3J0IGNvbnN0IEdFVF9BTExfQU5PTllNT1VTX0NPTlNFTlRTID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIEdldCBBbGwgQW5vbnltb3VzIENvbnNlbnRzJztcbmV4cG9ydCBjb25zdCBHRVRfQU5PTllNT1VTX0NPTlNFTlQgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gR2V0IEFub255bW91cyBDb25zZW50JztcbmV4cG9ydCBjb25zdCBTRVRfQU5PTllNT1VTX0NPTlNFTlRTID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIFNldCBBbm9ueW1vdXMgQ29uc2VudHMnO1xuZXhwb3J0IGNvbnN0IEdJVkVfQU5PTllNT1VTX0NPTlNFTlQgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gR2l2ZSBBbm9ueW1vdXMgQ29uc2VudCc7XG5leHBvcnQgY29uc3QgV0lUSERSQVdfQU5PTllNT1VTX0NPTlNFTlQgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gV2l0aGRyYXcgQW5vbnltb3VzIENvbnNlbnQnO1xuXG5leHBvcnQgY29uc3QgVE9HR0xFX0FOT05ZTU9VU19DT05TRU5UU19CQU5ORVJfRElTTUlTU0VEID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIFRvZ2dsZSBBbm9ueW1vdXMgQ29uc2VudHMgQmFubmVyIERpc21pc3NlZCc7XG5leHBvcnQgY29uc3QgVE9HR0xFX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19VUERBVEVEID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIEFub255bW91cyBDb25zZW50IFRlbXBsYXRlcyBVcGRhdGVkJztcblxuZXhwb3J0IGNsYXNzIExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlclN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IENvbnNlbnRUZW1wbGF0ZVtdKSB7XG4gICAgc3VwZXIoQU5PTllNT1VTX0NPTlNFTlRTKTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9MT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoQU5PTllNT1VTX0NPTlNFTlRTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2V0QWxsQW5vbnltb3VzQ29uc2VudHMge1xuICByZWFkb25seSB0eXBlID0gR0VUX0FMTF9BTk9OWU1PVVNfQ09OU0VOVFM7XG4gIGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IGNsYXNzIEdldEFub255bW91c0NvbnNlbnQge1xuICByZWFkb25seSB0eXBlID0gR0VUX0FOT05ZTU9VU19DT05TRU5UO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVDb2RlOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRBbm9ueW1vdXNDb25zZW50cyB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRVRfQU5PTllNT1VTX0NPTlNFTlRTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQW5vbnltb3VzQ29uc2VudFtdKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgR2l2ZUFub255bW91c0NvbnNlbnQge1xuICByZWFkb25seSB0eXBlID0gR0lWRV9BTk9OWU1PVVNfQ09OU0VOVDtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlQ29kZTogc3RyaW5nKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgV2l0aGRyYXdBbm9ueW1vdXNDb25zZW50IHtcbiAgcmVhZG9ubHkgdHlwZSA9IFdJVEhEUkFXX0FOT05ZTU9VU19DT05TRU5UO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVDb2RlOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVBbm9ueW1vdXNDb25zZW50c0Jhbm5lckRpc3NtaXNzZWQge1xuICByZWFkb25seSB0eXBlID0gVE9HR0xFX0FOT05ZTU9VU19DT05TRU5UU19CQU5ORVJfRElTTUlTU0VEO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlzbWlzc2VkOiBib29sZWFuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgVG9nZ2xlQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1VwZGF0ZWQge1xuICByZWFkb25seSB0eXBlID0gVE9HR0xFX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19VUERBVEVEO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdXBkYXRlZDogYm9vbGVhbikge31cbn1cblxuZXhwb3J0IHR5cGUgQW5vbnltb3VzQ29uc2VudHNBY3Rpb25zID1cbiAgfCBMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1xuICB8IExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2Vzc1xuICB8IExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzRmFpbFxuICB8IFJlc2V0TG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNcbiAgfCBHZXRBbGxBbm9ueW1vdXNDb25zZW50c1xuICB8IFNldEFub255bW91c0NvbnNlbnRzXG4gIHwgR2V0QW5vbnltb3VzQ29uc2VudFxuICB8IEdpdmVBbm9ueW1vdXNDb25zZW50XG4gIHwgV2l0aGRyYXdBbm9ueW1vdXNDb25zZW50XG4gIHwgVG9nZ2xlQW5vbnltb3VzQ29uc2VudHNCYW5uZXJEaXNzbWlzc2VkXG4gIHwgVG9nZ2xlQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1VwZGF0ZWQ7XG4iXX0=