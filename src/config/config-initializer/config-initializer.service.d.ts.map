{"version":3,"file":"config-initializer.service.d.ts","sources":["config-initializer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\nexport declare class ConfigInitializerService {\n    protected config: any;\n    protected initializerGuard: any;\n    protected rootConfig: any;\n    constructor(config: any, initializerGuard: any, rootConfig: any);\n    protected ongoingScopes$: BehaviorSubject<string[]>;\n    /**\n     * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n     */\n    get isStable(): boolean;\n    /**\n     * Recommended way to get config for code that can run before app will finish\n     * initialization (APP_INITIALIZERS, selected service constructors)\n     *\n     * Used without parameters waits for the whole config to become stable\n     *\n     * Parameters allow to describe which part of the config should be stable using\n     * string describing config part, e.g.:\n     * 'siteContext', 'siteContext.language', etc.\n     *\n     * @param scopes String describing parts of the config we want to be sure are stable\n     */\n    getStableConfig(...scopes: string[]): Promise<any>;\n    /**\n     * Removes provided scopes from currently ongoingScopes\n     *\n     * @param scopes\n     */\n    protected finishScopes(scopes: string[]): void;\n    /**\n     * Return true if provided scopes are not part of ongoingScopes\n     *\n     * @param scopes\n     * @param ongoingScopes\n     */\n    protected areReady(scopes: string[], ongoingScopes: string[]): boolean;\n    /**\n     * Check if two scopes overlap.\n     *\n     * Example of scopes that overlap:\n     * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n     *\n     * Example of scopes that do not overlap:\n     * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n     *\n     * @param a ScopeA\n     * @param b ScopeB\n     */\n    protected scopesOverlap(a: string, b: string): boolean;\n}\n"]}