import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserOrderConnector } from '../../connectors/order/user-order.connector';
import { UserActions } from '../actions/index';
let OrderReturnRequestEffect = class OrderReturnRequestEffect {
    constructor(actions$, orderConnector) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.createReturnRequest$ = this.actions$.pipe(ofType(UserActions.CREATE_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap(payload => {
            return this.orderConnector
                .return(payload.userId, payload.returnRequestInput)
                .pipe(map((returnRequest) => new UserActions.CreateOrderReturnRequestSuccess(returnRequest)), catchError(error => of(new UserActions.CreateOrderReturnRequestFail(makeErrorSerializable(error)))));
        }));
        this.loadReturnRequest$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap(payload => {
            return this.orderConnector
                .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                .pipe(map((returnRequest) => new UserActions.LoadOrderReturnRequestSuccess(returnRequest)), catchError(error => of(new UserActions.LoadOrderReturnRequestFail(makeErrorSerializable(error)))));
        }));
        this.cancelReturnRequest$ = this.actions$.pipe(ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap(payload => {
            return this.orderConnector
                .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                .pipe(map(_ => new UserActions.CancelOrderReturnRequestSuccess()), catchError(error => of(new UserActions.CancelOrderReturnRequestFail(makeErrorSerializable(error)))));
        }));
        this.loadReturnRequestList$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST), map((action) => action.payload), switchMap(payload => {
            return this.orderConnector
                .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map((returnRequestList) => new UserActions.LoadOrderReturnRequestListSuccess(returnRequestList)), catchError(error => of(new UserActions.LoadOrderReturnRequestListFail(makeErrorSerializable(error)))));
        }));
    }
};
OrderReturnRequestEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserOrderConnector }
];
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "createReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "loadReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "cancelReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "loadReturnRequestList$", void 0);
OrderReturnRequestEffect = __decorate([
    Injectable()
], OrderReturnRequestEffect);
export { OrderReturnRequestEffect };
//# sourceMappingURL=data:application/json;base64,