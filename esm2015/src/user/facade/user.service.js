import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { take, tap } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/index';
import { getProcessErrorFactory, getProcessLoadingFactory, getProcessSuccessFactory, } from '../../process/store/selectors/process.selectors';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, UPDATE_EMAIL_PROCESS_ID, UPDATE_PASSWORD_PROCESS_ID, UPDATE_USER_DETAILS_PROCESS_ID, } from '../store/user-state';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
let UserService = class UserService {
    constructor(store, authService) {
        this.store = store;
        this.authService = authService;
    }
    /**
     * Returns a user
     */
    get() {
        return this.store.pipe(select(UsersSelectors.getDetails), tap((details) => {
            if (Object.keys(details).length === 0) {
                this.load();
            }
        }));
    }
    /**
     * Loads the user's details
     */
    load() {
        this.withUserId((userId) => {
            if (userId !== OCC_USER_ID_ANONYMOUS) {
                this.store.dispatch(new UserActions.LoadUserDetails(userId));
            }
        });
    }
    /**
     * Register a new user
     *
     * @param submitFormData as UserRegisterFormData
     */
    register(userRegisterFormData) {
        this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));
    }
    /**
     * Register a new user from guest
     *
     * @param guid
     * @param password
     */
    registerGuest(guid, password) {
        this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));
    }
    /**
     * Returns the register user process loading flag
     */
    getRegisterUserResultLoading() {
        return this.store.pipe(select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID)));
    }
    /**
     * Returns the register user process success flag
     */
    getRegisterUserResultSuccess() {
        return this.store.pipe(select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID)));
    }
    /**
     * Returns the register user process error flag
     */
    getRegisterUserResultError() {
        return this.store.pipe(select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID)));
    }
    /**
     * Resets the register user process flags
     */
    resetRegisterUserProcessState() {
        return this.store.dispatch(new UserActions.ResetRegisterUserProcess());
    }
    /**
     * Remove user account, that's also called close user's account
     */
    remove() {
        this.withUserId((userId) => this.store.dispatch(new UserActions.RemoveUser(userId)));
    }
    /**
     * Returns the remove user loading flag
     */
    getRemoveUserResultLoading() {
        return this.store.pipe(select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID)));
    }
    /**
     * Returns the remove user failure outcome.
     */
    getRemoveUserResultError() {
        return this.store.pipe(select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID)));
    }
    /**
     * Returns the remove user process success outcome.
     */
    getRemoveUserResultSuccess() {
        return this.store.pipe(select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID)));
    }
    /**
     * Resets the remove user process state. The state needs to be reset after the process
     * concludes, regardless if it's a success or an error
     */
    resetRemoveUserProcessState() {
        this.store.dispatch(new UserActions.RemoveUserReset());
    }
    /**
     * Returns titles
     */
    getTitles() {
        return this.store.pipe(select(UsersSelectors.getAllTitles));
    }
    /**
     * Retrieves titles
     */
    loadTitles() {
        this.store.dispatch(new UserActions.LoadTitles());
    }
    /**
     * Return whether user's password is successfully reset
     */
    isPasswordReset() {
        return this.store.pipe(select(UsersSelectors.getResetPassword));
    }
    /**
     * Updates the user's details
     * @param userDetails to be updated
     */
    updatePersonalDetails(userDetails) {
        this.withUserId((userId) => this.store.dispatch(new UserActions.UpdateUserDetails({
            username: userId,
            userDetails,
        })));
    }
    /**
     * Returns the update user's personal details loading flag
     */
    getUpdatePersonalDetailsResultLoading() {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    }
    /**
     * Returns the update user's personal details error flag
     */
    getUpdatePersonalDetailsResultError() {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    }
    /**
     * Returns the update user's personal details success flag
     */
    getUpdatePersonalDetailsResultSuccess() {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    }
    /**
     * Resets the update user details processing state
     */
    resetUpdatePersonalDetailsProcessingState() {
        this.store.dispatch(new UserActions.ResetUpdateUserDetails());
    }
    /**
     * Reset new password.  Part of the forgot password flow.
     * @param token
     * @param password
     */
    resetPassword(token, password) {
        this.store.dispatch(new UserActions.ResetPassword({ token, password }));
    }
    /*
     * Request an email to reset a forgotten password.
     */
    requestForgotPasswordEmail(userEmailAddress) {
        this.store.dispatch(new UserActions.ForgotPasswordEmailRequest(userEmailAddress));
    }
    /**
     * Updates the user's email
     */
    updateEmail(password, newUid) {
        this.withUserId((userId) => this.store.dispatch(new UserActions.UpdateEmailAction({
            uid: userId,
            password,
            newUid,
        })));
    }
    /**
     * Returns the update user's email success flag
     */
    getUpdateEmailResultSuccess() {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID)));
    }
    /**
     * Returns the update user's email error flag
     */
    getUpdateEmailResultError() {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID)));
    }
    /**
     * Returns the update user's email loading flag
     */
    getUpdateEmailResultLoading() {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID)));
    }
    /**
     * Resets the update user's email processing state
     */
    resetUpdateEmailResultState() {
        this.store.dispatch(new UserActions.ResetUpdateEmailAction());
    }
    /**
     * Updates the password for the user
     * @param oldPassword the current password that will be changed
     * @param newPassword the new password
     */
    updatePassword(oldPassword, newPassword) {
        this.withUserId((userId) => this.store.dispatch(new UserActions.UpdatePassword({
            userId,
            oldPassword,
            newPassword,
        })));
    }
    /**
     * Returns the update password loading flag
     */
    getUpdatePasswordResultLoading() {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID)));
    }
    /**
     * Returns the update password failure outcome.
     */
    getUpdatePasswordResultError() {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID)));
    }
    /**
     * Returns the update password process success outcome.
     */
    getUpdatePasswordResultSuccess() {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID)));
    }
    /**
     * Resets the update password process state. The state needs to be reset after the process
     * concludes, regardless if it's a success or an error
     */
    resetUpdatePasswordProcessState() {
        this.store.dispatch(new UserActions.UpdatePasswordReset());
    }
    /*
     * Utility method to distinquish user id in a convenient way
     */
    withUserId(callback) {
        this.authService
            .getOccUserId()
            .pipe(take(1))
            .subscribe((userId) => callback(userId));
    }
};
UserService.ctorParameters = () => [
    { type: Store },
    { type: AuthService }
];
UserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService)); }, token: UserService, providedIn: "root" });
UserService = __decorate([
    Injectable({ providedIn: 'root' })
], UserService);
export { UserService };
//# sourceMappingURL=data:application/json;base64,