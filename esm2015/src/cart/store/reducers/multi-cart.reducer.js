/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CartActions } from '../actions/index';
/** @type {?} */
export const activeCartInitialState = '';
/** @type {?} */
export const wishListInitialState = '';
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function activeCartReducer(state = activeCartInitialState, action) {
    switch (action.type) {
        case CartActions.LOAD_MULTI_CART_SUCCESS:
        case CartActions.CREATE_MULTI_CART_SUCCESS:
        // point to `fresh` cart when we are creating/merging cart
        case CartActions.CREATE_MULTI_CART:
            if (action.payload &&
                action.payload.extraData &&
                action.payload.extraData.active) {
                return (/** @type {?} */ (action.meta.entityId));
            }
            else {
                return state;
            }
        case CartActions.REMOVE_CART:
            if (action.payload === state) {
                return activeCartInitialState;
            }
            else {
                return state;
            }
    }
    return state;
}
/** @type {?} */
export const cartEntitiesInitialState = undefined;
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartEntitiesReducer(state = cartEntitiesInitialState, action) {
    switch (action.type) {
        case CartActions.LOAD_MULTI_CART_SUCCESS:
        case CartActions.CREATE_MULTI_CART_SUCCESS:
        case CartActions.CREATE_WISH_LIST_SUCCESS:
        case CartActions.LOAD_WISH_LIST_SUCCESS:
            return action.payload.cart;
        case CartActions.SET_FRESH_CART:
            return action.payload;
    }
    return state;
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function wishListReducer(state = wishListInitialState, action) {
    switch (action.type) {
        case CartActions.CREATE_WISH_LIST_SUCCESS:
        case CartActions.LOAD_WISH_LIST_SUCCESS:
            return (/** @type {?} */ (action.meta.entityId));
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NhcnQvc3RvcmUvcmVkdWNlcnMvbXVsdGktY2FydC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRS9DLE1BQU0sT0FBTyxzQkFBc0IsR0FBRyxFQUFFOztBQUN4QyxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsRUFBRTs7Ozs7O0FBRXRDLE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsS0FBSyxHQUFHLHNCQUFzQixFQUM5QixNQUE2RDtJQUU3RCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxXQUFXLENBQUMsdUJBQXVCLENBQUM7UUFDekMsS0FBSyxXQUFXLENBQUMseUJBQXlCLENBQUM7UUFDM0MsMERBQTBEO1FBQzFELEtBQUssV0FBVyxDQUFDLGlCQUFpQjtZQUNoQyxJQUNFLE1BQU0sQ0FBQyxPQUFPO2dCQUNkLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUztnQkFDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUMvQjtnQkFDQSxPQUFPLG1CQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFVLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILEtBQUssV0FBVyxDQUFDLFdBQVc7WUFDMUIsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtnQkFDNUIsT0FBTyxzQkFBc0IsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLEtBQUssQ0FBQzthQUNkO0tBQ0o7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7O0FBRUQsTUFBTSxPQUFPLHdCQUF3QixHQUFHLFNBQVM7Ozs7OztBQUVqRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQUssR0FBRyx3QkFBd0IsRUFDaEMsTUFBb0I7SUFFcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssV0FBVyxDQUFDLHVCQUF1QixDQUFDO1FBQ3pDLEtBQUssV0FBVyxDQUFDLHlCQUF5QixDQUFDO1FBQzNDLEtBQUssV0FBVyxDQUFDLHdCQUF3QixDQUFDO1FBQzFDLEtBQUssV0FBVyxDQUFDLHNCQUFzQjtZQUNyQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzdCLEtBQUssV0FBVyxDQUFDLGNBQWM7WUFDN0IsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUM3QixLQUFLLEdBQUcsb0JBQW9CLEVBQzVCLE1BQW1DO0lBRW5DLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQztRQUMxQyxLQUFLLFdBQVcsQ0FBQyxzQkFBc0I7WUFDckMsT0FBTyxtQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBVSxDQUFDO0tBQ3pDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FydCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xuaW1wb3J0IHsgTG9hZGVyQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xuaW1wb3J0IHsgQ2FydEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuZXhwb3J0IGNvbnN0IGFjdGl2ZUNhcnRJbml0aWFsU3RhdGUgPSAnJztcbmV4cG9ydCBjb25zdCB3aXNoTGlzdEluaXRpYWxTdGF0ZSA9ICcnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZlQ2FydFJlZHVjZXIoXG4gIHN0YXRlID0gYWN0aXZlQ2FydEluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBDYXJ0QWN0aW9ucy5DYXJ0QWN0aW9uIHwgQ2FydEFjdGlvbnMuTXVsdGlDYXJ0QWN0aW9uc1xuKTogc3RyaW5nIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuTE9BRF9NVUxUSV9DQVJUX1NVQ0NFU1M6XG4gICAgY2FzZSBDYXJ0QWN0aW9ucy5DUkVBVEVfTVVMVElfQ0FSVF9TVUNDRVNTOlxuICAgIC8vIHBvaW50IHRvIGBmcmVzaGAgY2FydCB3aGVuIHdlIGFyZSBjcmVhdGluZy9tZXJnaW5nIGNhcnRcbiAgICBjYXNlIENhcnRBY3Rpb25zLkNSRUFURV9NVUxUSV9DQVJUOlxuICAgICAgaWYgKFxuICAgICAgICBhY3Rpb24ucGF5bG9hZCAmJlxuICAgICAgICBhY3Rpb24ucGF5bG9hZC5leHRyYURhdGEgJiZcbiAgICAgICAgYWN0aW9uLnBheWxvYWQuZXh0cmFEYXRhLmFjdGl2ZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5lbnRpdHlJZCBhcyBzdHJpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgY2FzZSBDYXJ0QWN0aW9ucy5SRU1PVkVfQ0FSVDpcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCA9PT0gc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUNhcnRJbml0aWFsU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgY29uc3QgY2FydEVudGl0aWVzSW5pdGlhbFN0YXRlID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydEVudGl0aWVzUmVkdWNlcihcbiAgc3RhdGUgPSBjYXJ0RW50aXRpZXNJbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogTG9hZGVyQWN0aW9uXG4pOiBDYXJ0IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuTE9BRF9NVUxUSV9DQVJUX1NVQ0NFU1M6XG4gICAgY2FzZSBDYXJ0QWN0aW9ucy5DUkVBVEVfTVVMVElfQ0FSVF9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ1JFQVRFX1dJU0hfTElTVF9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuTE9BRF9XSVNIX0xJU1RfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZC5jYXJ0O1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuU0VUX0ZSRVNIX0NBUlQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2lzaExpc3RSZWR1Y2VyKFxuICBzdGF0ZSA9IHdpc2hMaXN0SW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IENhcnRBY3Rpb25zLldpc2hMaXN0QWN0aW9uc1xuKTogc3RyaW5nIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ1JFQVRFX1dJU0hfTElTVF9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuTE9BRF9XSVNIX0xJU1RfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5lbnRpdHlJZCBhcyBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuIl19