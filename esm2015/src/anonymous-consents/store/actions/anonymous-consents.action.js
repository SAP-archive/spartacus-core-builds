import { StateUtils } from '../../../state/utils/index';
import { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
export const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
export const GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
export const GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
export const SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
export const GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
export const WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
export const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
export const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
export class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {
    constructor() {
        super(ANONYMOUS_CONSENTS);
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
    }
}
export class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(ANONYMOUS_CONSENTS);
        this.payload = payload;
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
    }
}
export class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(ANONYMOUS_CONSENTS, payload);
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
    }
}
export class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {
    constructor() {
        super(ANONYMOUS_CONSENTS);
        this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
    }
}
export class GetAllAnonymousConsents {
    constructor() {
        this.type = GET_ALL_ANONYMOUS_CONSENTS;
    }
}
export class GetAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = GET_ANONYMOUS_CONSENT;
    }
}
export class SetAnonymousConsents {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_ANONYMOUS_CONSENTS;
    }
}
export class GiveAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = GIVE_ANONYMOUS_CONSENT;
    }
}
export class WithdrawAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = WITHDRAW_ANONYMOUS_CONSENT;
    }
}
export class ToggleAnonymousConsentsBannerDissmissed {
    constructor(dismissed) {
        this.dismissed = dismissed;
        this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
    }
}
export class ToggleAnonymousConsentTemplatesUpdated {
    constructor(updated) {
        this.updated = updated;
        this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnRzLmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvYWN0aW9ucy9hbm9ueW1vdXMtY29uc2VudHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FDM0MsdURBQXVELENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQ25ELCtEQUErRCxDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUNoRCw0REFBNEQsQ0FBQztBQUMvRCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FDakQsNkRBQTZELENBQUM7QUFFaEUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQ3JDLGlEQUFpRCxDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUNoQyw0Q0FBNEMsQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FDakMsNkNBQTZDLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQ2pDLDZDQUE2QyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUNyQyxpREFBaUQsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSwwQ0FBMEMsR0FDckQsaUVBQWlFLENBQUM7QUFDcEUsTUFBTSxDQUFDLE1BQU0sMENBQTBDLEdBQ3JELDBEQUEwRCxDQUFDO0FBRTdELE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFGbkIsU0FBSSxHQUFHLGdDQUFnQyxDQUFDO0lBR2pELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxvQ0FBcUMsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXRGLFlBQW1CLE9BQTBCO1FBQzNDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRFQsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFEcEMsU0FBSSxHQUFHLHdDQUF3QyxDQUFDO0lBR3pELENBQUM7Q0FDRjtBQUNELE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRWhGLFlBQVksT0FBWTtRQUN0QixLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFGNUIsU0FBSSxHQUFHLHFDQUFxQyxDQUFDO0lBR3RELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRWxGO1FBQ0UsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFGbkIsU0FBSSxHQUFHLHNDQUFzQyxDQUFDO0lBR3ZELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFFbEM7UUFEUyxTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFDNUIsQ0FBQztDQUNqQjtBQUVELE1BQU0sT0FBTyxtQkFBbUI7SUFFOUIsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0ksQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsT0FBMkI7UUFBM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFEckMsU0FBSSxHQUFHLHNCQUFzQixDQUFDO0lBQ1UsQ0FBQztDQUNuRDtBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLHNCQUFzQixDQUFDO0lBQ0csQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFFbkMsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBQ0QsQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyx1Q0FBdUM7SUFFbEQsWUFBbUIsU0FBa0I7UUFBbEIsY0FBUyxHQUFULFNBQVMsQ0FBUztRQUQ1QixTQUFJLEdBQUcsMENBQTBDLENBQUM7SUFDbkIsQ0FBQztDQUMxQztBQUVELE1BQU0sT0FBTyxzQ0FBc0M7SUFFakQsWUFBbUIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUQxQixTQUFJLEdBQUcsMENBQTBDLENBQUM7SUFDckIsQ0FBQztDQUN4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFub255bW91c0NvbnNlbnQsXG4gIENvbnNlbnRUZW1wbGF0ZSxcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgQU5PTllNT1VTX0NPTlNFTlRTIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIExvYWQgQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzJztcbmV4cG9ydCBjb25zdCBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19TVUNDRVNTID1cbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIExvYWQgQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IExPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX0ZBSUwgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gTG9hZCBBbm9ueW1vdXMgQ29uc2VudCBUZW1wbGF0ZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgUkVTRVRfTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVMgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gUmVzZXQgTG9hZCBBbm9ueW1vdXMgQ29uc2VudCBUZW1wbGF0ZXMnO1xuXG5leHBvcnQgY29uc3QgR0VUX0FMTF9BTk9OWU1PVVNfQ09OU0VOVFMgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gR2V0IEFsbCBBbm9ueW1vdXMgQ29uc2VudHMnO1xuZXhwb3J0IGNvbnN0IEdFVF9BTk9OWU1PVVNfQ09OU0VOVCA9XG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBHZXQgQW5vbnltb3VzIENvbnNlbnQnO1xuZXhwb3J0IGNvbnN0IFNFVF9BTk9OWU1PVVNfQ09OU0VOVFMgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gU2V0IEFub255bW91cyBDb25zZW50cyc7XG5leHBvcnQgY29uc3QgR0lWRV9BTk9OWU1PVVNfQ09OU0VOVCA9XG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBHaXZlIEFub255bW91cyBDb25zZW50JztcbmV4cG9ydCBjb25zdCBXSVRIRFJBV19BTk9OWU1PVVNfQ09OU0VOVCA9XG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBXaXRoZHJhdyBBbm9ueW1vdXMgQ29uc2VudCc7XG5cbmV4cG9ydCBjb25zdCBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRTX0JBTk5FUl9ESVNNSVNTRUQgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gVG9nZ2xlIEFub255bW91cyBDb25zZW50cyBCYW5uZXIgRGlzbWlzc2VkJztcbmV4cG9ydCBjb25zdCBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX1VQREFURUQgPVxuICAnW0Fub255bW91cyBDb25zZW50c10gQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzIFVwZGF0ZWQnO1xuXG5leHBvcnQgY2xhc3MgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKEFOT05ZTU9VU19DT05TRU5UUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQ29uc2VudFRlbXBsYXRlW10pIHtcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMpO1xuICB9XG59XG5leHBvcnQgY2xhc3MgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKEFOT05ZTU9VU19DT05TRU5UUywgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0TG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlclJlc2V0QWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFU0VUX0xPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHZXRBbGxBbm9ueW1vdXNDb25zZW50cyB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfQUxMX0FOT05ZTU9VU19DT05TRU5UUztcbiAgY29uc3RydWN0b3IoKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgR2V0QW5vbnltb3VzQ29uc2VudCB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfQU5PTllNT1VTX0NPTlNFTlQ7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZUNvZGU6IHN0cmluZykge31cbn1cblxuZXhwb3J0IGNsYXNzIFNldEFub255bW91c0NvbnNlbnRzIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9BTk9OWU1PVVNfQ09OU0VOVFM7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBBbm9ueW1vdXNDb25zZW50W10pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBHaXZlQW5vbnltb3VzQ29uc2VudCB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHSVZFX0FOT05ZTU9VU19DT05TRU5UO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVDb2RlOiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBXaXRoZHJhd0Fub255bW91c0NvbnNlbnQge1xuICByZWFkb25seSB0eXBlID0gV0lUSERSQVdfQU5PTllNT1VTX0NPTlNFTlQ7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZUNvZGU6IHN0cmluZykge31cbn1cblxuZXhwb3J0IGNsYXNzIFRvZ2dsZUFub255bW91c0NvbnNlbnRzQmFubmVyRGlzc21pc3NlZCB7XG4gIHJlYWRvbmx5IHR5cGUgPSBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRTX0JBTk5FUl9ESVNNSVNTRUQ7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkaXNtaXNzZWQ6IGJvb2xlYW4pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzVXBkYXRlZCB7XG4gIHJlYWRvbmx5IHR5cGUgPSBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX1VQREFURUQ7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB1cGRhdGVkOiBib29sZWFuKSB7fVxufVxuXG5leHBvcnQgdHlwZSBBbm9ueW1vdXNDb25zZW50c0FjdGlvbnMgPVxuICB8IExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzXG4gIHwgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdWNjZXNzXG4gIHwgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNGYWlsXG4gIHwgUmVzZXRMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1xuICB8IEdldEFsbEFub255bW91c0NvbnNlbnRzXG4gIHwgU2V0QW5vbnltb3VzQ29uc2VudHNcbiAgfCBHZXRBbm9ueW1vdXNDb25zZW50XG4gIHwgR2l2ZUFub255bW91c0NvbnNlbnRcbiAgfCBXaXRoZHJhd0Fub255bW91c0NvbnNlbnRcbiAgfCBUb2dnbGVBbm9ueW1vdXNDb25zZW50c0Jhbm5lckRpc3NtaXNzZWRcbiAgfCBUb2dnbGVBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzVXBkYXRlZDtcbiJdfQ==