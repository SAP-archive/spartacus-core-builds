{"version":3,"file":"checkout.service.d.ts","sources":["checkout.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { StateWithCheckout } from '../store/checkout-state';\nexport declare class CheckoutService {\n    protected checkoutStore: Store<StateWithCheckout>;\n    protected authService: AuthService;\n    protected activeCartService: ActiveCartService;\n    constructor(checkoutStore: Store<StateWithCheckout>, authService: AuthService, activeCartService: ActiveCartService);\n    /**\n     * Places an order\n     */\n    placeOrder(): void;\n    /**\n     * Clear checkout data\n     */\n    clearCheckoutData(): void;\n    /**\n     * Clear checkout step\n     * @param stepNumber : the step number to be cleared\n     */\n    clearCheckoutStep(stepNumber: number): void;\n    /**\n     * Load checkout details data\n     * @param cartId : string Cart ID of loaded cart\n     */\n    loadCheckoutDetails(cartId: string): void;\n    /**\n     * Get status of checkout details loaded\n     */\n    getCheckoutDetailsLoaded(): Observable<boolean>;\n    /**\n     * Get order details\n     */\n    getOrderDetails(): Observable<Order>;\n    protected actionAllowed(): boolean;\n}\n"]}