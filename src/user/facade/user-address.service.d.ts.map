{"version":3,"file":"user-address.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/user/facade/user-address.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserAddressService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected authService: AuthService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\n    /**\n     * Retrieves user's addresses\n     */\n    loadAddresses(): void;\n    /**\n     * Adds user address\n     * @param address a user address\n     */\n    addUserAddress(address: Address): void;\n    /**\n     * Sets user address as default\n     * @param addressId a user address ID\n     */\n    setAddressAsDefault(addressId: string): void;\n    /**\n     * Updates existing user address\n     * @param addressId a user address ID\n     * @param address a user address\n     */\n    updateUserAddress(addressId: string, address: Address): void;\n    /**\n     * Deletes existing user address\n     * @param addressId a user address ID\n     */\n    deleteUserAddress(addressId: string): void;\n    /**\n     * Returns addresses\n     */\n    getAddresses(): Observable<Address[]>;\n    /**\n     * Returns a loading flag for addresses\n     */\n    getAddressesLoading(): Observable<boolean>;\n    getAddressesLoadedSuccess(): Observable<boolean>;\n    /**\n     * Retrieves delivery countries\n     */\n    loadDeliveryCountries(): void;\n    /**\n     * Returns all delivery countries\n     */\n    getDeliveryCountries(): Observable<Country[]>;\n    /**\n     * Returns a country based on the provided `isocode`\n     * @param isocode an isocode for a country\n     */\n    getCountry(isocode: string): Observable<Country>;\n    /**\n     * Retrieves regions for specified country by `countryIsoCode`\n     * @param countryIsoCode\n     */\n    loadRegions(countryIsoCode: string): void;\n    /**\n     * Clear regions in store - useful when changing country\n     */\n    clearRegions(): void;\n    /**\n     * Returns all regions\n     */\n    getRegions(countryIsoCode: string): Observable<Region[]>;\n    /**\n     * Utility method to distinquish pre / post 1.3.0 in a convenient way.\n     *\n     */\n    private withUserId;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;"}