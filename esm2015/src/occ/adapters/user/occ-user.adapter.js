import { __decorate } from "tslib";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { TITLE_NORMALIZER, USER_NORMALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, } from '../../../user/connectors/user/converters';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { InterceptorUtil, USE_CLIENT_TOKEN, } from '../../utils/interceptor-util';
let OccUserAdapter = class OccUserAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId) {
        const url = this.occEndpoints.getUrl('user', { userId });
        return this.http
            .get(url)
            .pipe(this.converter.pipeable(USER_NORMALIZER));
    }
    update(userId, user) {
        const url = this.occEndpoints.getUrl('user', { userId });
        user = this.converter.convert(user, USER_SERIALIZER);
        return this.http.patch(url, user);
    }
    register(user) {
        const url = this.occEndpoints.getUrl('userRegister');
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);
        return this.http
            .post(url, user, { headers })
            .pipe(this.converter.pipeable(USER_NORMALIZER));
    }
    registerGuest(guid, password) {
        const url = this.occEndpoints.getUrl('userRegister');
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        const httpParams = new HttpParams()
            .set('guid', guid)
            .set('password', password);
        return this.http
            .post(url, httpParams, { headers })
            .pipe(this.converter.pipeable(USER_NORMALIZER));
    }
    requestForgotPasswordEmail(userEmailAddress) {
        const url = this.occEndpoints.getUrl('userForgotPassword');
        const httpParams = new HttpParams().set('userId', userEmailAddress);
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http.post(url, httpParams, { headers });
    }
    resetPassword(token, newPassword) {
        const url = this.occEndpoints.getUrl('userResetPassword');
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http.post(url, { token, newPassword }, { headers });
    }
    updateEmail(userId, currentPassword, newUserId) {
        const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });
        const httpParams = new HttpParams()
            .set('password', currentPassword)
            .set('newLogin', newUserId);
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        return this.http.put(url, httpParams, { headers });
    }
    updatePassword(userId, oldPassword, newPassword) {
        const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });
        const httpParams = new HttpParams()
            .set('old', oldPassword)
            .set('new', newPassword);
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        return this.http.put(url, httpParams, { headers });
    }
    remove(userId) {
        const url = this.occEndpoints.getUrl('user', { userId });
        return this.http.delete(url);
    }
    loadTitles() {
        const url = this.occEndpoints.getUrl('titles');
        return this.http.get(url).pipe(map((titleList) => titleList.titles), this.converter.pipeableMany(TITLE_NORMALIZER));
    }
};
OccUserAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
OccUserAdapter = __decorate([
    Injectable()
], OccUserAdapter);
export { OccUserAdapter };
//# sourceMappingURL=data:application/json;base64,