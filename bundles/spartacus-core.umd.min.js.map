{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","OccConfig","_super","SiteContextConfig","AnonymousConsentsConfig","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","entityStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","LoadClientToken","_this","StateLoaderActions.LoaderLoadAction","LoadClientTokenFail","StateLoaderActions.LoaderFailAction","LoadClientTokenSuccess","StateLoaderActions.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","RoutingConfig","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccEndpointsService","baseSiteService","SCOPE_SUFFIX","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointsConfig","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","useExisting","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateLoaderActions.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateLoaderSelectors.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateLoaderSelectors.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateLoaderSelectors.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateLoaderSelectors.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","product_scopes","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","EventService","eventsMeta","eventType","source$","getEventMeta","sources$","unregister","newSources","s$","output$","getInputSubject","eventMeta","inputSubject$","Subject","validateEventType","createEventMeta","BehaviorSubject","merge","share","getValidatedEventStream","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateEntityLoaderSelectors.entityStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateEntityLoaderActions.EntityLoadAction","CancelOrderFail","StateEntityLoaderActions.EntityFailAction","CancelOrderSuccess","StateEntityLoaderActions.EntitySuccessAction","ResetCancelOrderProcess","StateEntityLoaderActions.EntityResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","initializeContext","langService","currService","configInit","contextServiceProviders","APP_INITIALIZER","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","val","unsubscribe","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","ngOnDestroy","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","activateLanguage$","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","activateCurrency$","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","BadGatewayHandler","responseStatus","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","subject","subjectType","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","HttpErrorInterceptor","handlers","reverse","handleErrorResponse","handler","getResponseHandler","h","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","GlobalMessageConfig","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","customerId","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","getCartIdByUserId","getWishlistName","isTempCartId","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","switchMapTo","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","err","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartAddEntryEvent","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","SelectiveCartService","userService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateEntitySelectors.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","initialState$9","getDeliveryAddressSelector","getDeliveryModeSelector","deliveryMode","getPaymentDetailsSelector","getOrderDetailsSelector","orderDetails","getCheckoutState","checkoutState","steps","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","supported","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","initialState$a","cardTypesEntities","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","CmsStructureConfig","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentLoader","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesConfig","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","cmsComponentConnector","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","matchingResolvers","resolver","DynamicAttributeService","addDynamicAttributes","element","renderer","groupProps","propName","propValue","classItem","classList","setAttribute","toLowerCase","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","isEnabled","FeaturesConfig","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","debug","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","defaultI18nConfig","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","Observable","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_enabled","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","PersonalizationConfig","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","cmsService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","SmartEditService","zone","isPreviewPage","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","attr","classes","run","NgZone","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","StoreFinderConfig","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":";;;;;;;;;;;;;;;AAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAezB,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H5B,EAAvH6B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO1B,OAAO6B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAASlB,EAAIyB,EAAWP,MAAIY,GAAKD,EAAI,EAAI7B,EAAE8B,GAAKD,EAAI,EAAI7B,EAAE0B,EAAQC,EAAKG,GAAK9B,EAAE0B,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK5B,OAAOgC,eAAeR,EAAQC,EAAKG,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUX,EAAQC,GAAOU,EAAUX,EAAQC,EAAKS,IAOpD,SAASE,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,GAAE,SAAUG,GAAWA,EAAQQ,EAAOL,UAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUnB,MAAMgB,EAASC,GAAc,KAAKS,WAI/D,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAG1C,EAAG2C,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP9C,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAO+C,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAO3D,OAAUiD,EACvJ,SAASM,EAAK9C,GAAK,OAAO,SAAUmD,GAAK,OACzC,SAAcC,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOZ,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM1C,EAAY,EAARuD,EAAG,GAASb,EAAU,OAAIa,EAAG,GAAKb,EAAS,SAAO1C,EAAI0C,EAAU,SAAM1C,EAAEM,KAAKoC,GAAI,GAAKA,EAAET,SAAWjC,EAAIA,EAAEM,KAAKoC,EAAGa,EAAG,KAAKlB,KAAM,OAAOrC,EAE3J,OADI0C,EAAI,EAAG1C,IAAGuD,EAAK,CAAS,EAARA,EAAG,GAAQvD,EAAE+B,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGvD,EAAIuD,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEd,MAAOwB,EAAG,GAAIlB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAkBzD,GAAZA,EAAI4C,EAAEG,MAAY1C,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAVkD,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,SACjG,GAAc,IAAVW,EAAG,MAAcvD,GAAMuD,EAAG,GAAKvD,EAAE,IAAMuD,EAAG,GAAKvD,EAAE,IAAM,CAAE4C,EAAEC,MAAQU,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQ7C,EAAE,GAAI,CAAE4C,EAAEC,MAAQ7C,EAAE,GAAIA,EAAIuD,EAAI,MAC7D,GAAIvD,GAAK4C,EAAEC,MAAQ7C,EAAE,GAAI,CAAE4C,EAAEC,MAAQ7C,EAAE,GAAI4C,EAAEI,IAAIU,KAAKH,GAAK,MACvDvD,EAAE,IAAI4C,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAKlC,KAAKiB,EAASqB,GAC1B,MAAOV,GAAKqB,EAAK,CAAC,EAAGrB,GAAIQ,EAAI,EAAI,QAAWD,EAAIzC,EAAI,EACtD,GAAY,EAARuD,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQlB,MAAM,GArB9BL,CAAK,CAAC7B,EAAGmD,MA6BtD,SAASK,EAASC,GACrB,IAAIC,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UAAWnD,EAAI,EAChE,OAAI2D,EAAUA,EAAEvD,KAAKsD,GACd,CACH3B,KAAM,WAEF,OADI2B,GAAK1D,GAAK0D,EAAEvD,SAAQuD,OAAI,GACrB,CAAE7B,MAAO6B,GAAKA,EAAE1D,KAAMmC,MAAOuB,KAKzC,SAASE,EAAOF,EAAGzD,GACtB,IAAI0D,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UACjD,IAAKQ,EAAG,OAAOD,EACf,IAAmB9C,EAAYoB,EAA3BhC,EAAI2D,EAAEvD,KAAKsD,GAAOG,EAAK,GAC3B,IACI,WAAc,IAAN5D,GAAgBA,KAAM,MAAQW,EAAIZ,EAAE+B,QAAQI,MAAM0B,EAAGL,KAAK5C,EAAEiB,OAExE,MAAOiC,GAAS9B,EAAI,CAAE8B,MAAOA,GACjC,QACQ,IACQlD,IAAMA,EAAEuB,OAASwB,EAAI3D,EAAU,SAAI2D,EAAEvD,KAAKJ,GAE1D,QAAkB,GAAIgC,EAAG,MAAMA,EAAE8B,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAI7D,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C6D,EAAKA,EAAGG,OAAOJ,EAAO1D,UAAUF,KACpC,OAAO6D,WC3IKI,EAASC,GACvB,OAAOA,GAAwB,iBAATA,IAAsB/E,MAAMgF,QAAQD,YAG5CE,EAAU5D,kBAAA,IAAAA,IAAAA,EAAA,QAAa,IAAA6D,EAAA,GAAAC,EAAA,EAAAA,EAAApE,UAAAC,OAAAmE,IAAAD,EAAAC,EAAA,GAAApE,UAAAoE,GACrC,IAAKD,EAAQlE,OACX,OAAOK,EAET,IAAM+D,EAASF,EAAQG,SAAW,GAElC,GAAIP,EAASzD,IAAWyD,EAASM,GAC/B,IAAK,IAAM9D,KAAO8D,EACZA,EAAO9D,aAAgBgE,KACzBzF,OAAOa,OAAOW,IAAMkE,EAAA,IAAKjE,GAAM8D,EAAO9D,GAAIiE,IACjCT,EAASM,EAAO9D,KACpBD,EAAOC,IACVzB,OAAOa,OAAOW,IAAMmE,EAAA,IAAKlE,GAAM,GAAEkE,IAEnCP,EAAU5D,EAAOC,GAAM8D,EAAO9D,KAE9BzB,OAAOa,OAAOW,IAAMoE,EAAA,IAAKnE,GAAM8D,EAAO9D,GAAImE,IAKhD,OAAOR,EAAS/D,WAAA,EAAA0D,EAAA,CAACvD,GAAW6D,ICZ9B,IAAaQ,EAAS,IAAIC,EAAAA,eAAe,iBAM5BC,EAAc,IAAID,EAAAA,eAAe,sBAQjCE,EAAqB,IAAIF,EAAAA,eACpC,6BAUF,SAAgBG,EACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,GAAA,GAEO,CACLC,QAASD,EAAgBH,EAAqBD,EAC9CM,SAAUH,EACVI,OAAO,GAYX,SAAgBC,EACdC,EACAC,EACAN,GAEA,YAFA,IAAAA,IAAAA,GAAA,GAEO,CACLC,QAASD,EAAgBH,EAAqBD,EAC9CW,WAAYF,EACZF,OAAO,EACPG,KAAMA,GASV,SAAgBE,EAAqBT,GACnC,YADmC,IAAAA,IAAAA,EAAA,IAC5B,CACLE,QAASJ,EACTK,SAAUH,EACVI,OAAO,GAUX,SAAgBM,EACdJ,EACAC,GAEA,MAAO,CACLL,QAASJ,EACTU,WAAYF,EACZF,OAAO,EACPG,KAAMA,GAQV,SAAgBI,EACdC,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,IAEe3B,EAAS/D,WAAA,EAAA0D,EAAA,CACtB,IACIgC,MAAAA,EAAAA,EAAuB,GACvBD,MAAAA,EAAAA,EAAgB,KASxB,IAAAE,EAAA,WAAA,SAAAA,WAsDA,SAtDaA,EAQJA,EAAAC,WAAP,SAAkBf,GAChB,MAAO,CACLgB,SAAUC,EACVC,UAAW,CAACnB,EAAcC,MAYvBc,EAAAK,kBAAP,SACEb,EACAC,GAEA,MAAO,CACLS,SAAUC,EACVC,UAAW,CAACb,EAAqBC,EAAeC,MAS7CO,EAAAM,QAAP,SAAepB,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLgB,SAAUC,EACVC,UAAW,CACTnB,EAAcC,GACd,CACEE,QAASP,EACTa,WAAYG,EACZJ,KAAM,CACJ,CAAC,IAAIc,EAAAA,SAAYxB,GACjB,CAAC,IAAIwB,EAAAA,SAAYvB,QAhDhBgB,EAAYG,EAAA7F,EAAA,CAJxBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,MAEHX,GAAb,KCzHA,2BCIA,SAAAY,mDAwBA,OAxBwCtH,EAAAsH,EAAAC,GAwBxCD,GAxBwCE,iBCFxC,SAAAC,mDA4BA,OA5BsDzH,EAAAyH,EAAAF,GA4BtDE,GA5BsDH,GCAzCI,EAA0D,CACrEC,kBAAmB,CACjBC,gBAAiB,uBACjBC,8BAA8B,EAC9BC,iBAAkB,GAClBC,sBAAuB,CACrBC,uBAAuB,EACvBC,aAAc,oBCPpB,SAAAC,mDAKA,OALyClI,EAAAkI,EAAAX,GAKzCW,GALyCZ,GCA5Ba,EAAgC,CAC3CC,eAAgB,CACdC,UAAW,iBACXC,cAAe,UAEjBC,QAAS,CACPC,IAAK,CACHC,UAAW,CACTC,MAAO,mCACPC,OAAQ,wCCTHC,EAAmB,sBAIhCC,EAAA,WAAA,SAAAA,KA+BA,OA9BSA,EAAAC,aAAP,SACEC,EACAC,EACAC,GAEA,OAAIA,EACKA,EAAQC,OAAOH,EAAYI,KAAKC,UAAUJ,IAEnDC,GAAU,IAAII,EAAAA,aAAcC,IAC1BP,EACAI,KAAKC,UAAUJ,KAKZH,EAAAU,aAAP,SACER,EACAS,GAEA,IAAMC,EAAiBD,EAAQP,QAAQS,OAAOX,GAC9C,OAAOS,EAAQG,MAAM,CAAEV,QAASQ,KAG3BZ,EAAAe,oBAAP,SAA8Bb,EAAoBE,GAChD,IAAMY,EAAWZ,EAAQa,IAAIf,GAC7B,GAAIc,EACF,OAAOV,KAAKY,MAAMF,IAIxBhB,EA/BA,GCKA,SAAgBmB,EAAWC,EAAcC,GACvC,MAAO,CACLC,WAAYF,EACZG,SAAUF,GAId,SAAgBG,EACdJ,EACAC,GAEA,MAAO,CACLE,SAAUF,EACVC,WAAYF,EACZK,cAAc,GAIlB,SAAgBC,EAAoBN,GAClC,MAAO,CACLG,SAAU,KACVD,WAAYF,EACZK,cAAc,GASlB,IAAAE,EAGE,SAAYL,EAAoBD,GAFhChK,KAAA+J,KAzCkC,kBA4ChC/J,KAAKuK,KAAOJ,EAAiBF,EAAYD,IAI7CQ,EAGE,SAAYP,GAFZjK,KAAA+J,KAhDsC,sBAmDpC/J,KAAKuK,KAAOF,EAAoBJ,yDApDA,2CACI,2HCkBxC,SAAgBQ,EAASR,GACvB,MAAO,CACLA,WAAYA,EACZS,OAAQ,CACNC,MAAM,IAKZ,SAAgBC,EAASX,EAAoB3F,GAC3C,MAAO,CACL2F,WAAYA,EACZS,OAAQ,CACNpG,MAAOA,IAAgB,IAK7B,SAAgBuG,EAAYZ,GAC1B,MAAO,CACLA,WAAYA,EACZS,OAAQ,CACNI,SAAS,IAKf,SAAgBC,EAAUd,GACxB,MAAO,CACLA,WAAYA,EACZS,OAAQ,IAGZ,IAAAM,EAGE,SAAYf,GAFZjK,KAAA+J,KArDgC,gBAwD9B/J,KAAKuK,KAAOE,EAASR,IAIzBgB,EAGE,SAAYhB,EAAoB3F,GAFhCtE,KAAA+J,KA5DgC,gBA+D9B/J,KAAKuK,KAAOK,EAASX,EAAY3F,IAIrC4G,GAGE,SAAYjB,GAFZjK,KAAA+J,KAnEmC,mBAsEjC/J,KAAKuK,KAAOM,EAAYZ,IAI5BkB,GAGE,SAAYlB,GAFZjK,KAAA+J,KA1EiC,iBA6E/B/J,KAAKuK,KAAOQ,EAAUd,wDAhFQ,mCACA,sCACG,uCACF,qJCiBnC,SAAgBmB,GACdnB,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACKqK,EAASR,IACTH,EAAWG,EAAYD,IAI9B,SAAgBqB,GACdpB,EACAD,EACA1F,GAEA,OAAAlE,EAAAA,EAAA,GACKwK,EAASX,EAAY3F,IACrBwF,EAAWG,EAAYD,IAI9B,SAAgBsB,GACdrB,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACKyK,EAAYZ,IACZH,EAAWG,EAAYD,IAI9B,SAAgBuB,GACdtB,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACK2K,EAAUd,IACVH,EAAWG,EAAYD,IAI9B,IAAAwB,GAGE,SAAYvB,EAAoBD,GAFhChK,KAAA+J,KAtDgC,gBAyD9B/J,KAAKuK,KAAOa,GAAenB,EAAYD,IAI3CyB,GAGE,SAAYxB,EAAoBD,EAAuB1F,GAFvDtE,KAAA+J,KA7DgC,qBAgE9B/J,KAAKuK,KAAOc,GAAepB,EAAYD,EAAI1F,IAI/CoH,GAGE,SAAYzB,EAAoBD,EAA8B2B,GAAA3L,KAAA2L,QAAAA,EAF9D3L,KAAA+J,KApEmC,wBAuEjC/J,KAAKuK,KAAOe,GAAkBrB,EAAYD,IAI9C4B,GAGE,SAAY3B,EAAoBD,GAFhChK,KAAA+J,KA3EiC,iBA8E/B/J,KAAKuK,KAAOgB,GAAgBtB,EAAYD,wDAjFV,mCACA,2CACG,4CACF,mLCTtB6B,GAAuC,CAClDC,SAAS,EACTxH,OAAO,EACPwG,SAAS,EACTzI,WAAO0J,GAST,SAAgBC,GACd/B,EACAgC,GAEA,OAAO,SACLC,EACAC,GAEA,QAHA,IAAAD,IAAAA,EAAAL,IAIEM,EAAO5B,MACP4B,EAAO5B,KAAKG,QACZyB,EAAO5B,KAAKN,aAAeA,EAC3B,CACA,IAAMmC,EAASD,EAAO5B,KAAKG,OAE3B,OAAI0B,EAAOzB,KACTvK,EAAAA,EAAA,GACK8L,GAAK,CACRJ,SAAS,EACTzJ,MAAO4J,EAAUA,EAAQC,EAAM7J,MAAO8J,GAAUD,EAAM7J,QAE/C+J,EAAO9H,MAChBlE,EAAAA,EAAA,GACK8L,GAAK,CACRJ,SAAS,EACTxH,OAAO,EACPwG,SAAS,EACTzI,MAAO4J,EAAUA,EAAQC,EAAM7J,MAAO8J,QAAUJ,IAEzCK,EAAOtB,QAChB1K,EAAAA,EAAA,GACK8L,GAAK,CACR7J,MAAO4J,EAAUA,EAAQC,EAAM7J,MAAO8J,GAAUA,EAAOR,QACvDG,SAAS,EACTxH,OAAO,EACPwG,SAAS,IAIX1K,EAAAA,EAAA,GACKyL,IAAkB,CACrBxJ,MAAO4J,EACHA,EAAQJ,GAAmBxJ,MAAO8J,GAClCN,GAAmBxJ,QAK7B,GAAI4J,EAAS,CACX,IAAMI,EAAWJ,EAAQC,EAAM7J,MAAO8J,GACtC,GAAIE,IAAaH,EAAM7J,MACrB,OAAAjC,EAAAA,EAAA,GAAY8L,GAAK,CAAE7J,MAAOgK,IAG9B,OAAOH,YCnEKI,GACdJ,EACAlC,GAEA,OAAOkC,EAAMK,SAASvC,IAAO6B,GAG/B,SAAgBW,GACdN,EACAlC,GAGA,OADoBsC,GAAoBJ,EAAOlC,GAC5B3H,+GAGrB,SACE6J,EACAlC,GAGA,OADoBsC,GAAoBJ,EAAOlC,GAC5B8B,6BAGrB,SACEI,EACAlC,GAGA,OADoBsC,GAAoBJ,EAAOlC,GAC5B1F,6BAGrB,SACE4H,EACAlC,GAGA,OADoBsC,GAAoBJ,EAAOlC,GAC5Bc,WCnCR2B,GAAuC,CAAEF,SAAU,IAOhE,SAAgBG,GACdzC,EACAgC,GAEA,OAAO,SACLC,EACAC,GAEA,IAAIQ,OAHJ,IAAAT,IAAAA,EAAAO,IAIA,IAAIG,GAAmB,EACvB,GACET,EAAO5B,MACP4B,EAAO5B,KAAKN,aAAeA,QACF8B,IAAzBI,EAAO5B,KAAKL,SACZ,CAIA,GAHAyC,EAAM,GAAGnI,OAAO2H,EAAO5B,KAAKL,UAGxBiC,EAAO5B,KAAKH,aAAc,CAC5B,GAA6B,OAAzB+B,EAAO5B,KAAKL,SACd,OAAOuC,GAEP,IAAII,GAAU,EACRC,EAActN,OAAOuN,KAAKb,EAAMK,UAAUS,QAAO,SAACC,EAAKC,GAM3D,OALIP,EAAIQ,SAASD,GACfL,GAAU,EAEVI,EAAIC,GAAOhB,EAAMK,SAASW,GAErBD,IACN,IAEH,OAAOJ,EAAU,CAAEN,SAAUO,GAAgBZ,EAIjDU,EACEjN,MAAMgF,QAAQwH,EAAO5B,KAAKL,WAAavK,MAAMgF,QAAQwH,EAAOR,cAE9DgB,EAAMnN,OAAOuN,KAAKb,EAAMK,UAK1B,IAFA,IAAMa,EAAqC,GAElC5M,EAAI,EAAGA,EAAImM,EAAIhM,OAAQH,IAAK,CACnC,IAAMwJ,EAAK2C,EAAInM,GACT6M,EAAYT,SACTT,GAAM,CAAER,QAASQ,EAAOR,QAAQnL,KACrC2L,EACEmB,EAAWrB,EAAQC,EAAMK,SAASvC,GAAKqD,GACzCC,IACFF,EAAcpD,GAAMsD,GAIxB,OAAI9N,OAAOuN,KAAKK,GAAezM,OAAS,EACtCP,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQnM,EAAAA,EAAA,GAAO8L,EAAMK,UAAaa,KAI/BlB,GChEX,SAAgBqB,GACdtD,EACAgC,GAKA,OAAOS,GAAczC,EAAY+B,GAAc/B,EAAYgC,ICG7D,SAAgBuB,GACdvD,GAEA,MAAO,CACLA,WAAYA,EACZS,YAAQqB,EACR0B,mBAAoB,GAIxB,SAAgBC,GACdzD,GAEA,MAAO,CACLA,WAAYA,EACZS,YAAQqB,EACR0B,oBAAqB,GAIzB,SAAgBE,GACd1D,GAGA,OAAA7J,EAAAA,EAAA,GACKwN,EAAgB3D,IAAW,CAC9BwD,mBAAoB,OAIxB,IAAAI,GAGE,SAAY5D,GAFZjK,KAAA+J,KA3C2C,2BA8CzC/J,KAAKuK,KAAOoD,GAAyB1D,IAIzC6D,GAGE,SAAY7D,GAFZjK,KAAA+J,KArDwC,+BAwDtC/J,KAAKuK,KAAOiD,GAAuBvD,IAIvC8D,GAGE,SAAY9D,GAFZjK,KAAA+J,KA5DwC,+BA+DtC/J,KAAKuK,KAAOmD,GAAuBzD,gEAhEG,0DACA,6DACG,mMCe7C,SAAgB+D,GACd/D,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACKuN,GAAyB1D,IACzBH,EAAWG,EAAYD,IAI9B,SAAgBiE,GACdhE,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACKoN,GAAuBvD,IACvBH,EAAWG,EAAYD,IAI9B,SAAgBkE,GACdjE,EACAD,GAEA,OAAA5J,EAAAA,EAAA,GACKsN,GAAuBzD,IACvBH,EAAWG,EAAYD,IAI9B,IAAAmE,GAIE,SAAYlE,EAAoBD,GAFhChK,KAAA+J,KA7CA,kCAgDE/J,KAAKuK,KAAOyD,GAA+B/D,EAAYD,IAI3DoE,GAIE,SAAYnE,EAAoBD,GAFhChK,KAAA+J,KArD+C,+BAwD7C/J,KAAKuK,KAAO0D,GAA6BhE,EAAYD,IAIzDqE,GAIE,SAAYpE,EAAoBD,GAFhChK,KAAA+J,KA7D+C,+BAgE7C/J,KAAKuK,KAAO2D,GAA6BjE,EAAYD,0EAlEvD,oEAC+C,iEACA,oPCVjCsE,GAAoBpC,GAClC,OAAgC,IAAzBA,EAAMqC,iBAAyBrC,EAAMJ,QAG9C,SAAgB0C,GACdtC,GAEA,OAAOA,EAAMqC,eAAiB,4FCHnBE,GAAmD,CAC9DF,eAAgB,GAMlB,SAAgBG,GACdzE,EACAgC,GAKA,OAAO,SACLC,EAIAC,QAJA,IAAAD,IAAAA,EAAA9L,EAAAA,EAAA,GACKqO,IACA5C,KAIL,IAAM8C,EAAc3C,GAAc/B,EAAYgC,EAA1BD,CAAmCE,EAAOC,GAC9D,GAAIA,EAAO5B,MAAQ4B,EAAO5B,KAAKN,aAAeA,EAAY,CACxD,IAAMwD,EAAqBtB,EAAO5B,KAAKkD,mBAUvC,GATImB,EAAAA,aAAe1C,EAAMqC,eAAiBd,EAAqB,GAC7DoB,QAAQvK,MACN,WAAW6H,EAAOpC,KAAI,gOAItBoC,GAGAsB,EACF,OAAArN,EAAAA,EAAA,GACKuO,GAAW,CACdJ,eAAgBrC,EAAMqC,eAClBrC,EAAMqC,eAAiBd,EACvBA,IAED,GAA2B,OAAvBA,EAET,OAAArN,EAAAA,EAAA,GACKuO,GACAF,IAKT,OAAOE,GC3CX,IAAMG,GAA2B1O,EAAAA,EAAA,GAC5ByL,IACA4C,IAGL,SAAgBM,GACd7C,EACAlC,GAGA,OAAOwE,GADalC,GAAoBJ,EAAOlC,IAIjD,SAAgBgF,GACd9C,EACAlC,GAGA,OAAOsE,GADahC,GAAoBJ,EAAOlC,IAIjD,SAAgBiF,GACd/C,EACAlC,GAEA,OAAOkC,EAAMK,SAASvC,IAAO8E,+IC3B/B,SAAgBI,GACdjF,EACAgC,GAKA,OAAOS,GAAczC,EAAYyE,GAAuBzE,EAAYgC,aCftDkD,GAAkBjD,EAAuBlC,GACvD,OAAOkC,EAAMK,SAASvC,SAAO+B,2DCE/B,SAAgBqD,GAAyBrC,EAAcb,GACrD,OAAOa,EACJsC,MAJoB,KAKpBrC,QACC,SAACsC,EAAUC,GAAY,OAACD,EAAWA,EAASC,QAAWxD,IACvDG,GAIN,SAAgBsD,GACdvO,EACAwO,EACApN,GAEA,IAAKpB,IAAQoB,GAAuC,IAA9B7C,OAAOuN,KAAK1K,GAAO1B,OACvC,MAAO,GAGT,IAAM+O,EAAQzO,EAAIoO,MApBK,KAoBmBM,aAAY,SAAC1C,EAAKqC,SAC1D,OAAQpK,EAAA,IAAGoK,GAAWrC,EAAG/H,IACxB7C,GACH,OAsBF,SACEpB,EACAwO,EACApN,WAEMuN,EA2BR,SAAiC3O,EAAawO,WAC5C,IAAKxO,IAAQwO,EACX,MAAO,GAGT,IAAMG,EAA0B,OAChC,IAA2B,IAAAC,EAAA5L,EAAAwL,GAAWK,EAAAD,EAAAtN,QAAAuN,EAAAnN,KAAAmN,EAAAD,EAAAtN,OAAE,CAAnC,IAAMwN,EAAYD,EAAAzN,MACjB0N,EAAa5C,SAASlM,IACxB2O,EAAc5L,KAAK+L,qGAIvB,OAAOH,EAvCeI,CAAiB/O,EAAKwO,GAC5C,GAA6B,IAAzBG,EAAcjP,OAChB,OAAO0B,EAGT,IAAM4N,EAAarL,EAAU,GAAIvC,OACjC,IAAkC,IAAA6N,EAAAjM,EAAA2L,GAAaO,EAAAD,EAAA3N,QAAA4N,EAAAxN,KAAAwN,EAAAD,EAAA3N,OAI7C,IAJG,IACG6N,EADsBD,EAAA9N,MACqBgN,MAzD5B,KA2DjBgB,EAAaJ,EACRzP,EAAI,EAAGA,EAAI4P,EAAqBzP,OAAQH,IAAK,CACpD,IAAM8P,EAAeF,EAAqB5P,GAGtCA,IAAM4P,EAAqBzP,OAAS,EAClC0P,GAAcA,EAAWC,WACpBD,EAAWC,GAGpBD,EAAaA,EAAWC,qGAK9B,OAAOL,EAnDAM,CAAiBtP,EAAKwO,EAAaC,GAG5C,SAAgBc,GACdzD,EACA0C,EACAvD,WAEA,GAAIa,GAAwB,IAAhBA,EAAKpM,OACf,MAAO,GAGT,IAAI8P,EAAc,OAClB,IAAyB,IAAAC,EAAAzM,EAAA8I,GAAI4D,EAAAD,EAAAnO,QAAAoO,EAAAhO,KAAAgO,EAAAD,EAAAnO,OAAE,CAA1B,IAAMqO,EAAUD,EAAAtO,MAGnBoO,EAAc7L,EAAU6L,EADVjB,GAAkBoB,EAAYnB,EADzBL,GAAmBwB,EAAY1E,uGAKpD,OAAOuE,EAkDT,SAAgBI,GACd9D,EACAhD,GAEA,OAAKgD,EAGEvN,OAAOuN,KAAKA,GAAM+D,QAAO,SAAC7P,GAAQ,OAAA8L,EAAK9L,KAAS8I,KAF9C,YClGKgH,GAAuB7E,GACrC,OAAOA,EAAM7J,MAGf,SAAgB2O,GAAyB9E,GACvC,OAAOA,EAAMJ,QAGf,SAAgBmF,GAAuB/E,GACrC,OAAOA,EAAM5H,MAGf,SAAgB4M,GAAyBhF,GACvC,OAAOA,EAAMpB,mJCPfqG,GAAA,SAAA9J,GAEE,SAAA8J,IAAA,IAAAC,EACE/J,EAAAzG,KAAAZ,KCP6B,6BDOLA,YAFjBoR,EAAArH,KALsB,8BASjC,OALqCjK,EAAAqR,EAAA9J,GAKrC8J,EALA,CAAqCE,GAOrCC,GAAA,SAAAjK,GAEE,SAAAiK,EAAmB3F,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KCd6B,2BDcJ2L,IAAQ3L,YADhBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAX2B,mCAetC,OALyCjK,EAAAwR,EAAAjK,GAKzCiK,EALA,CAAyCC,GAOzCC,GAAA,SAAAnK,GAEE,SAAAmK,EAAmB7F,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KCrB6B,6BDqBLA,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjB8B,sCAqBzC,OAL4CjK,EAAA0R,EAAAnK,GAK5CmK,EALA,CAA4CC,IEpB/BC,GAAQ,eACRC,GAAS,gBAItBC,GAAA,WACW5R,KAAA+J,KAAO2H,IAGlBG,GAAA,WACW7R,KAAA+J,KAAO4H,ICTLG,GAAkB,yBAElBC,GAA0B,iCAQvCC,GAEE,SAAmBrG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAO+H,IAIlBG,GAEE,SAAmBtG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAfyB,+BAmBpCmI,GAEE,SAAmBvG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAOgI,IAIlBI,GAEE,SAAmBxG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAvBuB,6BA2BlCqI,GAEE,SAAmBzG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA1B+B,qCA8B1CsI,GAEE,SAAmB1G,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAhC4B,kCAoCvCuI,GAEE,SAAmB3G,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAnCsB,4BAuCjCwI,GAEE,SAAmB5G,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAtC8B,oCA0CzCyI,GAEE,SAAmB7G,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA5C2B,oFHNL,mDACK,2DACG,yJEDvC,kGCDkC,4EAEF,oDACK,4DACG,sDACT,kDACK,0DACG,8OCR5B0I,GAGTC,EAAAA,sBHHwB,WIMK,SAACxG,GAAqB,OAAAA,EAAMyG,aAHhDC,GAGTC,EAAAA,eAAeJ,GAAYK,ICJzBC,GAAuB,SAAC7G,GAA0B,OAAAA,EAAM8G,UAK7B,SAAC9G,GAAqB,OAAAA,EAAM+G,WAHhDC,GAGTL,EAAAA,eAAeJ,GAAYU,IAElBC,GAGTP,EAAAA,eAAeK,GAAmBH,iJCGpC,SAAAM,EAAsBC,GAAAtT,KAAAsT,MAAAA,SAOtBD,EAAAnT,UAAAqT,UAAA,SAAUC,EAAgBC,GACxBzT,KAAKsT,MAAMI,SACT,IAAIC,GAA0B,CAC5BH,OAAQA,EACRC,SAAUA,MAehBJ,EAAAnT,UAAA0T,aAAA,WACE,OAAO5T,KAAKoT,eAAeS,KACzBC,EAAAA,KAAI,SAACb,GACH,OAAMA,GAAeA,EAAUO,OACtBP,EAAUO,OC/CU,iBD4DnCH,EAAAnT,UAAA6T,iBAAA,SAAiBC,GACf,OAAOhU,KAAK4T,eACTC,KAAKI,EAAAA,KAAK,IACVC,WAAU,SAAClK,GAAO,OAAAgK,EAAGhK,OAM1BqJ,EAAAnT,UAAAkT,aAAA,WACE,OAAOpT,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOC,MAOhCf,EAAAnT,UAAAmU,iBAAA,SAAiBrB,GACfhT,KAAKsT,MAAMI,SACT,IAAIY,GAA6B,CAC/BC,aAAcvB,EAAMwB,kBAQ1BnB,EAAAnT,UAAAuU,mBAAA,SAAmBzB,GACjBhT,KAAKsT,MAAMI,SAAS,IAAIgB,GAAiC1B,KAM3DK,EAAAnT,UAAAyU,OAAA,WAAA,IAAAvD,EAAApR,KACEA,KAAKoT,eACFS,KAAKI,EAAAA,KAAK,IACVC,WAAU,SAACjB,GACV7B,EAAKkC,MAAMI,SAAS,IAAIkB,IACpBC,QAAQ5B,ICrGe,YDqGDA,EAAUO,QAClCpC,EAAKkC,MAAMI,SAAS,IAAIoB,GAA4B7B,QAS5DI,EAAAnT,UAAA6U,eAAA,WAAA,IAAA3D,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOa,IACPlE,EAAAA,QAAO,SAAC5E,GACN,QAAIkF,EAAK6D,oBAAoB/I,KAGtBA,EAAMJ,SACTsF,EAAKkC,MAAMI,SAAS,IAAIwB,KAEnB,MAGXpB,EAAAA,KAAI,SAAC5H,GAAoC,OAAAA,EAAM7J,WAQnDgR,EAAAnT,UAAAiV,mBAAA,WAAA,IAAA/D,EAAApR,KAGE,OAFAA,KAAKsT,MAAMI,SAAS,IAAIwB,IAEjBlV,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOa,IACPlE,EAAAA,QAAO,SAAC5E,GACN,OAAAkF,EAAK6D,oBAAoB/I,MAE3B4H,EAAAA,KAAI,SAAC5H,GAAoC,OAAAA,EAAM7J,WAIzCgR,EAAAnT,UAAA+U,oBAAV,SAA8B/I,GAC5B,OAAQA,EAAMpB,SAAWoB,EAAM5H,SAAW4H,EAAMJ,SAMlDuH,EAAAnT,UAAAkV,eAAA,WACE,OAAOpV,KAAKoT,eAAeS,KACzBC,EAAAA,KAAI,SAACb,GAAc,OAAA4B,QAAQ5B,IAAc4B,QAAQ5B,EAAUoC,4DAvIlCC,EAAAA,+HADlBjC,EAAWvS,EAAA,CAHvByU,EAAAA,WAAW,CACVC,WAAY,UAEDnC,oBENX,SAAAoC,EAAsBC,GAAA1V,KAAA0V,YAAAA,EAyBxB,OAvBSD,EAAAvV,UAAAyV,yBAAP,SACErM,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOA,KAAK0V,YAAYP,qBAAqBtB,KAC3CI,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAAC5C,GACT,OAAOzQ,EAAKsT,OAAOzE,EAAK0E,6BAA6BxM,EAAS0J,SAK1DyC,EAAAvV,UAAA4V,6BAAV,SACExM,EACA0J,GAOA,OALA1J,EAAUA,EAAQG,MAAM,CACtBsM,WAAY,CACVC,cAAkBhD,EAAMiD,WAAU,IAAIjD,EAAMqC,0DApBfhC,MADxBoC,EAA0B3U,EAAA,CADtCyU,EAAAA,cACYE,oBCCX,SAAAS,EAA8BC,GAG5BnW,KAAKmW,SAAWA,SAGlB3W,OAAAgC,eAAI0U,EAAAhW,UAAA,eAAY,KAAhB,WACE,MAAyB,oBAAXkW,OAAyBA,YAASrK,mCAGlDvM,OAAAgC,eAAI0U,EAAAhW,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKqW,aAAerW,KAAKqW,aAAaC,oBAAiBvK,mCAGhEvM,OAAAgC,eAAI0U,EAAAhW,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKqW,aAAerW,KAAKqW,aAAaE,kBAAexK,mCAS9DvM,OAAAgC,eAAI0U,EAAAhW,UAAA,UAAO,KAAX,WACE,OAAKF,KAAKqW,aAGDG,EAAAA,UAAUxW,KAAKqW,aAAc,UAAUxC,KAC5C4C,EAAAA,aAAa,KACbC,EAAAA,UAAU,CAAE1V,OAAQhB,KAAKqW,eACzBM,EAAAA,wBALKC,EAAAA,GAAG,yGA1BDC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,wIAHTb,EAASpV,EAAA,CAHrByU,EAAAA,WAAW,CACVC,WAAY,SAKC/T,EAAA,EAAAoV,EAAAA,OAAOE,EAAAA,YAHTb,oBCFX,SAAAc,EAAoBC,GAAAjX,KAAAiX,OAAAA,SAEpBD,EAAA9W,UAAAgX,mBAAA,SAAmBC,GACjB,IAAMC,EAAUpX,KAAKiX,OAAOI,SAASF,GACrC,OAAOnX,KAAKsX,+BAA+BF,EAAQG,OAG7CP,EAAA9W,UAAAoX,+BAAR,SAAuCE,GACrC,IAAMC,EAAWD,EAAKC,SAAS3D,KAAI,SAACvT,GAAM,OAAAA,EAAEmX,QACtCC,EAAmBH,EAAKI,SAASC,EAAAA,gBACnC7X,KAAKsX,+BAA+BE,EAAKI,SAASC,EAAAA,iBAClD,GACJ,OAAOJ,EAASjT,OAAOmT,6CAZGG,EAAAA,iIADjBd,EAAiBlW,EAAA,CAD7ByU,EAAAA,WAAW,CAAEC,WAAY,UACbwB,MCLAe,GAAU,SAACC,GAA6B,OAAAA,EAAQC,WAAW,MAE3DC,GAAe,SAACF,GAA4B,OAAAA,EAAQG,MAAM,OCAvE,2BCIE,SAAAC,EAAsB1S,GAAA1F,KAAA0F,OAAAA,SAEtB0S,EAAAlY,UAAAmY,eAAA,SAAeC,GACb,IAAMC,EACJvY,KAAK0F,QAAU1F,KAAK0F,OAAO8S,SAAWxY,KAAK0F,OAAO8S,QAAQC,OAEtD/V,EAAS6V,GAAeA,EAAYD,GAI1C,OAHKC,QAA0BxM,IAAXrJ,GAClB1C,KAAK0Y,KAAK,+CAA+CJ,EAAS,MAE7D5V,GAGD0V,EAAAlY,UAAAwY,KAAR,eAAa,IAAA5B,EAAA,GAAAhS,EAAA,EAAAA,EAAApE,UAAAC,OAAAmE,IAAAgS,EAAAhS,GAAApE,UAAAoE,GACP8J,EAAAA,aACFC,QAAQ6J,KAAI7X,MAAZgO,QAAOtK,EAASuS,8CAfU6B,uHADnBP,EAAoBtX,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACb4C,oBCMX,SAAAQ,EACYC,EACAC,GADA9Y,KAAA6Y,qBAAAA,EACA7Y,KAAA8Y,UAAAA,EAJH9Y,KAAA+Y,SAAW,CAAC,YAUrBH,EAAA1Y,UAAA0J,IAAA,SAAI0O,GACF,IAAMC,EAAcvY,KAAK6Y,qBAAqBR,eAAeC,GAC7D,OAAOC,GAAe5Y,MAAMgF,QAAQ4T,EAAYS,OAC5C,IAAMT,EAAYS,MAAM,QACxBjN,GAWN6M,EAAA1Y,UAAA+Y,UAAA,SAAUC,WACHvZ,MAAMgF,QAAQuU,KACjBA,EAAW,CAACA,IAGd,IAAMxW,EAAmB,OACzB,IAAsB,IAAAyW,EAAAlV,EAAAiV,GAAQE,EAAAD,EAAA5W,QAAA6W,EAAAzW,KAAAyW,EAAAD,EAAA5W,OAAE,CAA3B,IAAM8W,EAAOD,EAAA/W,MAChB,GAAKrC,KAAKsZ,eAAeD,GAGlB,CAEL,IAAME,EAAgBvZ,KAAKwZ,gBAAgBH,GAE3C,GAAsB,OAAlBE,EACF,OAAOvZ,KAAK+Y,SAGdrW,EAAOsB,KAAInD,MAAX6B,EAAM6B,EAASgV,SATf7W,EAAOsB,KAAKqV,qGAiBhB,OAJIrZ,KAAKyZ,qBAAqBP,IAC5BxW,EAAOgX,QAAQ,KAGVhX,GAGDkW,EAAA1Y,UAAAoZ,eAAR,SAAuBD,GACrB,OAAOA,GAAWxE,QAAQwE,EAAQM,UAG5Bf,EAAA1Y,UAAAuZ,qBAAR,SAA6BP,GAC3B,OAAOlZ,KAAKsZ,eAAeJ,EAAS,KAG9BN,EAAA1Y,UAAAsZ,gBAAR,SAAwBH,GAGtB,GAFArZ,KAAK4Z,uBAAuBP,IAEvBA,EAAQM,QACX,OAAO,KAGT,IAAMpB,EAAcvY,KAAK6Y,qBAAqBR,eAC5CgB,EAAQM,SAIV,IAAKpB,IAAgBA,EAAYS,MAC/B,OAAO,KAIT,IAAMtB,EAAO1X,KAAK6Z,2BAA2BtB,EAAac,EAAQS,QAGlE,OAAKpC,EAIU1X,KAAK+Z,oBAClBrC,EACA2B,EAAQS,OACRvB,EAAYyB,eANL,MAYHpB,EAAA1Y,UAAA0Z,uBAAR,SAA+BP,GAC7BA,EAAQS,OAAST,EAAQS,QAAU,IAG7BlB,EAAA1Y,UAAA6Z,oBAAR,SACErC,EACAoC,EACAE,GAHF,IAAA5I,EAAApR,KAKE,OAAOA,KAAK8Y,UAAU5B,mBAAmBQ,GAAM5D,KAAI,SAACkE,GAClD,GAAID,GAAQC,GAAU,CACpB,IAAMiC,EAAY/B,GAAaF,GACzBkC,EAAkB9I,EAAK+I,mBAC3BF,EACAD,GAEF,OAAOF,EAAOI,GAEhB,OAAOlC,MAIHY,EAAA1Y,UAAA2Z,2BAAR,SACEtB,EACAuB,GAFF,IAAA1I,EAAApR,KAIQoa,EAAY7B,EAAYS,MAAMqB,MAAK,SAAC3C,GACxC,OAAAtG,EAAKkJ,UAAU5C,GAAM6C,OAAM,SAACN,GAC1B,IAAMC,EAAkB9I,EAAK+I,mBAC3BF,EACA1B,EAAYyB,eAGd,YAAmCjO,IAA5B+N,EAAOI,SAIlB,OAAIE,MAAAA,GACFpa,KAAK0Y,KACH,8DACA,iBACAH,EACA,kBACAuB,GAEK,MAEFM,GAGDxB,EAAA1Y,UAAAoa,UAAR,SAAkB5C,GAChB,OAAO1X,KAAK8Y,UACT5B,mBAAmBQ,GACnB5G,OAAOiH,IACPjE,IAAIoE,KAGDU,EAAA1Y,UAAAia,mBAAR,SAA2BF,EAAmBD,GAC5C,OAAIA,GACKA,EAAcC,IAEhBA,GAGDrB,EAAA1Y,UAAAwY,KAAR,eAAa,IAAA5B,EAAA,GAAAhS,EAAA,EAAAA,EAAApE,UAAAC,OAAAmE,IAAAgS,EAAAhS,GAAApE,UAAAoE,GACP8J,EAAAA,aACFC,QAAQ6J,KAAI7X,MAAZgO,QAAOtK,EAASuS,8CA9JcsB,UACXpB,yIALZ4B,EAAmB9X,EAAA,CAD/ByU,EAAAA,WAAW,CAAEC,WAAY,UACboD,MCAb4B,GAEE,SACS7O,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KANc,eAgBzB0Q,GAEE,SAAmB9O,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAhBqB,sBAoBhC2Q,GAAA,WACW1a,KAAA+J,KApBgB,iBAuB3B4Q,GAAA,WACW3a,KAAA+J,KAvBmB,+DAHL,+BACO,iCACL,+BACG,qGCEjB6Q,GAGTlI,EAAAA,sBCP2B,aDYW,SAACxG,GAAU,OAAAA,EAAM+K,QAH9C4D,GAGThI,EAAAA,eAAe+H,GAAqBE,OAOtC,SAACC,GACC,OAACA,EAAa7O,OAAS6O,EAAa7O,MAAM8O,SAAY,CAAEhR,GAAI,KANnDiR,GAGTpI,EAAAA,eACFgI,GAAcK,OAUd,SAACH,GACC,OAAAA,EAAaI,WAAaJ,EAAaI,UAAUH,SANxCI,GAGTvI,EAAAA,eACFgI,GAAcQ,OAOd,SAACL,GAAY,QAAEA,GAFJM,GAA+CzI,EAAAA,eAC1DuI,GAAkBG,wLErBlB,SAAAC,EACYlI,EACAmI,EACAC,GAFA1b,KAAAsT,MAAAA,EACAtT,KAAAyb,OAAAA,EACAzb,KAAA0b,oBAAAA,SAMZF,EAAAtb,UAAA2a,eAAA,WACE,OAAO7a,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOwH,MAMhCH,EAAAtb,UAAA+a,eAAA,WACE,OAAOjb,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOyH,MAMhCJ,EAAAtb,UAAAkb,mBAAA,WACE,OAAOpb,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO0H,MAMhCL,EAAAtb,UAAAob,aAAA,WACE,OAAOtb,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO2H,MAShCN,EAAAtb,UAAA6b,GAAA,SAAG7C,EAAuB8C,EAAgBC,GACxC,IAAMvE,EAAO1X,KAAK0b,oBAAoBzC,UAAUC,GAEhD,OAAOlZ,KAAKkc,SAASxE,EAAMsE,EAAOC,IAOpCT,EAAAtb,UAAAic,QAAA,SAAQhF,GACNnX,KAAKsT,MAAMI,SAAS,IAAI0I,GAAkCjF,KAM5DqE,EAAAtb,UAAAmc,KAAA,WAC0Brc,KAAKyb,OAAOtF,SAASmG,SAASnP,SACpDnN,KAAKyb,OAAOpF,aAAakG,SAASC,QAGlCxc,KAAKsT,MAAMI,SAAS,IAAI+I,IAG1Bzc,KAAK+b,GAAG,CAAC,OAOXP,EAAAtb,UAAAwc,QAAA,WACE1c,KAAKsT,MAAMI,SAAS,IAAIiJ,KAShBnB,EAAAtb,UAAAgc,SAAV,SACExE,EACAsE,EACAC,GAEAjc,KAAKsT,MAAMI,SACT,IAAIkJ,GAA6B,CAC/BlF,KAAIA,EACJsE,MAAKA,EACLC,OAAMA,+CA1FO3G,EAAAA,aACCY,UACa0C,gKAJtB4C,EAAc1a,EAAA,CAH1ByU,EAAAA,WAAW,CACVC,WAAY,UAEDgG,oBCLX,SAAAqB,EACYnH,EACAoH,GADA9c,KAAA0V,YAAAA,EACA1V,KAAA8c,eAAAA,EAmDd,OAhDSD,EAAA3c,UAAA6c,uBAAP,SACEzT,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOA,KAAKgd,qBAAqBnJ,KAC/B+B,EAAAA,WAAU,SAAC5C,GACT,OAAOzQ,EAAKsT,OAAOzE,EAAK0E,6BAA6BxM,EAAS0J,SAK7D6J,EAAA3c,UAAA+c,0BAAP,WAEEjd,KAAK0V,YAAYf,UAGTkI,EAAA3c,UAAA8c,mBAAV,WAAA,IACME,EADN9L,EAAApR,KAEE,OAAOA,KAAK0V,YAAYtC,eAAeS,KACrCsJ,EAAAA,KAAI,SAACnK,GACCA,EAAMqC,cAAgBrC,EAAMwB,gBAAkB0I,EAChD9L,EAAKsE,YAAYrB,iBAAiBrB,GACxBA,EAAMqC,cAAiBrC,EAAMwB,cAE7BxB,EAAMwB,gBAChBpD,EAAKsE,YAAYf,SACjBvD,EAAK0L,eAAef,GAAG,CAAEpC,QAAS,WAHlCvI,EAAK0L,eAAef,GAAG,CAAEpC,QAAS,UAKpCuD,EAAWA,GAAYlK,KAEzBlC,EAAAA,QACE,SAACkC,GAAqB,OAAAkK,EAAS7H,eAAiBrC,EAAMqC,gBAExDpB,EAAAA,KAAK,KAIC4I,EAAA3c,UAAA4V,6BAAV,SACExM,EACA0J,GAOA,OALA1J,EAAUA,EAAQG,MAAM,CACtBsM,WAAY,CACVC,cAAkBhD,EAAMiD,WAAU,IAAIjD,EAAMqC,0DA/CzBhC,UACGmI,MAHjBqB,EAAwB/b,EAAA,CADpCyU,EAAAA,cACYsH,MCYbO,GAAA,WACE,SAAAA,EACUC,EACAC,EACA5H,GAFA1V,KAAAqd,yBAAAA,EACArd,KAAAsd,2BAAAA,EACAtd,KAAA0V,YAAAA,SAGV0H,EAAAld,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIQwd,EAAuBxd,KAAKwd,qBAAqBlU,GAKvD,OAJIkU,IACFlU,EAAUX,EAAgBU,aAAaX,EAAkBY,IAGpD/G,EAAKsT,OAAOvM,GAASuK,KAC1B4J,EAAAA,YAAW,SAACC,GACV,GAAIA,aAAuBC,EAAAA,kBACzB,OAAQD,EAAYE,QAClB,KAAK,IACH,GAAIJ,GACF,GAAIpM,EAAKyM,eAAeH,GACtB,OAAOtM,EAAKkM,2BAA2B3H,yBACrCrM,EACA/G,OAIC,CACL,GAAI6O,EAAKyM,eAAeH,GACtB,OAAOtM,EAAKiM,yBAAyBN,uBACnCzT,EACA/G,GAEG,GAGLmb,EAAYvG,IAAIhK,SAzCX,qCA0CuB,kBAA5BuQ,EAAYpZ,MAAMA,MAGlB,OADA8M,EAAKiM,yBAAyBJ,4BACvBrG,EAAAA,KAGX,MACF,KAAK,IAED8G,EAAYvG,IAAIhK,SAnDT,qCAoDqB,kBAA5BuQ,EAAYpZ,MAAMA,OAEqB,kBAAnCgF,EAAQxG,KAAK8G,IAAI,eAEnBwH,EAAKsE,YAAYf,SAM3B,OAAOmJ,EAAAA,WAAWJ,QAKhBN,EAAAld,UAAAsd,qBAAR,SAA6BlU,GAC3B,IAAMyU,EAAmBpV,EAAgBe,oBACvChB,EACAY,EAAQP,SAEV,OAAO8L,QAAQkJ,IAGTX,EAAAld,UAAA2d,eAAR,SAAuBG,GACrB,SACEA,EAAK1Z,OACL0Z,EAAK1Z,MAAM2Z,QACXD,EAAK1Z,MAAM2Z,kBAAkBte,OAC7Bqe,EAAK1Z,MAAM2Z,OAAO,KAEmB,sBAA9BD,EAAK1Z,MAAM2Z,OAAO,GAAGlU,+CA7EI8S,UACEpH,UACfpC,2JAJZ+J,EAAoBtc,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACb4H,GAAb,GCrBAc,GAAA,WAAA,SAAAA,KAWA,OAVSA,EAAAhc,QAAP,SAAeic,EAAwBC,eACrC,IAA4B,IAAAjZ,EAAAlB,EAAAzE,OAAOuN,KAAKqR,IAAkBhZ,EAAAD,EAAA5C,QAAA6C,EAAAzC,KAAAyC,EAAAD,EAAA5C,OAAE,CAAvD,IAAM8b,EAAajZ,EAAA/C,MAChBic,EAAc,IAAIC,OAAO,OAASF,EAAgB,IAAK,KAC7DF,EAAiBA,EAAeK,QAC9BF,EACAF,EAAkBC,sGAGtB,OAAOF,GAEXD,EAXA,GCQA,SAAgBO,GACd/Y,EACAgZ,GAEA,OAAQhZ,EAAOsV,SAAWtV,EAAOsV,QAAQ0D,IAAe,GAS1D,SAAgBC,GACdjZ,EACAgZ,GAEA,IAAME,EAAQH,GAA0B/Y,EAAQgZ,GAChD,OAAOE,GAASA,EAAMje,OAASie,EAAM,QAAK7S,ECvBrC,ICHK8S,GDGCC,GAAiB,+BAM9BC,GAAA,WACW/e,KAAA+J,KAAO+U,IAGlBE,GAEE,SAAmBrT,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVwB,qCAcnCkV,GAEE,SAAmBtT,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAd2B,wCAkBtCmV,GAEE,SAAmBvT,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAlByB,sCAsBpCoV,GAAA,WACWnf,KAAA+J,KAtBqB,kCEJnBqV,GAAkB,iCAGlBC,GAAsB,qCACtBC,GAAkB,iCAE/BC,GAAA,WACWvf,KAAA+J,KAAOqV,IAGlBI,GAEE,SAAmB7T,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVyB,uCAcpC0V,GAEE,SAAmB9T,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAd4B,0CAkBvC2V,GAEE,SAAmB/T,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAOsV,IAIlBM,GAAA,WACW3f,KAAA+J,KAAOuV,IC1BLM,GAAiB,gCAGjBC,GAAsB,qCACtBC,GAAkB,iCAE/BC,GAAA,WACW/f,KAAA+J,KAAO6V,IAGlBI,GAEE,SAAmBrU,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVwB,sCAcnCkW,GAEE,SAAmBtU,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAd2B,yCAkBtCmW,GAEE,SAAmBvU,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAO8V,IAIlBM,GAAA,WACWngB,KAAA+J,KAAO+V,2EHzBiB,2DACG,4DACF,sDACJ,2KEHI,8DACG,iOCDJ,4DACG,yLCEzBM,GAGT1N,EAAAA,sBCTgC,kBCSlC,SAACxG,GACC,OAAAA,GAASA,EAAMmU,UAAYnU,EAAMmU,SAASC,YANjCC,GAGT1N,EAAAA,eACFuN,GAAmBI,OAUnB,SAACtU,GAA4B,OAAAA,GAASA,EAAMmU,UAAYnU,EAAMmU,SAASI,SAL5DC,GAGT7N,EAAAA,eACFuN,GAAmBO,ICRfC,GAA6B,SAAC1U,GAA2B,OAAAA,EAAMK,UAC/DsU,GAAyB,SAAC3U,GAA2B,OAAAA,EAAM4U,mBAO/D,SAAC5U,GAA4B,OAAAA,EAAM6U,YALxBC,GAGTnO,EAAAA,eACFuN,GAAmBa,IAIRC,GAGTrO,EAAAA,eAAemO,GAAoBJ,IAE1BO,GAGTtO,EAAAA,eAAemO,GAAoBH,OAKG,SAACtU,GACzC,OAAOA,EACH/M,OAAOuN,KAAKR,GAAUuH,KAAI,SAACsN,GAAY,OAAA7U,EAAS6U,MAChD,MANOC,GAGTxO,EAAAA,eAAeqO,GAAqBI,ICxBlCC,GAAyB,SAACrV,GAA0B,OAAAA,EAAMsV,gBAC1DC,GAA4B,SAACvV,GAA0B,OAAAA,EAAMK,UAEtDmV,GAGT7O,EAAAA,eACFuN,IACA,SAAClU,GAA4B,OAAAA,EAAMyV,aAGxBC,GAGT/O,EAAAA,eAAe6O,GAAmBD,IAEzBI,GAGThP,EAAAA,eAAe6O,GAAmBH,IAEzBO,GAGTjP,EAAAA,eAAe+O,IAAsB,SAACrV,GACxC,OAAOA,EACH/M,OAAOuN,KAAKR,GAAUuH,KAAI,SAACsN,GAAY,OAAA7U,EAAS6U,MAChD,qUCtBJ,SAAAW,EACYzO,EACA5N,GADA1F,KAAAsT,MAAAA,EACAtT,KAAA0F,OAAAA,EAsDd,OAhDEqc,EAAA7hB,UAAA8hB,UAAA,WACE,OAAOhiB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8N,IACPnR,EAAAA,QAAO,SAACoR,GAAW,OAAArN,QAAQqN,QAO/BH,EAAA7hB,UAAAiiB,OAAA,WACE,OAAOniB,KAAKgiB,YAAYnO,KAAKC,EAAAA,KAAI,SAACuM,GAAa,MAAA,CAACA,QAGlD0B,EAAA7hB,UAAAkiB,UAAA,SAAU/B,GAAV,IAAAjP,EAAApR,KACE,OAAOA,KAAKsT,MACTO,KAAKM,EAAAA,OAAO8N,IAAyChO,EAAAA,KAAK,IAC1DC,WAAU,SAACmO,GACNhC,GAAYgC,IAAmBhC,GACjCjP,EAAKkC,MAAMI,SACT,IAAI4O,GAAqCjC,QASnD0B,EAAA7hB,UAAAqiB,WAAA,WACEviB,KAAKoiB,UACHzD,GAA2B3e,KAAK0F,OCpDF,cD2DlCqc,EAAA7hB,UAAAwgB,gBAAA,WAAA,IAAAtP,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOqO,IACPrF,EAAAA,KAAI,SAACkD,GACkC,IAAjC7gB,OAAOuN,KAAKsT,GAAU1f,QACxByQ,EAAKkC,MAAMI,SAAS,IAAI+O,kDAlDbnN,EAAAA,aACChO,KAHTya,EAAejhB,EAAA,CAD3ByU,EAAAA,cACYwM,MELbW,GAAA,WAAA,SAAAA,KAgBA,OAfEA,EAAAxiB,UAAAyiB,UAAA,SAAU1hB,GACR,OAAO2hB,mBAAmB3hB,IAG5ByhB,EAAAxiB,UAAA2iB,YAAA,SAAYxgB,GACV,OAAOugB,mBAAmBvgB,IAG5BqgB,EAAAxiB,UAAA4iB,UAAA,SAAU7hB,GACR,OAAO8hB,mBAAmB9hB,IAG5ByhB,EAAAxiB,UAAA8iB,YAAA,SAAY3gB,GACV,OAAO0gB,mBAAmB1gB,IAE9BqgB,EAhBA,iBCQE,SAAAO,EACUvd,EACYwd,GAFtB,IAAA9R,EAAApR,KACUA,KAAA0F,OAAAA,EACY1F,KAAAkjB,gBAAAA,EAJLljB,KAAAmjB,aAAe,UAM9BnjB,KAAKqiB,eACH1D,GAA2B3e,KAAK0F,OFpBF,aEoBmC,GAE/D1F,KAAKkjB,iBACPljB,KAAKkjB,gBACFlB,YACA9N,WAAU,SAAC7R,GAAU,OAAC+O,EAAKiR,eAAiBhgB,YAQnD4gB,EAAA/iB,UAAAkjB,eAAA,SAAeC,GACb,OAAKrjB,KAAK0F,QAAW1F,KAAK0F,OAAO2C,SAAYrI,KAAK0F,OAAO2C,QAAQC,MAGjE+a,EAAWrjB,KAAK0F,OAAO2C,QAAQC,IAAIC,UAAU8a,IAE/BpL,WAAW,OACvBoL,EAAW,IAAMA,GAGZrjB,KAAK0F,OAAO2C,QAAQC,IAAIgb,QAAUD,GARhC,IAcXJ,EAAA/iB,UAAAqjB,gBAAA,WACE,OAAKvjB,KAAK0F,QAAW1F,KAAK0F,OAAO2C,SAAYrI,KAAK0F,OAAO2C,QAAQC,KAK9DtI,KAAK0F,OAAO2C,QAAQC,IAAIgb,SAAW,IACpCtjB,KAAK0F,OAAO2C,QAAQC,IAAIkb,OACxBxjB,KAAKqiB,eANE,IAcXY,EAAA/iB,UAAAujB,YAAA,SAAYJ,GAIV,OAHKA,EAASpL,WAAW,OACvBoL,EAAW,IAAMA,GAEZrjB,KAAKujB,kBAAoBF,GAUlCJ,EAAA/iB,UAAAwjB,OAAA,SACEL,EACAM,EACAC,EACAC,SAWA,QAXA,IAAAA,IAAAA,EAAA,IAEAR,EAAWrjB,KAAK8jB,oBAAoBT,EAAUQ,GAE1CF,IACFnkB,OAAOuN,KAAK4W,GAAWI,SAAQ,SAAC9iB,GAC9B0iB,EAAU1iB,GAAO2hB,mBAAmBe,EAAU1iB,OAEhDoiB,EAAWnF,GAAgBhc,QAAQmhB,EAAUM,IAG3CC,EAAa,CACf,IAAII,EAAoB,CAAEC,QAAS,IAAIvB,IAEvC,GAAIW,EAASlW,SAAS,KAAM,CAC1B,IAAI+W,EACJhf,EAAAd,EAAAif,EAAAhU,MAAA,KAAA,GAACgU,EAAAne,EAAA,GAAUgf,EAAAhf,EAAA,GAEX8e,EAAiB5jB,EAAAA,EAAA,GACZ4jB,GACA,CAAEG,WAAYD,IAIrB,IAAIE,EAAa,IAAIC,EAAAA,WAAWL,GAChCxkB,OAAOuN,KAAK6W,GAAaG,SAAQ,SAAC9iB,GAChC,IAAMoB,EAAQuhB,EAAY3iB,QACZ8K,IAAV1J,IAEA+hB,EADY,OAAV/hB,EACW+hB,EAAW5a,OAAOvI,GAElBmjB,EAAWhb,IAAInI,EAAKoB,OAKvC,IAAMyX,EAASsK,EAAWE,WACtBxK,EAAOnZ,SACT0iB,GAAY,IAAMvJ,GAItB,OAAO9Z,KAAKyjB,YAAYJ,IAGlBJ,EAAA/iB,UAAA4jB,oBAAR,SAA4BT,EAAkBQ,GAC5C,IAAMU,EACJvkB,KAAK0F,OAAO2C,SACZrI,KAAK0F,OAAO2C,QAAQC,KACpBtI,KAAK0F,OAAO2C,QAAQC,IAAIC,UAE1B,GAAIsb,EAAO,CACT,IAAMW,EAAiBD,EAAgB,GAAGlB,EAAWrjB,KAAKmjB,cAC1D,GAAIqB,GAAkBA,EAAeX,GACnC,OAAOW,EAAeX,GAEpBjV,EAAAA,aACFC,QAAQ6J,KACH2K,EAAQ,8CAA8CQ,EAAK,KAKpE,OAAOU,EAAgBlB,IAAaA,4CAlIpBjc,SACqB2a,GAAehhB,WAAA,CAAA,CAAAgJ,KAAnDhD,EAAAA,kJAPQkc,EAAmBniB,EAAA,CAH/ByU,EAAAA,WAAW,CACVC,WAAY,SAST/T,EAAA,EAAAsF,EAAAA,aAPQkc,oBCSX,SAAAwB,EACU/O,EACAgP,GADA1kB,KAAA0V,YAAAA,EACA1V,KAAA0kB,aAAAA,SAGVD,EAAAvkB,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOA,KAAK+U,eAAezL,GAASuK,KAClCI,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAAC5C,GAWT,OATEA,GACA1J,EAAQ6N,IAAIhK,SAASiE,EAAKsT,aAAanB,qBAEvCja,EAAUA,EAAQG,MAAM,CACtBsM,WAAY,CACVC,cAAkBhD,EAAMiD,WAAU,IAAIjD,EAAMqC,iBAI3C9S,EAAKsT,OAAOvM,QAKjBmb,EAAAvkB,UAAA6U,eAAR,SAAuBzL,GACrB,OACEX,EAAgBe,oBAAoBhB,EAAkBY,EAAQP,SAEvD/I,KAAK0V,YAAYX,iBAEnB6B,EAAAA,GAAG,gDAhCWvD,UACC4P,yIAHbwB,EAAsB3jB,EAAA,CADlCyU,EAAAA,WAAW,CAAEC,WAAY,UACbiP,oBCNX,SAAAE,EACUjP,EACAgP,GADA1kB,KAAA0V,YAAAA,EACA1V,KAAA0kB,aAAAA,SAGVC,EAAAzkB,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOA,KAAK0V,YAAYtC,eAAeS,KACrCI,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAAC5C,GAaT,OAXEA,GACA5B,EAAKwT,SAAStb,EAAQ6N,OACrB7N,EAAQP,QAAQa,IAAI,mBAErBN,EAAUA,EAAQG,MAAM,CACtBsM,WAAY,CACVC,cAAkBhD,EAAMiD,WAAU,IAAIjD,EAAMqC,iBAK3C9S,EAAKsT,OAAOvM,QAKjBqb,EAAAzkB,UAAA0kB,SAAR,SAAiBzN,GACf,OAAOA,EAAIhK,SAASnN,KAAK0kB,aAAanB,6DA7BjBlQ,UACC4P,yIAHb0B,EAAoB7jB,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACbmP,oBCGX,SAAAE,YAEAA,EAAA3kB,UAAAqd,UAAA,SACEjU,EACA/G,GAEA,IAAMuiB,EAA2B9kB,KAAK8kB,yBAAyBxb,GAK/D,OAJIwb,IACFxb,EAAUX,EAAgBU,axDpBO,sBwDoB+BC,IAG3D/G,EAAKsT,OAAOvM,GAASuK,KAC1B4J,EAAAA,YAAW,SAACnZ,GACV,OAAIwgB,EACKC,EAAAA,MAEFjH,EAAAA,WAAWxZ,QAKdugB,EAAA3kB,UAAA4kB,yBAAV,SAAmCxb,GACjC,IAAM0b,EAAiCrc,EAAgBe,oBxDlCpB,sBwDoCRJ,EAAQP,SACnC,OAAO8L,QAAQmQ,kGA1BNH,EAA0B/jB,EAAA,CADtCyU,EAAAA,WAAW,CAAEC,WAAY,UACbqP,MCRAI,GAA2B,CACtC,CACErf,QAASsf,EAAAA,kBACTC,YAAaV,GACb3e,OAAO,GAET,CACEF,QAASsf,EAAAA,kBACTC,YAAaR,GACb7e,OAAO,GAET,CACEF,QAASsf,EAAAA,kBACTC,YAAa/H,GACbtX,OAAO,GAET,CACEF,QAASsf,EAAAA,kBACTC,YAAaN,GACb/e,OAAO,kBCjBT,SAAAsf,EACY1f,EACA2f,EACAC,GAFAtlB,KAAA0F,OAAAA,EACA1F,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EAqBd,OAlBEF,EAAAllB,UAAAqlB,8BAAA,WACE,IAAMpO,EAAcnX,KAAKslB,oBAAoBlC,eAAe,SACtDtJ,GAAS,IAAIuK,EAAAA,YAChBjb,IACC,YACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAeC,YAE/CiB,IACC,gBACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAeE,gBAE/CgB,IAAI,aAAc,sBAEfL,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAElB,OAAOxlB,KAAKqlB,KAAKI,KAAkBtO,EAAK2C,EAAQ,CAAE/Q,QAAOA,8CArBvCf,SACF0d,EAAAA,kBACezC,MAJtBmC,EAAgCtkB,EAAA,CAD5CyU,EAAAA,cACY6P,oBCMX,SAAAO,EACYN,EACA3f,EACA4f,GAFAtlB,KAAAqlB,KAAAA,EACArlB,KAAA0F,OAAAA,EACA1F,KAAAslB,oBAAAA,EAyDd,OAtDEK,EAAAzlB,UAAA0lB,UAAA,SAAUpS,EAAgBC,GACxB,IAAM0D,EAAMnX,KAAKslB,oBAAoBlC,eAAe,SAC9CtJ,GAAS,IAAIuK,EAAAA,YAChBjb,IAAI,YAAapJ,KAAK0F,OAAOwC,eAAeC,WAC5CiB,IAAI,gBAAiBpJ,KAAK0F,OAAOwC,eAAeE,eAChDgB,IAAI,aAAc,YAClBA,IAAI,WAAYoK,GAChBpK,IAAI,WAAYqK,GACb1K,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGlB,OAAOxlB,KAAKqlB,KACTI,KAAgBtO,EAAK2C,EAAQ,CAAE/Q,QAAOA,IACtC8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGhDqhB,EAAAzlB,UAAAqU,aAAA,SAAaA,GACX,IAAM4C,EAAMnX,KAAKslB,oBAAoBlC,eAAe,SAC9CtJ,GAAS,IAAIuK,EAAAA,YAChBjb,IACC,YACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAeC,YAE/CiB,IACC,gBACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAeE,gBAE/CgB,IAAI,gBAAiByc,UAAUtR,IAC/BnL,IAAI,aAAc,iBACfL,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGlB,OAAOxlB,KAAKqlB,KACTI,KAAgBtO,EAAK2C,EAAQ,CAAE/Q,QAAOA,IACtC8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGhDqhB,EAAAzlB,UAAAuI,OAAA,SAAOwK,GACL,IAAMkE,EAAMnX,KAAKslB,oBAAoBlC,eAAe,UAC9Cra,EAAUJ,EAAgBC,a3DzDG,uB2D2DjC,EACA,IAAIO,EAAAA,YAAY,CACd6M,cAAkB/C,EAAUgD,WAAU,IAAIhD,EAAUoC,aACpDmQ,eAAgB,uCAGd1L,GAAS,IAAIuK,EAAAA,YAAajb,IAAI,QAAS6J,EAAUoC,cACvD,OAAOrV,KAAKqlB,KACTI,KAAStO,EAAK2C,EAAQ,CAAE/Q,QAAOA,IAC/B8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDAzD9BohB,EAAAA,kBACE1d,SACaib,MAJtB0C,EAA8B7kB,EAAA,CAD1CyU,EAAAA,cACYoQ,MCRAG,GAAsB,CACjCV,GACA3P,GACAkQ,GACA9I,KlBTUgC,GAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,WAAA,aACAA,GAAA,cAAA,gBACAA,GAAA,gBAAA,mBAGUkH,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,eAAA,MAGF,IAAAC,GAAA,amBLaC,GAAkC,CAC7C/Z,MAAO,CACLga,YAAa,CACXC,oBANmC,uBAOnCC,sBANqC,yBAOrCrZ,KAAM,GACN0C,YAAa,eCLH4W,GACd5K,EACA/V,GAEA,KACG+V,EAAOpF,cACP3Q,GACAA,EAAOwG,OACPxG,EAAOwG,MAAMga,aACbxgB,EAAOwG,MAAMga,YAAYnZ,MAE1B,OAAO,SAACd,GAAY,OAAAA,GAGtB,IAAMqa,EAAoB5gB,EAAOwG,MAAMga,YAEvC,OAAO,SAACja,GACN,OAAO,SAACC,EAAOC,GACb,IAAMmB,EAAWrB,EAAQC,EAAOC,GAEhC,GAAIA,EAAOpC,OAASwc,EAAAA,MAAQpa,EAAOpC,OAASyc,EAAAA,OAAQ,CAClD,IAAMC,EAmDd,SAA6B/gB,EAAqB+V,GAChD,IAAMiL,EAAoBC,GACxBlL,EAAOlF,aACP7Q,EAAOwG,MAAMga,YAAYC,qBAErBS,EAAsBD,GAC1BlL,EAAOnF,eACP5Q,EAAOwG,MAAMga,YAAYE,uBAG3B,OAAOxhB,EAAU8hB,EAAmBE,GA7DNC,CAAUnhB,EAAQ+V,GAC1C,OAAO7W,EAAU,GAAI0I,EAAUmZ,GAGjC,GAAIta,EAAOpC,OAASwc,EAAAA,KAAM,CAExB,IAQMO,EAA0BtW,GARPK,GACvByV,EAAkBvZ,KAClB8R,EAAAA,gBAAgBkI,eAEgBlW,GAChCyV,EAAkB7W,YAClBoP,EAAAA,gBAAgBkI,eAKhBzZ,GAEF0Z,GACEthB,EAAOwG,MAAMga,YAAYC,oBACzBW,EACArL,EAAOlF,cAIT,IAQM0Q,EAA4BzW,GARPK,GACzByV,EAAkBvZ,KAClB8R,EAAAA,gBAAgBqI,iBAEkBrW,GAClCyV,EAAkB7W,YAClBoP,EAAAA,gBAAgBqI,iBAKhB5Z,GAEF0Z,GACEthB,EAAOwG,MAAMga,YAAYE,sBACzBa,EACAxL,EAAOnF,gBAIX,OAAOhJ,IAwDb,SAAgB0Z,GACdG,EACA9kB,EACA+kB,IAEKC,GAAMD,IAAY/kB,GACrB+kB,EAAQE,QAAQH,EAAWle,KAAKC,UAAU7G,IAI9C,SAAgBskB,GAAgBS,EAAkBnmB,GAChD,IAAIomB,GAAMD,GAAV,CAIA,IAAMG,EAAeH,EAAQI,QAAQvmB,GACrC,GAAKsmB,EAIL,OAAOte,KAAKY,MAAM0d,IAGpB,SAAgBF,GAAMD,GACpB,OAAQvS,QAAQuS,GC7IX,IAAMK,GAA2BC,EAAAA,aAAqB,YAE7D,SAAgBC,GACdC,EACAC,EACAniB,GAEA,GACEmiB,GACAniB,GACAA,EAAOwG,OACPxG,EAAOwG,MAAM4b,aACbpiB,EAAOwG,MAAM4b,YAAY/a,KACzB,CACA,GAAIgb,EAAAA,kBAAkBH,GACpB,OAqCN,SACEC,EACA9a,GAEA,IAAMib,EAAoBnX,GACxB9D,EACAgZ,EAAAA,kBAAkBkC,gBAGpB,OAAO,SAAUhc,GACf,OAAO,SAAUC,EAAOC,GACtB,GAAIA,EAAOpC,OAASwc,EAAAA,KAAM,CACnBra,IACHA,EAAQD,EAAQC,EAAOC,IAIzB,IAAM+b,EAAahc,EAAoC,KAIvD,KAFEgc,GAAaA,EAAUjV,WAAaiV,EAAUjV,UAAUD,QAEvC6U,EAAcM,OAAOV,IAAS,CAC/C,IAAMW,EAAQP,EAAcje,IAAI6d,GAAQ,IAOxCvb,EAAQtH,EAAU,GAAIsH,EANQsE,GAC5BwX,EACA,GACAI,IAKJ,OAAOlc,EAET,OAAOD,EAAQC,EAAOC,KAtEfkc,CACLR,EACAniB,EAAOwG,MAAM4b,YAAY/a,MAEtB,GAAIub,EAAAA,iBAAiBV,GAC1B,OAUN,SACEC,EACA9a,GAEA,IAAMib,EAAoBnX,GACxB9D,EACAgZ,EAAAA,kBAAkBkC,gBAGpB,OAAO,SAAUhc,GACf,OAAO,SAAUC,EAAOC,GACtB,IAAMmB,EAAWrB,EAAQC,EAAOC,GAChC,GAAImB,EAAU,CACZ,IAAMib,EAAa/X,GAAcwX,EAAmB,GAAI1a,GACxDua,EAAcze,IAAIqe,GAAQc,GAG5B,OAAOjb,IA3BAkb,CACLX,EACAniB,EAAOwG,MAAM4b,YAAY/a,MAK/B,OAAO,SAACd,GAAY,OAAAA,OC3BTwc,GAA8B,IAAInjB,EAAAA,eAC7C,4BAEWojB,GAA4B,IAAIpjB,EAAAA,eAC3C,0BAMqCqjB,GASvBtC,GAZHuC,GAAgC,CAC3C,CACEhjB,QAAS6iB,GACTviB,WAAYyhB,GACZ1hB,KAAM,CACJ4iB,EAAAA,YACA,CAAC,IAAI9hB,EAAAA,SAAY+hB,EAAAA,eACjB,CAAC,IAAI/hB,EAAAA,SAAY1B,KAGrB,CACEO,QAAS8iB,GACTxiB,WAAUyiB,GACV1iB,KAAM,CAACiQ,GAAW,CAAC,IAAInP,EAAAA,SAAY1B,KAErC,CACEO,QAASmjB,EAAAA,cACT5D,YAAasD,GACb3iB,OAAO,GAET,CACEF,QAASmjB,EAAAA,cACT5D,YAAauD,GACb5iB,OAAO,kBCnCX,SAAAkjB,WAWA,SAXaA,EACJA,EAAAliB,QAAP,WACE,MAAO,CACLJ,SAAUuiB,EACVriB,UAASrC,EACJqkB,GAAiB,CACpBziB,EAAqB8f,IACrB,CAAErgB,QAASogB,GAAab,YAAa9f,OAPhC2jB,EAAWC,EAAAnoB,EAAA,CADvBkG,EAAAA,SAAS,KACGgiB,MCHAE,GAAgB,CAC3B5kB,MAAO,iBAGH6kB,GAAmB,WACvB,IAAMC,EAAO,IAAIC,QACjB,OAAO,SAACC,EAAWjnB,GACjB,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,CAC/C,GAAI+mB,EAAKG,IAAIlnB,GACX,OAEF+mB,EAAKI,IAAInnB,GAEX,OAAOA,IAIX,SAAgBonB,GACdnlB,GAEA,GAAIA,aAAiBolB,MACnB,MAAO,CACLC,QAASrlB,EAAMqlB,QACf5f,KAAMzF,EAAMslB,KACZC,OAAQvlB,EAAMwlB,OAIlB,GAAIxlB,aAAiBqZ,EAAAA,kBAAmB,CACtC,IAAIoM,EAAoBzlB,EAAMA,MAK9B,OAJIG,EAASH,EAAMA,SACjBylB,EAAoB9gB,KAAKC,UAAU5E,EAAMA,MAAO6kB,OAG3C,CACLQ,QAASrlB,EAAMqlB,QACfrlB,MAAOylB,EACPnM,OAAQtZ,EAAMsZ,OACdoM,WAAY1lB,EAAM0lB,WAClB7S,IAAK7S,EAAM6S,KAIf,OAAO1S,EAASH,GAAS4kB,GAAgB5kB,oBCfzC,SAAA2lB,EACUC,EACAC,GAFV,IAAA/Y,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAmqB,iCAAAA,EAtBVnqB,KAAAoqB,iBAEIpqB,KAAKkqB,SAASrW,KAChBwW,EAAAA,OlDX6B,6BkDY7BC,EAAAA,YAAW,WACT,OAAOlZ,EAAK+Y,iCACT5E,gCACA1R,KACCC,EAAAA,KAAI,SAACd,GACH,OAAO,IAAIuX,GAAmCvX,MAEhDyK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI4T,GAAgCf,GAAsBnlB,aAWxE,gDAHsBmmB,EAAAA,eACwBrF,MAtB5CtkB,EAAA,CADC4pB,EAAAA,iDADUT,EAAiBnpB,EAAA,CAD7ByU,EAAAA,cACY0U,oBCqEX,SAAAU,EACUT,EACAU,GAFV,IAAAxZ,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4qB,iBAAAA,EApEV5qB,KAAA6qB,eAA0D7qB,KAAKkqB,SAASrW,KACtEwW,EAAAA,OAAOS,IACPhX,EAAAA,KAAI,SAAC3H,GAAsC,OAAAA,EAAOR,WAClDof,EAAAA,UAAS,SAAC7lB,OAAEsO,EAAAtO,EAAAsO,OAAQC,EAAAvO,EAAAuO,SAClB,OAAArC,EAAKwZ,iBAAiBhF,UAAUpS,EAAQC,GAAUI,KAChDC,EAAAA,KAAI,SAACd,GACH,IAAMgY,EAAO,IAAI/lB,KAIjB,OAHA+lB,EAAKC,WAAWD,EAAKE,aAAelY,EAAMmY,YAC1CnY,EAAMoY,gBAAkBJ,EAAKK,SAC7BrY,EAAMQ,O3CtBmB,U2CuBlB,IAAIkB,GAAiC1B,MAE9CyK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI0U,GAA8B7B,GAAsBnlB,aAOnEtE,KAAAurB,OAAwCvrB,KAAKkqB,SAASrW,KACpDwW,EAAAA,OAAOmB,IACP1X,EAAAA,KAAI,WAAM,OAAA,IAAI2X,OAIhBzrB,KAAA0rB,kBAEI1rB,KAAKkqB,SAASrW,KAChBwW,EAAAA,OhDpC8B,6BgDqC9BvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrD2e,EAAAA,YAAW,SAACplB,OAAEqP,EAAArP,EAAAqP,aACZ,OAAOnD,EAAKwZ,iBAAiBrW,aAAaA,GAAcV,KACtDC,EAAAA,KACE,SAACd,GACC,IAAMgY,EAAO,IAAI/lB,KAGjB,OAFA+lB,EAAKC,WAAWD,EAAKE,aAAelY,EAAMmY,YAC1CnY,EAAMoY,gBAAkBJ,EAAKK,SACtB,IAAIM,GAAoC3Y,KAEjDyK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIgV,GAAiCnC,GAAsBnlB,cASvEtE,KAAA6rB,iBAEI7rB,KAAKkqB,SAASrW,KAChBwW,EAAAA,OhD1D6B,4BgD2D7BvW,EAAAA,KAAI,SAAC3H,GACH,OAAOA,EAAOR,WAEhBof,EAAAA,UAAS,SAAC9X,GACR,OAAO7B,EAAKwZ,iBAAiBniB,OAAOwK,GAAWY,KAC7CC,EAAAA,KAAI,WAAM,OAAA,IAAIgY,GAAmC7Y,MACjDwK,EAAAA,YAAW,SAACnZ,GAAU,OAAAsS,EAAAA,GAAG,IAAImV,GAAgCznB,YASrE,gDAHsBmmB,EAAAA,eACQ9E,MApE5B7kB,EAAA,CADC4pB,EAAAA,+CAqBD5pB,EAAA,CADC4pB,EAAAA,uCAOD5pB,EAAA,CADC4pB,EAAAA,kDA0BD5pB,EAAA,CADC4pB,EAAAA,iDApDUC,EAAgB7pB,EAAA,CAD5ByU,EAAAA,cACYoV,MCRAqB,GAAiB,CAACrB,GAAkBV,ICCpCgC,GAAqC,GAElD,SAAgBhgB,GACdC,EACAC,GAIA,YALA,IAAAD,IAAAA,EAAA+f,IAKQ9f,EAAOpC,MACb,KAAK+gB,GACL,IlDR8B,4BkDS5B,OAAA1qB,EAAA,GACK8L,GAIP,KAAKsf,GACL,IlDbsC,oCkDcpC,OAAAprB,EAAAA,EAAA,GACK8L,GACAC,EAAOR,SAId,IlDxBgC,8BkDyBhC,IlDtBmC,iCkDuBjC,OAAAvL,EAAA,GACK8L,GAIT,OAAOA,WCrBOggB,KACd,MAAO,CACLjZ,UAAWkZ,EAAAA,gBAAgB,CAAEnZ,MAAOoZ,KACpCzZ,YAAa3G,GrDbgB,6BqDiBjC,IAAaqgB,GAER,IAAI/mB,EAAAA,eAA4C,gBAExCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgBK,GACdtgB,GAEA,OAAO,SAAUC,EAAOC,GAOtB,OANIA,EAAOpC,OAASyiB,KAClBtgB,EAAK9L,EAAAA,EAAA,GACA8L,GAAK,CACR+G,eAAWlH,KAGRE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAACF,aChCjCG,KAgBd,MAd4B,CAC1BxgB,MAAO,CACLga,YAAa,CACXnZ,KAAM,CACJ4f,oCAAqC9N,EAAAA,gBAAgBkI,cACrD6F,kCAAmC/N,EAAAA,gBAAgBkI,cACnD8F,kCAAmChO,EAAAA,gBAAgBkI,cACnD+F,uCAAwCjO,EAAAA,gBAAgBkI,cACxDgG,6BAA8BlO,EAAAA,gBAAgBkI,cAC9CiG,8BAA+BnO,EAAAA,gBAAgBkI,kBAqBzD,ICrCYkG,GCSAC,GCRAC,GAkEAC,GCtDAC,GCRAC,GCoCAC,GAMAC,GAuIAC,GNjJZC,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAe5sB,EAAA,CAb3BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACA3E,GACA4E,EAAAA,YAAYC,WtDjCY,OsDiCaxB,GAAc,CAAEI,aAAYA,KACjEqB,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4BsmB,IAC5BJ,OAGSoB,GAAb,iBO/BA,SAAAK,WAYA,SAZaA,EACJA,EAAAjnB,QAAP,WACE,MAAO,CACLJ,SAAUsnB,EACVpnB,UAASrC,EAAA,CACP4B,EAAqB8B,IAClBgd,GACAa,GAAY,CACf,CAAElgB,QAASoC,EAAYmd,YAAa9f,OAR/B0oB,EAAUC,EAAAltB,EAAA,CAHtBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,iBAAkBD,OAE/BK,oBCOX,SAAAE,EAAoBzV,EAAiCvB,GAAjCjX,KAAAwY,QAAAA,EAAiCxY,KAAAiX,OAAAA,EAG7CjX,KAAAkuB,YAAc,IAAIC,WAM1BF,EAAA/tB,UAAAkuB,SAAA,gBAC2BriB,IAArB/L,KAAKquB,YACPruB,KAAKwY,QAAQuD,GAAG,KAEhB/b,KAAKwY,QAAQ2D,QAAQnc,KAAKquB,aAE5BruB,KAAKquB,iBAActiB,EACnB/L,KAAKsuB,6BAA0BviB,GAGjCkiB,EAAA/tB,UAAAquB,gBAAA,WACQ,IAAArpB,EAAAlF,KAAAwuB,uBAAErX,EAAAjS,EAAAiS,IAAKsX,EAAAvpB,EAAAupB,aACbzuB,KAAKsuB,wBAA0B,CAAEnX,IAAGA,EAAEsX,aAAYA,GAClDzuB,KAAKquB,YAAclX,GAGrB8W,EAAA/tB,UAAAwuB,mBAAA,WACQ,IAAAxpB,EAAAlF,KAAAwuB,uBAAErX,EAAAjS,EAAAiS,IAAKwX,EAAAzpB,EAAAypB,WAAYF,EAAAvpB,EAAAupB,aAEzBzuB,KAAKkuB,YAAY1E,IAAIrS,GAGhBnX,KAAKkuB,YAAY3E,IAAIoF,MAIrB3uB,KAAKsuB,yBACNtuB,KAAKsuB,wBAAwBG,aAAeA,EAAe,KAE3DzuB,KAAKquB,YAAcM,EACnB3uB,KAAKsuB,6BAA0BviB,IAK7BkiB,EAAA/tB,UAAAsuB,qBAAR,WAKE,IAAMG,EAAa3uB,KAAKiX,OAAOE,IACzByX,EAAa5uB,KAAKiX,OAAOuX,uBACzBrX,EAAMnX,KAAKiX,OAAO4X,aAAaD,EAAWE,UAChD,MAAO,CACLL,aAAcG,EAAW5kB,GACzBmN,IAAGA,EACHwX,WAAUA,6CAvDenT,UAAgC1D,EAAAA,mJAblDmW,EAAmBntB,EAAA,CAH/ByU,EAAAA,WAAW,CACVC,WAAY,UAEDyY,oBCMX,SAAAc,EACYjS,EACApH,EACAsZ,EACA/X,GAHAjX,KAAA8c,eAAAA,EACA9c,KAAA0V,YAAAA,EACA1V,KAAAgvB,oBAAAA,EACAhvB,KAAAiX,OAAAA,SAGZ8X,EAAA7uB,UAAA+uB,YAAA,WAAA,IAAA7d,EAAApR,KACE,OAAOA,KAAK0V,YAAYtC,eAAeS,KACrCC,EAAAA,KAAI,SAACd,GAKH,OAJKA,EAAMqC,eACTjE,EAAK4d,oBAAoBT,kBACzBnd,EAAK0L,eAAef,GAAG,CAAEpC,QAAS,aAE3B3G,EAAMqC,2DAbOmG,UACHnI,UACQ4a,UACbnW,EAAAA,uLALTiX,EAASjuB,EAAA,CAHrByU,EAAAA,WAAW,CACVC,WAAY,UAEDuZ,oBCAX,SAAAG,EACYpS,EACApH,EACFsZ,GAFEhvB,KAAA8c,eAAAA,EACA9c,KAAA0V,YAAAA,EACF1V,KAAAgvB,oBAAAA,SAGVE,EAAAhvB,UAAA+uB,YAAA,WAAA,IAAA7d,EAAApR,KAIE,OAHAA,KAAKgvB,oBAAoBN,qBAGlB1uB,KAAK0V,YAAYtC,eAAeS,KACrCC,EAAAA,KAAI,SAACd,GAIH,OAHIA,EAAMqC,cACRjE,EAAK0L,eAAef,GAAG,CAAEpC,QAAS,UAE5B3G,EAAMqC,2DAdQmG,UACHnI,UACM4a,2JAJpBiB,EAAYpuB,EAAA,CAHxByU,EAAAA,WAAW,CACVC,WAAY,UAED0Z,OTJDjC,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,QAAA,UACAA,GAAA,SAAA,YCOUC,GAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,WAAA,OACAA,GAAA,SAAA,WACAA,GAAA,MAAA,SCXUC,GAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAClB,aAAA,cACAA,GAAA,aAAA,cACAA,GAAA,cAAA,eACAA,GAAA,aAAA,eA8DUC,GAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KACjC,KAAA,OACAA,GAAA,KAAA,OACAA,GAAA,QAAA,WACAA,GAAA,SAAA,YC1DUC,GAAAA,EAAAA,2BAAAA,EAAAA,yBAAwB,KAClC,MAAA,QACAA,GAAA,UAAA,aCVUC,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,QAAA,UACAA,GAAA,QAAA,WCkCUC,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,KAAA,4BACAA,GAAA,MAAA,6BACAA,GAAA,MAAA,kCAGUC,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,IAAA,MACAA,GAAA,KAAA,QAqIUC,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,MAAA,QACAA,GAAA,UAAA,YACAA,GAAA,QAAA,UACAA,GAAA,gBAAA,kBK/KU0B,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,cAAA,oBCkCUC,GCnDCC,GAAqB,0CC4BlCC,GAAA,SAAAjoB,GAEE,SAAAioB,IAAA,IAAAle,EACE/J,EAAAzG,KAAAZ,KAAMqvB,KAAmBrvB,YAFlBoR,EAAArH,KAzBT,0DA6BF,OALmDjK,EAAAwvB,EAAAjoB,GAKnDioB,EALA,CAAmDje,GAOnDke,GAAA,SAAAloB,GAEE,SAAAkoB,EAAmB5jB,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMqvB,KAAmBrvB,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9BT,kEAkCF,OAL0DjK,EAAAyvB,EAAAloB,GAK1DkoB,EALA,CAA0D9d,IAM1D+d,GAAA,SAAAnoB,GAEE,SAAAmoB,EAAY7jB,GAAZ,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMqvB,GAAoB1jB,IAAQ3L,YAF3BoR,EAAArH,KAlCT,+DAsCF,OALuDjK,EAAA0vB,EAAAnoB,GAKvDmoB,EALA,CAAuDje,GAOvDke,GAAA,SAAApoB,GAEE,SAAAooB,IAAA,IAAAre,EACE/J,EAAAzG,KAAAZ,KAAMqvB,KAAmBrvB,YAFlBoR,EAAArH,KAvCT,gEA2CF,OALwDjK,EAAA2vB,EAAApoB,GAKxDooB,EALA,CAAwDC,IAOxDC,GAEE,WADS3vB,KAAA+J,KA3CT,mDA+CF6lB,GAEE,SAAmBC,GAAA7vB,KAAA6vB,aAAAA,EADV7vB,KAAA+J,KA9CT,8CAkDF+lB,GAEE,SAAmBnkB,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAjDT,+CAqDFgmB,GAEE,SAAmBF,GAAA7vB,KAAA6vB,aAAAA,EADV7vB,KAAA+J,KApDT,+CAwDFimB,GAEE,SAAmBH,GAAA7vB,KAAA6vB,aAAAA,EADV7vB,KAAA+J,KAvDT,mDA2DFkmB,GAEE,SAAmBC,GAAAlwB,KAAAkwB,UAAAA,EADVlwB,KAAA+J,KAzDT,mEA6DFomB,GAEE,SAAmBC,GAAApwB,KAAAowB,QAAAA,EADVpwB,KAAA+J,KA5DT,8HAtBA,iGAEA,sGAEA,oGAEA,yFAGA,wEAEA,oEAEA,qEAEA,yEAEA,6FAGA,6GAEA,oaCvBWsmB,GAGT3d,EAAAA,sBFP4C,yBGOH,SAACxG,GAAU,OAAAA,EAAMokB,WAHjDC,GAGT1d,EAAAA,eAAewd,GAAwBG,IAE9BC,GAGT5d,EAAAA,eACF0d,GACAG,IAGWC,GAGT9d,EAAAA,eACF0d,GACAK,IAGWC,GAGThe,EAAAA,eACF0d,GACAO,IAGWC,GAGTle,EAAAA,eACF0d,GACAS,IAGWC,GAA8B,SACzCpB,GAEA,OAAOhd,EAAAA,eAAe4d,IAAmC,SAACH,GACxD,OAAOA,EACHA,EAAUjW,MAAK,SAAC6W,GAAa,OAAAA,EAASlnB,KAAO6lB,KAC7C,SC9CKsB,GAGTte,EAAAA,eAAewd,IAA0B,SAACnkB,GAAU,OAAAA,EAAMklB,GAAGhB,cAO/D,SAAClkB,GAAU,OAAAA,EAAMklB,GAAGC,iBALTC,GAGTze,EAAAA,eACFwd,GAAwBkB,ICRbC,GAGT3e,EAAAA,eAAewd,IAA0B,SAACnkB,GAAU,OAAAA,EAAMulB,YAEjDC,GAAoC,SAC/C7B,GAEA,OAAAhd,EAAAA,eAAe2e,IAAsB,SAACC,GACpC,OAAAA,EAASpX,MAAK,SAACsX,GAAY,OAAAA,EAAQ9B,eAAiBA,4cCEtD,SAAA+B,EACYte,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZkc,EAAA1xB,UAAA2xB,cAAA,WACE7xB,KAAKsT,MAAMI,SACT,IAAIoe,KAaRF,EAAA1xB,UAAA6xB,aAAA,SAAaC,GAAb,IAAA5gB,EAAApR,KACE,YADW,IAAAgyB,IAAAA,GAAA,GACJC,EAAAA,KACL,WAAM,OAAAD,IACNhyB,KAAKsT,MAAMO,KACTM,EAAAA,OAAO+d,IACPC,EAAAA,eAAenyB,KAAKoyB,2BACpBthB,EAAAA,QAAO,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAACC,EAAA,GAAyB,OAAbA,EAAA,MACrBgY,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAWA,EAAA,GACV0P,QAAQyb,IACXlf,EAAKygB,mBAGT/gB,EAAAA,QAAO,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAWA,EAAA,GAAc,OAAA0P,QAAQyb,MAC1Cxc,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAWA,EAAA,GAAc,OAAAmrB,MAEjCtwB,KAAKsT,MAAMO,KACTM,EAAAA,OAAO+d,OASbN,EAAA1xB,UAAAmyB,YAAA,SAAYxC,GACV,OAAO7vB,KAAKsT,MAAMO,KAChBM,EAAAA,OACEme,GAAuDzC,MAQ7D+B,EAAA1xB,UAAAkyB,wBAAA,WACE,OAAOpyB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOoe,MAOXX,EAAA1xB,UAAAsyB,wBAAA,WACE,OAAOxyB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOse,MAOXb,EAAA1xB,UAAAwyB,sBAAA,WACE,OAAO1yB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOwe,MAOXf,EAAA1xB,UAAA0yB,wBAAA,WACE5yB,KAAKsT,MAAMI,SACT,IAAImf,KAORjB,EAAA1xB,UAAA4yB,YAAA,WACE,OAAO9yB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO4e,MAOXnB,EAAA1xB,UAAA8yB,YAAA,SAAYvB,GACV,OAAOzxB,KAAKsT,MAAMI,SAChB,IAAIuf,GAA8CxB,KAWtDG,EAAA1xB,UAAAgzB,WAAA,SAAWC,GAAX,IAAA/hB,EAAApR,KACE,OAAOA,KAAK0V,YAAYN,iBAAiBvB,KACvC/C,EAAAA,QAAO,SAACsiB,GAAkB,OAACA,KAC3BjW,EAAAA,KAAI,WAAM,OAAA/L,EAAK2gB,cAAa,MAC5Bnc,EAAAA,WAAU,WACR,OAAAxE,EAAKkC,MAAMO,KACTM,EAAAA,OACEkf,GACEF,UAYZvB,EAAA1xB,UAAAozB,YAAA,SAAYzD,GACV7vB,KAAKsT,MAAMI,SACT,IAAI6f,GAA8C1D,KAOtD+B,EAAA1xB,UAAAszB,gBAAA,WAAA,IAAApiB,EAAApR,KACE,OAAOA,KAAK+xB,cAAa,GAAMle,KAC7BsJ,EAAAA,KAAI,SAACmT,GACH,OAAAA,EAAUvM,SAAQ,SAACmN,GAAa,OAAA9f,EAAKkiB,YAAYpC,EAASlnB,YAShE4nB,EAAA1xB,UAAAuzB,eAAA,SAAe9B,GACb,OAAOA,GAAWA,EAAQ+B,eAAiBrG,EAAAA,yBAAyBsG,OAOtE/B,EAAA1xB,UAAA0zB,gBAAA,SAAgB/D,GACd7vB,KAAKsT,MAAMI,SACT,IAAImgB,GAAkDhE,KAO1D+B,EAAA1xB,UAAA4zB,oBAAA,WAAA,IAAA1iB,EAAApR,KACE,OAAOA,KAAK+xB,cAAa,GAAMle,KAC7BsJ,EAAAA,KAAI,SAACmT,GACH,OAAAA,EAAUvM,SAAQ,SAACmN,GAAa,OAAA9f,EAAKwiB,gBAAgB1C,EAASlnB,YASpE4nB,EAAA1xB,UAAA6zB,mBAAA,SAAmBpC,GACjB,OACEA,GAAWA,EAAQ+B,eAAiBrG,EAAAA,yBAAyB2G,WAQjEpC,EAAA1xB,UAAA+zB,sBAAA,SAAsB/D,GACpBlwB,KAAKsT,MAAMI,SACT,IAAIwgB,GACFhE,IAGAA,GACFlwB,KAAKm0B,wBAAuB,IAOhCvC,EAAA1xB,UAAAk0B,kBAAA,WACE,OAAOp0B,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOkgB,MAQXzC,EAAA1xB,UAAAo0B,oBAAA,WAAA,IAAAljB,EAAApR,KACE,OAAOA,KAAK+xB,cAAa,GAAMle,KAC7B+B,EAAAA,WAAU,WACR,OAAAxE,EAAKkC,MAAMO,KACTM,EAAAA,OAAOogB,UAUf3C,EAAA1xB,UAAAi0B,uBAAA,SAAuB/D,GACrBpwB,KAAKsT,MAAMI,SACT,IAAI8gB,GACFpE,KASNwB,EAAA1xB,UAAAu0B,gBAAA,WACE,OAAOC,EAAAA,cAAc,CACnB10B,KAAKo0B,oBACLp0B,KAAKs0B,wBACJzgB,KAAKC,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAACgrB,EAAA/qB,EAAA,GAAWirB,EAAAjrB,EAAA,GAAa,OAAC+qB,GAAaE,OAQtDwB,EAAA1xB,UAAAy0B,uBAAA,SACEC,EACAC,GAEA,GAAIA,EAAal0B,SAAWi0B,EAAiBj0B,OAC3C,OAAO,EAGT,IAAK,IAAIH,EAAI,EAAGA,EAAIq0B,EAAal0B,OAAQH,IAAK,CAC5C,IAAMs0B,EAAcD,EAAar0B,GAC3Bu0B,EAAkBH,EAAiBp0B,GACzC,GAAIs0B,EAAYE,UAAYD,EAAgBC,QAC1C,OAAO,EAIX,OAAO,GAOTpD,EAAA1xB,UAAA+0B,mBAAA,SAAmBxD,GACjB,IAAKA,EACH,MAAO,GAET,IAAMyD,EAAajsB,KAAKC,UAAUuoB,GAElC,OADgB7O,mBAAmBsS,IAQrCtD,EAAA1xB,UAAAi1B,qBAAA,SAAqBC,GACnB,IAAMC,EAAUtS,mBAAmBqS,GAEnC,OADqBnsB,KAAKY,MAAMwrB,IAYlCzD,EAAA1xB,UAAAo1B,gBAAA,SACEC,EACAC,GAIA,OAFuBx1B,KAAKi1B,mBAAmBM,KACnBv1B,KAAKi1B,mBAAmBO,6CAzTnClgB,EAAAA,aACMjC,8IAHdue,EAAwB9wB,EAAA,CADpCyU,EAAAA,WAAW,CAAEC,WAAY,UACboc,SCTb,aCJa6D,GAAiC,CAC5CptB,QAAS,CACPC,IAAK,CACHC,UAAW,CACTmtB,kBAAmB,kECJ3B,SAAAC,mDASA,OATwC71B,EAAA61B,EAAAtuB,GASxCsuB,GATwCvuB,GCE3BwuB,GAAkC,IAAItwB,EAAAA,eAEjD,8CCqBA,SAAAuwB,EAAsBC,GAAA91B,KAAA81B,SAAAA,EAEd91B,KAAA+1B,WAGJ,IAAIC,WAEAH,EAAA31B,UAAA+1B,cAAR,SACEC,GAEA,IAAKl2B,KAAK+1B,WAAWxM,IAAI2M,GAAiB,CACxC,IAAMH,EAAa/1B,KAAK81B,SAASlsB,IAC/BssB,EACA,IAEGv2B,MAAMgF,QAAQoxB,IACjBlnB,QAAQ6J,KACN,iEACAwd,EAAe5R,YAGnBtkB,KAAK+1B,WAAW3sB,IAAI8sB,EAAgBH,GAGtC,OAAO/1B,KAAK+1B,WAAWnsB,IAAIssB,IAM7BL,EAAA31B,UAAAi2B,cAAA,SACED,GAEA,IAAMH,EAAa/1B,KAAKi2B,cAAcC,GACtC,OAAOv2B,MAAMgF,QAAQoxB,IAAeA,EAAWp1B,OAAS,GAM1Dk1B,EAAA31B,UAAAk2B,SAAA,SACEF,GADF,IAAA9kB,EAAApR,KAGE,OAAIA,KAAKm2B,cAAcD,GACdpiB,EAAAA,KAAI,SAACuiB,GAAa,OAAAjlB,EAAKklB,cAAcD,EAAOH,MAE5C,SAACK,GAAgC,OAAAA,IAO5CV,EAAA31B,UAAAs2B,aAAA,SACEN,GADF,IAAA9kB,EAAApR,KAGE,OAAIA,KAAKm2B,cAAcD,GACdpiB,EAAAA,KAAI,SAACuiB,GAAe,OAAAjlB,EAAKqlB,YAAYJ,EAAOH,MAE5C,SAACK,GAAkC,OAAAA,IAO9CV,EAAA31B,UAAAw2B,QAAA,SAAc3xB,EAAWmxB,GACvB,OAAIl2B,KAAKm2B,cAAcD,GACdl2B,KAAKs2B,cAAcvxB,EAAQmxB,GAE3BnxB,GAOX8wB,EAAA31B,UAAAu2B,YAAA,SACE5xB,EACAqxB,GAFF,IAAA9kB,EAAApR,KAIE,OAAIA,KAAKm2B,cAAcD,IAAmBv2B,MAAMgF,QAAQE,GAC/CA,EAAQiP,KAAI,SAAC/O,GAClB,OAAAqM,EAAKklB,cAAcvxB,EAAQmxB,MAGtBrxB,GAIHgxB,EAAA31B,UAAAo2B,cAAR,SACEvxB,EACAmxB,GAEA,OAAOl2B,KAAKi2B,cAAcC,GAAgBlpB,QAAO,SAAChM,EAAQ21B,GACxD,OAAOA,EAAUD,QAAQ3xB,EAAQ/D,UAChC+K,6CAhG2B6qB,EAAAA,qIADrBf,EAAgB/0B,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDqgB,oBCJX,SAAAgB,EACYxR,EACAC,EACAwR,EACApxB,EACAwd,GALZ,IAAA9R,EAAApR,KACYA,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EACA92B,KAAA0F,OAAAA,EACA1F,KAAAkjB,gBAAAA,EAEVljB,KAAKkjB,gBACFlB,YACA9N,WAAU,SAAC7R,GAAU,OAAC+O,EAAKiR,eAAiBhgB,KA6BnD,OA1BEw0B,EAAA32B,UAAA62B,eAAA,SACEC,GAEA,IAAMjuB,EAAUJ,EAAgBC,ajGlCY,wBiGoC1C,EACA,IAAIO,EAAAA,aAEF2Q,GAAqB,IAAIuK,EAAAA,YAC1Bjb,IAAI,WAAYpJ,KAAKqiB,gBACrBjZ,IAAI,OAAQ,kBAEiB,IAArB4tB,EAAe,QACxBld,EAASA,EAAO1Q,IAAI,QAAS,GAAK4tB,EAAQhb,aAGT,IAAxBgb,EAAkB,WAC3Bld,EAASA,EAAO1Q,IAAI,WAAY,GAAK4tB,EAAQC,WAG/C,IAAM9f,EAAMnX,KAAKslB,oBAAoBlC,eAAe,qBAEpD,OAAOpjB,KAAKqlB,KACTzb,IAAwBuN,EAAK,CAAEpO,QAAOA,EAAE+Q,OAAMA,IAC9CjG,KAAK7T,KAAK82B,iBAAiBV,SAASR,+CAnCvBlQ,EAAAA,kBACezC,UACH4S,UACVF,UACS5T,MARlB8U,EAAa/1B,EAAA,CADzByU,EAAAA,cACYshB,oBCDb,SAAAK,KAA2B,OAAdA,EAAYp2B,EAAA,CAVxBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACTT,EAAqBsvB,IACrB,CACE7vB,QAASuxB,GACTC,SAAUP,QAIHK,SCfb,aCCaG,GAAkB,IAAI/xB,EAAAA,eACjC,qBCFF,gBCAA,gBCDA,aCEagyB,GAAqB,IAAIhyB,EAAAA,eACpC,mCCMA,SAAAiyB,EAAoBZ,GAAA32B,KAAA22B,UAAAA,SAEpBY,EAAAr3B,UAAAw2B,QAAA,SAAQ3xB,EAAkB/D,GAA1B,IAAAoQ,EAAApR,KAaE,YAZe+L,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAGbA,GAAUA,EAAOyyB,UACnBx2B,EAAOw2B,QAAUzyB,EAAOyyB,QAAQ1jB,KAAI,SAAC2jB,GAAU,OAAAr3B,EAAAA,EAAA,GAC1Cq3B,GAAK,CACRC,QAAStmB,EAAKulB,UAAUD,QAAQe,EAAMC,QAASJ,UAInDt3B,KAAK23B,0BAA0B5yB,EAAQ/D,GAChCA,GAMDu2B,EAAAr3B,UAAAy3B,0BAAR,SAAkC5yB,EAAa/D,GACzC+D,GAAUA,EAAO6yB,2BACnB52B,EAAO42B,yBAA2B53B,KAAK63B,qBACrC9yB,EAAO6yB,2BAIP7yB,GAAUA,EAAO+yB,6BACnB92B,EAAO82B,2BAA6B93B,KAAK63B,qBACvC9yB,EAAO+yB,6BAIP/yB,GAAUA,EAAOgzB,yBACnB/2B,EAAO+2B,uBAAyB/3B,KAAK63B,qBACnC9yB,EAAOgzB,yBAIPhzB,GAAUA,EAAOizB,2BACnBh3B,EAAOg3B,yBAA2Bh4B,KAAK63B,qBACrC9yB,EAAOizB,4BAKLT,EAAAr3B,UAAA23B,qBAAR,SAA6BI,GAC3B,OAAOA,EAASnnB,QAAO,SAAClR,EAAGY,EAAG03B,GAE5B,OAAO13B,IADG03B,EAAEpkB,KAAI,SAACqkB,GAAO,OAAAlvB,KAAKC,UAAUivB,MACxBC,QAAQnvB,KAAKC,UAAUtJ,iDAlDXi2B,uHADpB0B,EAAiBz2B,EAAA,CAD7ByU,EAAAA,WAAW,CAAEC,WAAY,UACb+hB,MCRAc,GAAkC,CAC7ChwB,QAAS,CACPC,IAAK,CACHC,UAAW,CAET+vB,MACE,wjBACFC,KACE,6iBACFC,WACE,miBACFC,WAAY,0CACZC,cAAe,yDACfC,cAAe,yDACfC,SAAU,wCACVC,WAAY,kCACZC,YAAa,2CACbC,SAAU,2CCfLC,GAA+B,IAAI1zB,EAAAA,eAE9C,4CCKA,SAAA2zB,EACY5T,EACAC,EACAwR,GAFA92B,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EAyEd,OAtESmC,EAAA/4B,UAAAspB,IAAP,SACEhW,EACA0lB,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAAA,GAEA,IAAMC,EAAQpwB,KAAKC,UAAU,IAEvBH,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGZrO,EAAMnX,KAAKslB,oBAAoB5B,OACnC,aACA,CACElQ,OAAMA,EACN0lB,OAAMA,GAER,CAAEI,KAAMH,EAAaI,IAAKH,IAG5B,OAAOp5B,KAAKqlB,KACTI,KAAuBtO,EAAKkiB,EAAO,CAAEtwB,QAAOA,IAC5C8K,KAAK7T,KAAK82B,iBAAiBV,SAAS4C,MAGlCC,EAAA/4B,UAAAs5B,OAAP,SACEhmB,EACA0lB,EACAO,EACAF,EACAG,GAEA,IAAI5f,EAAS,GACT4f,IACF5f,EAAS,CAAE4f,YAAWA,IAGxB,IAAM3wB,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGZrO,EAAMnX,KAAKslB,oBAAoB5B,OACnC,gBACA,CAAElQ,OAAMA,EAAE0lB,OAAMA,EAAEO,YAAWA,GAAEr5B,EAAA,CAC7Bm5B,IAAGA,GAAKzf,IAGZ,OAAO9Z,KAAKqlB,KACTsU,MAAwBxiB,EAAK,GAAI,CAAEpO,QAAOA,IAC1C8K,KAAK7T,KAAK82B,iBAAiBV,SAAS4C,MAGlCC,EAAA/4B,UAAA05B,OAAP,SACEpmB,EACA0lB,EACAO,GAEA,IAAM1wB,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGZrO,EAAMnX,KAAKslB,oBAAoB5B,OAAO,gBAAiB,CAC3DlQ,OAAMA,EACN0lB,OAAMA,EACNO,YAAWA,IAGb,OAAOz5B,KAAKqlB,KAAK7b,OAAO2N,EAAK,CAAEpO,QAAOA,8CAzEtB2c,EAAAA,kBACezC,UACH4S,MAJnBoD,EAAmBn4B,EAAA,CAD/ByU,EAAAA,cACY0jB,MCNAY,GAA0B,IAAIv0B,EAAAA,eAEzC,uCCUA,SAAAw0B,EACYzU,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA8Cd,OA3CYmD,EAAA55B,UAAA65B,uBAAV,SAAiCvmB,EAAgB0lB,GAC/C,OAAOl5B,KAAK0kB,aAAahB,OAAO,cAAe,CAAElQ,OAAMA,EAAE0lB,OAAMA,KAGvDY,EAAA55B,UAAA85B,WAAV,SAAqBxmB,GACnB,IAAIzK,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,qBAOlB,MrFlCiC,cqF8B7BhS,IACFzK,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,IAG1DA,GAGT+wB,EAAA55B,UAAAspB,IAAA,SAAIhW,EAAgB0lB,EAAgBe,GAClC,IAAM9iB,EAAMnX,KAAK+5B,uBAAuBvmB,EAAQ0lB,GAE1CG,EAAQpwB,KAAKC,UAAU,IAEvB4Q,GAAqB,IAAIuK,EAAAA,YAAajb,IAAI,YAAa6wB,GAEvDlxB,EAAU/I,KAAKg6B,WAAWxmB,GAEhC,OAAOxT,KAAKqlB,KAAKI,KAAKtO,EAAKkiB,EAAO,CAAEtwB,QAAOA,EAAE+Q,OAAMA,IAAIjG,KACrD4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCtE,KAAK22B,UAAUP,SAASyD,MAI5BC,EAAA55B,UAAA05B,OAAA,SAAOpmB,EAAgB0lB,EAAgBe,GACrC,IAAM9iB,EACJnX,KAAK+5B,uBAAuBvmB,EAAQ0lB,GACpC,IACAtW,mBAAmBqX,GAEflxB,EAAU/I,KAAKg6B,WAAWxmB,GAEhC,OAAOxT,KAAKqlB,KACT7b,OAAO2N,EAAK,CAAEpO,QAAOA,IACrB8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDA9C9BohB,EAAAA,kBACQzC,UACH4S,MAJZiE,EAAqBh5B,EAAA,CADjCyU,EAAAA,cACYukB,oBCMX,SAAAI,EACY7U,EACAC,EACAwR,GAFA92B,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EAqFd,OAlFSoD,EAAAh6B,UAAAi6B,QAAP,SAAe3mB,GACb,OAAOxT,KAAKqlB,KACTzb,IAAkB5J,KAAKslB,oBAAoB5B,OAAO,QAAS,CAAElQ,OAAMA,KACnEK,KACCumB,EAAAA,MAAM,SACNp6B,KAAK82B,iBAAiBN,aAAaa,MAIlC6C,EAAAh6B,UAAAyK,KAAP,SAAY6I,EAAgB0lB,GAC1B,MtFjC+B,YsFiC3BA,EACKl5B,KAAKm6B,QAAQ3mB,GAAQK,KAC1BC,EAAAA,KAAI,SAACwkB,GACH,OAAIA,EACiBA,EAAMje,MAAK,SAACke,GAC7B,YAA4BxsB,IAArBwsB,EAAe,YAIjB,SAKNv4B,KAAKqlB,KACTzb,IACC5J,KAAKslB,oBAAoB5B,OAAO,OAAQ,CAAElQ,OAAMA,EAAE0lB,OAAMA,KAEzDrlB,KAAK7T,KAAK82B,iBAAiBV,SAASiB,MAI3C6C,EAAAh6B,UAAAC,OAAA,SACEqT,EACA6mB,EACAC,GAEA,IAAMjB,EAAQpwB,KAAKC,UAAU,IAEzB4Q,EAAS,GASb,OAPIugB,IACFvgB,EAAS,CAAEugB,UAAWA,IAEpBC,IACFxgB,EAAwB,gBAAIwgB,GAGvBt6B,KAAKqlB,KACTI,KACCzlB,KAAKslB,oBAAoB5B,OAAO,aAAc,CAAElQ,OAAMA,GAAIsG,GAC1Duf,GAEDxlB,KAAK7T,KAAK82B,iBAAiBV,SAASiB,MAGzC6C,EAAAh6B,UAAAsJ,OAAA,SAAOgK,EAAgB0lB,GACrB,IAAInwB,EAAU,IAAII,EAAAA,YAIlB,MtFvFiC,csFoF7BqK,IACFzK,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,IAE1D/I,KAAKqlB,KAAK7b,OACfxJ,KAAKslB,oBAAoB5B,OAAO,aAAc,CAAElQ,OAAMA,EAAE0lB,OAAMA,IAC9D,CAAEnwB,QAAOA,KAIbmxB,EAAAh6B,UAAA04B,SAAA,SAASplB,EAAgB0lB,EAAgBqB,GACvC,IAAIxxB,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,sCAElBzc,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,GAE/D,IAAMyxB,GAAyB,IAAInW,EAAAA,YAAajb,IAAI,QAASmxB,GAEvDpjB,EAAMnX,KAAKslB,oBAAoB5B,OAAO,WAAY,CACtDlQ,OAAMA,EACN0lB,OAAMA,IAGR,OAAOl5B,KAAKqlB,KAAKoV,IAAItjB,EAAKqjB,EAAY,CAAEzxB,QAAOA,8CArF/B2c,EAAAA,kBACezC,UACH4S,MAJnBqE,EAAcp5B,EAAA,CAD1ByU,EAAAA,cACY2kB,MChBAQ,GAAuB,IAAIp1B,EAAAA,eAEtC,oCCMA,SAAAq1B,EACYtV,EACAC,EACAwR,GAFA92B,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EA+Bd,OA5BS6D,EAAAz6B,UAAA64B,SAAP,SACEvlB,EACA0lB,EACA0B,EACAC,GAEA,IAAIL,EAAa,IAAInW,EAAAA,WAEjBxP,QAAQ+lB,KACVJ,EAAaA,EAAWpxB,IAAI,eAAgBwxB,IAG1C/lB,QAAQgmB,KACVL,EAAaA,EAAWpxB,IAAI,sBAAuByxB,IAGrD,IAAM9xB,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGlB,OAAOxlB,KAAKqlB,KACTsU,MACC35B,KAAKslB,oBAAoB5B,OAAO,WAAY,CAAElQ,OAAMA,EAAE0lB,OAAMA,IAC5DsB,EACA,CAAEzxB,QAAOA,IAEV8K,KAAK7T,KAAK82B,iBAAiBV,SAASsE,+CA/BvBhV,EAAAA,kBACezC,UACH4S,MAJnB8E,EAAkB75B,EAAA,CAD9ByU,EAAAA,cACYolB,oBCgCb,SAAAG,KAA4B,OAAfA,EAAah6B,EAAA,CA3BzBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACTT,EAAqBkyB,IACrB,CACEzyB,QAASm1B,GACT3D,SAAU8C,IAEZ,CACEt0B,QAASyxB,GACTlS,YAAaoS,GACbzxB,OAAO,GAET,CACEF,QAASo1B,GACT5D,SAAU6B,IAEZ,CACErzB,QAASq1B,GACT7D,SAAU0C,IAEZ,CACEl0B,QAASs1B,GACT9D,SAAUuD,QAIHG,MCvCAK,GAAmB,IAAI71B,EAAAA,eAClC,mBCkBF81B,GAAA,WACE,SAAAA,EACY/V,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAuDd,OApDYyE,EAAAl7B,UAAAujB,YAAV,SAAsBjQ,EAAgB6nB,GACpC,IAAMC,EAAgB,SAAW9nB,EAAS6nB,EAC1C,OAAOr7B,KAAK0kB,aAAajB,YAAY6X,IAGhCF,EAAAl7B,UAAAq7B,WAAP,SAAkB/nB,EAAgB0lB,GAChC,IAAM/hB,EAAMnX,KAAKyjB,YAAYjQ,EAjBT,WAkBdsG,EAAS,IAAIuK,EAAAA,WAAW,CAC5BF,WAAY,UAAY+U,EAAS,iBAG/BnwB,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,sCAMlB,M3F/CiC,c2F2C7BhS,IACFzK,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,IAG1D/I,KAAKqlB,KACTI,KAAgBtO,EAAK,GAAI,CAAEpO,QAAOA,EAAE+Q,OAAMA,IAC1CjG,KAAK7T,KAAK22B,UAAUP,SAAS+E,MAGlCC,EAAAl7B,UAAAs7B,oBAAA,SACEhoB,EACA0lB,GAEA,IAAM/hB,EAAMnX,KAAKyjB,YAAYjQ,EArCV,WAqCoC0lB,EACjDpf,EAAS,IAAIuK,EAAAA,WAAW,CAC5BF,WAAY,gEAEd,OAAOnkB,KAAKqlB,KAAKzb,IAAqBuN,EAAK,CAAE2C,OAAMA,KAGrDshB,EAAAl7B,UAAAu7B,6BAAA,SACEjoB,EACA0lB,GAEA,IAAM/hB,EAAM,GAAGnX,KAAKyjB,YAClBjQ,EAjDiB,WAmDf0lB,EAAM,sBACV,OAAOl5B,KAAKqlB,KAAK7b,OAAY2N,IAG/BikB,EAAAl7B,UAAAw7B,0BAAA,SAA0BloB,EAAgB0lB,GACxC,IAAM/hB,EAAM,GAAGnX,KAAKyjB,YAClBjQ,EAzDiB,WA2Df0lB,EAAM,gBACV,OAAOl5B,KAAKqlB,KAAK7b,OAAY2N,6CAvDbuO,EAAAA,kBACQzC,UACH4S,MAJZuF,EAAkBt6B,EAAA,CAD9ByU,EAAAA,cACY6lB,GAAb,GCnBaO,GAA2B,IAAIr2B,EAAAA,eAE1C,0BCFWs2B,GAAqB,IAAIt2B,EAAAA,eACpC,qBAGWu2B,GAAqB,IAAIv2B,EAAAA,eACpC,qBAGWw2B,GAAgC,IAAIx2B,EAAAA,eAE/C,6CCIA,SAAAy2B,EACY1W,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAyEd,OAtEYoF,EAAA77B,UAAA87B,gBAAV,SAA0BxoB,GACxB,IAAMyoB,EAAe,SAAWzoB,EAAS,UACzC,OAAOxT,KAAK0kB,aAAajB,YAAYwY,IAGhCF,EAAA77B,UAAAg8B,cAAP,SACE1oB,EACA0lB,EACAiD,GAIA,OAFAA,EAAUn8B,KAAK22B,UAAUD,QAAQyF,EAASN,IAEnC77B,KAAKqlB,KACTI,KACCzlB,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,sBACxCiD,EACA,CACEpzB,SAAS,IAAII,EAAAA,aAAcC,IAAI,eAAgB,sBAGlDyK,KAAK7T,KAAK22B,UAAUP,SAASwF,MAG3BG,EAAA77B,UAAAk8B,WAAP,SACE5oB,EACA0lB,EACAmD,GAEA,OAAOr8B,KAAKqlB,KAAKoV,IACfz6B,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,sBACxC,GACA,CACEpf,OAAQ,CAAEuiB,UAAWA,MAKpBN,EAAA77B,UAAAo8B,QAAP,SACE9oB,EACA0lB,EACAqD,GAEA,OAAOv8B,KAAKqlB,KAAKoV,IACfz6B,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,gBACxC,GACA,CACEpf,OAAQ,CAAEyiB,eAAgBA,MAKzBR,EAAA77B,UAAAs8B,QAAP,SAAehpB,EAAgB0lB,GAC7B,OAAOl5B,KAAKqlB,KACTzb,IAAI5J,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,iBAC5CrlB,KAAK7T,KAAK22B,UAAUP,SAASuF,MAG3BI,EAAA77B,UAAAu8B,kBAAP,SACEjpB,EACA0lB,GAEA,OAAOl5B,KAAKqlB,KACTzb,IACC5J,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,kBAEzCrlB,KACCumB,EAAAA,MAAM,iBACNp6B,KAAK22B,UAAUH,aAAamF,+CAxEhBjW,EAAAA,kBACQzC,UACH4S,MAJZkG,EAA0Bj7B,EAAA,CADtCyU,EAAAA,cACYwmB,MCbAW,GAA6B,IAAIp3B,EAAAA,eAE5C,4BAEWq3B,GAA6B,IAAIr3B,EAAAA,eAE5C,4BAEWs3B,GAAuB,IAAIt3B,EAAAA,eAEtC,sBCKFu3B,GAAA,WACE,SAAAA,EACYxX,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAEe,oBAAdmG,YACT98B,KAAK+8B,UAAY,IAAID,WAuM3B,OAjMYD,EAAA38B,UAAA87B,gBAAV,SAA0BxoB,GACxB,IAAMyoB,EAAe,SAAWzoB,EAAS,UACzC,OAAOxT,KAAK0kB,aAAajB,YAAYwY,IAGhCY,EAAA38B,UAAAC,OAAP,SACEqT,EACA0lB,EACA8D,GAHF,IAAA5rB,EAAApR,KASE,OAJAg9B,EAAiBh9B,KAAK22B,UAAUD,QAC9BsG,EACAL,IAEK38B,KAAKi9B,mBAAmBzpB,EAAQ0lB,GAAQrlB,KAC7CC,EAAAA,KAAI,SAACopB,GACH,IAAMC,EAAY/rB,EAAKgsB,aAAaF,EAAKG,cAAc5F,OACvD,MAAO,CACLtgB,IAAK+lB,EAAKI,QACVC,WAAYnsB,EAAKosB,4BACfR,EACAE,EAAKK,WAAW9F,MAChB0F,GAEFE,cAAeF,MAGnBpS,EAAAA,UAAS,SAAC0S,GAER,OAAOrsB,EAAKssB,sBAAsBD,EAAItmB,IAAKsmB,EAAIF,YAAY1pB,KACzDC,EAAAA,KAAI,SAAC6pB,GAAa,OAAAvsB,EAAKwsB,8BAA8BD,MACrD5S,EAAAA,UAAS,SAAC8S,GAIR,OAHAA,EAAoC,eAClCb,EAAec,eACjBD,EAAqC,iBAAI,EAClCzsB,EAAK2sB,4BACVvqB,EACA0lB,EACA2E,GACAhqB,KAAKzC,EAAKulB,UAAUP,SAASsG,cAOlCG,EAAA38B,UAAAkJ,IAAP,SACEoK,EACA0lB,EACA8E,GAEA,OAAOh+B,KAAKqlB,KAAKoV,IACfz6B,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,kBACxC,GACA,CACEpf,OAAQ,CAAEkkB,iBAAkBA,MAKlCnB,EAAA38B,UAAA+9B,cAAA,WACE,OAAOj+B,KAAKqlB,KACTzb,IAAsB5J,KAAK0kB,aAAajB,YA9EnB,cA+ErB5P,KACCC,EAAAA,KAAI,SAACoqB,GAAiB,OAAAA,EAAaC,aACnCn+B,KAAK22B,UAAUH,aAAaoG,MAIxBC,EAAA38B,UAAA+8B,mBAAV,SACEzpB,EACA0lB,GAEA,OAAOl5B,KAAKqlB,KAAKzb,IACf5J,KAAKg8B,gBAAgBxoB,GACnB0lB,EACA,+CAII2D,EAAA38B,UAAAw9B,sBAAV,SACEJ,EACAC,GAEA,IAAMx0B,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,oCAChB4Y,OAAQ,cAEN5D,EAAa,IAAInW,EAAAA,WAAW,CAAEJ,QAAS,IAAIvB,KAK/C,OAJAljB,OAAOuN,KAAKwwB,GAAYxZ,SAAQ,SAAC9iB,GAC/Bu5B,EAAaA,EAAWxxB,OAAO/H,EAAKs8B,EAAWt8B,OAG1CjB,KAAKqlB,KAAKI,KAAK6X,EAAS9C,EAAY,CACzCzxB,QAAOA,EACPs1B,aAAc,UAIRxB,EAAA38B,UAAA69B,4BAAV,SACEvqB,EACA0lB,EACAqE,GAEA,IAAI/C,EAAa,IAAInW,EAAAA,WAAW,CAAEJ,QAAS,IAAIvB,KAC/CljB,OAAOuN,KAAKwwB,GAAYxZ,SAAQ,SAAC9iB,GAC/Bu5B,EAAaA,EAAWxxB,OAAO/H,EAAKs8B,EAAWt8B,OAGjD,IAAM8H,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGlB,OAAOxlB,KAAKqlB,KAAKI,KACfzlB,KAAKg8B,gBAAgBxoB,GAAU0lB,EAAS,wBACxCsB,EACA,CAAEzxB,QAAOA,KAIL8zB,EAAA38B,UAAAs9B,4BAAR,SACER,EACAO,EACAF,GAEA,IAAMvjB,EAAS9Z,KAAKo9B,aAAaG,GAuCjC,OAtCAzjB,EAAOujB,EAA0C,4BAC/CL,EAAesB,kBACjBxkB,EAAOujB,EAAgC,kBAAKL,EAAeuB,SAASjF,KACpExf,EAAOujB,EAAkC,oBAAKL,EAAewB,WACR,SAAjDnB,EAA2C,4BAC7CvjB,EAAOujB,EAAuC,yBAC5CL,EAAeyB,YACfpB,EAA4C,6BAC5CL,EAAe0B,YAEjB5kB,EAAOujB,EAA4C,8BACjDL,EAAeyB,YACjB3kB,EAAOujB,EAA2C,6BAChDL,EAAe0B,YAEnB5kB,EAAOujB,EAA+B,iBAAKL,EAAe2B,IAG1D7kB,EAAOujB,EAAqC,uBAC1CL,EAAe4B,eAAeC,QAAQzd,QACxCtH,EAAOujB,EAAuC,yBAC5CL,EAAe4B,eAAeE,UAChChlB,EAAOujB,EAAsC,wBAC3CL,EAAe4B,eAAeG,SAChCjlB,EAAOujB,EAAqC,uBAC1CL,EAAe4B,eAAeI,MAC9B,IACAhC,EAAe4B,eAAeK,MAChCnlB,EAAOujB,EAAkC,oBACvCL,EAAe4B,eAAeM,KAC5BlC,EAAe4B,eAAeO,OAChCrlB,EAAOujB,EAAoC,sBACzCL,EAAe4B,eAAeO,OAAOC,aAEvCtlB,EAAOujB,EAAoC,sBAAK,GAElDvjB,EAAOujB,EAAwC,0BAC7CL,EAAe4B,eAAeS,WACzBvlB,GAGD+iB,EAAA38B,UAAA09B,8BAAR,SAAsC0B,GAMpC,IALA,IAEMC,EAFSv/B,KAAK+8B,UAAUyC,gBAAgBF,EAAM,YACxBG,qBAAqB,QAAQ,GAC7BA,qBAAqB,SAE3CC,EAAS,GACNl/B,EAAI,EAAG++B,EAAO/+B,GAAIA,IAAK,CAC9B,IAAMm/B,EAAQJ,EAAO/+B,GAEY,OAA/Bm/B,EAAMC,aAAa,SACa,KAAhCD,EAAMC,aAAa,WAEnBF,EAAOC,EAAMC,aAAa,SAAWD,EAAMC,aAAa,UAI5D,OAAOF,GAGD7C,EAAA38B,UAAAk9B,aAAR,SAAqByC,GACnB,OAAOA,EAAU7yB,QAAO,SAAUtK,EAAQgC,GAGxC,OADAhC,EADYgC,EAAKzD,KACHyD,EAAKrC,MACZK,IACN,8CA1MagjB,EAAAA,kBACQzC,UACH4S,MAJZgH,EAAyB/7B,EAAA,CADrCyU,EAAAA,cACYsnB,GAAb,MCfA,2BCOE,SAAAiD,EAAoBnJ,GAAA32B,KAAA22B,UAAAA,SAEpBmJ,EAAA5/B,UAAAw2B,QAAA,SAAQ3xB,EAAmB/D,GAA3B,IAAAoQ,EAAApR,KA2BE,YA1Be+L,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAGbA,EAAOyyB,UACTx2B,EAAOw2B,QAAUzyB,EAAOyyB,QAAQ1jB,KAAI,SAAC2jB,GACnC,OAAArmB,EAAK2uB,kBAAkBtI,OAIvB1yB,EAAOi7B,eACTh/B,EAAOg/B,aAAej7B,EAAOi7B,aAAalsB,KAAI,SAACmsB,GAAgB,OAAA7/B,EAAAA,EAAA,GAC1D6/B,GAAW,CACdzI,QAASyI,EAAYzI,QAAQ1jB,KAAI,SAAC2jB,GAAU,OAAAr3B,EAAAA,EAAA,GACvCq3B,GAAK,CACRyI,WAAY9uB,EAAK2uB,kBAAkBtI,EAAMyI,uBAK3Cn7B,EAAOo7B,qBACTn/B,EAAOm/B,mBAAqBp7B,EAAOo7B,mBAAmBrsB,KAAI,SAAC2jB,GACzD,OAAArmB,EAAK2uB,kBAAkBtI,OAIpBz2B,GAGD8+B,EAAA5/B,UAAA6/B,kBAAR,SAA0Bh7B,GACxB,OAAA3E,EAAAA,EAAA,GACK2E,GAAM,CACT2yB,QAAS13B,KAAK22B,UAAUD,QAAQ3xB,EAAO2yB,QAASJ,gDAnCrBzB,uHADpBiK,EAAkBh/B,EAAA,CAD9ByU,EAAAA,WAAW,CAAEC,WAAY,UACbsqB,SCNb,gBCDA,2BC2BA,SAAAM,KAAgC,OAAnBA,EAAiBt/B,EAAA,CAlB7BkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACT,CACEhB,QAASy6B,GACTjJ,SAAUgE,IAEZ,CAAEx1B,QAASu1B,GAAkBhW,YAAa2a,GAAoBh6B,OAAO,GACrE,CACEF,QAAS06B,GACTlJ,SAAU2E,IAEZ,CACEn2B,QAAS26B,GACTnJ,SAAUyF,QAIHuD,MC1BAI,GAAsB,IAAIl7B,EAAAA,eAErC,mCCSA,SAAAm7B,EACUpb,EACAX,EACEiS,GAFF32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACE1kB,KAAA22B,UAAAA,EALF32B,KAAA+I,SAAU,IAAII,EAAAA,aAAcC,IAAI,eAAgB,oBAkE5D,OA1DEq3B,EAAAvgC,UAAAyK,KAAA,SACE+1B,EACAC,GAGA,QAAyB50B,IAArB20B,EAAY32B,KACd,OAAO/J,KAAKqlB,KACTzb,IACC5J,KAAK0kB,aAAahB,OAChB,OACA,CACE1Z,GAAI02B,EAAY12B,IAElB,CAAE22B,OAAQA,GAAkB,YAE9B,CACE53B,QAAS/I,KAAK+I,UAGjB8K,KAAK7T,KAAK22B,UAAUP,SAASoK,KAIlC,IAAMhG,EAAax6B,KAAK4gC,sBAAsBF,GAC9C,OAAO1gC,KAAKqlB,KACTzb,IAAI5J,KAAK6gC,iBAAiBrG,EAAYmG,GAAS,CAC9C53B,QAAS/I,KAAK+I,UAEf8K,KAAK7T,KAAK22B,UAAUP,SAASoK,MAG1BC,EAAAvgC,UAAA2gC,iBAAR,SACE/mB,EAGA6mB,GAGA,OADAA,EAASA,GAAkB,UACpB3gC,KAAK0kB,aAAahB,OAAO,QAAS,GAAEtjB,EAAA,CAAIugC,OAAMA,GAAK7mB,KAGpD2mB,EAAAvgC,UAAA0gC,sBAAR,SACEF,GAEA,IAAIlG,EAAa,GAYjB,MATuB,sBAAnBkG,EAAY12B,KACdwwB,EAAa,CAAEsG,SAAUJ,EAAY32B,MAEjC22B,EAAY32B,OAASojB,EAAAA,SAAS4T,aAChCvG,EAA0B,cAAIkG,EAAY12B,GAE1CwwB,EAAiB,KAAIkG,EAAY12B,IAG9BwwB,4CA7DO9U,EAAAA,kBACQzC,UACD4S,MANZ4K,EAAiB3/B,EAAA,CAD7ByU,EAAAA,cACYkrB,MCRAO,GAA2B,IAAI17B,EAAAA,eAE1C,wCCUA,SAAA27B,EACU5b,EACAX,EACEiS,GAFF32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACE1kB,KAAA22B,UAAAA,EALF32B,KAAA+I,SAAU,IAAII,EAAAA,aAAcC,IAAI,eAAgB,oBAoI5D,OA5HE63B,EAAA/gC,UAAAyK,KAAA,SACEX,EACA02B,GAEA,OAAO1gC,KAAKqlB,KACTzb,IAAO5J,KAAKkhC,qBAAqBl3B,EAAI02B,GAAc,CAClD33B,QAAS/I,KAAK+I,UAEf8K,KAAK7T,KAAK22B,UAAUP,SAAiB4K,MAG1CC,EAAA/gC,UAAAihC,oBAAA,SACEx0B,EACA+zB,EACAC,EACAS,EACAnK,EACAoK,QAHA,IAAAV,IAAAA,EAAA,gBACA,IAAAS,IAAAA,EAAA,QACA,IAAAnK,IAAAA,EAAWtqB,EAAIhM,QAGf,IAAM2gC,EAAalhC,EAAAA,EAAA,GACdJ,KAAKuhC,iBAAiBb,IACtB1gC,KAAKwhC,oBAAoBJ,EAAanK,EAAUoK,IAKrD,OAFAC,EAA4B,aAAI30B,EAAI2X,WAE7BtkB,KAAKqlB,KACTzb,IACC5J,KAAKyhC,sBAAsBH,EAAeX,GAC1C,CACE53B,QAAS/I,KAAK+I,UAGjB8K,KACCumB,EAAAA,MAAM,aACNp6B,KAAK22B,UAAUH,aAAawK,MAIlCC,EAAA/gC,UAAAwhC,0BAAA,SACE/0B,EACA+zB,EACAC,EACAS,EACAnK,EACAoK,QAHA,IAAAV,IAAAA,EAAA,gBACA,IAAAS,IAAAA,EAAA,QACA,IAAAnK,IAAAA,EAAWtqB,EAAIhM,QAGf,IAAMghC,EAA8B,CAAEA,OAAQh1B,GAExC20B,EAAalhC,EAAAA,EAAA,GACdJ,KAAKuhC,iBAAiBb,IACtB1gC,KAAKwhC,oBAAoBJ,EAAanK,EAAUoK,IAGrD,OAAOrhC,KAAKqlB,KACTI,KACCzlB,KAAKyhC,sBAAsBH,EAAeX,GAC1CgB,EACA,CACE54B,QAAS/I,KAAK+I,UAGjB8K,KACCumB,EAAAA,MAAM,aACNp6B,KAAK22B,UAAUH,aAAawK,MAIxBC,EAAA/gC,UAAAghC,qBAAV,SAA+Bl3B,EAAY02B,GACzC,OAAO1gC,KAAK0kB,aAAahB,OACvB,YACA,CAAE1Z,GAAEA,GACJhK,KAAKuhC,iBAAiBb,KAIhBO,EAAA/gC,UAAAuhC,sBAAV,SAAgCH,EAAoBX,GAClD,OAAO3gC,KAAK0kB,aAAahB,OACvB,aACA,GAAEtjB,EAAA,CACAugC,OAAMA,GAAKW,KAITL,EAAA/gC,UAAAshC,oBAAR,SACEJ,EACAnK,EACAoK,GAEA,IAAMC,EAAgB,GAWtB,YAVoBv1B,IAAhBq1B,IACFE,EAA2B,YAAIF,EAAY9c,iBAE5BvY,IAAbkrB,IACFqK,EAAwB,SAAIrK,EAAS3S,iBAE1BvY,IAATs1B,IACFC,EAAoB,KAAID,GAGnBC,GAGDL,EAAA/gC,UAAAqhC,iBAAR,SACEb,GAEA,IAAIY,EAAgB,GACpB,OAAQZ,EAAY32B,MAClB,KAAKojB,EAAAA,SAASyU,aACZN,EAAgB,CAAEnI,YAAauH,EAAY12B,IAC3C,MAEF,KAAKmjB,EAAAA,SAAS0U,cACZP,EAAgB,CAAEQ,aAAcpB,EAAY12B,IAC5C,MAEF,KAAKmjB,EAAAA,SAAS4U,aACZT,EAAgB,CAAEU,YAAatB,EAAY12B,IAK/C,OAAOs3B,4CA/HO5b,EAAAA,kBACQzC,UACD4S,MANZoL,EAAsBngC,EAAA,CADlCyU,EAAAA,cACY0rB,O9C0CD7R,GAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAE9B,MAAA,mBAEAA,GAAA,QAAA,kBASF,IAAA6S,GAAA,SAAA56B,GAAA,SAAA46B,mDAYA,OAZwCniC,EAAAmiC,EAAA56B,GAYxC46B,EAZA,CAAwC76B,iB+CxDxC,SAAA86B,YAEEA,EAAAhiC,UAAAw2B,QAAA,SACE3xB,EACA/D,GAMA,YANA,IAAAA,IAAAA,EAAA,IAEAhB,KAAKmiC,kBAAkBp9B,EAAQ/D,GAC/BhB,KAAKoiC,sBAAsBr9B,EAAQ/D,GACnChB,KAAKqiC,2BAA2Bt9B,EAAQ/D,GACxChB,KAAKsiC,uBAAuBv9B,EAAQ/D,GAC7BA,GAGDkhC,EAAAhiC,UAAAiiC,kBAAR,SAA0Bp9B,EAAa/D,GACrCA,EAAOuhC,KAAO,CACZC,SAAUv9B,KAAKw9B,MACf7Y,KAAM7kB,EAAO6kB,KACb7f,KAAMhF,EAAO29B,SACbC,MAAO59B,EAAO49B,MACdC,OAAQ79B,EAAO89B,IACf3R,SAAUnsB,EAAOmsB,SACjB4R,MAAO,GACPC,WAAYh+B,EAAOg+B,WACnB5/B,MAAO4B,EAAO5B,QAIV++B,EAAAhiC,UAAAkiC,sBAAR,SAA8Br9B,EAAa/D,eACzC,IAAmB,IAAAmE,EAAAlB,EAAAc,EAAOi+B,aAAaC,aAAW79B,EAAAD,EAAA5C,QAAA6C,EAAAzC,KAAAyC,EAAAD,EAAA5C,OAAE,CAA/C,IAAM2gC,EAAI99B,EAAA/C,MACbrB,EAAOuhC,KAAKO,MAAMI,EAAKC,UAAY,CACjCC,WAAY,GACZL,WAAYG,EAAKH,gHAKfb,EAAAhiC,UAAAmiC,2BAAR,SACEt9B,EACA/D,mBAEA,IAAmB,IAAAoE,EAAAnB,EAAAc,EAAOi+B,aAAaC,aAAWI,EAAAj+B,EAAA7C,QAAA8gC,EAAA1gC,KAAA0gC,EAAAj+B,EAAA7C,OAAE,CAA/C,IAAM2gC,EAAIG,EAAAhhC,MACb,GACE6gC,EAAKE,WAAWE,WAChB3jC,MAAMgF,QAAQu+B,EAAKE,WAAWE,eAE9B,IAAwB,IAAAC,GAAAC,OAAA,EAAAv/B,EAAAi/B,EAAKE,WAAWE,YAASG,EAAAF,EAAAhhC,QAAAkhC,EAAA9gC,KAAA8gC,EAAAF,EAAAhhC,OAAE,CAA9C,IAAM+gC,EAASG,EAAAphC,MACZqhC,EAAiC,CACrCb,IAAKS,EAAUT,IACfH,SAAUY,EAAUZ,SACpBK,WAAYO,EAAUP,Y/CzBK,qB+C4BzBO,EAAUZ,SACZgB,EAAKC,SAAWL,EAAUK,S/C9BQ,wB+C+BzBL,EAAUZ,SACnBgB,EAAKC,SAAWL,EAAUT,IAE1Ba,EAAKC,SAAWL,EAAUZ,SAE5B1hC,EAAOuhC,KAAKO,MAAMI,EAAKC,UAAUC,WAAWp/B,KAAK0/B,0MAMjDxB,EAAAhiC,UAAAoiC,uBAAR,SAA+Bv9B,EAAa/D,eAC1CA,EAAOoiC,WAAa,OAEpB,IAAmB,IAAAh+B,EAAAnB,EAAAc,EAAOi+B,aAAaC,aAAWI,EAAAj+B,EAAA7C,QAAA8gC,EAAA1gC,KAAA0gC,EAAAj+B,EAAA7C,OAAE,CAA/C,IAAM2gC,EAAIG,EAAAhhC,MACb,GACE6gC,EAAKE,WAAWE,WAChB3jC,MAAMgF,QAAQu+B,EAAKE,WAAWE,eAE9B,IAAwB,IAAAC,GAAAK,OAAA,EAAA3/B,EAAAi/B,EAAKE,WAAWE,YAAgBG,EAAAF,EAAAhhC,QAAAkhC,EAAA9gC,KAAA8gC,EAAAF,EAAAhhC,OAAE,CAArD,IAAM+gC,EAASG,EAAAphC,MAEdihC,EAAUP,aACZO,EAAUP,gBAAah3B,GAEzB/K,EAAOoiC,WAAWp/B,KAAKs/B,wSA9EpBpB,EAAoBphC,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACb0sB,MCJb2B,GAAA,gBCJA,2BCwBA,SAAAC,KAA2B,OAAdA,EAAYhjC,EAAA,CAlBxBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACT,CACEhB,QAASi+B,GACTzM,SAAUqJ,IAEZ,CACE76B,QAAS46B,GACTrb,YAAa+c,GACbp8B,OAAO,GAET,CACEF,QAASm+B,GACT3M,SAAU6J,QAIH6C,oBCnBX,SAAAE,EAAsBt+B,GAAA1F,KAAA0F,OAAAA,SAEtBs+B,EAAA9jC,UAAAw2B,QAAA,SAAQ3xB,EAAqB/D,GAO3B,YANe+K,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAEbA,EAAOk/B,SACTjjC,EAAOijC,OAASjkC,KAAKkkC,UAAUn/B,EAAOk/B,SAEjCjjC,GAWTgjC,EAAA9jC,UAAAgkC,UAAA,SAAUn/B,WACFk/B,EAAS,GACf,GAAIl/B,MACF,IAAoB,IAAAo/B,EAAAlgC,EAAAc,GAAMq/B,EAAAD,EAAA5hC,QAAA6hC,EAAAzhC,KAAAyhC,EAAAD,EAAA5hC,OAAE,CAAvB,IAAM8hC,EAAKD,EAAA/hC,MACRiiC,EAASD,EAAMxkC,eAAe,gBAC/BokC,EAAOpkC,eAAewkC,EAAME,aAC/BN,EAAOI,EAAME,WAAaD,EAAS,GAAK,IAG1C,IAAIE,OAAc,EACdF,IAAWL,EAAOI,EAAME,WAAWF,EAAMI,gBAC3CR,EAAOI,EAAME,WAAWF,EAAMI,cAAgB,IAI9CD,EADEF,EACeL,EAAOI,EAAME,WAAWF,EAAMI,cAE9BR,EAAOI,EAAME,WAGhC,IAAMG,EAAWtkC,EAAA,GAAQikC,GACzBK,EAAYvtB,IAAMnX,KAAK2kC,kBAAkBD,EAAYvtB,KACrDqtB,EAAeH,EAAMO,QAAUF,oGAGnC,OAAOT,GASDD,EAAA9jC,UAAAykC,kBAAR,SAA0BxtB,GACxB,OAAI,IAAIoH,OAAO,4BAA4BsmB,KAAK1tB,GACvCA,GAGNnX,KAAK0F,OAAO2C,QAAQy8B,MAAMxhB,SACzBtjB,KAAK0F,OAAO2C,QAAQC,IAAIgb,SACxB,IAAMnM,4CA7DkB/P,qHADnB48B,EAAsBljC,EAAA,CADlCyU,EAAAA,WAAW,CAAEC,WAAY,UACbwuB,oBCFb,SAAAe,KAiCA,OA/BEA,EAAA7kC,UAAAw2B,QAAA,SAAQ3xB,EAAqB/D,GAQ3B,YAPe+K,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAGbA,EAAOigC,oBACThkC,EAAOgkC,kBAAoBhlC,KAAKkkC,UAAUn/B,EAAOigC,oBAE5ChkC,GAUC+jC,EAAA7kC,UAAAgkC,UAAV,SAAoBn/B,WACZkgC,EAAa,GAEnB,GAAIlgC,MACF,IAAwB,IAAAo/B,EAAAlgC,EAAAc,GAAMq/B,EAAAD,EAAA5hC,QAAA6hC,EAAAzhC,KAAAyhC,EAAAD,EAAA5hC,OAAE,CAA3B,IAAM2iC,EAASd,EAAA/hC,MACb4iC,EAAWplC,eAAeqlC,EAAUC,iBACvCF,EAAWC,EAAUC,eAAiB,IAExCF,EAAWC,EAAUC,eAAenhC,KAAKkhC,qGAG7C,OAAOD,GA/BEF,EAA0BjkC,EAAA,CADtCyU,EAAAA,cACYwvB,oBCSX,SAAAK,EAAoBtO,GAAA92B,KAAA82B,iBAAAA,EAMV92B,KAAAqlC,mBAAqB,SAE/BD,EAAAllC,UAAAw2B,QAAA,SACE3xB,EACA/D,GAFF,IAAAoQ,EAAApR,KAeE,YAbA,IAAAgB,IAAAA,EAAA,IAEAA,EAAMZ,EAAAA,EAAA,GACDY,GACC+D,GAGN/E,KAAKslC,gBAAgBtkC,GACjB+D,EAAOwgC,WACTvkC,EAAOukC,SAAWxgC,EAAOwgC,SAASzxB,KAAI,SAAC4jB,GACrC,OAAAtmB,EAAK0lB,iBAAiBJ,QAAQgB,EAASJ,QAGpCt2B,GAGDokC,EAAAllC,UAAAolC,gBAAR,SAAwBtkC,GACtBhB,KAAKwlC,qBAAqBxkC,GAC1BhB,KAAKylC,uBAAuBzkC,IAWtBokC,EAAAllC,UAAAulC,uBAAR,SAA+BzkC,GAC7BA,EAAO0kC,OAAS1kC,EAAO0kC,OAAO50B,QAAO,SAAC60B,GACpC,OACG3kC,EAAO4kC,aACP5kC,EAAO4kC,WAAWC,gBAChBF,EAAM9lC,eAAe,YAAc8lC,EAAMG,UAC1CH,EAAMjG,QACNiG,EAAMjG,OAAOrlB,MAAK,SAAChY,GACjB,OACEA,EAAM0jC,UAAY1jC,EAAM2jC,MAAQhlC,EAAO4kC,WAAWC,oBAgBtDT,EAAAllC,UAAAslC,qBAAR,SAA6BxkC,GAA7B,IAAAoQ,EAAApR,KACMgB,EAAO0kC,SACT1kC,EAAO0kC,OAAS1kC,EAAO0kC,OAAO5xB,KAAI,SAACmyB,GACzB,IAAAC,EAAAD,EAAAC,UAAWC,ElJ1CpB,SAAgB5lC,EAAGiC,GACtB,IAAIlC,EAAI,GACR,IAAK,IAAIV,KAAKW,EAAOf,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,IAAM4C,EAAE41B,QAAQx4B,GAAK,IAC9EU,EAAEV,GAAKW,EAAEX,IACb,GAAS,MAALW,GAAqD,mBAAjCf,OAAO4mC,sBACtB,CAAA,IAAI5lC,EAAI,EAAb,IAAgBZ,EAAIJ,OAAO4mC,sBAAsB7lC,GAAIC,EAAIZ,EAAEe,OAAQH,IAC3DgC,EAAE41B,QAAQx4B,EAAEY,IAAM,GAAKhB,OAAOU,UAAUmmC,qBAAqBzlC,KAAKL,EAAGX,EAAEY,MACvEF,EAAEV,EAAEY,IAAMD,EAAEX,EAAEY,KAE1B,OAAOF,EkJiCgBgmC,CAAAL,EAAA,CAAA,cAInB,OAHAE,EAAYI,cAAgBL,EACxBA,EAAUvlC,OACVyQ,EAAKi0B,mBACFc,gDAvEyBtQ,uHAF3BuP,EAA8BtkC,EAAA,CAD1CyU,EAAAA,WAAW,CAAEC,WAAY,UACb4vB,oBCDX,SAAAoB,EAAoB7P,GAAA32B,KAAA22B,UAAAA,SAEpB6P,EAAAtmC,UAAAw2B,QAAA,SACE3xB,EACA/D,GAFF,IAAAoQ,EAAApR,KAQE,QANA,IAAAgB,IAAAA,EAAA,SAEe+K,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAGbA,GAAUA,EAAOkgC,WAMnB,OALAjkC,EAAS+D,EAAOkgC,WAAWnxB,KAAI,SAACoxB,GAAc,OAAA9kC,EAAAA,EAAA,GACzC8kC,GAAS,CACZlkC,OAAQoQ,EAAKulB,UAAUD,QAAQwO,EAAUlkC,OAAQs2B,mDAbxBzB,uHAFpB2Q,EAAkC1lC,EAAA,CAD9CyU,EAAAA,WAAW,CAAEC,WAAY,UACbgxB,oBCFX,SAAAC,EAAsB/gC,GAAA1F,KAAA0F,OAAAA,SAEtB+gC,EAAAvmC,UAAAw2B,QAAA,SAAQ3xB,EAAqB/D,GAQ3B,YAPe+K,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAEbA,EAAO6kB,OACT5oB,EAAO4oB,KAAO5pB,KAAKkkC,UAAUn/B,EAAO6kB,MACpC5oB,EAAO0lC,SAAW3hC,EAAO6kB,MAEpB5oB,GAGCylC,EAAAvmC,UAAAgkC,UAAV,SAAoBta,GAClB,OAAOA,EAAKpL,QAAQ,WAAY,8CAdJpX,qHADnBq/B,EAAqB3lC,EAAA,CADjCyU,EAAAA,WAAW,CAAEC,WAAY,UACbixB,MCHAE,GAAgC,IAAIrhC,EAAAA,eAE/C,iDCKA,SAAAshC,EACYvhB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA0Bd,OAvBEiQ,EAAA1mC,UAAAyK,KAAA,SACEwuB,EACAgM,EACAlO,GAEA,OAAOj3B,KAAKqlB,KACTzb,IAAI5J,KAAKyjB,YAAY0V,EAAagM,EAAelO,IACjDpjB,KAAK7T,KAAK22B,UAAUP,SAASuQ,MAGxBC,EAAA1mC,UAAAujB,YAAV,SACE6V,EACA4L,EACAjO,GAEA,OAAOj3B,KAAK0kB,aAAahB,OACvB,oBACA,CACEyV,YAAaG,GAEf,CAAE6L,cAAeD,EAAWjO,SAAQA,8CAzBtBvR,EAAAA,kBACQzC,UACH4S,MAJZ+Q,EAA2B9lC,EAAA,CADvCyU,EAAAA,cACYqxB,MCNAC,GAA4B,IAAIvhC,EAAAA,eAE3C,2BAEWwhC,GAA4B,IAAIxhC,EAAAA,eAE3C,yCCKA,SAAAyhC,EACY1hB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAuCd,OApCEoQ,EAAA7mC,UAAAyK,KAAA,SAAKwuB,EAAqB6N,GACxB,OAAOhnC,KAAKqlB,KACTzb,IAAI5J,KAAKyjB,YAAY0V,EAAa6N,IAClCnzB,KACCumB,EAAAA,MAAM,WACNp6B,KAAK22B,UAAUH,aAAaqQ,MAIlCE,EAAA7mC,UAAAulB,KAAA,SAAK0T,EAAqB8N,GACxBA,EAASjnC,KAAK22B,UAAUD,QAAQuQ,EAAQH,IAExC,IAAM/9B,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGZ1iB,EAAO,IAAIokC,gBAMjB,OALApkC,EAAKkG,OAAO,WAAYi+B,EAAOE,UAC/BrkC,EAAKkG,OAAO,UAAWi+B,EAAOG,SAC9BtkC,EAAKkG,OAAO,SAAUi+B,EAAOI,OAAO/iB,YACpCxhB,EAAKkG,OAAO,QAASi+B,EAAOK,OAErBtnC,KAAKqlB,KAAKI,KAAKzlB,KAAKyjB,YAAY0V,GAAcr2B,EAAKwhB,WAAY,CACpEvb,QAAOA,KAIDg+B,EAAA7mC,UAAAujB,YAAV,SAAsB6V,EAAc0N,GAClC,OAAOhnC,KAAK0kB,aAAahB,OACvB,iBACA,CACEyV,YAAaG,GAEf,CAAE0N,SAAQA,8CAtCIthB,EAAAA,kBACQzC,UACH4S,MAJZkR,EAAwBjmC,EAAA,CADpCyU,EAAAA,cACYwxB,MCPAQ,GAAiC,IAAIjiC,EAAAA,eAEhD,+BAEWkiC,GAAgC,IAAIliC,EAAAA,eAE/C,+BCIImiC,GAAsC,CAC1CxQ,SAAU,IAIZyQ,GAAA,WACE,SAAAA,EACYriB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA2Cd,OAxCE+Q,EAAAxnC,UAAAynC,OAAA,SACE3rB,EACA4rB,GAEA,YAFA,IAAAA,IAAAA,EAAAH,IAEOznC,KAAKqlB,KACTzb,IAAI5J,KAAK6nC,kBAAkB7rB,EAAO4rB,IAClC/zB,KAAK7T,KAAK22B,UAAUP,SAASmR,MAGlCG,EAAAxnC,UAAA4nC,gBAAA,SACEC,EACA9Q,GAEA,YAFA,IAAAA,IAAAA,EAAA,GAEOj3B,KAAKqlB,KACTzb,IAAI5J,KAAKgoC,sBAAsBD,EAAM9Q,EAAS3S,aAC9CzQ,KACCumB,EAAAA,MAAM,eACNp6B,KAAK22B,UAAUH,aAAagR,MAIxBE,EAAAxnC,UAAA2nC,kBAAV,SACE7rB,EACA4rB,GAEA,OAAO5nC,KAAK0kB,aAAahB,OACvB,gBACA,GACA,CACE1H,MAAKA,EACLib,SAAU2Q,EAAa3Q,SACvBmK,YAAawG,EAAaxG,YAC1BC,KAAMuG,EAAaK,YAKfP,EAAAxnC,UAAA8nC,sBAAV,SAAgCD,EAAcG,GAC5C,OAAOloC,KAAK0kB,aAAahB,OAAO,qBAAsB,GAAI,CAAEqkB,KAAIA,EAAEG,IAAGA,8CA3CrDxiB,EAAAA,kBACQzC,UACH4S,MAJZ6R,EAAuB5mC,EAAA,CADnCyU,EAAAA,cACYmyB,GAAb,GCfA,SAAgBS,GAAYxH,GAC1B,IAAMyH,EAAezH,EAAO7sB,KAAI,SAAC/Q,GAC/B,MAAa,iBAANA,EAAiBslC,GAAYtlC,GAAKA,KAG3C,OAuEF,SAAgBulC,EAAgB3H,GAC9B,OAAOnhC,OAAOuN,KAAK4zB,GAChB7sB,KAAI,SAAC7S,GACJ,IAAMsnC,EAAYD,EAAgB3H,EAAO1/B,IACzC,OAAOsnC,EAAetnC,EAAG,IAAIsnC,EAAS,IAAMtnC,KAE7CunC,KAAK,KA7EDF,CAQT,SAAgBG,EAAe9H,QAAA,IAAAA,IAAAA,EAAA,IAC7B,IAAM5zB,EAAOvN,OAAOuN,KAAK4zB,GACrB5zB,EAAKI,SAAS,gBACTwzB,EAAgB,eAChBA,EAAc,OACZ5zB,EAAKI,SAAS,mBAChBwzB,EAAc,MAKvB,OAHAnhC,OAAOuN,KAAK4zB,GAAQ5c,SAAQ,SAAC9iB,GAC3B0/B,EAAO1/B,GAAOwnC,EAAe9H,EAAO1/B,OAE/B0/B,EApBc8H,CAAe7jC,EAAS/D,WAAA,EAAA0D,EAAA,CAAC,IAAO6jC,MA6BvD,SAAgBC,GACd1H,EACA+H,QAAA,IAAAA,IAAAA,EAAA,GAKA,IAHA,IAAMN,EAAe,GAEjB5nC,EAAIkoC,EACDloC,EAAImgC,EAAOhgC,QAAQ,CACxB,GAAkB,MAAdggC,EAAOngC,GACLA,EAAIkoC,IACNN,EAAazH,EAAOgI,OAAOD,EAAYloC,EAAIkoC,IAAe,IAE5DA,EAAaloC,EAAI,OACZ,GAAkB,MAAdmgC,EAAOngC,GAAY,CAC5B,IAAM+nC,EAAYF,GAAY1H,EAAQngC,EAAI,GAC1C,IAAIb,MAAMgF,QAAQ4jC,GAKhB,OAAOH,EAJPA,EAAazH,EAAOgI,OAAOD,EAAYloC,EAAIkoC,IAAeH,EAAU,GAEpE/nC,GADAkoC,EAAaH,EAAU,IACN,OAId,GAAkB,MAAd5H,EAAOngC,GAIhB,OAHIA,EAAIkoC,IACNN,EAAazH,EAAOgI,OAAOD,EAAYloC,EAAIkoC,IAAe,IAErD,CAACN,EAAc5nC,EAAI,GAE5BA,IAOF,OAJIkoC,EAAa/H,EAAOhgC,SACtBynC,EAAazH,EAAOgI,OAAOD,EAAYloC,EAAIkoC,IAAe,IAGrDN,EAuBT,SAAgBQ,GAAiB1L,EAASyD,GAGxC,OAGF,SAASkI,EAAiB3L,EAASyD,GACjC,IAAKl8B,EAASy4B,GACZ,OAAOA,EAGT,IAAMnwB,EAAOvN,OAAOuN,KAAK4zB,GAEzB,GACkB,IAAhB5zB,EAAKpM,QAELoM,EAAKsN,MAAK,SAAC8d,GAAO,MAAO,UAAPA,GAAyB,YAAPA,GAA2B,SAAPA,KAExD,OAAO+E,EAGT,IAAMx6B,EAAS,GAQf,OANAqK,EAAKgX,SAAQ,SAAC9iB,GACRi8B,EAAKr9B,eAAeoB,KACtByB,EAAOzB,GAAO4nC,EAAc3L,EAAKj8B,GAAM0/B,EAAO1/B,QAI3CyB,EA1BAmmC,CAAiB3L,EADJ,iBAAXyD,EAAsB0H,GAAY1H,GAAUA,GC9DvD,ICtCYmI,GDsCZC,GAAA,WACE,SAAAA,EAAsB1jB,GAAArlB,KAAAqlB,KAAAA,EAEZrlB,KAAAgpC,aAAe,gBAWzBD,EAAA7oC,UAAA+oC,oBAAA,SAAoBC,eACZC,EAAuC,OAC7C,IAAoB,IAAA/jC,EAAAnB,EAAAilC,GAA0B7F,EAAAj+B,EAAA7C,QAAA8gC,EAAA1gC,KAAA0gC,EAAAj+B,EAAA7C,OAAE,CAA3C,IAAM8zB,EAAKgN,EAAAhhC,MACRkhC,EAAAn/B,EAAApE,KAAAopC,YAAA/S,EAAAlf,KAAA,GAACkyB,EAAA9F,EAAA,GAAS5C,EAAA4C,EAAA,GACX4F,EAAcE,KACjBF,EAAcE,GAAW,IAE3BhT,EAAMsK,OAASA,EAAS0H,GAAY1H,GAAU,GAC9CwI,EAAcE,GAAShT,EAAMiT,WAAWzlB,OAASwS,oGAGnD,IAAMkT,EAAoC,OAC1C,IAA2B,IAAA9F,EAAAx/B,EAAAzE,OAAOg4B,QAAQ2R,IAAcK,EAAA/F,EAAAlhC,QAAAinC,EAAA7mC,KAAA6mC,EAAA/F,EAAAlhC,OAAE,CAA/C,IAAAknC,EAAArlC,EAAAolC,EAAAnnC,MAAA,GAAC8U,EAAAsyB,EAAA,GAAKC,EAAAD,EAAA,GAKfF,EAJsBvpC,KAAK2pC,iBACzBxyB,EACA3X,OAAOkgC,OAAOgK,GAAO51B,KAAI,SAAC81B,GAAO,OAAAA,EAAGjJ,YAEV+I,oGAG9B,OAAOH,GAQDR,EAAA7oC,UAAAkpC,YAAR,SAAoBS,GAApB,IAAAz4B,EAAApR,KACQkF,EAAAd,EAAAylC,EAAAx6B,MAAA,KAAA,GAAC8H,EAAAjS,EAAA,GAAK4U,EAAA5U,EAAA,GAEN4kC,EAAY,GAEdhwB,GACFA,EAAOzK,MAAM,KAAKyE,KAAI,SAAC8K,GACrB,IAAMmrB,EAAWnrB,EAAMvP,MAAM,KAC7By6B,EAAUC,EAAS,IAAMA,EAAS,MAItC,IASMC,EATkBxqC,OAAOuN,KAAK+8B,GACjCzI,OACAr0B,QAAO,SAAChD,EAAIigC,GAIX,OAHIA,IAAQ74B,EAAK43B,cACfh/B,EAAGhG,KAAK8lC,EAAUG,GAAUA,EAAG,IAAIH,EAAUG,GAASA,GAEjDjgC,IACN,IAE6Bw+B,KAAK,KAEvC,MAAO,CACLwB,EAAe7yB,EAAG,IAAI6yB,EAAc7yB,EACpC2yB,EAAU9pC,KAAKgpC,gBAUXD,EAAA7oC,UAAAypC,iBAAR,SAAyBxyB,EAAawpB,GACpC,IAAMuJ,EAAe/B,GAAYxH,GAOjC,OALIuJ,IACF/yB,GAAOA,EAAIhK,SAAS,KAAO,IAAM,IACjCgK,GAAUnX,KAAKgpC,aAAY,IAAIkB,GAG1B/yB,4CApFmBuO,EAAAA,yIADjBqjB,EAAgBjoC,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDuzB,GAAb,iBEtBE,SAAAoB,EACY9kB,EACA+kB,GADApqC,KAAAqlB,KAAAA,EACArlB,KAAAoqC,UAAAA,SASZD,EAAAjqC,UAAAmqC,eAAA,SACEC,EACAC,GAFF,IAAAn5B,EAAApR,KAIQ0C,EAAS,GAEV6nC,IACHA,EAAc,SAACpzB,GAAQ,OAAA/F,EAAKiU,KAAKzb,IAASuN,KAG5C,IAAMoyB,EAAavpC,KAAKoqC,UAAUnB,oBAAoBqB,GAkCtD,OAhCA9qC,OAAOg4B,QAAQ+R,GAAYxlB,SACzB,SAAC7e,OAAAC,EAAAf,EAAAc,EAAA,GAACiS,EAAAhS,EAAA,GAAKqlC,EAAArlC,EAAA,GAMCslC,EAAgBjrC,OAAOkgC,OAAO8K,GAEpC,GAA6B,IAAzBC,EAAc9pC,OAEhB+B,EAAOsB,KAAI5D,EAAAA,EAAA,GACNqqC,EAAc,GAAGnB,YAAU,CAC9BoB,MAAOH,EAAYpzB,UAEhB,CAGL,IAAMwzB,EAAQJ,EAAYpzB,GAAKtD,KAAK+2B,EAAAA,YAAY,IAEhDH,EAAc1mB,SAAQ,SAAC8mB,GACrBnoC,EAAOsB,KAAI5D,EAAAA,EAAA,GACNyqC,EAAUvB,YAAU,CACvBoB,MAAOC,EAAM92B,KACXC,EAAAA,KAAI,SAACopB,GAAS,OAAA0L,GAAiB1L,EAAM2N,EAAUlK,sBAQpDj+B,4CAtDSgjB,EAAAA,kBACKqjB,mJAHZoB,EAA2BrpC,EAAA,CAHvCyU,EAAAA,WAAW,CACVC,WAAY,UAED20B,oBCAX,SAAAW,EACYzlB,EACAX,EACAiS,EACAoU,GAHA/qC,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EACA32B,KAAA+qC,kBAAAA,EAsCd,OAnCED,EAAA5qC,UAAAyK,KAAA,SAAKwuB,EAAqBtV,GACxB,OAAO7jB,KAAKqlB,KACTzb,IAAI5J,KAAKyjB,YAAY0V,EAAatV,IAClChQ,KAAK7T,KAAK22B,UAAUP,SAASkB,MAGlCwT,EAAA5qC,UAAA8qC,SAAA,SAASzF,GAAT,IAAAn0B,EAAApR,KACQsqC,EAA0C/E,EAASzxB,KAAI,SAACuiB,GAAU,MAAA,CACtEiT,WAAYjT,EACZlf,IAAK/F,EAAKqS,YAAY4S,EAAMiD,KAAMjD,EAAMxS,WAG1C,OAAO7jB,KAAK+qC,kBACTV,eAA4BC,GAC5Bx2B,KACC,SAACm3B,GACC,OAAC7qC,EAAAA,EAAA,GACI6qC,GAAa,CAChBP,MAAOO,EAAcP,MAAM72B,KACzBzC,EAAKulB,UAAUP,SAASkB,WAM1BwT,EAAA5qC,UAAAujB,YAAV,SAAsB6V,EAAczV,GAClC,OAAO7jB,KAAK0kB,aAAahB,OACvB,UACA,CACEyV,YAAaG,QAEfvtB,EACA8X,6CAtCc6B,EAAAA,kBACQzC,UACH4S,UACQsU,MALpBW,EAAiBhqC,EAAA,CAD7ByU,EAAAA,cACYu1B,SCVb,gBCDA,gBCAA,gBCKA,cNRYhC,GAAAA,EAAAA,eAAAA,EAAAA,aAAY,KACtB,KAAA,OACAA,GAAA,QAAA,UACAA,GAAA,WAAA,aACAA,GAAA,SAAA,eODWoC,GAAqC,CAChD7iC,QAAS,CACPC,IAAK,CACHC,UAAW,CACTmvB,QACE,qLACFyT,eAAgB,CACdC,KACE,sGACF3qB,QACE,+OACF4qB,WAAY,iDACZC,SACE,wHAEJC,eAAgB,kCAIhBvG,kBACE,qFAEFwG,cACE,+LAEFC,mBAAoB,yBAGxBC,cAAe,CACbhU,QAAS,CACPjX,QAAS,CACPkrB,QAAS,CAAC7C,EAAAA,aAAa8C,KAAM9C,EAAAA,aAAa+C,6BC8BpD,SAAAC,KAA+B,OAAlBA,EAAgBhrC,EAAA,CA1C5BkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACTT,EAAqB+kC,IACrB,CACEtlC,QAASmmC,GACT3U,SAAU0T,IAEZ,CACEllC,QAAS0xB,GACTnS,YAAa6e,GACbl+B,OAAO,GAET,CACEF,QAAS0xB,GACTnS,YAAashB,GACb3gC,OAAO,GAET,CACEF,QAASomC,GACT5U,SAAUwP,IAEZ,CACEhhC,QAAS+gC,GACTxhB,YAAaqhB,GACb1gC,OAAO,GAET,CACEF,QAASqmC,GACT7U,SAAUsQ,IAEZ,CACE9hC,QAAS2hC,GACTpiB,YAAaigB,GACbt/B,OAAO,GAET,CACEF,QAASsmC,GACT9U,SAAU2P,QAIH+E,MC3DAK,GAAsB,IAAI7mC,EAAAA,eACrC,sBAGW8mC,GAAsB,IAAI9mC,EAAAA,eACrC,sBAGW+mC,GAAqB,IAAI/mC,EAAAA,eACpC,qBAGWgnC,GAAoB,IAAIhnC,EAAAA,eACnC,kCCCA,SAAAinC,EACYlnB,EACAC,EACAwR,GAFA92B,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EAiEd,OA9DEyV,EAAArsC,UAAAssC,cAAA,WACE,OAAOxsC,KAAKqlB,KACTzb,IAAsB5J,KAAKslB,oBAAoB5B,OAAO,cACtD7P,KACCC,EAAAA,KAAI,SAAC24B,GAAiB,OAAAA,EAAa9qB,aACnC3hB,KAAK82B,iBAAiBN,aAAa2V,MAIzCI,EAAArsC,UAAAwsC,eAAA,WACE,OAAO1sC,KAAKqlB,KACTzb,IAAsB5J,KAAKslB,oBAAoB5B,OAAO,eACtD7P,KACCC,EAAAA,KAAI,SAAC64B,GAAiB,OAAAA,EAAa5rB,cACnC/gB,KAAK82B,iBAAiBN,aAAa4V,MAIzCG,EAAArsC,UAAA0sC,cAAA,SAAc7iC,GACZ,OAAO/J,KAAKqlB,KACTzb,IACC5J,KAAKslB,oBAAoB5B,OACvB,iBACA3X,EACAhC,EAAO,CAAEA,KAAIA,QAAKgC,IAGrB8H,KACCC,EAAAA,KAAI,SAAC+4B,GAAgB,OAAAA,EAAYC,aACjC9sC,KAAK82B,iBAAiBN,aAAa6V,MAIzCE,EAAArsC,UAAA6sC,YAAA,SAAYC,GACV,OAAOhtC,KAAKqlB,KACTzb,IACC5J,KAAKslB,oBAAoB5B,OAAO,UAAW,CAAEupB,QAASD,KAEvDn5B,KACCC,EAAAA,KAAI,SAACo5B,GAAe,OAAAA,EAAWC,WAC/BntC,KAAK82B,iBAAiBN,aAAa8V,MAIzCC,EAAArsC,UAAAktC,aAAA,WACE,IACMC,EADUrtC,KAAKslB,oBAAoB/B,kBACflU,MAAM,KAC1BiR,EAAa+sB,EAAUtpC,MACvBoT,EAAMk2B,EAAU7E,KAAK,KAAO,aAE5B1uB,EAAS,IAAIuK,EAAAA,WAAW,CAC5BF,WAAY,gBAGd,OAAOnkB,KAAKqlB,KACTzb,IAA+BuN,EAAK,CAAE2C,OAAQA,IAC9CjG,KACCC,EAAAA,KAAI,SAACw5B,GACH,OAAOA,EAASC,UAAUlzB,MAAK,SAACmzB,GAAS,OAAAA,EAAK3K,MAAQviB,mDA/D5CoF,EAAAA,kBACezC,UACH4S,MAJnB0W,EAAczrC,EAAA,CAD1ByU,EAAAA,cACYg3B,SCdb,aCFakB,GAAyC,CACpDplC,QAAS,CACPC,IAAK,CACHC,UAAW,CACToZ,UAAW,YACXZ,WAAY,aACZ+rB,UAAW,YACXK,QACE,6ECWVO,GAAA,WAGE,SAAAA,EACYp6B,EACVmI,EACU/V,GAFA1F,KAAAsT,MAAAA,EAEAtT,KAAA0F,OAAAA,EAEV1F,KAAKsW,eAAiBmF,EAAOnF,eAgEjC,OA1DEo3B,EAAAxtC,UAAAiiB,OAAA,WAAA,IAAA/Q,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOw5B,IACPxwB,EAAAA,KAAI,SAAC4D,GACEA,GACH3P,EAAKkC,MAAMI,SAAS,IAAIk6B,OAG5B98B,EAAAA,QAAO,SAAC+8B,GAAc,OAAAh5B,QAAQg5B,QAOlCH,EAAAxtC,UAAA8hB,UAAA,WACE,OAAOhiB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO25B,IACPh9B,EAAAA,QAAO,SAACoR,GAAW,OAAArN,QAAQqN,QAO/BwrB,EAAAxtC,UAAAkiB,UAAA,SAAUhB,GAAV,IAAAhQ,EAAApR,KACE,OAAOA,KAAKsT,MACTO,KAAKM,EAAAA,OAAO25B,IAAyC75B,EAAAA,KAAK,IAC1DC,WAAU,SAAC4M,GACNA,IAAmBM,GACrBhQ,EAAKkC,MAAMI,SACT,IAAIq6B,GAAqC3sB,QAWnDssB,EAAAxtC,UAAAqiB,WAAA,WACE,IAAMyrB,EACJhuC,KAAKsW,gBAAkBtW,KAAKsW,eAAekR,QAAQ,YAEnDwmB,GACAvvB,GAA0Bze,KAAK0F,O9GjFF,Y8GiF+ByH,SAC1D6gC,GAGFhuC,KAAKoiB,UAAU4rB,GAEfhuC,KAAKoiB,UACHzD,GAA2B3e,KAAK0F,O9GxFL,uD8GwBd4P,EAAAA,aACTY,UACU5O,KANTomC,EAAe5sC,EAAA,CAD3ByU,EAAAA,cACYm4B,GAAb,GCAAO,GAAA,WAGE,SAAAA,EACY36B,EACVmI,EACU/V,GAFA1F,KAAAsT,MAAAA,EAEAtT,KAAA0F,OAAAA,EAEV1F,KAAKsW,eAAiBmF,EAAOnF,eAgEjC,OA1DE23B,EAAA/tC,UAAAiiB,OAAA,WAAA,IAAA/Q,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+5B,IACP/wB,EAAAA,KAAI,SAACwE,GACEA,GACHvQ,EAAKkC,MAAMI,SAAS,IAAIy6B,OAG5Br9B,EAAAA,QAAO,SAAC6Q,GAAc,OAAA9M,QAAQ8M,QAOlCssB,EAAA/tC,UAAA8hB,UAAA,WACE,OAAOhiB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOi6B,IACPt9B,EAAAA,QAAO,SAACoR,GAAW,OAAArN,QAAQqN,QAO/B+rB,EAAA/tC,UAAAkiB,UAAA,SAAUhB,GAAV,IAAAhQ,EAAApR,KACE,OAAOA,KAAKsT,MACTO,KAAKM,EAAAA,OAAOi6B,IAAyCn6B,EAAAA,KAAK,IAC1DC,WAAU,SAACsN,GACNA,IAAmBJ,GACrBhQ,EAAKkC,MAAMI,SACT,IAAI26B,GAAqCjtB,QAWnD6sB,EAAA/tC,UAAAqiB,WAAA,WACE,IAAM+rB,EACJtuC,KAAKsW,gBAAkBtW,KAAKsW,eAAekR,QAAQ,YAEnD8mB,GACA7vB,GAA0Bze,KAAK0F,O/GlFF,Y+GkF+ByH,SAC1DmhC,GAGFtuC,KAAKoiB,UAAUksB,GAEftuC,KAAKoiB,UACHzD,GAA2B3e,KAAK0F,O/GzFL,uD+GyBd4P,EAAAA,aACTY,UACU5O,KANT2mC,EAAentC,EAAA,CAD3ByU,EAAAA,cACY04B,GAAb,iBCGE,SAAAM,EACUC,EACAC,EACA/pB,EACAhf,GAJV,IAAA0L,EAAApR,KACUA,KAAAwuC,gBAAAA,EACAxuC,KAAAyuC,gBAAAA,EACAzuC,KAAA0kB,aAAAA,EACA1kB,KAAA0F,OAAAA,EAER1F,KAAK0uC,WAAa/vB,GAChB3e,KAAK0F,OhH/BwB,YgHkC/B1F,KAAK2uC,WAAahwB,GAChB3e,KAAK0F,OhHlCwB,YgHsC/B1F,KAAKwuC,gBACFxsB,YACA9N,WAAU,SAACgpB,GAAS,OAAC9rB,EAAKs9B,WAAaxR,KAE1Cl9B,KAAKyuC,gBAAgBzsB,YAAY9N,WAAU,SAACgpB,GAC1C9rB,EAAKu9B,WAAazR,YAItBqR,EAAAruC,UAAAqd,UAAA,SACEjU,EACA/G,GAWA,OATI+G,EAAQ6N,IAAIhK,SAASnN,KAAK0kB,aAAanB,qBACzCja,EAAUA,EAAQG,MAAM,CACtBmlC,UAAW,CACTC,KAAM7uC,KAAK0uC,WACXI,KAAM9uC,KAAK2uC,eAKVpsC,EAAKsT,OAAOvM,6CApCM2kC,UACAP,UACHzqB,UACN3b,2KARPinC,EAAsBztC,EAAA,CADlCyU,EAAAA,WAAW,CAAEC,WAAY,UACb+4B,oBCIb,SAAAQ,KAAmC,OAAtBA,EAAoBjuC,EAAA,CAfhCkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACTT,EAAqBsnC,IACrB,CACE7nC,QAASopC,GACT5X,SAAUmV,IAEZ,CACE3mC,QAASsf,EAAAA,kBACTC,YAAaopB,GACbzoC,OAAO,OAIAipC,SCfb,aCPaE,GAAyC,CACpD5mC,QAAS,CACPC,IAAK,CACHC,UAAW,CACT+K,MAAO,gCACP47B,OACE,8QACFC,aAAc,wCCIpB,SAAAC,EAAsBC,GAAArvC,KAAAqvC,QAAAA,SAEtBD,EAAAlvC,UAAAynC,OAAA,SACE3rB,EACA4rB,EACA0H,GAEA,OAAOtvC,KAAKqvC,QAAQ1H,OAAO3rB,EAAO4rB,EAAc0H,IAGlDF,EAAAlvC,UAAAqvC,UAAA,WACE,OAAOvvC,KAAKqvC,QAAQG,cAGtBJ,EAAAlvC,UAAA0J,IAAA,SAAI6lC,GACF,OAAOzvC,KAAKqvC,QAAQ1kC,KAAK8kC,6CAfIC,uHADpBN,EAAoBtuC,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACb45B,MCJAO,GAA8B,IAAIrqC,EAAAA,eAE7C,4BAEWsqC,GAAsC,IAAItqC,EAAAA,eAErD,mCAEWuqC,GAAyB,IAAIvqC,EAAAA,eAExC,sCCKA,SAAAwqC,EACYzqB,EACAC,EACAwR,GAFA92B,KAAAqlB,KAAAA,EACArlB,KAAAslB,oBAAAA,EACAtlB,KAAA82B,iBAAAA,EA4Dd,OAzDEgZ,EAAA5vC,UAAAynC,OAAA,SACE3rB,EACA4rB,EACA0H,GAEA,OAAOtvC,KAAK+vC,kBAAkB/zB,EAAO4rB,EAAc0H,GAAmBz7B,KACpE7T,KAAK82B,iBAAiBV,SAASwZ,MAInCE,EAAA5vC,UAAAsvC,WAAA,WACE,OAAOxvC,KAAKqlB,KACTzb,IAAwB5J,KAAKslB,oBAAoB5B,OAAO,iBACxD7P,KACCC,EAAAA,KACE,SAAC5O,GAAsC,OAApCA,EAAA8qC,iCAELhwC,KAAK82B,iBAAiBN,aAAaqZ,MAIzCC,EAAA5vC,UAAAyK,KAAA,SAAK8kC,GACH,OAAOzvC,KAAKqlB,KACTzb,IACC5J,KAAKslB,oBAAoB5B,OAAO,QAAS,CAAE+rB,QAAOA,KAEnD57B,KAAK7T,KAAK82B,iBAAiBV,SAASuZ,MAG/BG,EAAA5vC,UAAA6vC,kBAAV,SACE/zB,EACA4rB,EACA0H,GAEA,IAAMx1B,EAAS,GAmBf,OAjBIw1B,GACFx1B,EAAkB,UAAIm2B,OAAOX,EAAkBY,WAC/Cp2B,EAAiB,SAAIm2B,OAAOX,EAAkBa,UAC9Cr2B,EAAe,OAAIm2B,OAAO,aAE1Bn2B,EAAc,MAAIkC,EAEhB4rB,EAAa3Q,WACfnd,EAAiB,SAAIm2B,OAAOrI,EAAa3Q,WAEvC2Q,EAAaxG,cACftnB,EAAoB,YAAIm2B,OAAOrI,EAAaxG,cAE1CwG,EAAavG,OACfvnB,EAAa,KAAI8tB,EAAavG,MAGzBrhC,KAAKqlB,KAAKzb,IACf5J,KAAKslB,oBAAoB5B,OAAO,cAAU3X,EAAW+N,8CA3DvC4L,EAAAA,kBACezC,UACH4S,MAJnBia,EAAqBhvC,EAAA,CADjCyU,EAAAA,cACYu6B,oBCVb,SAAAM,KAAmC,OAAtBA,EAAoBtvC,EAAA,CANhCkG,EAAAA,SAAS,CACRJ,UAAW,CACTT,EAAqB8oC,IACrB,CAAErpC,QAAS8pC,GAAoBtY,SAAU0Y,QAGhCM,MCRAC,GAA8B,IAAI/qC,EAAAA,eAE7C,2CCQA,SAAAgrC,EACYjrB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAWd,OARE2Z,EAAApwC,UAAAqwC,8BAAA,WACE,IAAMp5B,EAAMnX,KAAK0kB,aAAahB,OAAO,6BACrC,OAAO1jB,KAAKqlB,KAAKzb,IAA6BuN,GAAKtD,KACjD4J,EAAAA,YAAW,SAACnZ,GAAU,OAAAwZ,EAAAA,WAAWxZ,MACjCwP,EAAAA,KAAI,SAAC08B,GAAgB,OAAAA,EAAYC,oBACjCzwC,KAAK22B,UAAUH,aAAa6Z,+CAVd3qB,EAAAA,kBACQzC,UACH4S,MALZya,EAAmCxvC,EAAA,CAD/CyU,EAAAA,cACY+6B,oBCUX,SAAAI,EACYrrB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA4Ed,OAzEE+Z,EAAAxwC,UAAAi6B,QAAA,SAAQ3mB,GACN,IAAM2D,EAAMnX,KAAK0kB,aAAahB,OAAO,YAAa,CAAElQ,OAAMA,IACpDzK,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACTzb,IAAqBuN,EAAK,CAAEpO,QAAOA,IACnC8K,KACC4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCwP,EAAAA,KAAI,SAAC68B,GAAgB,OAAAA,EAAYC,aACjC5wC,KAAK22B,UAAUH,aAAaoF,MAIlC8U,EAAAxwC,UAAAspB,IAAA,SAAIhW,EAAgB2oB,GAClB,IAAMhlB,EAAMnX,KAAK0kB,aAAahB,OAAO,YAAa,CAAElQ,OAAMA,IACpDzK,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAIlB,OAFA2W,EAAUn8B,KAAK22B,UAAUD,QAAQyF,EAASN,IAEnC77B,KAAKqlB,KACTI,KAAKtO,EAAKglB,EAAS,CAAEpzB,QAAOA,IAC5B8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGhDosC,EAAAxwC,UAAAs5B,OAAA,SAAOhmB,EAAgB6oB,EAAmBF,GACxC,IAAMhlB,EAAMnX,KAAK0kB,aAAahB,OAAO,gBAAiB,CACpDlQ,OAAMA,EACN6oB,UAASA,IAELtzB,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAIlB,OAFA2W,EAAUn8B,KAAK22B,UAAUD,QAAQyF,EAASN,IAEnC77B,KAAKqlB,KACTsU,MAAMxiB,EAAKglB,EAAS,CAAEpzB,QAAOA,IAC7B8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGhDosC,EAAAxwC,UAAA2wC,OAAA,SAAOr9B,EAAgB2oB,GACrB,IAAMhlB,EAAMnX,KAAK0kB,aAAahB,OAAO,sBAAuB,CAAElQ,OAAMA,IAChEzK,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,qBAOlB,MpJ/EiC,coJ0E7BhS,IACFzK,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,IAEjEozB,EAAUn8B,KAAK22B,UAAUD,QAAQyF,EAASN,IAEnC77B,KAAKqlB,KACTI,KAAwBtO,EAAKglB,EAAS,CAAEpzB,QAAOA,IAC/C8K,KACC4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCtE,KAAK22B,UAAUP,SAAS0F,MAI9B4U,EAAAxwC,UAAAsJ,OAAA,SAAOgK,EAAgB6oB,GACrB,IAAMllB,EAAMnX,KAAK0kB,aAAahB,OAAO,gBAAiB,CACpDlQ,OAAMA,EACN6oB,UAASA,IAELtzB,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACT7b,OAAO2N,EAAK,CAAEpO,QAAOA,IACrB8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDA5E9BohB,EAAAA,kBACQzC,UACH4S,MAJZ6a,EAAqB5vC,EAAA,CADjCyU,EAAAA,cACYm7B,oBCRX,SAAAI,EACYzrB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA+Cd,OA5CEma,EAAA5wC,UAAA6wC,aAAA,SAAav9B,GACX,IAAM2D,EAAMnX,KAAK0kB,aAAahB,OAAO,mBAAoB,CAAElQ,OAAMA,IAC3DzK,EAAU,IAAII,EAAAA,YAAY,CAAE6nC,gBAAiB,aACnD,OAAOhxC,KAAKqlB,KACTzb,IAA6BuN,EAAK,CAAEpO,QAAOA,IAC3C8K,KACC4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCwP,EAAAA,KAAI,SAAC08B,GAAgB,OAAAA,EAAYC,oBACjCzwC,KAAK22B,UAAUH,aAAa6Z,MAIlCS,EAAA5wC,UAAAozB,YAAA,SACE9f,EACAy9B,EACAC,GAEA,IAAM/5B,EAAMnX,KAAK0kB,aAAahB,OAAO,WAAY,CAAElQ,OAAMA,IACnDgnB,GAAa,IAAInW,EAAAA,YACpBjb,IAAI,oBAAqB6nC,GACzB7nC,IAAI,yBAA0B8nC,EAAuB5sB,YAClDvb,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,oCAChBwrB,gBAAiB,aAEnB,OAAOhxC,KAAKqlB,KACTI,KAA0BtO,EAAKqjB,EAAY,CAAEzxB,QAAOA,IACpD8K,KACC4J,EAAAA,YAAW,SAACnZ,GAAU,OAAAwZ,EAAAA,WAAWxZ,MACjCtE,KAAK22B,UAAUP,SAASia,MAI9BS,EAAA5wC,UAAA0zB,gBAAA,SAAgBpgB,EAAgB29B,GAC9B,IAAMpoC,EAAU,IAAII,EAAAA,YAAY,CAC9B6nC,gBAAiB,aAEb75B,EAAMnX,KAAK0kB,aAAahB,OAAO,gBAAiB,CACpDlQ,OAAMA,EACN49B,UAAWD,IAGb,OAAOnxC,KAAKqlB,KAAK7b,OAAO2N,EAAK,CAAEpO,QAAOA,8CA/CtB2c,EAAAA,kBACQzC,UACH4S,MAJZib,EAAqBhwC,EAAA,CADjCyU,EAAAA,cACYu7B,MCFAO,GAA2B,IAAI/rC,EAAAA,eAE1C,0BAEWgsC,GAAkC,IAAIhsC,EAAAA,eAEjD,iCAEWisC,GAAkC,IAAIjsC,EAAAA,eAEjD,gCAEWksC,GAAwC,IAAIlsC,EAAAA,eAEvD,qCAEWmsC,GAA2B,IAAInsC,EAAAA,eAE1C,wCCSA,SAAAosC,EACYrsB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAyJd,OAtJS+a,EAAAxxC,UAAAyK,KAAP,SAAY6I,EAAgBm+B,GAC1B,IAAMx6B,EAAMnX,KAAK0kB,aAAahB,OAAO,cAAe,CAClDlQ,OAAMA,EACNo+B,QAASD,IAGP5oC,EAAU,IAAII,EAAAA,YAKlB,MvJrDiC,cuJiD7BqK,IACFzK,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,IAG1D/I,KAAKqlB,KACTzb,IAAeuN,EAAK,CAAEpO,QAAOA,IAC7B8K,KAAK7T,KAAK22B,UAAUP,SAAS+E,MAG3BuW,EAAAxxC,UAAA2xC,YAAP,SACEr+B,EACAyjB,EACAmK,EACAC,GAEA,IAAMvnB,EAAS,GACXmd,IACFnd,EAAiB,SAAImd,EAAS3S,YAE5B8c,IACFtnB,EAAoB,YAAIsnB,EAAY9c,YAElC+c,IACFvnB,EAAa,KAAIunB,EAAK/c,YAGxB,IAAMnN,EAAMnX,KAAK0kB,aAAahB,OAAO,eAAgB,CAAElQ,OAAMA,GAAIsG,GAEjE,OAAO9Z,KAAKqlB,KACTzb,IAA0BuN,GAC1BtD,KAAK7T,KAAK22B,UAAUP,SAASib,MAG3BK,EAAAxxC,UAAA4xC,uBAAP,SACEH,EACAI,EACAv+B,QAAA,IAAAA,IAAAA,EvJtF+B,WuJwF/B,IAAM2D,EAAMnX,KAAK0kB,aAAahB,OAAO,sBAAuB,CAC1DlQ,OAAMA,EACNm+B,UAASA,EACTI,gBAAeA,IAEjB,OAAO/xC,KAAKqlB,KACTzb,IAAyBuN,GACzBtD,KAAK7T,KAAK22B,UAAUP,SAASkb,MAG3BI,EAAAxxC,UAAA8xC,OAAP,SACEx+B,EACAm+B,EACAM,GAEA,IAAM96B,EAAMnX,KAAK0kB,aAAahB,OAAO,cAAe,CAClDlQ,OAAMA,EACNo+B,QAASD,IAEL5oC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACTI,KAAKtO,EAAK86B,EAAoB,CAAElpC,QAAOA,IACvC8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGzCotC,EAAAxxC,UAAAgyC,oBAAP,SACE1+B,EACA2+B,GAEA,IAAMh7B,EAAMnX,KAAK0kB,aAAahB,OAAO,cAAe,CAClDlQ,OAAMA,IAEFzK,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAQlB,OALA2sB,EAAqBnyC,KAAK22B,UAAUD,QAClCyb,EACAX,IAGKxxC,KAAKqlB,KAAKI,KAAKtO,EAAKg7B,EAAoB,CAAEppC,QAAOA,IAAI8K,KAC1D4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCtE,KAAK22B,UAAUP,SAASmb,MAIrBG,EAAAxxC,UAAAkyC,sBAAP,SACE5+B,EACAyjB,EACAmK,EACAC,GAEA,IAAMvnB,EAAS,GACXmd,IACFnd,EAAiB,SAAImd,EAAS3S,YAE5B8c,IACFtnB,EAAoB,YAAIsnB,EAAY9c,YAElC+c,IACFvnB,EAAa,KAAIunB,EAAK/c,YAGxB,IAAMnN,EAAMnX,KAAK0kB,aAAahB,OAAO,eAAgB,CAAElQ,OAAMA,GAAIsG,GAEjE,OAAO9Z,KAAKqlB,KACTzb,IAAuBuN,GACvBtD,KAAK7T,KAAK22B,UAAUP,SAASqb,MAG3BC,EAAAxxC,UAAAmyC,wBAAP,SACE7+B,EACA8+B,GAEA,IAAMn7B,EAAMnX,KAAK0kB,aAAahB,OAAO,oBAAqB,CACxDlQ,OAAMA,EACN8+B,kBAAiBA,IAGnB,OAAOtyC,KAAKqlB,KACTzb,IAAmBuN,GACnBtD,KAAK7T,KAAK22B,UAAUP,SAASmb,MAG3BG,EAAAxxC,UAAAqyC,oBAAP,SACE/+B,EACA8+B,EACAE,GAEA,IAAMr7B,EAAMnX,KAAK0kB,aAAahB,OAAO,eAAgB,CACnDlQ,OAAMA,EACN8+B,kBAAiBA,IAEbvpC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACTsU,MAAMxiB,EAAKq7B,EAA2B,CAAEzpC,QAAOA,IAC/C8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDAzJ9BohB,EAAAA,kBACQzC,UACH4S,MAJZ6b,EAAmB5wC,EAAA,CAD/ByU,EAAAA,cACYm8B,oBCvBX,SAAAe,EACYptB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAoDd,OAjDE8b,EAAAvyC,UAAAi6B,QAAA,SAAQ3mB,GACN,IAAM2D,EACJnX,KAAK0kB,aAAahB,OAAO,oBAAqB,CAAElQ,OAAMA,IAAM,cACxDzK,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACTzb,IAA4BuN,EAAK,CAAEpO,QAAOA,IAC1C8K,KACC4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,MACtCwP,EAAAA,KAAI,SAAC4+B,GAAe,OAAAA,EAAWC,YAC/B3yC,KAAK22B,UAAUH,aAAakG,MAIlC+V,EAAAvyC,UAAAsJ,OAAA,SAAOgK,EAAgBo/B,GACrB,IAAMz7B,EAAMnX,KAAK0kB,aAAahB,OAAO,gBAAiB,CACpDlQ,OAAMA,EACNq/B,gBAAiBD,IAEb7pC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACT7b,OAAO2N,EAAK,CAAEpO,QAAOA,IACrB8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAGhDmuC,EAAAvyC,UAAA4yC,WAAA,SAAWt/B,EAAgBo/B,GACzB,IAAMz7B,EAAMnX,KAAK0kB,aAAahB,OAAO,gBAAiB,CACpDlQ,OAAMA,EACNq/B,gBAAiBD,IAGb7pC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAGlB,OAAOxlB,KAAKqlB,KACTsU,MACCxiB,EAEA,CAAEynB,eAAgB,CAAEmU,UAAW,MAAQjV,gBAAgB,GACvD,CAAE/0B,QAAOA,IAEV8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDApD9BohB,EAAAA,kBACQzC,UACH4S,MAJZ4c,EAAqB3xC,EAAA,CADjCyU,EAAAA,cACYk9B,MCRAO,GAAkB,IAAI1tC,EAAAA,eACjC,kBAGW2tC,GAAkB,IAAI3tC,EAAAA,eACjC,kBAGW4tC,GAA0B,IAAI5tC,EAAAA,eAEzC,wBAEW6tC,GAAmB,IAAI7tC,EAAAA,eAClC,iCCIA,SAAA8tC,EACY/tB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EA8Gd,OA3GEyc,EAAAlzC,UAAAyK,KAAA,SAAK6I,GACH,IAAM2D,EAAMnX,KAAK0kB,aAAahB,OAAO,OAAQ,CAAElQ,OAAMA,IACrD,OAAOxT,KAAKqlB,KACTzb,IAAcuN,GACdtD,KAAK7T,KAAK22B,UAAUP,SAAS4c,MAGlCI,EAAAlzC,UAAAs5B,OAAA,SAAOhmB,EAAgB6/B,GACrB,IAAMl8B,EAAMnX,KAAK0kB,aAAahB,OAAO,OAAQ,CAAElQ,OAAMA,IAErD,OADA6/B,EAAOrzC,KAAK22B,UAAUD,QAAQ2c,EAAMJ,IAC7BjzC,KAAKqlB,KAAKsU,MAAMxiB,EAAKk8B,IAG9BD,EAAAlzC,UAAAozC,SAAA,SAASD,GACP,IAAMl8B,EAAcnX,KAAK0kB,aAAahB,OAAO,gBACzC3a,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,qBAKlB,OAHAzc,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,GAC/DsqC,EAAOrzC,KAAK22B,UAAUD,QAAQ2c,EAAMH,IAE7BlzC,KAAKqlB,KACTI,KAAWtO,EAAKk8B,EAAM,CAAEtqC,QAAOA,IAC/B8K,KAAK7T,KAAK22B,UAAUP,SAAS4c,MAGlCI,EAAAlzC,UAAAqzC,cAAA,SAAcC,EAAc//B,GAC1B,IAAM0D,EAAcnX,KAAK0kB,aAAahB,OAAO,gBACzC3a,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,sCAElBzc,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,GAE/D,IAAMyxB,GAAyB,IAAInW,EAAAA,YAChCjb,IAAI,OAAQoqC,GACZpqC,IAAI,WAAYqK,GAEnB,OAAOzT,KAAKqlB,KACTI,KAAWtO,EAAKqjB,EAAY,CAAEzxB,QAAOA,IACrC8K,KAAK7T,KAAK22B,UAAUP,SAAS4c,MAGlCI,EAAAlzC,UAAAuzC,2BAAA,SAA2BC,GACzB,IAAMv8B,EAAMnX,KAAK0kB,aAAahB,OAAO,sBAC/B8W,GAAyB,IAAInW,EAAAA,YAAajb,IAC9C,SACAsqC,GAEE3qC,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,sCAGlB,OADAzc,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,GACxD/I,KAAKqlB,KAAKI,KAAKtO,EAAKqjB,EAAY,CAAEzxB,QAAOA,KAGlDqqC,EAAAlzC,UAAAyzC,cAAA,SAAc3gC,EAAe4gC,GAC3B,IAAMz8B,EAAMnX,KAAK0kB,aAAahB,OAAO,qBACjC3a,EAAU,IAAII,EAAAA,YAAY,CAC5Bqc,eAAgB,qBAIlB,OAFAzc,EAAUJ,EAAgBC,aAAaF,GAAkB,EAAMK,GAExD/I,KAAKqlB,KAAKI,KAAKtO,EAAK,CAAEnE,MAAKA,EAAE4gC,YAAWA,GAAI,CAAE7qC,QAAOA,KAG9DqqC,EAAAlzC,UAAA2zC,YAAA,SACErgC,EACAsgC,EACAC,GAEA,IAAM58B,EAAMnX,KAAK0kB,aAAahB,OAAO,oBAAqB,CAAElQ,OAAMA,IAC5DgnB,GAAyB,IAAInW,EAAAA,YAChCjb,IAAI,WAAY0qC,GAChB1qC,IAAI,WAAY2qC,GACbhrC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAElB,OAAOxlB,KAAKqlB,KAAKoV,IAAItjB,EAAKqjB,EAAY,CAAEzxB,QAAOA,KAGjDqqC,EAAAlzC,UAAA8zC,eAAA,SACExgC,EACAygC,EACAL,GAEA,IAAMz8B,EAAMnX,KAAK0kB,aAAahB,OAAO,qBAAsB,CAAElQ,OAAMA,IAC7DgnB,GAAyB,IAAInW,EAAAA,YAChCjb,IAAI,MAAO6qC,GACX7qC,IAAI,MAAOwqC,GACR7qC,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAElB,OAAOxlB,KAAKqlB,KAAKoV,IAAItjB,EAAKqjB,EAAY,CAAEzxB,QAAOA,KAGjDqqC,EAAAlzC,UAAA05B,OAAA,SAAOpmB,GACL,IAAM2D,EAAMnX,KAAK0kB,aAAahB,OAAO,OAAQ,CAAElQ,OAAMA,IACrD,OAAOxT,KAAKqlB,KAAK7b,OAAa2N,IAGhCi8B,EAAAlzC,UAAAg0C,WAAA,WACE,IAAM/8B,EAAMnX,KAAK0kB,aAAahB,OAAO,UACrC,OAAO1jB,KAAKqlB,KAAKzb,IAAmBuN,GAAKtD,KACvCC,EAAAA,KAAI,SAACqgC,GAAc,OAAAA,EAAUC,UAC7Bp0C,KAAK22B,UAAUH,aAAa2c,+CA7GdztB,EAAAA,kBACQzC,UACH4S,MAJZud,EAActyC,EAAA,CAD1ByU,EAAAA,cACY69B,SCjBb,gBCAA,gBCAA,gBCSA,gBCTA,gBCAA,aCDaiB,GAAkC,CAC7ChsC,QAAS,CACPC,IAAK,CACHC,UAAW,CAET8qC,KAAM,kBACNiB,aAAc,QACdC,mBAAoB,0BACpBC,kBAAmB,gBACnBC,kBAAmB,wBACnBC,mBAAoB,2BACpBN,OAAQ,SACRO,kBAAmB,iCACnBC,cAAe,oDACfC,aAAc,yBACdC,YAAa,gDACbC,0BAA2B,mCAC3BtE,iBAAkB,mCAClBhf,SAAU,2BACVujB,cAAe,wCACfpE,UAAW,4BACXqE,cAAe,yCACfC,oBAAqB,yCACrBC,oBACE,+EACFC,gBAAiB,kCACjBC,YAAa,sDACbC,mBACE,6DACFC,uBAAwB,0CACxBC,iBAAkB,mCAClBC,oBACE,uGACFC,YAAa,iDACbC,YACE,iRACFC,aAAc,4CACdC,kBACE,sSACFC,aAAc,2DClCtB,aCHaC,GAA2C,IAAIzwC,EAAAA,eAE1D,sDCWA,SAAA0wC,EACY3wB,EACAX,EACAiS,GAFA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA22B,UAAAA,EAyEd,OAtEEqf,EAAA91C,UAAA+1C,mBAAA,SACEziC,EACAyjB,EACAmK,EACAC,GAGA,GpK7BiC,coK6B7B7tB,EACF,OAAOoD,EAAAA,GAAG,IAGZ,IAAMO,EAAMnX,KAAK0kB,aAAahB,OAAO,kBAAmB,CAAElQ,OAAMA,IAE5DsG,GAAS,IAAIuK,EAAAA,YAAajb,IAAI,OAAQi4B,GAAc,iBAEpDpK,IACFnd,EAASA,EAAO1Q,IAAI,WAAY6tB,EAAS3S,aAEvC8c,IACFtnB,EAASA,EAAO1Q,IAAI,cAAeg4B,EAAY9c,aAGjD,IAAMvb,EAAU/I,KAAKk2C,gBAErB,OAAOl2C,KAAKqlB,KACTzb,IAAoCuN,EAAK,CAAEpO,QAAOA,EAAE+Q,OAAMA,IAC1DjG,KAAK7T,KAAK22B,UAAUP,SAAS2f,MAGlCC,EAAA91C,UAAAi2C,oBAAA,SAAoB3iC,EAAgB4iC,GAClC,IAAMj/B,EAAMnX,KAAK0kB,aAAahB,OAAO,qBAAsB,CACzDlQ,OAAMA,EACN4iC,WAAUA,IAENrtC,EAAU/I,KAAKk2C,gBAErB,OAAOl2C,KAAKqlB,KAAK7b,OAAO2N,EAAK,CAAEpO,QAAOA,KAGxCitC,EAAA91C,UAAAm2C,mBAAA,SACE7iC,EACA4iC,GAEA,IAAMj/B,EAAMnX,KAAK0kB,aAAahB,OAAO,qBAAsB,CACzDlQ,OAAMA,EACN4iC,WAAUA,IAENrtC,EAAU/I,KAAKk2C,gBAErB,OAAOl2C,KAAKqlB,KAAKI,KAAKtO,EAAK,CAAEpO,QAAOA,KAGtCitC,EAAA91C,UAAAo2C,oBAAA,SACE9iC,EACA4iC,GAEA,IAAMj/B,EAAMnX,KAAK0kB,aAAahB,OAAO,cAAe,CAClDlQ,OAAMA,EACN4iC,WAAUA,IAENrtC,EAAU/I,KAAKk2C,gBAErB,OAAOl2C,KAAKqlB,KAAKI,KAAKtO,EAAK,CAAEpO,QAAOA,KAG9BitC,EAAA91C,UAAAg2C,cAAR,WACE,OAAO,IAAI/sC,EAAAA,YAAY,CACrBqc,eAAgB,+DAxEFE,EAAAA,kBACQzC,UACH4S,MAJZmgB,EAAwBl1C,EAAA,CADpCyU,EAAAA,cACYygC,SCbb,aCCaO,GAAqC,IAAIjxC,EAAAA,eAEpD,oCAEWkxC,GAAqC,IAAIlxC,EAAAA,eAEpD,kDCDA,SAAAmxC,EAAsBpH,GAAArvC,KAAAqvC,QAAAA,SAEtBoH,EAAAv2C,UAAAi6B,QAAA,SAAQ3mB,GACN,OAAOxT,KAAKqvC,QAAQlV,QAAQ3mB,IAG9BijC,EAAAv2C,UAAAs5B,OAAA,SAAOhmB,EAAgBkjC,GACrB,OAAO12C,KAAKqvC,QAAQ7V,OAAOhmB,EAAQkjC,6CAPNC,uHADpBF,EAAmC31C,EAAA,CAH/CyU,EAAAA,WAAW,CACVC,WAAY,UAEDihC,MCQP1tC,GAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAIlBoxB,GAAA,WAEE,SAAAA,EACYvxB,EACAsR,EACAjS,GAFA1kB,KAAAqlB,KAAAA,EACArlB,KAAA22B,UAAAA,EACA32B,KAAA0kB,aAAAA,EAkCd,OA/BEkyB,EAAA12C,UAAAi6B,QAAA,SAAQ3mB,GACN,OAAOxT,KAAKqlB,KACTzb,IACC5J,KAAK0kB,aAAahB,OAAO,yBAA0B,CAAElQ,OAAMA,IAC3D,CACEzK,QAAOA,KAGV8K,KACCC,EAAAA,KAAI,SAACs3B,GAAS,OAAAA,EAAKsL,eACnB12C,KAAK22B,UAAUH,aAAaggB,IAC5B/4B,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAI5CsyC,EAAA12C,UAAAs5B,OAAA,SACEhmB,EACAkjC,GAMA,OAJAA,EAAc12C,KAAK22B,UAAUD,QAC3BggB,EACAH,IAEKv2C,KAAKqlB,KACTsU,MACC35B,KAAK0kB,aAAahB,OAAO,yBAA0B,CAAElQ,OAAMA,IAC3D,CAAEkjC,YAAaA,GACf,CAAE3tC,QAAOA,KAEV8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDAlC9BohB,EAAAA,kBACKmQ,UACG5S,MALf2zB,EAAoC91C,EAAA,CADhDyU,EAAAA,cACYqhC,GAAb,GCjBaC,GAA+B,IAAIvxC,EAAAA,eAE9C,8BCSIyD,GAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,qBAIlBsxB,GAAA,WACE,SAAAA,EACYzxB,EACAX,EACAhf,EACAixB,GAHA32B,KAAAqlB,KAAAA,EACArlB,KAAA0kB,aAAAA,EACA1kB,KAAA0F,OAAAA,EACA1F,KAAA22B,UAAAA,EA2Ed,OAxESmgB,EAAA52C,UAAA62C,aAAP,SACEvjC,EACAyjB,EACAmK,EACAC,EACAlI,EACA6d,GAEA,IAAIl9B,GAAS,IAAIuK,EAAAA,YAAajb,IAAI,OAAQi4B,GAAc,YAcxD,OAbIpK,IACFnd,EAASA,EAAO1Q,IAAI,WAAY6tB,EAAS3S,aAEvC8c,IACFtnB,EAASA,EAAO1Q,IAAI,cAAeg4B,EAAY9c,aAE7C6U,IACFrf,EAASA,EAAO1Q,IAAI,cAAe+vB,IAEjC6d,IACFl9B,EAASA,EAAO1Q,IAAI,mBAAoB4tC,EAAiB1yB,aAGpDtkB,KAAKqlB,KACTzb,IAAI5J,KAAK0kB,aAAahB,OAAO,sBAAuB,CAAElQ,OAAMA,IAAK,CAChEzK,QAAOkuC,GACPn9B,OAAMA,IAEPjG,KACC7T,KAAK22B,UAAUP,SAASygB,IACxBp5B,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,QAIrCwyC,EAAA52C,UAAAg3C,eAAP,SACE1jC,EACA9O,GAFF,IAAA0M,EAAApR,KAIQoB,EAAuB,GAa7B,OAZAsD,EAAKyyC,qBAAqBpzB,SAAQ,SAAC0T,GACjC,IAAM3d,GAAqB,IAAIuK,EAAAA,YAC5Bjb,IAAI,cAAe1E,EAAKgzB,QAAQ4B,MAChClwB,IAAI,mBAAoBquB,EAAM2f,cACjCh2C,EAAE4C,KACAoN,EAAKiU,KACF7b,OAAO4H,EAAKsT,aAAahB,OAAO,mBAAoB,CAAElQ,OAAMA,IAAK,CAChEsG,OAAQA,IAETjG,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,WAG3C+yC,EAAAA,SAASj2C,IAGX01C,EAAA52C,UAAAo3C,YAAP,SACE9jC,EACA2lB,EACA6d,GAEA,IAAMl9B,GAAS,IAAIuK,EAAAA,YAChBjb,IAAI,cAAe+vB,GACnB/vB,IAAI,mBAAoB4tC,EAAiB1yB,YAC5C,OAAOtkB,KAAKqlB,KACTI,KACCzlB,KAAK0kB,aAAahB,OAAO,mBAAoB,CAAElQ,OAAMA,IACrD,GACA,CACEzK,QAAOkuC,GACPn9B,OAAMA,IAGTjG,KAAK4J,EAAAA,YAAW,SAACnZ,GAAe,OAAAwZ,EAAAA,WAAWxZ,iDA5E9BohB,EAAAA,kBACQzC,UACN7b,SACGyuB,MALZihB,EAAuBh2C,EAAA,CADnCyU,EAAAA,cACYuhC,GAAb,MCbA,2BCME,SAAAS,EAAoB5gB,GAAA32B,KAAA22B,UAAAA,SAEpB4gB,EAAAr3C,UAAAw2B,QAAA,SACE3xB,EACA/D,GAFF,IAAAoQ,EAAApR,KAcE,YAVe+L,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAEbA,GAAUA,EAAOyyC,UACnBx2C,EAAOw2C,QAAUzyC,EAAOyyC,QAAQ1jC,KAAI,SAACpR,GAAW,OAAAtC,EAAAA,EAAA,GAC3CsC,GAAM,CACTg1B,QAAStmB,EAAKulB,UAAUD,QAAQh0B,EAAOg1B,QAASJ,UAI7Ct2B,4CAhBsB60B,uHAHpB0hB,EAA0Bz2C,EAAA,CADtCyU,EAAAA,WAAW,CAAEC,WAAY,UACb+hC,oBCEX,SAAAE,EAAoB9gB,GAAA32B,KAAA22B,UAAAA,SAEpB8gB,EAAAv3C,UAAAw2B,QAAA,SAAQ3xB,EAA2B/D,GAAnC,IAAAoQ,EAAApR,KAYE,YAXe+L,IAAX/K,IACFA,EAAMZ,EAAA,GAAS2E,IAGbA,EAAO2yC,gBACT12C,EAAO02C,cAAgB3yC,EAAO2yC,cAAc5jC,KAAI,SAAC2jB,GAAU,OAAAr3B,EAAAA,EAAA,GACtDq3B,GAAK,CACRyI,WAAY9uB,EAAK2uB,kBAAkBtI,EAAMyI,kBAItCl/B,GAGDy2C,EAAAv3C,UAAA6/B,kBAAR,SAA0Bh7B,GACxB,OAAA3E,EAAAA,EAAA,GACK2E,GAAM,CACT2yB,QAAS13B,KAAK22B,UAAUD,QAAQ3xB,EAAO2yB,QAASJ,gDApBrBzB,uHAFpB4hB,EAA0B32C,EAAA,CADtCyU,EAAAA,WAAW,CAAEC,WAAY,UACbiiC,oBCoDb,SAAAE,KAA4B,OAAfA,EAAa72C,EAAA,CAlCzBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,kBACxB/mB,UAAW,CACTT,EAAqBkuC,IACrB,CAAEzuC,QAASgyC,GAAaxgB,SAAUgc,IAClC,CAAExtC,QAASiyC,GAAoBzgB,SAAUsZ,IACzC,CAAE9qC,QAASkyC,GAAoB1gB,SAAU0Z,IACzC,CACElrC,QAASmyC,GACT3gB,SAAUkZ,IAEZ,CACE1qC,QAASoyC,GACT5gB,SAAUqb,IAEZ,CAAE7sC,QAASqyC,GAAkB7gB,SAAUsa,IACvC,CAAE9rC,QAASsyC,GAAuB9gB,SAAU4e,IAC5C,CACEpwC,QAAS+wC,GACTvf,SAAUwf,IAEZ,CAAEhxC,QAASuyC,GAAsB/gB,SAAU0f,IAC3C,CACElxC,QAASixC,GACT1xB,YAAaoyB,GACbzxC,OAAO,GAET,CACEF,QAAS2rC,GACTpsB,YAAasyB,GACb3xC,OAAO,OAIA6xC,oBC3Db,SAAAS,IAemBp4C,KAAAq4C,8BAAwC,gCAazDD,EAAAl4C,UAAAo4C,WAAA,SAAWC,GACT,IAAMC,EAAQD,EAAWE,MAAMz4C,KAAKq4C,+BACpC,IAAKG,EACH,OAAO,KAEH,IAAAtzC,EAAAd,EAAAo0C,EAAA,GAAKE,EAAAxzC,EAAA,GAAWyzC,EAAAzzC,EAAA,GACtB,IACE,OAAO,IAAIqZ,OAAOo6B,EAAUD,GAC5B,MAAOp0C,GAMP,OALIsK,EAAAA,aACFC,QAAQ6J,KACN,4EAA4E6/B,EAAU,eAAej0C,GAGlG,qGA1CA8zC,EAAmBt3C,EAAA,CAD/ByU,EAAAA,WAAW,CAAEC,WAAY,UACb4iC,MCDAQ,GAAqB,IAAItzC,EAAAA,eAAe,qBAiBxCuzC,GAAmC,IAAIvzC,EAAAA,eAClD,oCCfWwzC,GAAqB,IAAIxzC,EAAAA,eACpC,sBAMWyzC,GAAwB,IAAIzzC,EAAAA,eACvC,uCCEA,SAAA0zC,EAAoBC,GAAAj5C,KAAAi5C,oBAAAA,SAEpBD,EAAA94C,UAAAg5C,iBAAA,SAAiB3L,EAAuB4L,GAAxC,IAAA/nC,EAAApR,KACQqgB,EAAWktB,EAAUlzB,MAAK,SAACmzB,GAC/B,OAAAp8B,EAAKgoC,kBAAkB5L,EAAM2L,MAE/B,IAAK94B,EACH,MAAMrgB,KAAKq5C,SACT,gBAAgBF,EAAU,8DAK9B,IAAMG,EAAYj5B,EAAS6uB,QAAU7uB,EAAS6uB,OAAO,GACrD,IAAKoK,EACH,MAAMt5C,KAAKq5C,SACT,sBAAsBh5B,EAASwiB,IAAG,kCAItC,MAAO,CACLxiB,SAAUA,EAASwiB,IACnBlhB,UAAW3hB,KAAKu5C,YACdD,EAAU33B,UACVtB,EAASm5B,iBAAmBF,EAAUE,iBAExCz4B,WAAY/gB,KAAKu5C,YACfD,EAAUv4B,WACVu4B,EAAUG,iBAEZC,cAAe15C,KAAK25C,aAAat5B,EAASu5B,yBAI9CZ,EAAA94C,UAAA25C,oBAAA,SAAoB30C,SAClBmb,EAAAnb,EAAAmb,SACAsB,EAAAzc,EAAAyc,UACAZ,EAAA7b,EAAA6b,WAWA,MARe,CACb/F,SAAO7V,EAAA,CACLu0C,cAJJx0C,EAAAw0C,eAKIv0C,EAAqB,SAAG,CAACkb,GACzBlb,EAAoB,SAAGwc,EACvBxc,EAAoB,SAAG4b,OAM7Bi4B,EAAA94C,UAAA45C,aAAA,SAAa50C,GACX,MAAO,CAAE60C,KAAM,CAAEC,aADJ90C,EAAAyc,UAC4B,MAGnCq3B,EAAA94C,UAAAk5C,kBAAR,SAA0B5L,EAAoB2L,GAA9C,IAAA/nC,EAAApR,KASE,OAAkB,KARHwtC,EAAKyM,aAAe,IAAIC,WAAU,SAACC,GAChD,IAAMC,EAAWhpC,EAAK6nC,oBAAoBX,WAAW6B,GACrD,GAAIC,EAEF,OADeA,EAASvV,KAAKsU,OAa3BH,EAAA94C,UAAAy5C,aAAR,SAAqB7/B,GAGnB,OAAQA,GAAU,IAAIhG,KAAI,SAAC8K,GACzB,MAHuB,eAGvBA,ExJzF8B,WwJyFsBA,MAOhDo6B,EAAA94C,UAAAq5C,YAAR,SACEc,EACAC,GAMA,OAJet6C,KAAKu6C,YAClBF,GACA,SAACliB,GAAO,OAAAA,EAAG/W,UAAYk5B,EAAel5B,WACtCtN,KAAI,SAACqkB,GAAO,OAAAA,EAAG/W,YAUX43B,EAAA94C,UAAAq6C,YAAR,SAAoBC,EAAcC,GAEhC,IAAMC,GADNF,EAAKj2C,EAAOi2C,IACQN,UAAUO,GAC9B,IAAe,IAAXC,EAAc,CACV,IAACviB,EAAD/zB,EAAAo2C,EAAAG,OAAAD,EAAA,GAAA,GAAC,GACPF,EAAM9gC,QAAQye,GAEhB,OAAOqiB,GAGDxB,EAAA94C,UAAAm5C,SAAR,SAAiB1vB,GACf,OAAO,IAAID,MAAM,uCAAuCC,6CA/GjByuB,uHAD9BY,EAAwBl4C,EAAA,CADpCyU,EAAAA,WAAW,CAAEC,WAAY,UACbwjC,oBCJX,SAAA4B,EAAsBl1C,EAA6B2f,GAA7BrlB,KAAA0F,OAAAA,EAA6B1F,KAAAqlB,KAAAA,EAEhCrlB,KAAAqjB,SACjB,qMAEF7jB,OAAAgC,eAAYo5C,EAAA16C,UAAA,eAAY,KAAxB,WACE,OACGF,KAAK0F,OAAO2C,QAAQC,IAAIgb,SAAW,IAAMtjB,KAAK0F,OAAO2C,QAAQC,IAAIkb,wCAItEhkB,OAAAgC,eAAYo5C,EAAA16C,UAAA,MAAG,KAAf,WACE,MAAO,GAAGF,KAAK66C,aAAe76C,KAAKqjB,0CAGrCu3B,EAAA16C,UAAAyK,KAAA,WACE,OAAK3K,KAAK0F,QAAW1F,KAAK0F,OAAO2C,SAAYrI,KAAK0F,OAAO2C,QAAQC,IAI1DtI,KAAKqlB,KACTzb,IAAmB5J,KAAKmX,KACxBtD,KAAKC,EAAAA,KAAI,SAAC5O,GAAkB,OAAhBA,EAAAqoC,cALNzvB,EAAAA,WAAW,IAAI4L,MAAM,8EAjBFtiB,SAA2Bse,EAAAA,0JAD9Ck1B,EAAoB95C,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACbolC,MCeAE,GAAgDpzB,EAAAA,aAE3D,sBAGFqzB,GAAA,WACE,SAAAA,EACiCC,EACH7kC,EACFzQ,EAChBu1C,EACAtkB,EACY9O,EAIZqzB,GATqBl7C,KAAAg7C,SAAAA,EACHh7C,KAAAmW,SAAAA,EACFnW,KAAA0F,OAAAA,EAChB1F,KAAAi7C,kBAAAA,EACAj7C,KAAA22B,UAAAA,EACY32B,KAAA6nB,cAAAA,EAIZ7nB,KAAAk7C,iBAAAA,SAGZ17C,OAAAgC,eAAYu5C,EAAA76C,UAAA,aAAU,KAAtB,WACE,OAAI6nB,EAAAA,kBAAkB/nB,KAAKg7C,UAClBh7C,KAAKmW,SAASoG,SAAS4+B,KAE5Bn7C,KAAKk7C,iBACAl7C,KAAKk7C,sBAEVtsC,EAAAA,aACFC,QAAQvK,MACN,8GAQNy2C,EAAA76C,UAAAk7C,WAAA,WAAA,IAAAhqC,EAAApR,KACE,OAAOA,KAAK4J,MACTiK,KACCsJ,EAAAA,KAAI,SAACk+B,GAAmB,OAAAjqC,EAAKkqC,SAASD,MACtCvnC,EAAAA,KAAI,SAACunC,GACH,OAAAz2C,EAAS/D,WAAA,EAAA0D,EAAA,CAAC,IAAO6M,EAAKmqC,gBAAgBF,SAGzCG,aAMKT,EAAA76C,UAAA0J,IAAV,WACE,IAAM6xC,EAA2Bz7C,KAAK6mB,YAEtC,OAAO40B,EACH7kC,EAAAA,GAAG6kC,GACHz7C,KAAK2K,QAMDowC,EAAA76C,UAAAyK,KAAV,WAAA,IAAAyG,EAAApR,KACE,OAAOA,KAAKi7C,kBACTtwC,OACAkJ,KACCC,EAAAA,KAAI,SAACy5B,GACH,OAAAn8B,EAAKulB,UAAUuiB,iBAAiB3L,EAAWn8B,EAAK+nC,iBAQ9C4B,EAAA76C,UAAA2mB,UAAV,WACE,GAAI7mB,KAAK6nB,eAAiBE,EAAAA,kBAAkB/nB,KAAKg7C,UAC/C,OAAOh7C,KAAK6nB,cAAcje,IAAIkxC,QAA6B/uC,IASrDgvC,EAAA76C,UAAAo7C,SAAV,SAAmBD,GAEfr7C,KAAK6nB,eACLS,EAAAA,iBAAiBtoB,KAAKg7C,WACtBK,GAEAr7C,KAAK6nB,cAAcze,IAAI0xC,GAA6BO,IAI9CN,EAAA76C,UAAAq7C,gBAAV,SACEF,GAEA,IAAMK,EAAgB,CAAC17C,KAAK22B,UAAUkjB,oBAAoBwB,IAM1D,OAJIr7C,KAAK27C,yBACPD,EAAO13C,KAAKhE,KAAK22B,UAAUmjB,aAAauB,IAGnCK,GAGDX,EAAA76C,UAAAy7C,sBAAR,WACE,IAAMC,OAKE,KAHJ57C,KAAK0F,QACL1F,KAAK0F,OAAOq0C,MACZ/5C,KAAK0F,OAAOq0C,KAAKC,cAOrB,OALI4B,GAAsBhtC,EAAAA,aACxBC,QAAQ6J,KACN,wHAGIkjC,qEAhHP/kC,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,+CACPhS,EAAAA,OAAMC,KAAA,CAACC,EAAAA,4CACPF,EAAAA,OAAMC,KAAA,CAACzR,YACqBu1C,UACR5B,UACgBlwB,EAAAA,cAAa/nB,WAAA,CAAA,CAAAgJ,KAAjDhD,EAAAA,2CAEAA,EAAAA,UAAQ,CAAAgD,KACR8M,EAAAA,OAAMC,KAAA,CAACgiC,yQAVCiC,EAAsBj6C,EAAA,CADlCyU,EAAAA,WAAW,CAAEC,WAAY,SAGrB/T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,cACPpnB,EAAA,EAAAoV,EAAAA,OAAOE,EAAAA,WACPtV,EAAA,EAAAoV,EAAAA,OAAOxR,IAGP5D,EAAA,EAAAsF,EAAAA,YAEAtF,EAAA,EAAAsF,EAAAA,YACAtF,EAAA,EAAAoV,EAAAA,OAAOiiC,MAVCiC,GAAb,GCjBA,SAAgBc,GACdC,EACAp2C,GAKA,OAAKA,EAAOsV,SAAYtV,EAAOsV,QAA4B,SAMpD,KALE,CACL+gC,OAAQ,CAAC,UAAW,qBACpB/1C,cAAe,WAAM,OAAA81C,EAAaV,eAUxC,IAAAY,GAAA,WAAA,SAAAA,WAcA,SAdaA,EACJA,EAAAl1C,QAAP,WACE,MAAO,CACLJ,SAAUu1C,EACVr1C,UAAW,CACT,CACEhB,QAASgzC,GACT1yC,WAAY21C,GACZ51C,KAAM,CAAC80C,GAAwBzzC,GAC/BxB,OAAO,MATJk2C,EAAqBC,EAAAn7C,EAAA,CADjCkG,EAAAA,YACYg1C,GAAb,GCrBA,SAAgBE,GAAkC3xC,GAChD,IAAM+Y,EAAU64B,GAPwB,uBAOsB5xC,GAC9D,OAAO+Y,GAPwC,+BAO7BA,EACd,CAAEjb,QAAS,CAAEC,IAAK,CAAEgb,QAAOA,KAC3B,GAGN,SAAgB84B,GAAoC7xC,GAClD,IAAM+Y,EAAU64B,GAZ0B,yBAYsB5xC,GAChE,OAAO+Y,GAXP,iCAWkBA,EACd,CAAEjb,QAAS,CAAEy8B,MAAO,CAAExhB,QAAOA,KAC7B,GAGN,SAAS64B,GAAkBvyB,EAAcrf,GACvC,IAAM8xC,EAAU9xC,EAAK+xC,OAAO,SAAS1yB,EAAI,KACzC,OAAOyyB,GAAWA,EAAQE,YCzBfC,GAA8B,CACzCn0C,QAAS,CACPC,IAAK,CACHkb,OAAQ,YAEVshB,MAAO,cCLK2X,GAAmB/2C,GACjC,QACqBqG,IAAnBrG,EAAO2C,cACgB0D,IAAvBrG,EAAO2C,QAAQC,UACgByD,IAA/BrG,EAAO2C,QAAQC,IAAIgb,QAEnB,MAAO,wECMX,IC89Hco5B,GAZAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAlCAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GA99FGC,GDcjBC,GAAA,WACE,SAAAA,EAAsBl7C,GAAA1F,KAAA0F,OAAAA,SAMtBk7C,EAAA1gD,UAAAqd,UAAA,SACEjU,EACA/G,GAOA,OALIvC,KAAK6gD,wBAAwBv3C,KAC/BA,EAAUA,EAAQG,MAAM,CACtBq3C,iBAAiB,KAGdv+C,EAAKsT,OAAOvM,IAMXs3C,EAAA1gD,UAAA2gD,wBAAV,SAAkCv3C,WAChC,OACgB,QAAdpE,EAAAlF,KAAK+gD,iBAAS,IAAA77C,OAAA,EAAAA,EAAE87C,qBAChB13C,EAAQ6N,IAAIihB,QAAsB,QAAfjzB,EAACnF,KAAK+gD,iBAAS,IAAA57C,OAAA,EAAAA,EAAEqe,SAAW,GAInDhkB,OAAAgC,eAAYo/C,EAAA1gD,UAAA,YAAS,KAArB,WACE,OAAOF,KAAK0F,OAAO2C,QAAQC,8EA7BClB,qHADnBw5C,EAA0B9/C,EAAA,CADtCyU,EAAAA,WAAW,CAAEC,WAAY,UACborC,GAAb,ICk7FE,SAAYpzB,GACVA,EAAA,IAAA,MACAA,EAAA,KAAA,QAFF,EAh8FemzB,GAAAA,EAAAA,MAAAA,EAAAA,IAAG,KAg8FNnzB,YAAAmzB,GAAAnzB,UAAS,KAerB,SAAYF,GACVA,EAAA,QAAA,UACAA,EAAA,QAAA,UAFF,CAAYqzB,GAAArzB,YAAAqzB,GAAArzB,UAAS,MAeTozB,GAAAC,GAAAD,SAAAC,GAAAD,OAAM,KAChB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAE,GAAAF,UAAAE,GAAAF,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAG,GAAAH,UAAAG,GAAAH,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAI,GAAAJ,UAAAI,GAAAJ,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAK,GAAAL,UAAAK,GAAAL,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAM,GAAAN,UAAAM,GAAAN,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAO,GAAAP,UAAAO,GAAAP,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,OAcF,SAAYjzB,GACVA,EAAA,aAAA,cACAA,EAAA,aAAA,cACAA,EAAA,cAAA,eACAA,EAAA,aAAA,cAJF,CAAYwzB,GAAAxzB,WAAAwzB,GAAAxzB,SAAQ,MAiBRgzB,GAAAQ,GAAAR,UAAAQ,GAAAR,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAS,GAAAT,UAAAS,GAAAT,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAU,GAAAV,UAAAU,GAAAV,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAW,GAAAX,WAAAW,GAAAX,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAY,GAAAZ,WAAAY,GAAAZ,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAa,GAAAb,WAAAa,GAAAb,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAc,GAAAd,WAAAc,GAAAd,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAe,GAAAf,WAAAe,GAAAf,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgB,GAAAhB,WAAAgB,GAAAhB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiB,GAAAjB,WAAAiB,GAAAjB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkB,GAAAlB,WAAAkB,GAAAlB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmB,GAAAnB,WAAAmB,GAAAnB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoB,GAAApB,WAAAoB,GAAApB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqB,GAAArB,WAAAqB,GAAArB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsB,GAAAtB,WAAAsB,GAAAtB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuB,GAAAvB,WAAAuB,GAAAvB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwB,GAAAxB,WAAAwB,GAAAxB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyB,GAAAzB,WAAAyB,GAAAzB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0B,GAAA1B,WAAA0B,GAAA1B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2B,GAAA3B,WAAA2B,GAAA3B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4B,GAAA5B,WAAA4B,GAAA5B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6B,GAAA7B,WAAA6B,GAAA7B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8B,GAAA9B,WAAA8B,GAAA9B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+B,GAAA/B,WAAA+B,GAAA/B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgC,GAAAhC,WAAAgC,GAAAhC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiC,GAAAjC,WAAAiC,GAAAjC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkC,GAAAlC,WAAAkC,GAAAlC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmC,GAAAnC,WAAAmC,GAAAnC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoC,GAAApC,WAAAoC,GAAApC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqC,GAAArC,WAAAqC,GAAArC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsC,GAAAtC,WAAAsC,GAAAtC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuC,GAAAvC,WAAAuC,GAAAvC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwC,GAAAxC,WAAAwC,GAAAxC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyC,GAAAzC,WAAAyC,GAAAzC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0C,GAAA1C,WAAA0C,GAAA1C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2C,GAAA3C,WAAA2C,GAAA3C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4C,GAAA5C,WAAA4C,GAAA5C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6C,GAAA7C,WAAA6C,GAAA7C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8C,GAAA9C,WAAA8C,GAAA9C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+C,GAAA/C,WAAA+C,GAAA/C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgD,GAAAhD,WAAAgD,GAAAhD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiD,GAAAjD,WAAAiD,GAAAjD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkD,GAAAlD,WAAAkD,GAAAlD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmD,GAAAnD,WAAAmD,GAAAnD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoD,GAAApD,WAAAoD,GAAApD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqD,GAAArD,WAAAqD,GAAArD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsD,GAAAtD,WAAAsD,GAAAtD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuD,GAAAvD,WAAAuD,GAAAvD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwD,GAAAxD,WAAAwD,GAAAxD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyD,GAAAzD,WAAAyD,GAAAzD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0D,GAAA1D,WAAA0D,GAAA1D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2D,GAAA3D,WAAA2D,GAAA3D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4D,GAAA5D,WAAA4D,GAAA5D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6D,GAAA7D,WAAA6D,GAAA7D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8D,GAAA9D,WAAA8D,GAAA9D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+D,GAAA/D,WAAA+D,GAAA/D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgE,GAAAhE,OAAAgE,GAAAhE,KAAI,KACd,IAAA,MACAA,GAAA,QAAA,UACAA,GAAA,MAAA,SASUD,GAAAiE,GAAAjE,iBAAAiE,GAAAjE,eAAc,KACxB,wBAAA,QACAA,GAAA,4BAAA,YAgEF,SAAYvtB,GACVA,EAAA,cAAA,gBADF,CAAYwxB,GAAAxxB,mBAAAwxB,GAAAxxB,iBAAgB,SC5iIjB8xB,GAAuB,IAAI37C,EAAAA,eACtC,0BAeF,SAAgB47C,GACdC,GAEA,MAAO,CACLv7C,QAASq7C,GACTp7C,SAAUs7C,EACVr7C,OAAO,GAIX,SAAgBs7C,GACd17C,EACA27C,eAEA,IAAuB,IAAAC,EAAAr9C,EAAAo9C,GAAgBE,EAAAD,EAAA/+C,QAAAg/C,EAAA5+C,KAAA4+C,EAAAD,EAAA/+C,OAAE,CAApC,IACGi/C,GAAUC,EADCF,EAAAl/C,OACQqD,GACrB87C,GACF3yC,QAAQ6J,KAAK8oC,wHCJnB,SAAAE,WAgBA,SAhBaA,EACJA,EAAA56C,QAAP,WACE,MAAO,CACLJ,SAAUi7C,EACV/6C,UAAW,CACT,CACEhB,QAASsf,EAAAA,kBACTC,YAAay7B,GACb96C,OAAO,GAET,CAAEF,QAASwB,EAAW+d,YAAa9f,GACnCc,EAAqBq2C,IACrB0E,GAAuBzE,OAZlBiF,EAASC,EAAA7gD,EAAA,CAbrBkG,EAAAA,SAAS,CACRC,QAAS,CACPiwB,GACA4M,GACAhJ,GACAsF,GACA0L,GACAiD,GACAqB,GACAuH,GACAqE,GAAsBl1C,cAGb46C,oBCxBX,SAAAE,EAAsBl8C,GAAA1F,KAAA0F,OAAAA,SActBk8C,EAAA1hD,UAAA2hD,OAAA,SAAOxrB,EAAe0lB,WACd+F,EACJ9hD,KAAK0F,QACL1F,KAAK0F,OAAO2C,SACZrI,KAAK0F,OAAO2C,QAAQqjC,eACpB1rC,KAAK0F,OAAO2C,QAAQqjC,cAAcrV,GAEpC,GAAIyrB,EAAc,CAIhB,IAHA,IAAMC,EAAcx9C,EAAOw3C,GACvBv7C,EAAIuhD,EAAephD,OAEhBH,EAAI,GAAG,CAEZ,IAAMwhD,EACJF,EAAaC,IAFfvhD,KAGEshD,EAAaC,EAAevhD,IAAImrC,QAClC,GAAIqW,MACF,IAA4B,IAAAC,GAAAC,OAAA,EAAAj+C,EAAA+9C,IAAcG,EAAAF,EAAA1/C,QAAA4/C,EAAAx/C,KAAAw/C,EAAAF,EAAA1/C,OAAE,CAAvC,IAAM6/C,EAAaD,EAAA9/C,MACjB0/C,EAAe50C,SAASi1C,KAC3BL,EAAepH,OAAOn6C,EAAG,EAAG4hD,GAC5B5hD,wGAMR,OAAOuhD,EAGT,OAAOhG,GAST6F,EAAA1hD,UAAAmiD,UAAA,SAAUhsB,EAAexS,GACvB,IAAMi+B,EACJ9hD,KAAK0F,QACL1F,KAAK0F,OAAO2C,SACZrI,KAAK0F,OAAO2C,QAAQqjC,eACpB1rC,KAAK0F,OAAO2C,QAAQqjC,cAAcrV,GACpC,OAA6D,KAArDyrB,EAAaj+B,IAAUi+B,EAAaj+B,GAAOy+B,SAAkB,4CA1DzCl7C,qHADnBw6C,EAAoB9gD,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDosC,MCabW,GAAA,WACE,SAAAA,EACUC,EACA9sC,EACAgP,EACAhf,GAHA1F,KAAAwiD,yBAAAA,EACAxiD,KAAA0V,YAAAA,EACA1V,KAAA0kB,aAAAA,EACA1kB,KAAA0F,OAAAA,SAGV68C,EAAAriD,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOA,KAAKwiD,yBAAyB1vB,cAAcjf,KACjDI,EAAAA,KAAK,GACLke,EAAAA,eAAenyB,KAAK0V,YAAYN,kBAChCQ,EAAAA,WAAU,SAAC1Q,OAAAC,EAAAf,EAAAc,EAAA,GAACusB,EAAAtsB,EAAA,GAAUiQ,EAAAjQ,EAAA,GACpB,IAAKiM,EAAKwT,SAAStb,EAAQ6N,KACzB,OAAO5U,EAAKsT,OAAOvM,GAGrB,IAAMm5C,EAAgBrxC,EAAKsxC,cAAcjxB,EAAUnoB,GACnD,OAAO/G,EAAKsT,OAAO4sC,GAAe5uC,KAChCsJ,EAAAA,KAAI,SAACwlC,GACCA,aAAiBC,EAAAA,cACnBxxC,EAAKyxC,eACHztC,EACAutC,EAAM55C,QAAQa,IA7BW,wBA8BzB6nB,YASN8wB,EAAAriD,UAAA2iD,eAAR,SACEztC,EACA0tC,EACAttB,GAEA,IAAKpgB,GAAkB0tC,EAAgB,CACrC,IAAIvtB,EAAkC,GACtCA,EAAcv1B,KAAKwiD,yBAAyBrtB,qBAC1C2tB,GAEFvtB,EAAcv1B,KAAK+iD,qBAAqBxtB,GAGtCv1B,KAAKwiD,yBAAyBltB,gBAC5BC,EACAC,IAGFx1B,KAAKwiD,yBAAyBxvB,YAAYuC,KAKxCgtB,EAAAriD,UAAAwiD,cAAR,SACEjxB,EACAnoB,SAEA,IAAKmoB,EACH,OAAOnoB,EAGT,IAAM8rB,EAAcp1B,KAAKwiD,yBAAyBvtB,mBAChDxD,GAEF,OAAOnoB,EAAQG,MAAM,CACnBsM,YAAU7Q,EAAA,GACRA,EA3EiC,wBA2EJkwB,QAK3BmtB,EAAAriD,UAAA0kB,SAAR,SAAiBzN,GACf,OAAOA,EAAIhK,SAASnN,KAAK0kB,aAAanB,oBAGhCg/B,EAAAriD,UAAA6iD,qBAAR,SACEtxB,WAEMuxB,EAAaz+C,EAAOktB,GAE1B,GACE5c,QAAQ7U,KAAK0F,OAAO+B,oBACpBoN,QAAQ7U,KAAK0F,OAAO+B,kBAAkBG,sBAEtC,IAAsB,IAAAq7C,EAAAh/C,EAAA++C,GAAaE,EAAAD,EAAA1gD,QAAA2gD,EAAAvgD,KAAAugD,EAAAD,EAAA1gD,OAAE,CAAhC,IAAMovB,EAAOuxB,EAAA7gD,MAEdrC,KAAK0F,OAAO+B,kBAAkBG,iBAAiBuF,SAC7CwkB,EAAQ9B,gBAGV8B,EAAQ+B,aAAerG,EAAAA,yBAAyBsG,yGAItD,OAAOqvB,4CAlG2BpxB,UACbve,UACC4P,UACN1b,2KALPg7C,EAA4BzhD,EAAA,CADxCyU,EAAAA,WAAW,CAAEC,WAAY,UACb+sC,GAAb,GCfat9B,GAA2B,CACtC,CACErf,QAASsf,EAAAA,kBACTC,YAAao9B,GACbz8C,OAAO,IC2BXq9C,GAAA,WAAA,SAAAA,IAIUnjD,KAAAojD,WAAa,IAAIptB,WAczBmtB,EAAAjjD,UAAAozC,SAAA,SAAY+P,EAAoBC,GAAhC,IAAAlyC,EAAApR,KACQ2iD,EAAQ3iD,KAAKujD,aAAaF,GAC1Bx+C,EAA2B89C,EAAMa,SAASnhD,MAchD,OAbIwC,EAAQsI,SAASm2C,GACf10C,EAAAA,aACFC,QAAQ6J,KACN,iCACA4qC,EACA,2CACAD,GAIJV,EAAMa,SAASjhD,KAAIgC,EAAKM,EAAO,CAAEy+C,KAG5B,WAAM,OAAAlyC,EAAKqyC,WAAWJ,EAAWC,KASlCH,EAAAjjD,UAAAujD,WAAR,SAAsBJ,EAAoBC,GACxC,IAAMX,EAAQ3iD,KAAKujD,aAAaF,GAC1BK,EAA8Bf,EAAMa,SAASnhD,MAAMyO,QACvD,SAAC6yC,GAAO,OAAAA,IAAOL,KAEjBX,EAAMa,SAASjhD,KAAKmhD,IAOtBP,EAAAjjD,UAAA0J,IAAA,SAAOy5C,GACL,OAAOrjD,KAAKujD,aAAaF,GAAWO,SAUtCT,EAAAjjD,UAAAwT,SAAA,SAASivC,GACP,IAAMU,EAAYV,EAAM1iD,YACFD,KAAK6jD,gBAAgBR,GAC7B9gD,KAAKogD,IAQbQ,EAAAjjD,UAAA2jD,gBAAR,SAA2BR,GACzB,IAAMS,EAAY9jD,KAAKujD,aAAaF,GAMpC,OAJKS,EAAUC,gBACbD,EAAUC,cAAgB,IAAIC,EAAAA,QAC9BhkD,KAAKszC,SAAS+P,EAAWS,EAAUC,gBAE9BD,EAAUC,eAMXZ,EAAAjjD,UAAAqjD,aAAR,SAAwBF,GAQtB,OAPIz0C,EAAAA,aACF5O,KAAKikD,kBAAkBZ,GAGpBrjD,KAAKojD,WAAWx5C,IAAIy5C,IACvBrjD,KAAKkkD,gBAAgBb,GAEhBrjD,KAAKojD,WAAWx5C,IAAIy5C,IAMrBF,EAAAjjD,UAAAgkD,gBAAR,SAA2Bb,GACzB,IAAMG,EAAW,IAAIW,EAAAA,gBAAiC,IAClDP,EAAUJ,EAAS3vC,KACrB+B,EAAAA,WAAU,SAAC/Q,GAA6B,OAAAu/C,EAAAA,MAAKvjD,WAAA,EAAA0D,EAAIM,OACjDw/C,EAAAA,SAGEz1C,EAAAA,cACFg1C,EAAU5jD,KAAKskD,wBAAwBV,EAASP,IAGlDrjD,KAAKojD,WAAWh6C,IAAIi6C,EAAW,CAC7BU,cAAe,KACfP,SAAQA,EACRI,QAAOA,KASHT,EAAAjjD,UAAA+jD,kBAAR,SAA6BZ,GAC3B,KAAKA,MAAAA,OAAS,EAATA,EAAWpjD,aACd,MAAM,IAAIypB,MACR,kBAAkB25B,EAAS,kEAUzBF,EAAAjjD,UAAAokD,wBAAR,SACEhB,EACAD,GAEA,OAAOC,EAAQzvC,KACbsJ,EAAAA,KAAI,SAACwlC,GACGA,aAAiBU,GACrBx0C,QAAQ6J,KACN,2BACA4qC,EACA,oBACAX,EACA,+CACAU,EAAUz5B,yGAzJTu5B,EAAYriD,EAAA,CAHxByU,EAAAA,WAAW,CACVC,WAAY,UAED2tC,GAAb,GC3BA,SAAgBoB,GAAcx6C,EAAemzB,GAC3C,OAAO19B,OAAOa,OAAO,IAAI0J,EAAQmzB,GCMnC,IAAAsnB,GAAA,WACE,SAAAA,EACYC,EACAC,GADA1kD,KAAAykD,eAAAA,EACAzkD,KAAA0kD,aAAAA,SAWZF,EAAAtkD,UAAAozC,SAAA,SAAYqR,GACV,OAAO3kD,KAAK0kD,aAAapR,SACvBqR,EAAQhC,MACR3iD,KAAK4kD,cAAcD,KAQbH,EAAAtkD,UAAA0kD,cAAV,SAA2BD,GAA3B,IAAAvzC,EAAApR,KACE,OAAOA,KAAKykD,eACT5wC,KAAKwW,EAAAA,OAAMxpB,WAAA,EAAA0D,EAAI,GAAGC,OAAOmgD,EAAQx4C,WACjC0H,KACCC,EAAAA,KAAI,SAAC3H,GACH,OAAAiF,EAAKyzC,YAAY14C,EAAQw4C,EAAQhC,MAAOgC,EAAQG,cAgB9CN,EAAAtkD,UAAA2kD,YAAV,SACE14C,EACAk3C,EACAyB,SAEA,OAAOA,EACHA,EAAQ34C,GACRo4C,GAAWlB,EAAyB,QAAhBn+C,EAAEiH,EAAOR,eAAO,IAAAzG,EAAAA,EAAI,8CAnDlB6/C,EAAAA,sBACF5B,uJAHfqB,EAAiB1jD,EAAA,CAH7ByU,EAAAA,WAAW,CACVC,WAAY,UAEDgvC,GAAb,iBCAE,SAAAQ,EAAsBvpC,GAAAzb,KAAAyb,OAAAA,SAsBtBupC,EAAA9kD,UAAA+kD,gBAAA,SAAmB//C,GAAnB,IAAAkM,EAAApR,KACEiB,EAAAiE,EAAAjE,IACAikD,EAAAhgD,EAAAggD,OACA//C,EAAAD,EAAAigD,SAAAA,OAAA,IAAAhgD,EAAAigD,EAAAxuC,GAAA,IAAAzR,EACAC,EAAAF,EAAAmgD,YAAAA,OAAA,IAAAjgD,EAAAkgD,EAAAzmC,gBAAAkI,cAAA3hB,EACAi+B,EAAAn+B,EAAAqgD,OAAAA,OAAA,IAAAliB,EAAA,aAAAA,EAQMjc,E9JmDV,SACEi+B,EACA5pC,GAEA,IAAI2L,EAEJ,OAAQi+B,GACN,KAAKxmC,EAAAA,gBAAgBkI,cACnBK,EAAU3L,EAAOlF,aACjB,MAEF,KAAKsI,EAAAA,gBAAgBqI,gBACnBE,EAAU3L,EAAOnF,eACjB,MAEF,KAAKuI,EAAAA,gBAAgB2mC,WACnBp+B,OAAUrb,EACV,MAGF,QACEqb,EAAU3L,EAAOnF,eAIrB,OAAO8Q,E8J5EWq+B,CAAWJ,EAAarlD,KAAKyb,QAEvCiqC,EAAgB,IAAIC,EAAAA,aA2B1B,OAxBAD,EAAcl8B,IACZ27B,EACGtxC,KACCC,EAAAA,KAAI,SAACkH,GACH,OAAO2L,GACLS,EACAhW,EAAKw0C,uBAAuB5qC,EAAS/Z,OAGzCkc,EAAAA,KAAI,SAACjR,GAAU,OAAAq5C,EAAOr5C,OAEvBgI,aAGLwxC,EAAcl8B,IACZ07B,EAAOrxC,KAAKse,EAAAA,eAAegzB,IAAWjxC,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAACgH,EAAA/G,EAAA,GAAO6V,EAAA7V,EAAA,GACvD6hB,GACE5V,EAAKw0C,uBAAuB5qC,EAAS/Z,GACrCiL,EACAkb,OAKCs+B,GAGCV,EAAA9kD,UAAA0lD,uBAAV,SACE5qC,EACA/Z,GAEA,MAAO,aAAa,GAAGuD,OAAOwW,GAASwtB,KAAK,KAAI,IAAIvnC,4CAvExBiV,uHADnB8uC,EAAuBlkD,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAEDwvC,eCHGa,GACdC,GAEA,OAAOjzC,EAAAA,eCLAH,EAAAA,sBCPsB,YFYY,SAACqzC,GACxC,OAAAC,GAA+CD,EAAaD,MAIhE,SAAgBG,GACdH,GAEA,OAAOjzC,EAAAA,eAAegzC,GAAuBC,IAAY,SAACn3C,GACxD,OAAAqC,GAAsBrC,MAI1B,SAAgBu3C,GACdJ,GAEA,OAAOjzC,EAAAA,eAAegzC,GAAuBC,IAAY,SAACn3C,GACxD,OAAAuC,GAAsBvC,MAI1B,SAAgBw3C,GACdL,GAEA,OAAOjzC,EAAAA,eAAegzC,GAAuBC,IAAY,SAACn3C,GACxD,OAAAsC,GAAoBtC,yJGhCxBy3C,GAEE,WADSpmD,KAAA+J,KAN2B,iCAUtCs8C,GAEE,SAAmB16C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVgC,sCAc3Cu8C,GAEE,SAAmB36C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAbT,yCCKFw8C,GAEE,SACS56C,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KAR8B,oCAkBzCy8C,GAEE,SAAmB76C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAjBT,yCAqBF08C,GAEE,SAAmB96C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KApBT,4CAwBF28C,GAEE,WADS1mD,KAAA+J,KAxB+B,qCCC1C48C,GAEE,WADS3mD,KAAA+J,KAP4B,kCAWvC68C,GAEE,SAAmBj7C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVT,uCAcF88C,GAEE,SAAmBl7C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAbT,0CCEF+8C,GAEE,SAAmBn7C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAPT,wCAWFg9C,GAEE,SAAmBp7C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KART,6CAYFi9C,GAAA,WACWhnD,KAAA+J,KAfT,gDC0BWk9C,GAAgB,uBAChBC,GAAuB,8BACvBC,GAAc,qBACdC,GAAiB,wBACjBC,GAAuB,+BAEvBC,GAAqB,4BACrBC,GAAU,iBAEVC,GAAmB,0BAMnBC,GAAoB,2BCtBjCC,GAAA,SAAArgD,GAEE,SAAAqgD,EACS/7C,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KAAMsnD,KAAmBtnD,YALlBoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAXuB,8BAoBlC,OAVsCjK,EAAA4nD,EAAArgD,GAUtCqgD,EAVA,CAAsC18C,GAYtC28C,GAAA,SAAAtgD,GAEE,SAAAsgD,EAAmBh8C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMsnD,GAAoB37C,IAAQ3L,YADjBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtB4B,mCA0BvC,OAL0CjK,EAAA6nD,EAAAtgD,GAK1CsgD,EALA,CAA0C18C,GAO1C28C,GAAA,SAAAvgD,GAEE,SAAAugD,EAAmBj8C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMsnD,KAAmBtnD,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5B+B,sCAgC1C,OAL6CjK,EAAA8nD,EAAAvgD,GAK7CugD,EALA,CAA6C18C,IAO7C28C,GAAA,SAAAxgD,GAEE,SAAAwgD,IAAA,IAAAz2C,EACE/J,EAAAzG,KAAAZ,KAAMsnD,KAAmBtnD,YAFlBoR,EAAArH,KAlCwB,+BAsCnC,OALuCjK,EAAA+nD,EAAAxgD,GAKvCwgD,EALA,CAAuC18C,IAOvC28C,GAAA,SAAAzgD,GAEE,SAAAygD,EACSn8C,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KNhE2B,UK0BQ,gBCsCYA,YANxCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAvCiB,wBAiD5B,OAXiCjK,EAAAgoD,EAAAzgD,GAWjCygD,EAXA,CAAiCC,IAajCC,GAAA,SAAA3gD,GAEE,SAAA2gD,EAAmBr8C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KNvE2B,UK0BQ,cC6Ca2L,IAAQ3L,YADvCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAnDsB,6BAuDjC,OALqCjK,EAAAkoD,EAAA3gD,GAKrC2gD,EALA,CAAqCC,IAOrCC,GAAA,SAAA7gD,GAEE,SAAA6gD,IAAA,IAAA92C,EACE/J,EAAAzG,KAAAZ,KN9E2B,UK0BQ,gBCoDYA,YAFxCoR,EAAArH,KAzDyB,gCA6DpC,OALwCjK,EAAAooD,EAAA7gD,GAKxC6gD,EALA,CAAwCC,IAOxCC,GAAA,SAAA/gD,GAEE,SAAA+gD,IAAA,IAAAh3C,EACE/J,EAAAzG,KAAAZ,KNrF2B,UK0BQ,gBC2DYA,YAFxCoR,EAAArH,KA/D+B,sCAmE1C,OAL6CjK,EAAAsoD,EAAA/gD,GAK7C+gD,EALA,CAA6CC,IC7D7CC,GAAA,SAAAjhD,GAEE,SAAAihD,EAAmB38C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApB8B,qCAwBzC,OAL4CjK,EAAAwoD,EAAAjhD,GAK5CihD,EALA,CAA4Cj3C,GAO5Ck3C,GAAA,SAAAlhD,GAEE,SAAAkhD,EAAmB58C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,GAAsBv7C,IAAQ3L,YADnBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzBT,0CA6BF,OALgDjK,EAAAyoD,EAAAlhD,GAKhDkhD,EALA,CAAgDh3C,GAOhDi3C,GAAA,SAAAnhD,GAEE,SAAAmhD,EAAmB78C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9BT,6CAkCF,OALmDjK,EAAA0oD,EAAAnhD,GAKnDmhD,EALA,CAAmD/2C,IAOnDg3C,GAAA,SAAAphD,GAEE,SAAAohD,EAAmB98C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlCT,2CAsCF,OALiDjK,EAAA2oD,EAAAphD,GAKjDohD,EALA,CAAiDp3C,GAOjDq3C,GAAA,SAAArhD,GAEE,SAAAqhD,EAAmB/8C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,GAAsBv7C,IAAQ3L,YADnBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvCT,gDA2CF,OALqDjK,EAAA4oD,EAAArhD,GAKrDqhD,EALA,CAAqDn3C,GAOrDo3C,GAAA,SAAAthD,GAEE,SAAAshD,EAAmBh9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5CT,mDAgDF,OALwDjK,EAAA6oD,EAAAthD,GAKxDshD,EALA,CAAwDl3C,IAOxDm3C,GAAA,SAAAvhD,GAEE,SAAAuhD,EAAmBj9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjD+B,sCAqD1C,OAL6CjK,EAAA8oD,EAAAvhD,GAK7CuhD,EALA,CAA6Cv3C,GAO7Cw3C,GAAA,SAAAxhD,GAEE,SAAAwhD,EAAmBl9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,GAAsBv7C,IAAQ3L,YADnBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtDT,2CA0DF,OALiDjK,EAAA+oD,EAAAxhD,GAKjDwhD,EALA,CAAiDt3C,GAOjDu3C,GAAA,SAAAzhD,GAEE,SAAAyhD,EAAmBn9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMknD,KAAqBlnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3DT,+CA+DF,OALoDjK,EAAAgpD,EAAAzhD,GAKpDyhD,EALA,CAAoDr3C,ICrEpDs3C,GAAA,SAAA1hD,GAEE,SAAA0hD,EAAmBp9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMunD,KAAQvnD,YADGoR,EAAAzF,QAAAA,EADVyF,EAAArH,KANiB,wBAU5B,OALiCjK,EAAAipD,EAAA1hD,GAKjC0hD,EALA,CAAiC13C,GAOjC23C,GAAA,SAAA3hD,GAEE,SAAA2hD,EAAmBr9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMunD,GAAS57C,IAAQ3L,YADNoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAXsB,6BAejC,OALqCjK,EAAAkpD,EAAA3hD,GAKrC2hD,EALA,CAAqCz3C,GAOrC03C,GAAA,SAAA5hD,GAEE,SAAA4hD,EAAmBt9C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMunD,KAAQvnD,YADGoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAnByB,gCAuBpC,OALwCjK,EAAAmpD,EAAA5hD,GAKxC4hD,EALA,CAAwCx3C,IAOxCy3C,GAEE,WADSlpD,KAAA+J,KAxBkB,wBCF7Bo/C,GAEE,SAAmBx9C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KALmB,yBAS9Bq/C,GAEE,SAAmBz9C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KARwB,8BAYnCs/C,GAAA,WACWrpD,KAAA+J,KAd2B,iCCItCu/C,GAEE,WADStpD,KAAA+J,KALgB,sBAS3Bw/C,GAEE,SAAmB59C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KATqB,2BAahCy/C,GAEE,SAAmB79C,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAbwB,8BCInC0/C,GAAA,SAAApiD,GAEE,SAAAoiD,EACS99C,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KXhB2B,UKeQ,gBMCYA,YANxCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KANiB,wBAgB5B,OAXuCjK,EAAA2pD,EAAApiD,GAWvCoiD,EAXA,CAAuC1B,IAavC2B,GAAA,SAAAriD,GAEE,SAAAqiD,EAAmBC,GAAnB,IAAAv4C,EACE/J,EAAAzG,KAAAZ,KXvB2B,UKeQ,gBMQYA,YAD9BoR,EAAAu4C,OAAAA,EADVv4C,EAAArH,KAjByB,gCAqBpC,OAL8CjK,EAAA4pD,EAAAriD,GAK9CqiD,EALA,CAA8CvB,IAO9CyB,GAAA,SAAAviD,GAEE,SAAAuiD,EAAmBj+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KX9B2B,UKeQ,cMea2L,IAAQ3L,YADvCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzBuB,8BA6BlC,OAL4CjK,EAAA8pD,EAAAviD,GAK5CuiD,EALA,CAA4C3B,IAO5C4B,GAAA,SAAAxiD,GAEE,SAAAwiD,IAAA,IAAAz4C,EACE/J,EAAAzG,KAAAZ,KXrC2B,UKeQ,gBMsBYA,YAFxCoR,EAAArH,KA9BgB,uBAkC3B,OAL4CjK,EAAA+pD,EAAAxiD,GAK5CwiD,EALA,CAA4CxB,IC1B5CyB,GAAA,SAAAziD,GAEE,SAAAyiD,EACSn+C,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KZb2B,UKgBW,mBOHYA,YAF3CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAPoB,2BAa/B,OAPoCjK,EAAAgqD,EAAAziD,GAOpCyiD,EAPA,CAAoC/B,IASpCgC,GAAA,SAAA1iD,GAEE,SAAA0iD,EAAmBp+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KZpB2B,UKgBW,iBOIa2L,IAAQ3L,YAD1CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAfyB,gCAmBpC,OALwCjK,EAAAiqD,EAAA1iD,GAKxC0iD,EALA,CAAwC9B,IAOxC+B,GAAA,SAAA3iD,GAEE,SAAA2iD,IAAA,IAAA54C,EACE/J,EAAAzG,KAAAZ,KZ3B2B,UKgBW,mBOWYA,YAF3CoR,EAAArH,KArB4B,mCAyBvC,OAL2CjK,EAAAkqD,EAAA3iD,GAK3C2iD,EALA,CAA2C7B,IAO3C8B,GAAA,SAAA5iD,GAEE,SAAA4iD,IAAA,IAAA74C,EACE/J,EAAAzG,KAAAZ,KZlC2B,UKgBW,mBOkBYA,YAF3CoR,EAAArH,KA1BT,+CA8BF,OALyCjK,EAAAmqD,EAAA5iD,GAKzC4iD,EALA,CAAyC5B,ICbzC6B,GAAA,SAAA7iD,GAEE,SAAA6iD,EAAmBv+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjBwB,+BAqBnC,OALuCjK,EAAAoqD,EAAA7iD,GAKvC6iD,EALA,CAAuC74C,GAOvC84C,GAAA,SAAA9iD,GAEE,SAAA8iD,EAAmBx+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,GAAgBz7C,IAAQ3L,YADboR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvB6B,oCA2BxC,OAL2CjK,EAAAqqD,EAAA9iD,GAK3C8iD,EALA,CAA2C54C,GAO3C64C,GAAA,SAAA/iD,GAEE,SAAA+iD,EAAmBz+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA7BgC,uCAiC3C,OAL8CjK,EAAAsqD,EAAA/iD,GAK9C+iD,EALA,CAA8C34C,IAQ9C44C,GAAA,SAAAhjD,GAEE,SAAAgjD,EAAmB1+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAnCqB,4BAuChC,OALoCjK,EAAAuqD,EAAAhjD,GAKpCgjD,EALA,CAAoCh5C,GAOpCi5C,GAAA,SAAAjjD,GAEE,SAAAijD,EAAmB3+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,GAAgBz7C,IAAQ3L,YADboR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzC0B,iCA6CrC,OALwCjK,EAAAwqD,EAAAjjD,GAKxCijD,EALA,CAAwC/4C,GAOxCg5C,GAAA,SAAAljD,GAEE,SAAAkjD,EAAmB5+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/C6B,oCAmDxC,OAL2CjK,EAAAyqD,EAAAljD,GAK3CkjD,EALA,CAA2C94C,IAQ3C+4C,GAAA,SAAAnjD,GAEE,SAAAmjD,EACS7+C,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YAFdoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KArDwB,+BA2DnC,OAPuCjK,EAAA0qD,EAAAnjD,GAOvCmjD,EAPA,CAAuCn5C,GASvCo5C,GAAA,SAAApjD,GAEE,SAAAojD,EAAmB9+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,GAAgBz7C,IAAQ3L,YADboR,EAAAzF,QAAAA,EADVyF,EAAArH,KA7D6B,oCAiExC,OAL2CjK,EAAA2qD,EAAApjD,GAK3CojD,EALA,CAA2Cl5C,GAO3Cm5C,GAAA,SAAArjD,GAEE,SAAAqjD,EAAmB/+C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAnEgC,uCAuE3C,OAL8CjK,EAAA4qD,EAAArjD,GAK9CqjD,EALA,CAA8Cj5C,IAQ9Ck5C,GAAA,SAAAtjD,GAEE,SAAAsjD,EAAmBh/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzEwB,+BA6EnC,OALuCjK,EAAA6qD,EAAAtjD,GAKvCsjD,EALA,CAAuCt5C,GAOvCu5C,GAAA,SAAAvjD,GAEE,SAAAujD,EAAmBj/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,GAAgBz7C,IAAQ3L,YADboR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/E6B,oCAmFxC,OAL2CjK,EAAA8qD,EAAAvjD,GAK3CujD,EALA,CAA2Cr5C,GAO3Cs5C,GAAA,SAAAxjD,GAEE,SAAAwjD,EAAmBl/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMonD,KAAepnD,YADJoR,EAAAzF,QAAAA,EADVyF,EAAArH,KArFgC,uCAyF3C,OAL8CjK,EAAA+qD,EAAAxjD,GAK9CwjD,EALA,CAA8Cp5C,ICvE9Cq5C,GAAA,SAAAzjD,GAEE,SAAAyjD,EAAmBn/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMinD,KAAcjnD,YADHoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApBuB,8BAwBlC,OALsCjK,EAAAgrD,EAAAzjD,GAKtCyjD,EALA,CAAsCz5C,GAOtC05C,GAAA,SAAA1jD,GAEE,SAAA0jD,EAAmBp/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMinD,GAAet7C,IAAQ3L,YADZoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzB4B,mCA6BvC,OAL0CjK,EAAAirD,EAAA1jD,GAK1C0jD,EALA,CAA0Cx5C,GAO1Cy5C,GAAA,SAAA3jD,GAEE,SAAA2jD,EAAmBr/C,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMinD,KAAcjnD,YADHoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjC+B,sCAqC1C,OAL6CjK,EAAAkrD,EAAA3jD,GAK7C2jD,EALA,CAA6Cv5C,IAO7Cw5C,GAAA,SAAA5jD,GAEE,SAAA4jD,IAAA,IAAA75C,EACE/J,EAAAzG,KAAAZ,KAAMinD,KAAcjnD,YAFboR,EAAArH,KAtC6B,oCA0CxC,OAL2CjK,EAAAmrD,EAAA5jD,GAK3C4jD,EALA,CAA2Cv7B,IAO3Cw7B,GAAA,SAAA7jD,GAEE,SAAA6jD,EACSv/C,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KdlE2B,UKoBQ,gBS8CYA,YANxCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA3CsB,6BAqDjC,OAXqCjK,EAAAorD,EAAA7jD,GAWrC6jD,EAXA,CAAqCnD,IAarCoD,GAAA,SAAA9jD,GAEE,SAAA8jD,EAAYx/C,GAAZ,IAAAyF,EACE/J,EAAAzG,KAAAZ,KdzE2B,UKoBQ,cSqDa2L,IAAQ3L,YAFjDoR,EAAArH,KAvD2B,kCA2DtC,OALyCjK,EAAAqrD,EAAA9jD,GAKzC8jD,EALA,CAAyClD,IAOzCmD,GAAA,SAAA/jD,GAEE,SAAA+jD,EAAmBC,GAAnB,IAAAj6C,EACE/J,EAAAzG,KAAAZ,KdhF2B,UKoBQ,gBS4DYA,YAD9BoR,EAAAi6C,gBAAAA,EADVj6C,EAAArH,KA7D8B,qCAiEzC,OAL4CjK,EAAAsrD,EAAA/jD,GAK5C+jD,EALA,CAA4CjD,IAO5CmD,GAAA,SAAAjkD,GAEE,SAAAikD,IAAA,IAAAl6C,EACE/J,EAAAzG,KAAAZ,KdvF2B,UKoBQ,gBSmEYA,YAFxCoR,EAAArH,KAlET,2CAsEF,OALiDjK,EAAAwrD,EAAAjkD,GAKjDikD,EALA,CAAiDjD,IAOjDkD,GAEE,SACS5/C,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KAxE+B,qCAkF1CyhD,GAAA,SAAAnkD,GAEE,SAAAmkD,EACS7/C,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,Kd9G2B,UKqBY,oBSyFYA,YAL5CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAjF0B,iCA0FrC,OAVyCjK,EAAA0rD,EAAAnkD,GAUzCmkD,EAVA,CAAyCzD,IAYzC0D,GAAA,SAAApkD,GAEE,SAAAokD,EAAY9/C,GAAZ,IAAAyF,EACE/J,EAAAzG,KAAAZ,KdrH2B,UKqBY,kBSgGa2L,IAAQ3L,YAFrDoR,EAAArH,KA5F+B,sCAgG1C,OAL6CjK,EAAA2rD,EAAApkD,GAK7CokD,EALA,CAA6CxD,IAO7CyD,GAAA,SAAArkD,GAEE,SAAAqkD,IAAA,IAAAt6C,EACE/J,EAAAzG,KAAAZ,Kd5H2B,UKqBY,oBSuGYA,YAF5CoR,EAAArH,KAjGT,yCAqGF,OALgDjK,EAAA4rD,EAAArkD,GAKhDqkD,EALA,CAAgDvD,IAOhDwD,GAAA,SAAAtkD,GAEE,SAAAskD,IAAA,IAAAv6C,EACE/J,EAAAzG,KAAAZ,KdnI2B,UKqBY,oBS8GYA,YAF5CoR,EAAArH,KAtGT,+CA0GF,OALqDjK,EAAA6rD,EAAAtkD,GAKrDskD,EALA,CAAqDtD,ICnHrDuD,GAEE,SAAmBjgD,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAVsB,4BAcjC8hD,GAEE,SAAmBlgD,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAd2B,iCAkBtC+hD,GAEE,SAAmBngD,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAlB8B,oCAsBzCgiD,GAAA,SAAA1kD,GAEE,SAAA0kD,EAAmBpgD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,Kf/B2B,UKiBe,sBUcYA,YADrCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KArBwB,+BAyBnC,OALuCjK,EAAAisD,EAAA1kD,GAKvC0kD,EALA,CAAuChE,IAOvCiE,GAAA,SAAA3kD,GAEE,SAAA2kD,EAAmBrgD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KftC2B,UKiBe,oBUqBa2L,IAAQ3L,YAD9CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3B6B,oCA+BxC,OAL2CjK,EAAAksD,EAAA3kD,GAK3C2kD,EALA,CAA2C/D,IAO3CgE,GAAA,SAAA5kD,GAEE,SAAA4kD,EAAmBC,GAAnB,IAAA96C,EACE/J,EAAAzG,KAAAZ,Kf7C2B,UKiBe,sBU4BYA,YADrCoR,EAAA86C,YAAAA,EADV96C,EAAArH,KAjCgC,uCAqC3C,OAL8CjK,EAAAmsD,EAAA5kD,GAK9C4kD,EALA,CAA8C9D,IAO9CgE,GAAA,SAAA9kD,GAEE,SAAA8kD,IAAA,IAAA/6C,EACE/J,EAAAzG,KAAAZ,KfpD2B,UKiBe,sBUmCYA,YAF/CoR,EAAArH,KAvCuB,8BA2ClC,OAL4CjK,EAAAqsD,EAAA9kD,GAK5C8kD,EALA,CAA4C9D,IChD5C+D,GAAA,WACWpsD,KAAA+J,KAH0B,+BCQrCsiD,GAAA,SAAAhlD,GAEE,SAAAglD,EACS1gD,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMmnD,KAAYnnD,YAPXoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KANqB,4BAiBhC,OAZoCjK,EAAAusD,EAAAhlD,GAYpCglD,EAZA,CAAoCh7C,GAcpCi7C,GAAA,SAAAjlD,GAEE,SAAAilD,EAAmB3gD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMmnD,GAAax7C,IAAQ3L,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAnB0B,iCAuBrC,OALwCjK,EAAAwsD,EAAAjlD,GAKxCilD,EALA,CAAwC/6C,GAOxCg7C,GAAA,SAAAllD,GAEE,SAAAklD,EAAmB5gD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMmnD,KAAYnnD,YADDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzB6B,oCA6BxC,OAL2CjK,EAAAysD,EAAAllD,GAK3CklD,EALA,CAA2C96C,IAO3C+6C,GAAA,SAAAnlD,GAEE,SAAAmlD,IAAA,IAAAp7C,EACE/J,EAAAzG,KAAAZ,KAAMmnD,KAAYnnD,YAFXoR,EAAArH,KA/BsB,6BAmCjC,OALqCjK,EAAA0sD,EAAAnlD,GAKrCmlD,EALA,CAAqC98B,ICdrC+8B,GAAA,SAAAplD,GAEE,SAAAolD,EAAmB9gD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KlBxB2B,UKkBS,iBaMYA,YAD/BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAfkB,yBAmB7B,OALkCjK,EAAA2sD,EAAAplD,GAKlColD,EALA,CAAkC1E,IAOlC2E,GAAA,SAAArlD,GAEE,SAAAqlD,EAAmB/gD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KlB/B2B,UKkBS,eaaa2L,IAAQ3L,YADxCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KArBuB,8BAyBlC,OALsCjK,EAAA4sD,EAAArlD,GAKtCqlD,EALA,CAAsCzE,IAOtC0E,GAAA,SAAAtlD,GAEE,SAAAslD,IAAA,IAAAv7C,EACE/J,EAAAzG,KAAAZ,KlBtC2B,UKkBS,iBaoBYA,YAFzCoR,EAAArH,KA3B0B,iCA+BrC,OALyCjK,EAAA6sD,EAAAtlD,GAKzCslD,EALA,CAAyCxE,IAOzCyE,GAAA,SAAAvlD,GAEE,SAAAulD,IAAA,IAAAx7C,EACE/J,EAAAzG,KAAAZ,KlB7C2B,UKkBS,iBa2BYA,YAFzCoR,EAAArH,KAjCgC,uCAqC3C,OAL8CjK,EAAA8sD,EAAAvlD,GAK9CulD,EALA,CAA8CvE,IAO9CwE,GAEE,SAAmBlhD,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAtCmB,yBA0C9B+iD,GAEE,SAAmBnhD,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA1CwB,8BA8CnCgjD,GAAA,WACW/sD,KAAA+J,KA9C2B,iCAiDtCijD,GAAA,SAAA3lD,GAEE,SAAA2lD,EAAmBrhD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KlBlE2B,UKmBO,ea+CYA,YAD7BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAhDgB,uBAoD3B,OALgCjK,EAAAktD,EAAA3lD,GAKhC2lD,EALA,CAAgCjF,IAOhCkF,GAAA,SAAA5lD,GAEE,SAAA4lD,EAAmBthD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KlBzE2B,UKmBO,aasDa2L,IAAQ3L,YADtCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtDqB,4BA0DhC,OALoCjK,EAAAmtD,EAAA5lD,GAKpC4lD,EALA,CAAoChF,IAOpCiF,GAAA,SAAA7lD,GAEE,SAAA6lD,IAAA,IAAA97C,EACE/J,EAAAzG,KAAAZ,KlBhF2B,UKmBO,ea6DYA,YAFvCoR,EAAArH,KA5DwB,+BAgEnC,OALuCjK,EAAAotD,EAAA7lD,GAKvC6lD,EALA,CAAuC/E,IAOvCgF,GAAA,SAAA9lD,GAEE,SAAA8lD,IAAA,IAAA/7C,EACE/J,EAAAzG,KAAAZ,KlBvF2B,UKmBO,eaoEYA,YAFvCoR,EAAArH,KAlEsB,2CAsEjC,OALqCjK,EAAAqtD,EAAA9lD,GAKrC8lD,EALA,CAAqC9E,ICjCrC+E,GAAA,SAAA/lD,GAEE,SAAA+lD,EACSzhD,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMwnD,KAAiBxnD,YAPhBoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA7B0B,iCAwCrC,OAZyCjK,EAAAstD,EAAA/lD,GAYzC+lD,EAZA,CAAyCpiD,GAczCqiD,GAAA,SAAAhmD,GAEE,SAAAgmD,EAAmB1hD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMwnD,GAAkB77C,IAAQ3L,YADfoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA1C+B,sCA8C1C,OAL6CjK,EAAAutD,EAAAhmD,GAK7CgmD,EALA,CAA6CpiD,GAO7CqiD,GAAA,SAAAjmD,GAEE,SAAAimD,EAAmB3hD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMwnD,KAAiBxnD,YADNoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/CT,yCAmDF,OALgDjK,EAAAwtD,EAAAjmD,GAKhDimD,EALA,CAAgDpiD,IAOhDqiD,GAAA,SAAAlmD,GAEE,SAAAkmD,IAAA,IAAAn8C,EACE/J,EAAAzG,KAAAZ,KAAMwnD,KAAiBxnD,YAFhBoR,EAAArH,KArDgC,uCAyD3C,OAL8CjK,EAAAytD,EAAAlmD,GAK9CkmD,EALA,CAA8CpiD,IAQ9CqiD,GAAA,SAAAnmD,GAEE,SAAAmmD,EACS7hD,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KnB/F2B,UKuCqB,4BcwDYA,YALrDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA1DT,kDAmEF,OAV6CjK,EAAA0tD,EAAAnmD,GAU7CmmD,EAVA,CAA6ChiD,IAY7CiiD,GAAA,SAAApmD,GAEE,SAAAomD,EAAmB9hD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnBtG2B,UKuCqB,0Bc+Da2L,IAAQ3L,YADpDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApET,uDAwEF,OALiDjK,EAAA2tD,EAAApmD,GAKjDomD,EALA,CAAiDhiD,IAOjDiiD,GAAA,SAAArmD,GAEE,SAAAqmD,EAAmB/hD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnB7G2B,UKuCqB,0BcsEa2L,IAAQ3L,YADpDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzET,0DA6EF,OALoDjK,EAAA4tD,EAAArmD,GAKpDqmD,EALA,CAAoDhiD,IAOpDiiD,GAAA,SAAAtmD,GAEE,SAAAsmD,IAAA,IAAAv8C,EACE/J,EAAAzG,KAAAZ,KnBpH2B,UKuCqB,4Bc6EYA,YAFrDoR,EAAArH,KA9ET,mDAkFF,OALyDjK,EAAA6tD,EAAAtmD,GAKzDsmD,EALA,CAAyD/hD,IAOzDgiD,GAAA,SAAAvmD,GAEE,SAAAumD,EACSjiD,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KnBhI2B,UKyC7B,8BcuFgEA,YALvDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAlFT,oDA2FF,OAV+CjK,EAAA8tD,EAAAvmD,GAU/CumD,EAVA,CAA+CpiD,IAY/CqiD,GAAA,SAAAxmD,GAEE,SAAAwmD,EAAmBliD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnBvI2B,UKyC7B,4Bc8FiE2L,IAAQ3L,YADtDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5FT,yDAgGF,OALmDjK,EAAA+tD,EAAAxmD,GAKnDwmD,EALA,CAAmDpiD,IAOnDqiD,GAAA,SAAAzmD,GAEE,SAAAymD,EAAmBniD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnB9I2B,UKyC7B,4BcqGiE2L,IAAQ3L,YADtDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjGT,4DAqGF,OALsDjK,EAAAguD,EAAAzmD,GAKtDymD,EALA,CAAsDpiD,IAOtDqiD,GAAA,SAAA1mD,GAEE,SAAA0mD,IAAA,IAAA38C,EACE/J,EAAAzG,KAAAZ,KnBrJ2B,UKyC7B,8Bc4GgEA,YAFvDoR,EAAArH,KAtGT,qDA0GF,OAL2DjK,EAAAiuD,EAAA1mD,GAK3D0mD,EALA,CAA2DniD,IAO3DoiD,GAAA,SAAA3mD,GAEE,SAAA2mD,EACSriD,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KnBjK2B,UK0CiB,wBcuHYA,YALjDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA3G0B,0BAoHrC,OAVyCjK,EAAAkuD,EAAA3mD,GAUzC2mD,EAVA,CAAyCxiD,IAYzCyiD,GAAA,SAAA5mD,GAEE,SAAA4mD,EAAmBtiD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnBxK2B,UK0CiB,sBc8Ha2L,IAAQ3L,YADhDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtH+B,+BA0H1C,OAL6CjK,EAAAmuD,EAAA5mD,GAK7C4mD,EALA,CAA6CxiD,IAO7CyiD,GAAA,SAAA7mD,GAEE,SAAA6mD,EAAmBviD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KnB/K2B,UK0CiB,sBcqIa2L,IAAQ3L,YADhDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5HkC,kCAgI7C,OALgDjK,EAAAouD,EAAA7mD,GAKhD6mD,EALA,CAAgDxiD,IC/IhDyiD,GAAA,SAAA9mD,GAEE,SAAA8mD,EAAmBxiD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KfWoC,oCeXLA,YADdoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjBT,yCAqBF,OALiDjK,EAAAquD,EAAA9mD,GAKjD8mD,EALA,CAAiD98C,GAOjD+8C,GAAA,SAAA/mD,GAEE,SAAA+mD,EAAmBziD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KfIoC,kCeJJ2L,IAAQ3L,YADvBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtBT,8CA0BF,OALqDjK,EAAAsuD,EAAA/mD,GAKrD+mD,EALA,CAAqD78C,GAOrD88C,GAAA,SAAAhnD,GAEE,SAAAgnD,EAAmB1iD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KfHoC,oCeGLA,YADdoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3BT,iDA+BF,OALwDjK,EAAAuuD,EAAAhnD,GAKxDgnD,EALA,CAAwD58C,IAOxD68C,GAAA,SAAAjnD,GAEE,SAAAinD,EACS3iD,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KpBvD2B,UKuB7B,kCegCoEA,YAF3DoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAhCT,2CAsCF,OAPmDjK,EAAAwuD,EAAAjnD,GAOnDinD,EAPA,CAAmD9iD,IASnD+iD,GAAA,SAAAlnD,GAEE,SAAAknD,EAAmB5iD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KpB9D2B,UKuB7B,gCeuCqE2L,IAAQ3L,YAD1DoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvCT,gDA2CF,OALuDjK,EAAAyuD,EAAAlnD,GAKvDknD,EALA,CAAuD9iD,IAOvD+iD,GAAA,SAAAnnD,GAEE,SAAAmnD,EAAmB7iD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KpBrE2B,UKuB7B,kCe8CoEA,YADjDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5CT,mDAgDF,OAL0DjK,EAAA0uD,EAAAnnD,GAK1DmnD,EALA,CAA0D9iD,IAO1D+iD,GAAA,SAAApnD,GAEE,SAAAonD,IAAA,IAAAr9C,EACE/J,EAAAzG,KAAAZ,KpB5E2B,UKuB7B,kCeqDoEA,YAF3DoR,EAAArH,KAjDT,0CAqDF,OALkDjK,EAAA2uD,EAAApnD,GAKlDonD,EALA,CAAkD7iD,IAOlD8iD,GAAA,SAAArnD,GAEE,SAAAqnD,IAAA,IAAAt9C,EACE/J,EAAAzG,KAAAZ,KfxCoC,oCewCLA,YAFxBoR,EAAArH,KAtDT,0CA0DF,OALkDjK,EAAA4uD,EAAArnD,GAKlDqnD,EALA,CAAkDh/B,ICxClDi/B,GAAA,SAAAtnD,GAEE,SAAAsnD,EACShjD,GADT,IAAAyF,EAUE/J,EAAAzG,KAAAZ,KAAMynD,KAAkBznD,YATjBoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAnB2B,2BAgCtC,OAd0CjK,EAAA6uD,EAAAtnD,GAc1CsnD,EAdA,CAA0C3jD,GAgB1C4jD,GAAA,SAAAvnD,GAEE,SAAAunD,EAAmBjjD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMynD,GAAmB97C,IAAQ3L,YADhBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlCgC,gCAsC3C,OAL8CjK,EAAA8uD,EAAAvnD,GAK9CunD,EALA,CAA8C3jD,GAO9C4jD,GAAA,SAAAxnD,GAEE,SAAAwnD,EAAmBljD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMynD,KAAkBznD,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAxCmC,mCA4C9C,OALiDjK,EAAA+uD,EAAAxnD,GAKjDwnD,EALA,CAAiD3jD,IAOjD4jD,GAAA,SAAAznD,GAEE,SAAAynD,EACSnjD,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KrB/E2B,UKyBoB,2BgBsDYA,YANpDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA7C4B,4BAuDvC,OAX2CjK,EAAAgvD,EAAAznD,GAW3CynD,EAXA,CAA2CtjD,IAa3CujD,GAAA,SAAA1nD,GAEE,SAAA0nD,EAAmBpjD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KrBtF2B,UKyBoB,2BgB6DYA,YAD1CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAxDT,oCA4DF,OALkDjK,EAAAivD,EAAA1nD,GAKlD0nD,EALA,CAAkDrjD,IAOlDsjD,GAAA,SAAA3nD,GAEE,SAAA2nD,EAAmBrjD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KrB7F2B,UKyBoB,yBgBoEa2L,IAAQ3L,YADnDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9DiC,iCAkE5C,OAL+CjK,EAAAkvD,EAAA3nD,GAK/C2nD,EALA,CAA+CvjD,IAO/CwjD,GAAA,SAAA5nD,GAEE,SAAA4nD,EACStjD,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KrB1G2B,UKwBgB,wBgBkFYA,YANhDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAnEyB,yBA6EpC,OAXwCjK,EAAAmvD,EAAA5nD,GAWxC4nD,EAXA,CAAwCzjD,IAaxC0jD,GAAA,SAAA7nD,GAEE,SAAA6nD,EAAmBvjD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KrBjH2B,UKwBgB,wBgByFYA,YADtCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9EiC,iCAkF5C,OAL+CjK,EAAAovD,EAAA7nD,GAK/C6nD,EALA,CAA+CxjD,IAO/CyjD,GAAA,SAAA9nD,GAEE,SAAA8nD,EAAmBxjD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KrBxH2B,UKwBgB,sBgBgGa2L,IAAQ3L,YAD/CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtF8B,8BA0FzC,OAL4CjK,EAAAqvD,EAAA9nD,GAK5C8nD,EALA,CAA4C1jD,IAO5C2jD,GAAA,SAAA/nD,GAEE,SAAA+nD,IAAA,IAAAh+C,EACE/J,EAAAzG,KAAAZ,KrB/H2B,UKwBgB,wBgBuGYA,YAFhDoR,EAAArH,KA1F+B,+BA8F1C,OAL2CjK,EAAAsvD,EAAA/nD,GAK3C+nD,EALA,CAA2CxjD,IAO3CyjD,GAAA,SAAAhoD,GAEE,SAAAgoD,IAAA,IAAAj+C,EACE/J,EAAAzG,KAAAZ,KrBtI2B,UKyBoB,2BgB6GYA,YAFpDoR,EAAArH,KAhGkC,kCAoG7C,OAL8CjK,EAAAuvD,EAAAhoD,GAK9CgoD,EALA,CAA8CzjD,IAO9C0jD,GAAA,SAAAjoD,GAEE,SAAAioD,IAAA,IAAAl+C,EACE/J,EAAAzG,KAAAZ,KAAMynD,KAAkBznD,YAFjBoR,EAAArH,KArG4B,4BAyGvC,OAL2CjK,EAAAwvD,EAAAjoD,GAK3CioD,EALA,CAA2CnkD,ICvF3CokD,GAAA,SAAAloD,GAEE,SAAAkoD,EACS5jD,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KjBzBuC,kCiByBLA,YAL3BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAlCgC,uCA2C3C,OAV8CjK,EAAAyvD,EAAAloD,GAU9CkoD,EAVA,CAA8CvkD,GAY9CwkD,GAAA,SAAAnoD,GAEE,SAAAmoD,EAAmB7jD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KjBhCuC,gCiBgCJ2L,IAAQ3L,YAD1BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5CT,4CAgDF,OALkDjK,EAAA0vD,EAAAnoD,GAKlDmoD,EALA,CAAkDvkD,GAOlDwkD,GAAA,SAAApoD,GAEE,SAAAooD,EAAmB9jD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KjBvCuC,kCiBuCLA,YADjBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjDT,+CAqDF,OALqDjK,EAAA2vD,EAAApoD,GAKrDooD,EALA,CAAqDvkD,IAOrDwkD,GAAA,SAAAroD,GAEE,SAAAqoD,EACS/jD,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KjBnDuC,kCiBmDLA,YAL3BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KArDT,6CA8DF,OAV4CjK,EAAA4vD,EAAAroD,GAU5CqoD,EAVA,CAA4C1kD,GAY5C2kD,GAAA,SAAAtoD,GAEE,SAAAsoD,EAAmBhkD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KjB1DuC,gCiB0DJ2L,IAAQ3L,YAD1BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/DT,kDAmEF,OALgDjK,EAAA6vD,EAAAtoD,GAKhDsoD,EALA,CAAgD1kD,GAOhD2kD,GAAA,SAAAvoD,GAEE,SAAAuoD,EAAmBjkD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KjBjEuC,kCiBiELA,YADjBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApET,qDAwEF,OALmDjK,EAAA8vD,EAAAvoD,GAKnDuoD,EALA,CAAmD1kD,IAOnD2kD,GAAA,SAAAxoD,GAEE,SAAAwoD,EACSlkD,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KtBhH2B,UK2BS,iBiBqFYA,YANzCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzEgC,uCAmF3C,OAX8CjK,EAAA+vD,EAAAxoD,GAW9CwoD,EAXA,CAA8C9H,IAa9C+H,GAAA,SAAAzoD,GAEE,SAAAyoD,EAAmBnkD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KtBvH2B,UK2BS,eiB4Fa2L,IAAQ3L,YADxCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApFT,4CAwFF,OALkDjK,EAAAgwD,EAAAzoD,GAKlDyoD,EALA,CAAkD7H,IAOlD8H,GAAA,SAAA1oD,GAEE,SAAA0oD,IAAA,IAAA3+C,EACE/J,EAAAzG,KAAAZ,KtB9H2B,UK2BS,iBiBmGYA,YAFzCoR,EAAArH,KAzFT,+CA6FF,OALqDjK,EAAAiwD,EAAA1oD,GAKrD0oD,EALA,CAAqD5H,IAOrD6H,GAAA,SAAA3oD,GAEE,SAAA2oD,EACSrkD,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMqnD,KAAqBrnD,YAPpBoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA7FT,+CAwGF,OAZgDjK,EAAAkwD,EAAA3oD,GAYhD2oD,EAZA,CAAgDhlD,GAchDilD,GAAA,SAAA5oD,GAEE,SAAA4oD,EAAmBtkD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMqnD,GAAsB17C,IAAQ3L,YADnBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzGT,oDA6GF,OALoDjK,EAAAmwD,EAAA5oD,GAKpD4oD,EALA,CAAoDhlD,GAOpDilD,GAAA,SAAA7oD,GAEE,SAAA6oD,EAAmBvkD,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMqnD,KAAqBrnD,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9GT,uDAkHF,OALuDjK,EAAAowD,EAAA7oD,GAKvD6oD,EALA,CAAuDhlD,IAOvDilD,GAAA,SAAA9oD,GAEE,SAAA8oD,IAAA,IAAA/+C,EACE/J,EAAAzG,KAAAZ,KjB/HuC,kCiB+HLA,YAF3BoR,EAAArH,KAlHT,8CAsHF,OAL6CjK,EAAAqwD,EAAA9oD,GAK7C8oD,EALA,CAA6ChlD,IAO7CilD,GAAA,SAAA/oD,GAEE,SAAA+oD,IAAA,IAAAh/C,EACE/J,EAAAzG,KAAAZ,KAAMqnD,KAAqBrnD,YAFpBoR,EAAArH,KAvHT,2CA2HF,OALiDjK,EAAAswD,EAAA/oD,GAKjD+oD,EALA,CAAiDjlD,IAOjDklD,GAAA,SAAAhpD,GAEE,SAAAgpD,IAAA,IAAAj/C,EACE/J,EAAAzG,KAAAZ,KtB/K2B,UK2BS,iBiBoJYA,YAFzCoR,EAAArH,KA5HT,+CAgIF,OAL8CjK,EAAAuwD,EAAAhpD,GAK9CgpD,EALA,CAA8ChI,4DrB5KR,4DACK,oEAEzC,qJCFuC,kEAEvC,0EAEA,sEACwC,oLCLH,8DAErC,sEAEA,6JCJA,6EAEA,kFAEA,oKEOgC,oDACK,4DACG,wDACP,0CAEP,wCACK,gDACG,yDACM,6OClBD,kEAEvC,0EAEA,2EAGA,8EAEA,sFAEA,4EAEwC,oEAExC,4EAEA,uVChB0B,2CACQ,gDACH,yCACJ,8GCNC,+CACQ,oDACH,uGCDR,sCACK,8CACG,+FCDP,yCACM,iDACE,0CACT,0ICHI,8CACK,sDACG,uDAErC,yJCJiC,sDACK,8DACG,sDAEX,gDACK,wDACG,sDAEL,sDACK,8DACG,yDAER,sDACK,8DACG,uVCNT,uDACQ,4DACH,0DACC,oDAEP,kDACK,0DACG,mEAEvC,oEACwC,0DAEL,0DACK,kEAExC,2EAEA,iZCvB+B,kDACK,0DACG,uDAEN,sDACK,8DACG,wDACT,0NCZG,qECGL,gDACK,wDACG,oDACP,6HCEJ,0CACK,kDACG,2DACM,oDAEb,4CACK,oDACG,4CAEX,sCACK,8CACG,+CACF,4RCII,0DACK,kEAExC,mEACyC,+DAGzC,+EAEA,uFAEA,gGAEA,6EAGA,mFAEA,2FAEA,oGAEA,yEAEmC,mDACK,2DACG,wgBCpC3C,0EAEA,kFAEA,+EAEA,8EAEA,sFAEA,gFAEA,uEAEA,qVCLoC,qDACK,6DACG,yDAEP,0DAErC,+DAC0C,oDAER,iDACK,yDACG,0DAEF,2DACG,wDAEN,0XCpBI,sEAEzC,8EAEA,uEAGA,0EAEA,kFAEA,+EAEyC,sEAEzC,8EAEA,4EAGA,iFAEA,yFAEA,gFAGA,4EAEA,qEAEA,igBChDWiI,GAGT59C,EAAAA,sBlBUwB,WmBHK,SAACxG,GAAqB,OAAAA,EAAMqkD,kBAHhDC,GAGT39C,EAAAA,eAAey9C,GAAYG,OAO7B,SAACvkD,GAAiC,OAAAA,EAAMK,UAL7BmkD,GAGT79C,EAAAA,eACF29C,GAAwBG,OAOqB,SAACC,GAC9C,OAAApxD,OAAOuN,KAAK6jD,GAAS98C,KAAI,SAACsN,GAAY,OAAAwvC,EAAQxvC,OAJnCyvC,GAGTh+C,EAAAA,eAAe69C,GAA0BI,ICjBhCC,GAGTl+C,EAAAA,eACFy9C,IACA,SAACpkD,GAAqB,OAAAA,EAAMipC,uBAGjBrD,GAGTj/B,EAAAA,eACFk+C,IACA,SAAC7kD,GAAoC,OAAAA,EAAM8kD,YCZhCC,GAGTp+C,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAM4gC,aAEhDokB,GAGTr+C,EAAAA,eACFo+C,IACA,SAAC/kD,GAAkC,OAAAA,EAAMK,YAG9B4kD,GAGTt+C,EAAAA,eAAeq+C,IAA6B,SAACN,GAC/C,OAAApxD,OAAOuN,KAAK6jD,GAAS98C,KAAI,SAACsN,GAAY,OAAAwvC,EAAQxvC,SAGnCgwC,GAAyB,SACpChwC,GAEA,OAAAvO,EAAAA,eAAeq+C,IAA6B,SAAC3kD,GAC3C,OAAiC,IAAjC/M,OAAOuN,KAAKR,GAAU5L,OAAe4L,EAAS6U,GAAW,SC3BhDiwC,GAGTx+C,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMolD,SAEhDC,GAGT1+C,EAAAA,eAAew+C,IAAe,SAACnlD,GACjC,OAAAwkB,GAAyCxkB,MCT9BslD,GAGT3+C,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMulD,eAEhDC,GAGT7+C,EAAAA,eACF2+C,IACA,SAACtlD,GACC,OAAAwkB,GAAyCxkB,MAGhCylD,GAGT9+C,EAAAA,eACF2+C,IACA,SAACtlD,GACC,OAAA0kB,GAA2C1kB,SAQ7C,SAACA,GACC,OAAA4kB,GAA2C5kB,KAC1C0kB,GAA2C1kB,IAPnC0lD,GAGT/+C,EAAAA,eACF2+C,GAA0BK,OASK,SAAC3lD,GAAqB,OAAAA,EAAM4lD,iBAHhDC,GAGTl/C,EAAAA,eAAey9C,GAAY0B,OAO7B,SAAC9lD,GACC,OAAAwkB,GAAyCxkB,IANhC+lD,GAGTp/C,EAAAA,eACFk/C,GAA8BG,IC1CnBC,GAGTt/C,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMymC,YAEhDyf,GAGTv/C,EAAAA,eACFs/C,IACA,SAACjmD,GACC,OAAAwkB,GAAyCxkB,MAGhCmmD,GAGTx/C,EAAAA,eACFs/C,IACA,SAACjmD,GACC,OAAA0kB,GAA2C1kB,MAGlComD,GAGTz/C,EAAAA,eACFs/C,IACA,SAACjmD,GACC,OAAA4kB,GAA2C5kB,KAC1C0kB,GAA2C1kB,MC9BnCqmD,GAGT1/C,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMihC,WAEhDqlB,GAGT3/C,EAAAA,eACF0/C,IACA,SAACrmD,GACC,OAAOwkB,GAAyCxkB,GAAOK,YAI9CkmD,GAQT5/C,EAAAA,eACF0/C,IACA,SAACrmD,GAAqC,MAAA,CACpCwmD,OAAQ5hC,GAA2C5kB,GACnDJ,QAAS8kB,GAA2C1kB,GACpDihC,QAASzc,GAAyCxkB,GAAOK,SACzDsyB,QAASnO,GAAyCxkB,GAAO2yB,YAIhD8zB,GAGT9/C,EAAAA,eACF0/C,IACA,SAACrmD,GACC,OAAAwkB,GAAyCxkB,GAAO2yB,WAGvC+zB,GAGT//C,EAAAA,eAAe0/C,IAAuB,SAACrmD,GACzC,OAAA0kB,GAA2C1kB,MAGhC2mD,GAGThgD,EAAAA,eAAe0/C,IAAuB,SAACrmD,GACzC,OAAA4kB,GAA2C5kB,MCxDhC4mD,GAGTjgD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMynC,iBCGhDof,GAGTlgD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMkoC,UAEhD4e,GAGTngD,EAAAA,eAAekgD,IAAgB,SAAC7mD,GAAuB,OAAAA,EAAMK,YAEpD0mD,GAGTpgD,EAAAA,eAAemgD,IAAkB,SAACpC,GACpC,OAAApxD,OAAOuN,KAAK6jD,GAAS98C,KAAI,SAACwlB,GAAS,OAAAs3B,EAAQt3B,SCjBhC45B,GAGTrgD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAM0kC,aAEhDuiB,GAGTtgD,EAAAA,eAAeqgD,IAAyB,SAAChnD,GAC3C,OAAAwkB,GAAyCxkB,MAG9BknD,GAGTvgD,EAAAA,eAAeqgD,IAAyB,SAAChnD,GAC3C,OAAA0kB,GAA2C1kB,MAGhCmnD,GAGTxgD,EAAAA,eACFqgD,IACA,SAAChnD,GACC,OAAA4kB,GAA2C5kB,KAC1C0kB,GAA2C1kB,MC1BnConD,GAGTzgD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMulB,YAEhD8hC,GAGT1gD,EAAAA,eAAeygD,GAAkB5iC,IAExB8iC,GAAyB,SACpCrgC,GAEA,OAAAtgB,EAAAA,eAAe0gD,IAAkB,SAACjjC,GAChC,OAAAA,EAAUjW,MAAK,SAAC6W,GAAa,OAAAA,EAASlnB,KAAOmpB,SAGpCsgC,GAGT5gD,EAAAA,eACFygD,GACA1iC,IAGW8iC,GAGT7gD,EAAAA,eACFygD,GACAxiC,IAGW6iC,GAGT9gD,EAAAA,eAAeygD,GAAkBtiC,ICtCxB4iC,GAGT/gD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAM2nD,WAEhDC,GAAoDjhD,EAAAA,eAC/D+gD,IACA,SAAC1nD,GAA4B,OAAAA,EAAMuU,WCLxBszC,GAGTlhD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAM8nD,UAEhDC,GAGTphD,EAAAA,eAAekhD,IAAgB,SAAC7nD,GAClC,OAAA4kB,GAA2C5kB,MAGhCgoD,GAGTrhD,EAAAA,eAAekhD,IAAgB,SAAC7nD,GAClC,OAAAwkB,GAAyCxkB,MCV9BioD,GAGTthD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMkpC,mBAEhDgf,GAGTvhD,EAAAA,eACFshD,IACA,SAACjoD,GACC,OAAAgF,GAAsBhF,MAGbmoD,GAGTxhD,EAAAA,eACFshD,IACA,SAACjoD,GACC,OAAA8E,GAAsB9E,MAGb+pC,GAGTpjC,EAAAA,eACFshD,IACA,SAACjoD,GAAmD,OAAA6E,GAAoB7E,MC/B7DooD,GAGTzhD,EAAAA,eACFy9C,IACA,SAACpkD,GAAqB,OAAAA,EAAMqoD,2BAGjBC,GAGT3hD,EAAAA,eACFyhD,IACA,SAACpoD,GAAiD,OAAA6E,GAAoB7E,MAG3DuoD,GAGT5hD,EAAAA,eACFyhD,IACA,SAACpoD,GACC,OAAA6E,GAAoB7E,GAAO4E,QAAO,SAAClR,GAAM,OAAAA,EAAE80D,cAGlCC,GAGT9hD,EAAAA,eACFyhD,IACA,SAACpoD,GAAiD,OAAA8E,GAAsB9E,MC9B7D0oD,GAGT/hD,EAAAA,eAAey9C,IAAc,SAACpkD,GAAqB,OAAAA,EAAMspC,oBAEhDuB,GAGTlkC,EAAAA,eACF+hD,IACA,SAAC1oD,GACC,OAAA6E,GAAoB7E,MAGX2oD,GAGThiD,EAAAA,eACF+hD,IACA,SAAC1oD,GACC,OAAA8E,GAAsB9E,+4BPHU,SAClCotB,GAEA,OAAAzmB,EAAAA,eAAemgD,IAAkB,SAACzmD,GAChC,OAAiC,IAAjC/M,OAAOuN,KAAKR,GAAU5L,OAAe4L,EAAS+sB,GAAQ,olBQPxD,SAAAw7B,EACYxhD,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZo/C,EAAA50D,UAAA6wC,aAAA,WAAA,IAAA3/B,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SAAS,IAAIqhD,GAA6BvhD,QAQzDshD,EAAA50D,UAAA4yB,YAAA,SAAYd,GAAZ,IAAA5gB,EAAApR,KACE,YADU,IAAAgyB,IAAAA,GAAA,GACHC,EAAAA,KACL,WAAM,OAAAD,IACNhyB,KAAKsT,MAAMO,KACTM,EAAAA,OAAO6gD,IACP7iC,EAAAA,eACEnyB,KAAKi1D,2BACLj1D,KAAKk1D,4BAEPpkD,EAAAA,QAAO,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAAa4G,GAAZ3G,EAAA,GAAYA,EAAA,IAASA,EAAA,GAAc,OAAC2G,KAC7CqR,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAqB2F,GAAV3F,EAAA,GAAUA,EAAA,IACpBmrB,GAAkC,IAArBA,EAAU3vB,QAErBmK,GACHsG,EAAK2/B,kBAIXjgC,EAAAA,QAAO,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAWA,EAAA,GAAc,OAAA0P,QAAQyb,MAC1Cxc,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAACorB,EAAAnrB,EAAA,GAAWA,EAAA,GAAc,OAAAmrB,MAEjCtwB,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO6gD,OAO3BF,EAAA50D,UAAA+0D,yBAAA,WACE,OAAOj1D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOghD,MAMhCL,EAAA50D,UAAAg1D,yBAAA,WACE,OAAOl1D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOihD,MAMhCN,EAAA50D,UAAAm1D,uBAAA,WACE,OAAOr1D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOmhD,MAMhCR,EAAA50D,UAAAq1D,0BAAA,WACEv1D,KAAKsT,MAAMI,SAAS,IAAI8hD,KAU1BV,EAAA50D,UAAAgzB,WAAA,SAAWC,GAAX,IAAA/hB,EAAApR,KACE,OAAOA,KAAK0V,YAAYN,iBAAiBvB,KACvC/C,EAAAA,OAAO+D,SACPsI,EAAAA,KAAI,WAAM,OAAA/L,EAAK0hB,aAAY,MAC3Bld,EAAAA,WAAU,WACR,OAAAxE,EAAKkC,MAAMO,KACTM,EAAAA,OAAOshD,GAAsCtiC,QAGjDriB,EAAAA,QAAO,SAACogB,GAAa,OAAArc,QAAQqc,MAC7Bpd,EAAAA,KAAI,SAACod,GAAa,OAAAA,EAASwkC,oBAU/BZ,EAAA50D,UAAAuzB,eAAA,SAAe9B,GACb,OACE9c,QAAQ8c,IACR9c,QAAQ8c,EAAQgkC,oBACf9gD,QAAQ8c,EAAQikC,uBAUrBd,EAAA50D,UAAA6zB,mBAAA,SAAmBpC,GACjB,OAAI9c,QAAQ8c,IACH9c,QAAQ8c,EAAQikC,uBAU3Bd,EAAA50D,UAAAozB,YAAA,SAAY2d,EAA2BC,GAAvC,IAAA9/B,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAImiD,GAA4B,CAC9BriD,OAAMA,EACNy9B,kBAAiBA,EACjBC,uBAAsBA,SAS9B4jB,EAAA50D,UAAA41D,4BAAA,WACE,OAAO91D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GnC/I0B,kBmCsJrC6O,EAAA50D,UAAA61D,4BAAA,WACE,OAAO/1D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GnCxJ0B,kBmC+JrC4O,EAAA50D,UAAA81D,0BAAA,WACE,OAAOh2D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GnCjK0B,kBmCwKrC2O,EAAA50D,UAAA+1D,6BAAA,WACE,OAAOj2D,KAAKsT,MAAMI,SAAS,IAAIwiD,KAOjCpB,EAAA50D,UAAA0zB,gBAAA,SAAgBud,GAAhB,IAAA//B,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIyiD,GAAgC,CAClC3iD,OAAMA,EACN29B,YAAWA,SASnB2jB,EAAA50D,UAAAk2D,gCAAA,WACE,OAAOp2D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GnC/L8B,sBmCsMzC6O,EAAA50D,UAAAm2D,gCAAA,WACE,OAAOr2D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GnCxM8B,sBmC+MzC4O,EAAA50D,UAAAo2D,8BAAA,WACE,OAAOt2D,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GnCjN8B,sBmCwNzC2O,EAAA50D,UAAAq2D,iCAAA,WACE,OAAOv2D,KAAKsT,MAAMI,SAChB,IAAI8iD,KAWR1B,EAAA50D,UAAAu2D,uBAAA,SACEC,EACAC,WAEA,QAFA,IAAAA,IAAAA,EAAA,IAE+B,IAA3BA,EAAgBh2D,OAClB,OAAO+1D,EAGT,IAAME,EAAyC,OAC/C,IAAuB,IAAAC,EAAA5yD,EAAAyyD,GAAYI,EAAAD,EAAAt0D,QAAAu0D,EAAAn0D,KAAAm0D,EAAAD,EAAAt0D,OAAE,CAAhC,IAAM2uB,EAAQ4lC,EAAAz0D,OACHs0D,EAAgBxpD,SAAS+jB,EAASlnB,KAE9C4sD,EAAoB5yD,KAAKktB,qGAI7B,OAAO0lC,4CAnPUthD,EAAAA,aACMjC,8IAHdyhD,EAAkBh0D,EAAA,CAH9ByU,EAAAA,WAAW,CACVC,WAAY,UAEDs/C,oBCdX,SAAAiC,EAAsB1nB,GAAArvC,KAAAqvC,QAAAA,SAEtB0nB,EAAA72D,UAAAqwC,8BAAA,WACE,OAAOvwC,KAAKqvC,QAAQkB,0EAHSwH,uHADpBgf,EAAkCj2D,EAAA,CAH9CyU,EAAAA,WAAW,CACVC,WAAY,UAEDuhD,oBCgLX,SAAAC,EACU9sC,EACA+sC,EACAvhD,EACAwhD,EACAC,EACAC,GANV,IAAAhmD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAi3D,mCAAAA,EACAj3D,KAAA0V,YAAAA,EACA1V,KAAAk3D,wBAAAA,EACAl3D,KAAAm3D,wBAAAA,EACAn3D,KAAAo3D,mBAAAA,EArKVp3D,KAAAq3D,+BAEIr3D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OnLpBF,yDmLqBEitC,EAAAA,WAAU,WACR,OAAAlmD,EAAK6lD,mCACF1mB,gCACA18B,KACCse,EAAAA,eAAe/gB,EAAK+lD,wBAAwBplC,gBAC5ChH,EAAAA,UAAS,SAAC7lB,OAAAC,EAAAf,EAAAc,EAAA,GAACqyD,EAAApyD,EAAA,GAAqBqyD,EAAAryD,EAAA,GAC1BirB,GAAU,EAWd,OATEvb,QAAQ2iD,IAC2B,IAAnCA,EAAwB72D,SAExByvB,EAAUhf,EAAK+lD,wBAAwBxiC,uBACrC6iC,EACAD,IAIG,CACL,IAAIE,GACFF,GAEF,IAAI/iC,GACFpE,OAIN3S,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI8gD,GACFjuC,GAAsBnlB,aASpCtE,KAAA23D,iCAEI33D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OACEmB,IAEF1a,EAAAA,QAAO,WAAM,OAAA+D,QAAQzD,EAAK8lD,wBAAwBzvD,sBAClD0qB,EAAAA,eACEnyB,KAAKkqB,SAASrW,KACZwW,EAAAA,OxBjE6B,kCwBsEjCvZ,EAAAA,QAAO,SAAC5L,OAAG0yD,EAAHxzD,EAAAc,EAAA,GAAG,GAAoB,OAAA2P,QAAQ+iD,MACvChiD,EAAAA,WAAU,WACR,OAAAxE,EAAK+lD,wBAAwBrkC,cAAcjf,KACzCse,EAAAA,eACE/gB,EAAKsE,YAAY9B,eACjBxC,EAAK+lD,wBAAwBplC,eAC7B3gB,EAAKsE,YAAYN,kBAEnBtE,EAAAA,QAAO,SAAC5L,GAAqB,OAArBd,EAAAc,EAAA,GAAO,MACfoyD,EAAAA,WAAU,SAACpyD,eAAAm+B,EAAAj/B,EAAAc,EAAA,GAACusB,EAAA4R,EAAA,GAAU7vB,EAAA6vB,EAAA,GAAQ/S,EAAA+S,EAAA,GACtBw0B,GADiCx0B,EAAA,GACiB,QACxD,IAAsB,IAAAy0B,EAAA7zD,EAAAwtB,GAAQsmC,EAAAD,EAAAv1D,QAAAw1D,EAAAp1D,KAAAo1D,EAAAD,EAAAv1D,OAAE,CAA3B,IAAMovB,EAAOomC,EAAA11D,MAChB,GACE+O,EAAK+lD,wBAAwB1jC,eAAe9B,MAC1CvgB,EAAK8lD,wBAAwBzvD,kBAC5BG,mBACAwJ,EAAK8lD,wBAAwBzvD,kBAAkBG,iBAAiBuF,SAC/DwkB,EAAQ9B,mBAGZ,IAAuB,IAAAmoC,GAAAC,OAAA,EAAAh0D,EAAAqsB,IAAS4nC,EAAAF,EAAAz1D,QAAA21D,EAAAv1D,KAAAu1D,EAAAF,EAAAz1D,OAAE,CAA7B,IAAM2uB,EAAQgnC,EAAA71D,MACjB,GAAI6uB,EAASlnB,KAAO2nB,EAAQ9B,aAAc,CACxCgoC,EAAQ7zD,KACN,IAAIm0D,GAAqC,CACvC3kD,OAAMA,EACNy9B,kBAAmB/f,EAASlnB,GAC5BknC,uBAAwBhgB,EAAS8D,WAGrC,4MAKR,OAAI6iC,EAAQl3D,OAAS,EACZk3D,EAEF9yC,EAAAA,cAOf/kB,KAAAo4D,4BAEIp4D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OACEmB,IAEF1a,EAAAA,QACE,SAAC3E,GACC,OAAA0I,QAAQzD,EAAK8lD,wBAAwBzvD,oBACrCoN,QACEzD,EAAK8lD,wBAAwBzvD,kBAAkBG,mBAEjDiN,QAAQ1I,MAEZmrD,EAAAA,WAAU,WACR,OAAAlmD,EAAKgmD,mBAAmBlC,2BAA2BrhD,KACjDse,EAAAA,eACE/gB,EAAKsE,YAAY9B,eACjBxC,EAAKgmD,mBAAmBtkC,cACxB1hB,EAAKsE,YAAYN,kBAEnBtE,EAAAA,QAAO,SAAC5L,GAAqB,OAArBd,EAAAc,EAAA,GAAO,MACfiY,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAACwtD,EAAAvtD,EAAA,GAAQA,EAAA,GAASA,EAAA,GAAYA,EAAA,GAC5ButD,GACHthD,EAAKgmD,mBAAmBrmB,kBAG5Bj9B,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAAUsO,GAATrO,EAAA,GAASA,EAAA,IAAQmrB,EAAAnrB,EAAA,GAAWA,EAAA,GAChC,MAAO,CAAEqO,OAAMA,EAAE8c,UAASA,MAE5BgnC,EAAAA,WAAU,SAACpyD,WAAEsO,EAAAtO,EAAAsO,OAAQ8c,EAAAprB,EAAAorB,UACbunC,EAAyC,OAC/C,IAAuB,IAAAQ,EAAAp0D,EAAAqsB,GAASgoC,EAAAD,EAAA91D,QAAA+1D,EAAA31D,KAAA21D,EAAAD,EAAA91D,OAAE,CAA7B,IAAM2uB,EAAQonC,EAAAj2D,MAEf+O,EAAKgmD,mBAAmBrjC,mBACtB7C,EAASwkC,iBAEXtkD,EAAK8lD,wBAAwBzvD,kBAAkBG,iBAAiBuF,SAC9D+jB,EAASlnB,KAGX6tD,EAAQ7zD,KACN,IAAI6xD,GAA4B,CAC9BriD,OAAMA,EACNy9B,kBAAmB/f,EAASlnB,GAC5BknC,uBAAwBhgB,EAAS8D,6GAKzC,OAAI6iC,EAAQl3D,OAAS,EACZk3D,EAEF9yC,EAAAA,cAcjB,gDAPsB0F,EAAAA,eAC0BssC,UACvB1jD,UACY9L,SACAqqB,UACLkjC,MArK9Bh0D,EAAA,CADC4pB,EAAAA,+DA2CD5pB,EAAA,CADC4pB,EAAAA,iEA2DD5pB,EAAA,CADC4pB,EAAAA,4DArGUssC,EAAwBl2D,EAAA,CADpCyU,EAAAA,cACYyhD,MCrBAhrC,GAAiB,CAACgrC,kBCQ7B,SAAAuB,EAAsBlpB,GAAArvC,KAAAqvC,QAAAA,SAEtBkpB,EAAAr4D,UAAAs4D,aAAA,WACE,OAAOx4D,KAAKqvC,QAAQ7C,iBAGtB+rB,EAAAr4D,UAAAu4D,cAAA,WACE,OAAOz4D,KAAKqvC,QAAQ3C,kBAGtB6rB,EAAAr4D,UAAAw4D,aAAA,SAAa3uD,GACX,OAAO/J,KAAKqvC,QAAQzC,cAAc7iC,IAGpCwuD,EAAAr4D,UAAAy4D,WAAA,SAAW3rB,GACT,OAAOhtC,KAAKqvC,QAAQtC,YAAYC,IAGlCurB,EAAAr4D,UAAA04D,YAAA,WACE,OAAO54D,KAAKqvC,QAAQjC,yDAnBS4B,uHADpBupB,EAAaz3D,EAAA,CAHzByU,EAAAA,WAAW,CACVC,WAAY,UAED+iD,SCEb,sBAIgBM,WACd,OAAA3zD,EAAA,IACsB,SAAG+oC,GACvB/oC,EAAoB,SAAGwoC,GACvBxoC,EAAqB,SAAG6c,KAI5B,IAAa+2C,GAAsC,CACjDlzD,QAASmzD,GACT7yD,WAAY2yD,aCrBEG,GAAwBtzD,GACtC,QAAiEqG,IAA7D4S,GAA2BjZ,E1NHG,Y0NIhC,MAAO,yFCAKuzD,WACd,MAAO,CACLj+C,SAAO9V,EAAA,GACLA,EAAoB,SAAG,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEFA,EAAoB,SAAG,CACrB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,WChCR,IAAAg0D,GAAA,WACE,SAAAA,EAC4BxzD,EAGhByzD,GAHgBn5D,KAAA0F,OAAAA,EAGhB1F,KAAAm5D,iBAAAA,EAGFn5D,KAAAo5D,eAAiB,IAAIjV,EAAAA,qBAA0Bp4C,UAKzDvM,OAAAgC,eAAI03D,EAAAh5D,UAAA,WAAQ,KAAZ,WACE,OACGF,KAAKm5D,kBACLn5D,KAAKo5D,eAAe/2D,OAA8C,IAArCrC,KAAKo5D,eAAe/2D,MAAM1B,wCAgBtDu4D,EAAAh5D,UAAAm5D,gBAAN,eAAsB,IAAAtd,EAAA,GAAAj3C,EAAA,EAAAA,EAAApE,UAAAC,OAAAmE,IAAAi3C,EAAAj3C,GAAApE,UAAAoE,iFACpB,OAAI9E,KAAKs5D,SACP,CAAA,EAAOt5D,KAAK0F,QAEd,CAAA,EAAO1F,KAAKo5D,eACTvlD,KACC/C,EAAAA,QACE,SAACyoD,GACC,OAAAA,GAAiBnoD,EAAKooD,SAASzd,EAAQwd,MAE3CtlD,EAAAA,KAAK,GACLwlD,EAAAA,MAAMz5D,KAAK0F,SAEZ81C,oBAQK0d,EAAAh5D,UAAAw5D,aAAV,SAAuB3d,WACf4d,EAASp1D,EAAOvE,KAAKo5D,eAAe/2D,WAC1C,IAAoB,IAAAu3D,EAAA31D,EAAA83C,GAAM8d,EAAAD,EAAAr3D,QAAAs3D,EAAAl3D,KAAAk3D,EAAAD,EAAAr3D,OAAE,CAAvB,IAAMshB,EAAKg2C,EAAAx3D,MACds3D,EAAUhf,OAAOgf,EAAUvhC,QAAQvU,GAAQ,qGAE7C7jB,KAAKo5D,eAAe72D,KAAKo3D,IASjBT,EAAAh5D,UAAAs5D,SAAV,SAAmBzd,EAAkBwd,eACnC,IAAKxd,EAAOp7C,OACV,OAAQ44D,EAAc54D,WAExB,IAAoB,IAAAm5D,EAAA71D,EAAA83C,GAAMge,EAAAD,EAAAv3D,QAAAw3D,EAAAp3D,KAAAo3D,EAAAD,EAAAv3D,OAAE,CAAvB,IAAMshB,EAAKk2C,EAAA13D,UACd,IAA2B,IAAA23D,GAAAx2B,OAAA,EAAAv/B,EAAAs1D,IAAaU,EAAAD,EAAAz3D,QAAA03D,EAAAt3D,KAAAs3D,EAAAD,EAAAz3D,OAAE,CAArC,IAAM23D,EAAYD,EAAA53D,MACrB,GAAIrC,KAAKm6D,cAAct2C,EAAOq2C,GAC5B,OAAO,uMAIb,OAAO,GAeChB,EAAAh5D,UAAAi6D,cAAV,SAAwBjiC,EAAW34B,SAIjC,OAHIA,EAAEoB,OAASu3B,EAAEv3B,SACdu3B,GAADhzB,EAAAd,EAAA,CAAA7E,EAAA24B,GAAA,IAAC,GAAG34B,EAAA2F,EAAA,IAECgzB,EAAEjgB,WAAW1Y,IAA+B,OAAxB24B,EAAE34B,EAAEoB,SAAW,MAStCu4D,EAAAh5D,UAAAqiB,WAAN,SAAiB63C,0HACf,GAAIp6D,KAAKo5D,eAAe/2D,MAEtB,MAAA,CAAA,GAGIk3D,EAA0B,GAE1Bc,EAAgC,cAE3BC,GACT,IAAKA,mBAGL,IAAKA,EAAYve,SAAWue,EAAYve,OAAOp7C,OAC7C,MAAM,IAAI+oB,MAAM,4CAGd9a,EAAAA,cAAgB2rD,EAAKf,SAASc,EAAYve,OAAQwd,IACpD1qD,QAAQ6J,KACN,2EAIJ6gD,EAAcv1D,KAAInD,MAAlB04D,EAAah1D,EAAS+1D,EAAYve,SAElCse,EAAar2D,KACVpC,EAAAwP,OAAA,OAAA,GAAA,qEACwB,OAAvBlM,EAAAN,KAAU5E,KAAK0F,QAAQ,CAAA,EAAM40D,EAAYt0D,+BAAzCd,EAAArE,WAAA,EAAAsE,EAAAX,OAAA,CAAuBY,EAAAhC,UACvBpD,KAAK05D,aAAaY,EAAYve,gCAnBpC,IAA0B72C,EAAAjB,EAAAm2D,GAAgB,IAAEj1D,EAAAD,EAAA3C,QAAA4C,EAAAxC,KAAAwC,EAAAD,EAAA3C,OAAjC+3D,EAAWn1D,EAAA9C,QAAXi4D,2GAuBXt6D,KAAKo5D,eAAe72D,KAAKg3D,GAErBc,EAAa15D,OACf,CAAA,EAAMsB,QAAQu4D,IAAIH,IADhB,CAAA,EAAA,UACFh3B,EAAAjgC,4GA5IDyT,EAAAA,OAAMC,KAAA,CAACzR,qCACP0B,EAAAA,UAAQ,CAAAgD,KACR8M,EAAAA,OAAMC,KAAA,CAAC+hC,6IAJCqgB,EAAwBp4D,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,SAIT/T,EAAA,EAAAoV,EAAAA,OAAOxR,IACP5D,EAAA,EAAAsF,EAAAA,YACAtF,EAAA,EAAAoV,EAAAA,OAAOgiC,MAJCqgB,GAAb,YCVgBuB,GACdv3C,EACAw3C,EACAC,EACAC,GAEA,OAAO,WACLA,EAAWvB,gBAAgB,WAAWz2D,MAAK,WACzCsgB,EAAgBX,aAChBm4C,EAAYn4C,aACZo4C,EAAYp4C,iBAKlB,IAAas4C,GAAsC,CACjD94C,GACAksB,GACAP,GACA,CACE9nC,QAASk1D,EAAAA,gBACT50D,WAAYu0D,GACZx0D,KAAM,CACJ8b,GACAksB,GACAP,GACAwrB,IAEFpzD,OAAO,kBCrBT,SAAAi1D,EACUr1D,EACAowB,EACAklC,GAFAh7D,KAAA0F,OAAAA,EACA1F,KAAA81B,SAAAA,EACA91B,KAAAg7D,WAAAA,EAuEZ,OApEED,EAAA76D,UAAA+6D,qBAAA,WACE,OAAIj7D,KAAK0F,OAAOsV,QACPxb,OAAOuN,KAAK/M,KAAK0F,OAAOsV,SAASlK,QACtC,SAAC8N,GAAU,MAAU,kBAAVA,KAGR,IAGTm8C,EAAA76D,UAAAg7D,yBAAA,WACE,OAAQl7D,KAAK0F,OAAOsV,SAAWhb,KAAK0F,OAAOsV,QAAQ0+B,eAAkB,IAGvEqhB,EAAA76D,UAAAi7D,eAAA,SAAev8C,GACb,OAAOH,GAA0Bze,KAAK0F,OAAQkZ,IAGhDm8C,EAAA76D,UAAAk7D,qBAAA,SAAqBx8C,GACnB,OAAOD,GAA2B3e,KAAK0F,OAAQkZ,IAGjDm8C,EAAA76D,UAAAm7D,sBAAA,SAAsBz8C,GACpB,GAAI5e,KAAKg7D,WAAWp8C,GAClB,OAAO5e,KAAK81B,SAASlsB,IAAsB5J,KAAKg7D,WAAWp8C,GAAQ,OAIvEm8C,EAAA76D,UAAAo7D,SAAA,SAAS18C,GACP,IAAIvc,EAEEk5D,EAAUv7D,KAAKq7D,sBAAsBz8C,GAQ3C,OAPI28C,GACFA,EACGv5C,YACA9N,WAAU,SAACsnD,GAAQ,OAACn5D,EAAQm5D,KAC5BC,mBAGY1vD,IAAV1J,EAAsBA,EAAQrC,KAAKo7D,qBAAqBx8C,IAGjEm8C,EAAA76D,UAAAw7D,SAAA,SAAS98C,EAAevc,GACtB,IAAMk5D,EAAUv7D,KAAKq7D,sBAAsBz8C,GACvC28C,GACFA,EAAQn5C,UAAU/f,IAWtB04D,EAAA76D,UAAAy7D,UAAA,SAAU7hD,GAAV,IAAA1I,EAAApR,KACE,OAAsB,IAAlB8Z,EAAOnZ,OACFiW,EAAAA,GAAG,IAGL8d,EAAAA,cACL5a,EAAOhG,KAAI,SAAC8K,GACV,OAAAxN,EAAKiqD,sBAAsBz8C,GACxBoD,YACAnO,KAAK8C,EAAAA,4BAEV9C,KAAK/C,EAAAA,QAAO,SAACzO,GAAU,OAAAA,EAAMkY,OAAM,SAACqE,GAAU,QAAEA,mDAvElCtX,SACEsvB,EAAAA,gBACEmiC,MAJXgC,EAAwBj6D,EAAA,CADpCyU,EAAAA,cACYwlD,MCAPa,GAAW,gBAGjBC,GAAA,SAAAx0D,GASE,SAAAw0D,EAAoBC,GAApB,IAAA1qD,EACE/J,EAAAzG,KAAAZ,OAAOA,YADWoR,EAAA0qD,kBAAAA,IA6EtB,OAtF8Ch8D,EAAA+7D,EAAAx0D,GAC5C7H,OAAAgC,eAAYq6D,EAAA37D,UAAA,wBAAqB,KAAjC,WACE,OAAOF,KAAK87D,kBAAkBZ,4DAGhC17D,OAAAgC,eAAIq6D,EAAA37D,UAAA,qBAAkB,KAAtB,WACE,OAAOF,KAAK+7D,sBAAsBp7D,OAAS,mCAO7Ck7D,EAAA37D,UAAA2J,MAAA,SAAMsN,GACJ,GAAInX,KAAKg8D,mBAAoB,CAC3B,IAAMC,EAAgBj8D,KAAKk8D,4BAA4B/kD,GACjDglD,EAAS90D,EAAAnH,UAAM2J,MAAKjJ,KAAAZ,KAACi8D,EAAc9kD,KAEzC,OADAnX,KAAKo8D,gCAAgCD,EAAQF,EAAcniD,QACpDqiD,EAEP,OAAO90D,EAAAnH,UAAM2J,MAAKjJ,KAAAZ,KAACmX,IAIvB0kD,EAAA37D,UAAAg8D,4BAAA,SACE/kD,GAEM,IAAAjS,EAAAd,EAAA+S,EAAAshC,MAAAmjB,IAAA,GAAGvyB,EAAAnkC,EAAA,GAASm3D,EAAAn3D,EAAA,GAEZuS,EAAW4xB,EAAQh6B,MAAM,KACX,KAAhBoI,EAAS,IACXA,EAASzS,QAMX,IAJA,IAAM8U,EAAS,GAEXwiD,EAAU,EACVC,EAAY,EAEdD,EAAUt8D,KAAK+7D,sBAAsBp7D,QACrC47D,EAAY9kD,EAAS9W,QACrB,CACA,IAAMsZ,EAAYja,KAAK+7D,sBAAsBO,GACzBt8D,KAAK87D,kBAAkBX,eAAelhD,GAE1C9M,SAASsK,EAAS8kD,MAChCziD,EAAOG,GAAaxC,EAAS8kD,GAC7BA,KAEFD,IAIF,MAAO,CAAEnlD,IADTA,EAAMM,EAASU,MAAM3Y,OAAOuN,KAAK+M,GAAQnZ,QAAQ6nC,KAAK,KAAO6zB,EAC/CviD,OAAMA,IAGd+hD,EAAA37D,UAAAk8D,gCAAR,SACEhlD,EACA0C,GAEA1C,EAAQolD,YAAc1iD,GAGxB+hD,EAAA37D,UAAAu8D,UAAA,SAAUjlD,GACR,IAAMsC,EAAS9Z,KAAK08D,gCAAgCllD,GAC9CL,EAAM9P,EAAAnH,UAAMu8D,UAAS77D,KAAAZ,KAACwX,GAE5B,OADmBxX,KAAK28D,4BAA4BxlD,EAAK2C,IAI3D+hD,EAAA37D,UAAAw8D,gCAAA,SACEtlD,GAEA,OAAOA,EAAQolD,YAAcplD,EAAQolD,YAAc,IAG7CX,EAAA37D,UAAAy8D,4BAAR,SAAoCxlD,EAAa2C,GAAjD,IAAA1I,EAAApR,KASE,OARyBA,KAAK+7D,sBAC3BjoD,KAAI,SAAC8K,GACJ,OAAO9E,EAAO8E,GACV9E,EAAO8E,GACPxN,EAAK0qD,kBAAkBR,SAAS18C,MAErC4pB,KAAK,KAEkBrxB,4CA3EW4jD,MAT5Bc,EAAwB/6D,EAAA,CADpCyU,EAAAA,cACYsmD,GAAb,CAA8Ce,EAAAA,oCCI5C,SAAAC,EACUf,EACAgB,EACAhnC,GAFA91B,KAAA87D,kBAAAA,EACA97D,KAAA88D,WAAAA,EACA98D,KAAA81B,SAAAA,EAGF91B,KAAA+8D,aAAe,IAAIpX,EAAAA,aAEnB3lD,KAAAg9D,cAEJ,GAIIh9D,KAAAsb,cAAe,SAEvBuhD,EAAA38D,UAAA+8D,KAAA,WACEj9D,KAAKiX,OAASjX,KAAK81B,SAASlsB,IAAYkO,EAAAA,QAExC9X,KAAKuc,SAAWvc,KAAK81B,SAASlsB,IAAcszD,EAAAA,UAC5C,IAAMC,EAAgBn9D,KAAK87D,kBAAkBZ,2BAEzCiC,EAAcx8D,SAChBX,KAAKo9D,0BAA0Bp9D,KAAKiX,OAAOE,KAC3CnX,KAAKq9D,iBAAiBF,GACtBn9D,KAAKs9D,qBAIDT,EAAA38D,UAAAm9D,iBAAR,SAAyBvjD,GAAzB,IAAA1I,EAAApR,KACE8Z,EAAOiK,SAAQ,SAACnF,GACd,IAAM28C,EAAUnqD,EAAK0qD,kBAAkBT,sBAAsBz8C,GACzD28C,GACFnqD,EAAK2rD,aAAavzC,IAChB+xC,EAAQv5C,YAAY9N,WAAU,SAAC7R,GAC7B,IACG+O,EAAKkK,cACNlK,EAAK4rD,cAAcp+C,IACnBxN,EAAK4rD,cAAcp+C,KAAWvc,EAC9B,CACA,IAAM85D,EAAS/qD,EAAK6F,OAAOI,SAASjG,EAAK6F,OAAOE,KAC1C+d,EAAa9jB,EAAK6F,OAAO4X,aAAastC,GAC5C/qD,EAAKmL,SAASghD,aAAaroC,GAE7B9jB,EAAK4rD,cAAcp+C,GAASvc,UAO9Bw6D,EAAA38D,UAAAo9D,iBAAR,WAAA,IAAAlsD,EAAApR,KACEA,KAAK+8D,aAAavzC,IAChBxpB,KAAKiX,OAAOumD,OACT3pD,KACC/C,EAAAA,QACE,SAAC6xC,GACC,OAAAA,aAAiB8a,EAAAA,iBACjB9a,aAAiB+a,EAAAA,eACjB/a,aAAiBgb,EAAAA,iBACjBhb,aAAiBib,EAAAA,qBAGtB1pD,WAAU,SAACyuC,GACVvxC,EAAKkK,aAAeqnC,aAAiB8a,EAAAA,gBACjCrsD,EAAKkK,cACPlK,EAAKgsD,0BAA0Bza,EAAMxrC,UAMvC0lD,EAAA38D,UAAAk9D,0BAAR,SAAkCjmD,GAAlC,IAAA/F,EAAApR,KACU8Z,EAAA9Z,KAAA88D,WAAAZ,4BAAA/kD,GAAA2C,OACRta,OAAOuN,KAAK+M,GAAQiK,SAAQ,SAACnF,GAC3B,OAAAxN,EAAK0qD,kBAAkBJ,SAAS98C,EAAO9E,EAAO8E,QAIlDi+C,EAAA38D,UAAA29D,YAAA,WACE79D,KAAK+8D,aAAatB,wDA/ESV,UACPc,UACFjlC,EAAAA,yKAJTimC,EAAwB/7D,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDqnD,MCTb,SAAgBiB,GACdC,EACAnD,GAEA,OAAO,WACLA,EAAWvB,gBAAgB,WAAWz2D,MAAK,WACzCm7D,EAAyBd,WAK/B,IAAae,GAAyC,CACpDjD,GACAc,GACA,CAAEj2D,QAASq4D,EAAAA,cAAe94C,YAAa02C,IACvC,CACEj2D,QAASk1D,EAAAA,gBACT50D,WAAY43D,GACZ73D,KAAM,CAAC42D,GAA0B3D,IACjCpzD,OAAO,kBCkBT,SAAAo4D,EACUh0C,EACAi0C,EACA1iD,GAHV,IAAArK,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EACAn+D,KAAAyb,OAAAA,EArCVzb,KAAAo+D,eAGIp+D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOg0C,IACP/zC,EAAAA,YAAW,WACT,OAAOlZ,EAAK+sD,cAAc3F,eAAe3kD,KACvCC,EAAAA,KACE,SAAC6N,GAAc,OAAA,IAAI28C,GAAwC38C,MAE7DlE,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI2nD,GACF90C,GAAsBnlB,aASlCtE,KAAAw+D,kBAEIx+D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOo0C,IACPthD,EAAAA,KAAI,SAAChR,GACCiF,EAAKqK,OAAOnF,gBACdlF,EAAKqK,OAAOnF,eAAegR,QAAQ,WAAYnb,EAAOR,YAG1DmI,EAAAA,KAAI,WAAM,OAAA,IAAI4qD,OAQlB,gDAJsBj0C,EAAAA,eACK8tC,UACPriD,MArClBpV,EAAA,CADC4pB,EAAAA,+CAuBD5pB,EAAA,CADC4pB,EAAAA,kDAvBUwzC,EAAgBp9D,EAAA,CAD5ByU,EAAAA,cACY2oD,oBCqCX,SAAAS,EACUz0C,EACAi0C,EACA1iD,GAHV,IAAArK,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EACAn+D,KAAAyb,OAAAA,EAtCVzb,KAAA4+D,gBAGI5+D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOw0C,IACPv0C,EAAAA,YAAW,WACT,OAAOlZ,EAAK+sD,cAAc1F,gBAAgB5kD,KACxCC,EAAAA,KACE,SAACiN,GACC,OAAA,IAAI+9C,GAAyC/9C,MAEjDtD,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAImoD,GACFt1C,GAAsBnlB,aASlCtE,KAAAg/D,kBAEIh/D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAO40C,IACP9hD,EAAAA,KAAI,SAAChR,GACCiF,EAAKqK,OAAOnF,gBACdlF,EAAKqK,OAAOnF,eAAegR,QAAQ,WAAYnb,EAAOR,YAG1DmI,EAAAA,KAAI,WAAM,OAAA,IAAIorD,OAQlB,gDAJsBz0C,EAAAA,eACK8tC,UACPriD,MAtClBpV,EAAA,CADC4pB,EAAAA,gDAwBD5pB,EAAA,CADC4pB,EAAAA,kDAxBUi0C,EAAiB79D,EAAA,CAD7ByU,EAAAA,cACYopD,oBCmBX,SAAAQ,EACUj1C,EACAi0C,GAFV,IAAA/sD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EApBVn+D,KAAAo/D,cAEIp/D,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOg1C,IACP/0C,EAAAA,YAAW,WACT,OAAOlZ,EAAK+sD,cAAcvF,cAAc/kD,KACtCC,EAAAA,KAAI,SAACuM,GAAa,OAAA,IAAIi/C,GAAuCj/C,MAC7D5C,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI2oD,GACF91C,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACK8tC,MApBzBz3D,EAAA,CADC4pB,EAAAA,8CADUy0C,EAAer+D,EAAA,CAD3ByU,EAAAA,cACY4pD,MCLAnzC,GAAiB,CAC5BkyC,GACAS,GACAQ,ICJWlzC,GAA8B,CACzCxL,QAAS,GACTH,WAAY,IAGd,SAAgBrU,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAszD,IAGQrzD,EAAOpC,MACb,IhPRkC,uCgPShC,OAAA3J,EAAAA,EAAA,GACK8L,GAAK,CACRuU,QAAStU,EAAOR,UAIpB,IhPdgC,qCgPe9B,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRoU,WAAYnU,EAAOR,UAKzB,OAAOO,ECxBF,IAAM+f,GAAgC,CAC3C1f,SAAU,KACVuU,eAAgB,MAGlB,SAAgB7U,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAuzD,IAGQtzD,EAAOpC,MACb,I/OTmC,yC+OUjC,IACMwC,EADyBJ,EAAOR,QACVqB,QAC1B,SAAC0yD,EAA+CC,SAC9C,OAAAv/D,EAAAA,EAAA,GACKs/D,KAAYx6D,EAAA,IACdy6D,EAASv+C,SAAUu+C,EAAQz6D,MAE/B9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,KAAK0yD,GACH,IAAM79C,EAAkBjV,EAAOR,QAE/B,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACR4U,eAAgBM,IAKtB,OAAOlV,ECxCF,IAAM+f,GAA+B,CAC1C1f,SAAU,KACViV,eAAgB,MAGlB,SAAgBvV,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA0zD,IAGQzzD,EAAOpC,MACb,I/OTkC,wC+OUhC,IACMwC,EADwBJ,EAAOR,QACVqB,QACzB,SAAC6yD,EAA+CC,SAC9C,OAAA1/D,EAAAA,EAAA,GACKy/D,KAAY36D,EAAA,IACd46D,EAAS1+C,SAAU0+C,EAAQ56D,MAE/B9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,KAAKkyD,GACH,IAAMr9C,EAAUjV,EAAOR,QAEvB,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRsV,eAAgBJ,IAItB,OAAOlV,WCpCOggB,KACd,MAAO,CACLvK,UAAWo+C,GACXh/C,WAAYi/C,GACZ3/C,SAAU4/C,IAId,IAAa5zC,GAER,IAAI/mB,EAAAA,eACP,uBAGWgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,aCTEg0C,WASd,MAP4B,CAC1Bh0D,MAAO,CACL4b,YAAa,CACX/a,MAAI7H,EAAA,GAAIA,EAAqB,YAAG6gB,EAAAA,kBAAkBkC,eAAc/iB,MAmBxE,IAAAi7D,GAAA,WAAA,SAAAA,KAAqC,OAAxBA,EAAsBr/D,EAAA,CAZlCkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACAC,EAAAA,YAAYC,W/O7BoB,c+O6BaxB,IAC7CyB,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4B85D,IAC5B5zC,OAGS6zC,GAAb,GCtBAC,GAAA,WAAA,SAAAA,WAcA,SAdaA,EACJA,EAAAt5D,QAAP,WACE,MAAO,CACLJ,SAAU25D,EACVz5D,UAASrC,EAAA,CACP6B,EAA4B6yD,IAC5BH,IACG+B,GACAmD,GAA0B,CAC7B,CAAEp4D,QAAS0B,EAAmB6d,YAAa9f,GAC3C67C,GAAuB8X,QAVlBoH,EAAiBC,EAAAv/D,EAAA,CAH7BkG,EAAAA,SAAS,CACRC,QAAS,CAAC+hB,GAAam3C,OAEZC,GAAb,GCZA,SAAgBn0D,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAH0B,GAMlBC,EAAOpC,MACb,IzMmBF,kEyMlBI,OAAOoC,EAAO+jB,UAIlB,OAAOhkB,ECVT,SAAgBD,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAH0B,GAMlBC,EAAOpC,MACb,I1MqBF,2D0MpBI,OAAOoC,EAAOikB,QAIlB,OAAOlkB,ECRF,IAAM+f,GAAmC,GAEhD,SAAgBq0C,GACd7uC,EACA5B,EACAjS,GAEA,OAAK6T,EAIEA,EAAS3d,KAAI,SAAC6d,GAOnB,OANIA,EAAQ9B,eAAiBA,IAC3B8B,EAAOvxB,EAAAA,EAAA,GACFuxB,GAAO,CACV+B,aAAc9V,KAGX+T,KAVA,GAcX,SAAgB1lB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAq0D,IAGQp0D,EAAOpC,MACb,I3MVF,8C2MWI,OAAOu2D,GACLp0D,EACAC,EAAO0jB,aACPxC,EAAAA,yBAAyBsG,OAI7B,I3MhBF,kD2MiBI,OAAO2sC,GACLp0D,EACAC,EAAO0jB,aACPxC,EAAAA,yBAAyB2G,WAI7B,I3M5BF,8C2M6BI,OAAO7nB,EAAOR,QAIlB,OAAOO,WClCOggB,KACd,MAAO,CACLoE,UAAWtkB,GAAiCqjB,IAC5CoC,SAAU+uC,GACVpvC,GAAIjF,EAAAA,gBAAgB,CAClBkF,gBAAiBovC,GACjBrwC,QAASswC,MAKf,IAAar0C,GAER,IAAI/mB,EAAAA,eACP,6BAGWgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgBy0C,GACd10D,GAEA,OAAO,SAAUC,EAAOC,GAUtB,OAREA,EAAOpC,OAASyiB,IAChBrgB,EAAOpC,OAAS62D,KAEhB10D,EAAK9L,EAAAA,EAAA,GACA8L,GAAK,CACRokB,eAAWvkB,KAGRE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAC9Ck0C,aCjDcE,WAUd,MAT4B,CAC1B30D,MAAO,CACLga,YAAa,CACXnZ,MAAI7H,EAAA,GACFA,E9MbsC,sB8MaF2Z,EAAAA,gBAAgBkI,oBAsB9D,IAAA+5C,GAAA,WAAA,SAAAA,KAA2C,OAA9BA,EAA4BhgE,EAAA,CAdxCkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA8hB,GACA4E,EAAAA,YAAYC,W9MzBgC,qB8MyBaxB,GAAc,CACrEI,aAAYs0C,KAEdjzC,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4By6D,IAC5Bv0C,OAGSw0C,GAAb,iBC3BA,SAAAE,WAYA,SAZaA,EACJA,EAAAl6D,QAAP,WACE,MAAO,CACLJ,SAAUu6D,EACVr6D,UAASrC,EACJ0gB,GAAY,CACf2M,GACA,CAAEhsB,QAAS2B,EAAyB4d,YAAa9f,GACjDc,EAAqBqB,OARhBw5D,EAAuBC,EAAAngE,EAAA,CAHnCkG,EAAAA,SAAS,CACRC,QAAS,CAAC65D,OAECE,MCTAE,GAA8B,CACzCC,IAAK,CACHC,kBAAmB,CACjBC,uBAAwB,KAE1BtqC,eAAgB,CACduqC,WAAY,MCFLC,GAAqB,yDCMhC,SAAAC,EAAsBC,GAAAzhE,KAAAyhE,WAAAA,SAEtBD,EAAAthE,UAAA62B,eAAA,SACEC,GAEA,OAAOh3B,KAAKyhE,WAAW1qC,eAAeC,6CALNG,uHADvBqqC,EAAY1gE,EAAA,CAHxByU,EAAAA,WAAW,CACVC,WAAY,UAEDgsD,MCNbE,GAEE,SAAmB/1D,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAHkB,mBCS7B43D,GAAA,SAAAt6D,GAEE,SAAAs6D,EAAmBh2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KHVgC,+BGULA,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KANoB,0BAU/B,OALoCjK,EAAA6hE,EAAAt6D,GAKpCs6D,EALA,CAAoCtwD,GAOpCuwD,GAAA,SAAAv6D,GAEE,SAAAu6D,EAAmBj2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KHjBgC,+BGiBLA,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAZyB,+BAgBpC,OALwCjK,EAAA8hE,EAAAv6D,GAKxCu6D,EALA,CAAwCrwD,GAOxCswD,GAAA,SAAAx6D,GAEE,SAAAw6D,EAAmBl2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KHxBgC,+BGwBLA,YADVoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlB4B,kCAsBvC,OAL2CjK,EAAA+hE,EAAAx6D,GAK3Cw6D,EALA,CAA2CpwD,IAO3CqwD,GAAA,SAAAz6D,GAEE,SAAAy6D,IAAA,IAAA1wD,EACE/J,EAAAzG,KAAAZ,KH/BgC,+BG+BLA,YAFpBoR,EAAArH,KAxB0B,gCA4BrC,OALyCjK,EAAAgiE,EAAAz6D,GAKzCy6D,EALA,CAAyCpyC,ICpBzCqyC,GAAA,SAAA16D,GAGE,SAAA06D,EAAmBp2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMuhE,KAAmBvhE,YADRoR,EAAAzF,QAAAA,EAFVyF,EAAArH,KAPT,6CAYF,OANmDjK,EAAAiiE,EAAA16D,GAMnD06D,EANA,CAAmD1wD,GAQnD2wD,GAAA,SAAA36D,GAEE,SAAA26D,EAAmBr2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMuhE,KAAmBvhE,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAbT,kDAiBF,OALuDjK,EAAAkiE,EAAA36D,GAKvD26D,EALA,CAAuDzwD,GAOvD0wD,GAAA,SAAA56D,GAEE,SAAA46D,EAAmBt2D,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMuhE,KAAmBvhE,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlBT,qDAsBF,OAL0DjK,EAAAmiE,EAAA56D,GAK1D46D,EALA,CAA0DxwD,IAO1DywD,GAAA,WACWliE,KAAA+J,KvR/BT,uFqRF2B,iDCIE,6CACK,qDACG,sDACF,wJCHnC,kFAEA,0FAEA,+MCgBA,SAAAo4D,EAAoBj4C,EAA2Bk4C,GAA/C,IAAAhxD,EAAApR,KAAoBA,KAAAkqB,SAAAA,EAA2BlqB,KAAAoiE,aAAAA,EAf/CpiE,KAAAqiE,gBAAyDriE,KAAKkqB,SAASrW,KACrEwW,EAAAA,OFN2B,yBEO3BvW,EAAAA,KAAI,SAAC3H,GAAsC,OAAAA,EAAOR,WAClDiK,EAAAA,WAAU,SAACohB,GACT,OAAA5lB,EAAKgxD,aAAarrC,eAAeC,GAASnjB,KACxCC,EAAAA,KAAI,SAACwuD,GACH,OAAO,IAAIC,GAAiCD,MAE9C7kD,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI4rD,GAA8B/4C,GAAsBnlB,aAOrE,gDADgCmmB,EAAAA,eAA+B+2C,MAf7D1gE,EAAA,CADC4pB,EAAAA,gDADUy3C,EAAerhE,EAAA,CAD3ByU,EAAAA,cACY4sD,oBC0BX,SAAAM,EACUv4C,EACAU,GAFV,IAAAxZ,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4qB,iBAAAA,EA1BV5qB,KAAA0iE,+BAEI1iE,KAAKkqB,SAASrW,KAChBwW,EAAAA,OFRF,4CESEvW,EAAAA,KAAI,SAAC3H,GAAqD,OAAAA,EAAOR,WACjEiK,EAAAA,WAAU,SAAC1Q,OAAEsO,EAAAtO,EAAAsO,OAAQC,EAAAvO,EAAAuO,SACnB,OAAArC,EAAKwZ,iBAAiBhF,UAAUpS,EAAQC,GAAUI,KAChDC,EAAAA,KAAI,SAACd,GACH,IAAMgY,EAAO,IAAI/lB,KAGjB,OAFA+lB,EAAKC,WAAWD,EAAKE,aAAelY,EAAMmY,YAC1CnY,EAAMoY,gBAAkBJ,EAAKK,SACtB,IAAIs3C,GAAgD3vD,MAE7DyK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIgsD,GACFn5C,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACQ9E,MA1B5B7kB,EAAA,CADC4pB,EAAAA,+DADU+3C,EAAgC3hE,EAAA,CAD5CyU,EAAAA,cACYktD,MCPAz2C,GAAiB,CAC5Bm2C,GACAM,ICFWx2C,GAA6B,CAAE42C,WAAW,GAEvD,SAAgB52D,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA42D,IAGQ32D,EAAOpC,MACb,INPyB,kBMQvB,OAAA3J,EAAAA,EAAA,GACK8L,GACAC,EAAOR,SAGd,QACE,OAAOO,YCCGggB,KACd,MAAO,CACL62C,qBAAsB/2D,GTfU,8BSkBhCg3D,MAAOC,GACPC,aAAcl3D,GAAyBu1D,KAI3C,IAAal1C,GAER,IAAI/mB,EAAAA,eAA2C,eAEvCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgBi3C,GACdl3D,GAEA,OAAO,SAAUC,EAAOC,GAQtB,M5R3CF,yC4RoCMA,EAAOpC,OACTmC,EAAK9L,EAAAA,EAAA,GACA8L,GAAK,CACR62D,0BAAsBh3D,EACtBm3D,kBAAcn3D,KAGXE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAC9C02C,aCzCcC,KAiBd,MAhB4B,CAC1Bl3D,MAAO,CACLga,YAAa,CACXnZ,KAAM,CACJs2D,YAAaxkD,EAAAA,gBAAgBkI,cAC7Bu8C,sCAAuCzkD,EAAAA,gBAAgBkI,cACvDw8C,oCAAqC1kD,EAAAA,gBAAgBkI,cACrDy8C,oCAAqC3kD,EAAAA,gBAAgBkI,cACrD08C,yCACE5kD,EAAAA,gBAAgBkI,cAClB28C,+BAAgC7kD,EAAAA,gBAAgBkI,cAChD48C,gCAAiC9kD,EAAAA,gBAAgBkI,kBAoB3D,IC1CY68C,GD0CZC,GAAA,WAAA,SAAAA,KAA6B,OAAhBA,EAAc/iE,EAAA,CAb1BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACA3E,GACA4E,EAAAA,YAAYC,WVhCW,MUgCaxB,GAAc,CAAEI,aAAYq3C,KAChEh2C,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4Bg9D,IAC5B92C,OAGSu3C,GAAb,IC1CYD,GAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,sBAAA,+BACAA,GAAA,eAAA,wBACAA,GAAA,cAAA,8BACAA,GAAA,iBAAA,8BCNUG,MCMZ,aCAaC,GAAc,iCACdC,GAAiB,oCAI9BC,GAEE,SAAmBv4D,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAOi6D,IAIlBG,GAEE,SAAmBx4D,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAOk6D,IAIlBG,GAEE,SAAmBz4D,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAbT,sIAAA,oGCFWs6D,GAGT3xD,EAAAA,sBCRkC,qBCapC,SAACxG,GAA8B,OAAAA,EAAMK,UAL1B+3D,GAGTzxD,EAAAA,eACFwxD,GAAqBE,IAIVC,GAAiC,SAC5Cz6D,GAEA,OAAO8I,EAAAA,eACLyxD,IACA,SAAC/3D,GAAa,OAAAA,GAAYA,EAASxC,OAI1B06D,GAA8B,SACzC16D,GAEA,OAAO8I,EAAAA,eACL2xD,GAA+Bz6D,IAC/B,SAACwC,GAAa,OAAAA,GAAYA,EAAS5L,0LCjBrC,SAAA+jE,EAAsBpxD,GAAAtT,KAAAsT,MAAAA,EAgDxB,OA3CEoxD,EAAAxkE,UAAA0J,IAAA,WACE,OAAO5J,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOwwD,IACP7zD,EAAAA,QAAO,SAACosB,GAAS,YAASnxB,IAATmxB,OAUrBwnC,EAAAxkE,UAAAspB,IAAA,SACEo7C,EACA76D,EACA86D,GAEA7kE,KAAKsT,MAAMI,SACT,IAAIoxD,GAAgC,CAClCF,KAAsB,iBAATA,EAAoB,CAAEG,IAAKH,GAASA,EACjD76D,KAAIA,EACJ86D,QAAOA,MAWbH,EAAAxkE,UAAA05B,OAAA,SAAO7vB,EAAyB2wC,GAC9B16C,KAAKsT,MAAMI,cACC3H,IAAV2uC,EACI,IAAIsqB,GAAmC,CACrCj7D,KAAMA,EACN2wC,MAAOA,IAET,IAAIuqB,GAA0Cl7D,8CA7CzBuL,EAAAA,SADlBovD,EAAoB5jE,EAAA,CADhCyU,EAAAA,cACYmvD,ONdb,SAAYX,GACVA,EAAAA,EAAA,SAAA,GAAA,UACAA,EAAAA,EAAA,YAAA,KAAA,cACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,SAAA,KAAA,WACAA,EAAAA,EAAA,YAAA,KAAA,cACAA,EAAAA,EAAA,gBAAA,KAAA,kBACAA,EAAAA,EAAA,sBAAA,KAAA,wBATF,CAAYA,KAAAA,GAAkB,uBOQ5B,SAAAmB,EAAsBC,GAAAnlE,KAAAmlE,qBAAAA,kDAAsBT,uHADxBQ,EAAgBpkE,EAAA,CAHrCyU,EAAAA,WAAW,CACVC,WAAY,UAEQ0vD,qBCCtB,SAAAE,IAAA,IAAAh0D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmBuB,qBADCxlE,EAAAslE,EAAA/9D,GAGrC+9D,EAAAllE,UAAAqlE,YAAA,WACEvlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,2BACP2iE,EAAAA,kBAAkB4B,kIANXJ,EAAiBtkE,EAAA,CAH7ByU,EAAAA,WAAW,CACVC,WAAY,UAED4vD,IAA0BF,ICIvCO,GAAA,SAAAp+D,GAAA,SAAAo+D,IAAA,IAAAr0D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmB2B,qBADC5lE,EAAA2lE,EAAAp+D,GAGrCo+D,EAAAvlE,UAAAqlE,YAAA,SAAYj8D,EAA2Bq0B,GACrC39B,KAAK2lE,kBAAkBr8D,EAASq0B,GAChC39B,KAAK4lE,uBAAuBt8D,EAASq0B,GACrC39B,KAAK6lE,qBAAqBv8D,EAASq0B,GACnC39B,KAAK8lE,sBAAsBx8D,EAASq0B,IAG5B8nC,EAAAvlE,UAAAylE,kBAAV,SACEr8D,EACAq0B,cAGc,QAAZz4B,EAAAy4B,EAASxmB,WAAG,IAAAjS,OAAA,EAAAA,EAAEiI,SApBG,sCAqBS,mBAAZ,QAAdhI,EAAAw4B,EAASr5B,aAAK,IAAAa,OAAA,EAAAA,EAAEb,QACoB,cAAxB,QAAZc,EAAAkE,EAAQxG,YAAI,IAAAsC,OAAA,EAAAA,EAAEwE,IAAI,iBAElB5J,KAAKmlE,qBAAqB37C,IACxB,CACEvoB,IAAK,0CACL6Y,OAAQ,CACNisD,aACEpoC,EAASr5B,MAAM0hE,mBAAqBroC,EAAShU,SAAW,KAG9Di6C,EAAAA,kBAAkB4B,gBAEpBxlE,KAAKmlE,qBAAqBvrC,OAAOgqC,EAAAA,kBAAkBqC,yBAI7CR,EAAAvlE,UAAA0lE,uBAAV,SACEM,EACAvoC,GAFF,IAAAvsB,EAAApR,KAIEA,KAAKmmE,UAAUxoC,GACZ7sB,QAAO,SAACxM,GAAU,MAAe,0BAAfA,EAAMyF,QACxBga,SAAQ,WACP3S,EAAK+zD,qBAAqB37C,IACxB,CAAEvoB,IAAK,+CACP2iE,EAAAA,kBAAkB4B,oBAKhBC,EAAAvlE,UAAA4lE,sBAAV,SACEI,EACAvoC,GAFF,IAAAvsB,EAAApR,KAIEA,KAAKmmE,UAAUxoC,GACZ7sB,QAAO,SAACtO,GAAM,MAAW,oBAAXA,EAAEuH,QAChBga,SAAQ,SAACzf,GACR8M,EAAK+zD,qBAAqB37C,IACxB,CACEvoB,IAAK,iCAAiCqD,EAAMulB,OAAM,IAAIvlB,EAAM8hE,SAE9DxC,EAAAA,kBAAkB4B,oBAKhBC,EAAAvlE,UAAA2lE,qBAAV,SACEK,EACAvoC,GAFF,IAAAvsB,EAAApR,KAIEA,KAAKmmE,UAAUxoC,GACZ7sB,QAAO,SAACtO,GAAM,MAAkB,SAAlBA,EAAE6jE,aAAuC,aAAb7jE,EAAEqnB,UAC5C9F,SAAQ,WACP3S,EAAK+zD,qBAAqB37C,IACxB,CAAEvoB,IAAK,6BACP2iE,EAAAA,kBAAkB4B,oBAKhBC,EAAAvlE,UAAAimE,UAAV,SAAoBxoC,SAClB,QAAsB,QAAdz4B,EAAAy4B,EAASr5B,aAAK,IAAAY,OAAA,EAAAA,EAAE+Y,SAAU,IAAInN,QACpC,SAACxM,GAAU,MAAe,iCAAfA,EAAMyF,0HA/EV07D,EAAiB3kE,EAAA,CAH7ByU,EAAAA,WAAW,CACVC,WAAY,UAEDiwD,GAAb,CAAuCP,mBCJvC,SAAAoB,IAAA,IAAAl1D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmBwC,kBADDzmE,EAAAwmE,EAAAj/D,GAGnCi/D,EAAApmE,UAAAqlE,YAAA,WACEvlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,yBACP2iE,EAAAA,kBAAkB4B,kIANXc,EAAexlE,EAAA,CAH3ByU,EAAAA,WAAW,CACVC,WAAY,UAED8wD,IAAwBpB,mBCArC,SAAAsB,IAAA,IAAAp1D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmB0C,mBADA3mE,EAAA0mE,EAAAn/D,GAGpCm/D,EAAAtmE,UAAAqlE,YAAA,WACEvlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,0BACP2iE,EAAAA,kBAAkB4B,kIANXgB,EAAgB1lE,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDgxD,IAAyBtB,mBCAtC,SAAAwB,IAAA,IAAAt1D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmB4C,yBADK7mE,EAAA4mE,EAAAr/D,GAGzCq/D,EAAAxmE,UAAAqlE,YAAA,WACEvlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,+BACP2iE,EAAAA,kBAAkB4B,kIANXkB,EAAqB5lE,EAAA,CAHjCyU,EAAAA,WAAW,CACVC,WAAY,UAEDkxD,IAA8BxB,mBCA3C,SAAA0B,IAAA,IAAAx1D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmB8C,+BADU/mE,EAAA8mE,EAAAv/D,GAG9Cu/D,EAAA1mE,UAAAqlE,YAAA,WACEvlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,oCACP2iE,EAAAA,kBAAkB4B,kIANXoB,EAA0B9lE,EAAA,CAHtCyU,EAAAA,WAAW,CACVC,WAAY,UAEDoxD,IAAmC1B,mBCDhD,SAAA4B,IAAA,IAAA11D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmBgD,mBADDjnE,EAAAgnE,EAAAz/D,GAInCy/D,EAAA5mE,UAAAqlE,YAAA,8HAJWuB,EAAehmE,EAAA,CAH3ByU,EAAAA,WAAW,CACVC,WAAY,UAEDsxD,IAAwB5B,ICOrC8B,GAAA,SAAA3/D,GAGE,SAAA2/D,EAAsB7B,GAAtB,IAAA/zD,EACE/J,EAAAzG,KAAAZ,KAAMmlE,IAAqBnlE,YADPoR,EAAA+zD,qBAAAA,EAFtB/zD,EAAAi0D,eAAiBtB,GAAmBkD,sBADQnnE,EAAAknE,EAAA3/D,GAO5C2/D,EAAA9mE,UAAAqlE,YAAA,SAAYW,EAA4BvoC,WAClC/uB,EAAAA,aACFC,QAAQ6J,KACN,sIAI0B,oBAAZ,QAAdxT,EAAAy4B,EAASr5B,aAAK,IAAAY,OAAA,EAAAA,EAAEZ,OAClBtE,KAAKmlE,qBAAqB37C,KACV,QAAdrkB,EAAAw4B,EAASr5B,aAAK,IAAAa,OAAA,EAAAA,EAAE6gE,oBAAqB,CACnC/kE,IAAK,4CAEP2iE,EAAAA,kBAAkB4B,gBAGpBxlE,KAAKmlE,qBAAqB37C,IACxB,CAAEvoB,IAAK,oCACP2iE,EAAAA,kBAAkB4B,0DArBoBd,uHAHjCsC,EAAwBlmE,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDwxD,GAAb,CAA8C9B,mBCP9C,SAAAgC,IAAA,IAAA91D,EAAA,OAAA/J,GAAAA,EAAAxG,MAAAb,KAAAU,YAAAV,YACEoR,EAAAi0D,eAAiBtB,GAAmBoD,iBADGrnE,EAAAonE,EAAA7/D,GAGvC6/D,EAAAhnE,UAAAqlE,YAAA,WACM32D,EAAAA,aACFC,QAAQ6J,KAAK,gCAAgC1Y,KAAKqlE,kIAL3C6B,EAAmBpmE,EAAA,CAH/ByU,EAAAA,WAAW,CACVC,WAAY,UAED0xD,IAA4BhC,kBCQvC,SAAAkC,EACsCC,GAAArnE,KAAAqnE,SAAAA,EAIpCrnE,KAAKqnE,SAASC,iBAGhBF,EAAAlnE,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIE,OAAOuC,EAAKsT,OAAOvM,GAASuK,KAC1B4J,EAAAA,YAAW,SAACkgB,GACV,GAAIA,aAAoBhgB,EAAAA,kBAEtB,OADAvM,EAAKm2D,oBAAoBj+D,EAASq0B,GAC3B7f,EAAAA,WAAW6f,QAMhBypC,EAAAlnE,UAAAqnE,oBAAV,SACEj+D,EACAq0B,GAEA,IAAM6pC,EAAUxnE,KAAKynE,mBAAmB9pC,GACpC6pC,GACFA,EAAQjC,YAAYj8D,EAASq0B,IAQvBypC,EAAAlnE,UAAAunE,mBAAV,SAA6B9pC,GAC3B,IAAM/f,EAAS+f,EAAS/f,OACpB4pD,EAAUxnE,KAAKqnE,SAAShtD,MAAK,SAACqtD,GAAM,OAAAA,EAAErC,iBAAmBznD,KAM7D,OALK4pD,IACHA,EAAUxnE,KAAKqnE,SAAShtD,MACtB,SAACqtD,GAAM,OAAAA,EAAErC,iBAAmBtB,GAAmBoD,YAG5CK,oEA3CN3wD,EAAAA,OAAMC,KAAA,CAACouD,0HAFCkC,EAAoBtmE,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,SAGrB/T,EAAA,EAAAoV,EAAAA,OAAOquD,MAFCkC,MCEAO,GAA4B,CACvC,CACE/hE,QAASs/D,GACT//C,YAAa+hD,GACbphE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAaigD,GACbt/D,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAasgD,GACb3/D,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAamhD,GACbxgE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAaqhD,GACb1gE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAauhD,GACb5gE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAayhD,GACb9gE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAa2hD,GACbhhE,OAAO,GAET,CACEF,QAASs/D,GACT//C,YAAa6hD,GACblhE,OAAO,IAIE8hE,GAAoC,CAC/C,CACEhiE,QAASsf,EAAAA,kBACTC,YAAaiiD,GACbthE,OAAO,IC5DEmmB,GAAmC,CAC9C1f,SAAU,IAGZ,SAAgBN,GACdC,EACAC,eAEA,YAHA,IAAAD,IAAAA,EAAA27D,IAGQ17D,EAAOpC,MACb,KAAK+9D,GACH,IAAMn+C,EAAyBxd,EAAOR,QAEtC,QAAqCI,IAAjCG,EAAMK,SAASod,EAAQ5f,MACzB,OAAA3J,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQnM,EAAAA,EAAA,GACH8L,EAAMK,WAAQrH,EAAA,GAAAA,EAChBykB,EAAQ5f,MAAO,CAAC4f,EAAQi7C,MAAK1/D,MAIlC,IAAM6iE,EAAkC77D,EAAMK,SAASod,EAAQ5f,MAC/D,OAAA3J,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQnM,EAAAA,EAAA,GACH8L,EAAMK,WAAQpH,EAAA,GAAAA,EAChBwkB,EAAQ5f,MAAIxF,EAAOwjE,EAAe,CAAEp+C,EAAQi7C,OAAIz/D,MAMzD,KAAK6iE,GACH,IAAMC,EAA6B97D,EAAOR,QAAQ5B,KAC5Cm+D,EAAmB/7D,EAAOR,QAAQ+uC,MACxC,GACyC,IAAvCl7C,OAAOuN,KAAKb,EAAMK,UAAU5L,SAC3BuL,EAAMK,SAAS07D,GAEhB,OAAO/7D,EAGT,IAAMi8D,EAAQ5jE,EAAO2H,EAAMK,SAAS07D,IAGpC,OAFAE,EAASxtB,OAAOutB,EAAU,GAE1B9nE,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQnM,EAAAA,EAAA,GACH8L,EAAMK,WAAQnH,EAAA,GAAAA,EAChB6iE,GAAUE,EAAQ/iE,MAKzB,IjBrDF,2CiBsDI,IAAMmH,EAAQnM,EAAAA,EAAA,GACT8L,EAAMK,YAAQ82B,EAAA,IAChBl3B,EAAOR,SAAU,GAAE03B,IAEtB,OAAAjjC,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAKd,OAAOL,WCrEOggB,KACd,OAAOk8C,GAGT,IAAa/7C,GAER,IAAI/mB,EAAAA,eACP,yBAGWgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,kBCHd,SAAAm8C,KAAuC,OAA1BA,EAAwBvnE,EAAA,CAPpCkG,EAAAA,SAAS,CACRC,QAAS,CACP+hB,GACA4E,EAAAA,YAAYC,WjBRsB,iBiBQaxB,KAEjDzlB,UAAW,CAAC0lB,OAED+7C,MCUb,SAAgBC,GAAiBC,EAAcC,GAC7C,GAAID,IAASC,EACX,OAAO,EACF,GAAMD,aAAgB/oE,QAAagpE,aAAgBhpE,OAEnD,CAAA,GAAI+oE,EAAKtoE,cAAgBuoE,EAAKvoE,YAGnC,OAAO,EAEP,IAAK,IAAMgB,KAAOsnE,EAChB,GAAKA,EAAK1oE,eAAeoB,GAAzB,CAGA,IAAKunE,EAAK3oE,eAAeoB,GACvB,OAAO,EAET,GAAIsnE,EAAKtnE,KAASunE,EAAKvnE,GAAvB,CAGA,GAAyB,iBAAdsnE,EAAKtnE,GACd,OAAO,EAET,IAAKqnE,GAAiBC,EAAKtnE,GAAMunE,EAAKvnE,IACpC,OAAO,GAGX,IAAK,IAAMA,KAAOunE,EAChB,GAAIA,EAAK3oE,eAAeoB,KAASsnE,EAAK1oE,eAAeoB,GACnD,OAAO,EAGX,OAAO,EA5BP,OAAO,EAyCX,SAAgBwnE,GACdC,EACAC,GAEA,IAAK,IAAIjuB,EAAQ,EAAGA,EAAQiuB,EAAIhoE,OAAQ+5C,IACtC,GAAI4tB,GAAiBK,EAAIjuB,GAAQguB,GAC/B,OAAOhuB,oBCmBX,SAAAkuB,EACU1+C,EACA5W,EACA5N,EACqBkiB,GAJ/B,IAAAxW,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAsT,MAAAA,EACAtT,KAAA0F,OAAAA,EACqB1F,KAAA4nB,WAAAA,EArE/B5nB,KAAA6oE,kBAEI7oE,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOy9C,IACP1tC,EAAAA,MAAM,WACNxkB,EAAAA,WAAU,SAAC+T,GACT,OAAA/S,EAAAA,GAAG+S,EAAQi7C,MAAM/wD,KACfse,EAAAA,eACE/gB,EAAKkC,MAAMO,KACTM,EAAAA,OACE20D,GACEn/C,EAAQ5f,SAKhB+G,EAAAA,QACE,SAAC5L,ODc6BwjE,ECd7BvjE,EAAAf,EAAAc,EAAA,GAAC0/D,EAAAz/D,EAAA,GAAMgjE,EAAAhjE,EAAA,GACN,ODa4BujE,ECbJ9D,EAAMuD,EDc7Bn7D,QAAO,SAACC,EAAK6hC,GAItB,OAHIw5B,GAAiBI,EAAK55B,IACxB7hC,IAEKA,IACN,GCnBiD,KAE9C6G,EAAAA,KACE,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAAC0/D,EAAAz/D,EAAA,GAAMgjE,EAAAhjE,EAAA,GACN,OAAA,IAAI6/D,GAAmC,CACrCj7D,KAAM4f,EAAQ5f,KACd2wC,MAAO+tB,GAAuB7D,EAAMuD,aAQhDnoE,KAAA+oE,gBAEIhhD,EAAAA,kBAAkB/nB,KAAK4nB,YACvB5nB,KAAKkqB,SAASrW,KACZwW,EAAAA,OAAOy9C,IACP1tC,EAAAA,MAAM,WACNk9B,EAAAA,WAAU,SAAC3tC,GACT,IAAMjkB,EAAS0L,EAAK1L,OAAOsjE,eAAer/C,EAAQ5f,MAClD,OAAOqH,EAAKkC,MAAMO,KAChBM,EAAAA,OACE80D,GAAmDt/C,EAAQ5f,OAE7DkK,EAAAA,KAAK,GACLnD,EAAAA,QACE,SAACk1B,GACC,OAAEtgC,QAA6BqG,IAAnBrG,EAAOm/D,SAA0Bl7C,EAAQk7C,UACrD7+B,GACAA,EAAQ,KAEZkjC,EAAAA,MAAMv/C,EAAQk7C,SAAWn/D,EAAOm/D,SAChCjvD,EAAAA,WAAU,WACR,OAAAgB,EAAAA,GACE,IAAIouD,GAAmC,CACrCj7D,KAAM4f,EAAQ5f,KACd2wC,MAAO,aAOnB31B,EAAAA,MAQN,gDALsB0F,EAAAA,eACHnV,EAAAA,aACC6zD,mCACftyD,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,kBArEV/nB,EAAA,CADC4pB,EAAAA,kDAiCD5pB,EAAA,CADC4pB,EAAAA,gDAjCUk+C,EAAmB9nE,EAAA,CAD/ByU,EAAAA,aAwEI9T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,eAvEC+/C,eCxBGQ,WACd,MAAO,CACLJ,gBAAc9jE,EAAA,GACZA,EAAC0+D,EAAAA,kBAAkBqC,uBAAwB,CACzCpB,QAAS,KAEX3/D,EAAC0+D,EAAAA,kBAAkByF,eAAgB,CACjCxE,QAAS,KAEX3/D,EAAC0+D,EAAAA,kBAAkB4B,gBAAiB,CAClCX,QAAS,KAEX3/D,EAAC0+D,EAAAA,kBAAkB0F,kBAAmB,CACpCzE,QAAS,2BCUjB,SAAA0E,WAOA,SAPaA,EACJA,EAAAziE,QAAP,WACE,MAAO,CACLJ,SAAU8iE,EACV5iE,UAASrC,EAAMojE,GAAkBC,MAJ1B2B,EAAmBC,EAAA1oE,EAAA,CAX/BkG,EAAAA,SAAS,CACRC,QAAS,CACPohE,GACAv6C,EAAAA,cAAcD,WAAW,CAAC+6C,MAE5BhiE,UAAW,CACTR,EAA4BgjE,IAC5B1E,GACA,CAAE9+D,QAASujE,GAAqBhkD,YAAa9f,OAGpCkkE,MCvBAE,GAGT/2D,EAAAA,sBtCFuB,UuCGzB,SAACxG,GAAoB,OAAAA,EAAM82D,OAFhB0G,GAAkD72D,EAAAA,eAC7D42D,GAAWE,ICCAC,GAGT/2D,EAAAA,eACF42D,IACA,SAACv9D,GAAoB,OAAAA,EAAM62D,2BAM2B,SAAC72D,GACvD,OAAAwkB,GAAyCxkB,IAJ9B29D,GAGTh3D,EAAAA,eAAe+2D,GAAmCE,OAOE,SAAC59D,GACvD,OAAA0kB,GAA2C1kB,IAJhC69D,GAGTl3D,EAAAA,eAAe+2D,GAAmCI,IClBzCC,GAGTp3D,EAAAA,eAAe42D,IAAa,SAACv9D,GAAoB,OAAAA,EAAMg3D,gBAE9CgH,GAGTr3D,EAAAA,eAAeo3D,IAAmC,SAAC/9D,GACrD,OAAAwkB,GAAyCxkB,MAG9Bi+D,GAGTt3D,EAAAA,eAAeo3D,IAAmC,SAAC/9D,GACrD,OAAA0kB,GAA2C1kB,4TCP3C,SAAAk+D,EACY92D,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAQZ00D,EAAAlqE,UAAAmqE,8BAAA,SAA8B72D,EAAgBC,GAC5CzT,KAAKsT,MAAMI,SACT,IAAI42D,GAAyC,CAC3C92D,OAAQA,EACRC,SAAUA,MAWT22D,EAAAlqE,UAAAqqE,8BAAP,SACEC,EACAC,GAEAzqE,KAAK0V,YAAYjB,mBAAkBrU,EAAAA,EAAA,GAC9BoqE,GAAyB,CAC5Bh3D,OAAQi3D,MAQZL,EAAAlqE,UAAAwqE,yBAAA,SAAyBz3D,GACvB,OACE4B,QAAQ5B,IACR4B,QAAQ5B,EAAUO,SvT1DW,YuT2D7BP,EAAUO,QAOd42D,EAAAlqE,UAAAgqE,6BAAA,WACE,OAAOlqE,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOw2D,MAMhCP,EAAAlqE,UAAAiqE,oCAAA,WACE,OAAOnqE,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOy2D,MAOXR,EAAAlqE,UAAA2qE,2BAAA,WAAA,IAAAz5D,EAAApR,KACEA,KAAKkqE,+BACFr2D,KAAKI,EAAAA,KAAK,IACVC,WAAU,SAACjB,GACV7B,EAAKkC,MAAMI,SAAS,IAAIo3D,IACxB15D,EAAKkC,MAAMI,SAAS,IAAIoB,GAA4B7B,iDAtEvCqC,EAAAA,aACMjC,8IAHd+2D,EAActpE,EAAA,CAH1ByU,EAAAA,WAAW,CACVC,WAAY,UAED40D,oBCNX,SAAAW,EACYC,EACA7F,GADAnlE,KAAAgrE,eAAAA,EACAhrE,KAAAmlE,qBAAAA,SAGZ4F,EAAA7qE,UAAA+qE,4CAAA,WACEjrE,KAAKgrE,eAAeH,6BACpB7qE,KAAKmlE,qBAAqB37C,IACxB,CACEvoB,IAAK,2BAEP2iE,EAAAA,kBAAkB4B,0DAVM4E,UACM1F,yIAHvBqG,EAAwCjqE,EAAA,CADpDyU,EAAAA,WAAW,CAAEC,WAAY,UACbu1D,oBCWX,SAAAG,EACUC,GAAAnrE,KAAAmrE,4BAAAA,SAGVD,EAAAhrE,UAAAqd,UAAA,SACEjU,EACA/G,GAFF,IAAA6O,EAAApR,KAIQorE,EAAgCprE,KAAKorE,8BACzC9hE,GASF,OAPI8hE,IACF9hE,EAAUX,EAAgBU,alV5BgB,uBkV8BxCC,IAIG/G,EAAKsT,OAAOvM,GAASuK,KAC1B4J,EAAAA,YAAW,SAACC,GACV,OAAIA,aAAuBC,EAAAA,mBAErBytD,GAAwD,MAAvB1tD,EAAYE,QAC/CxM,EAAK+5D,4BAA4BF,8CAC1Br0D,EAAAA,QAAG7K,IAGP+R,EAAAA,WAAWJ,QAKhBwtD,EAAAhrE,UAAAkrE,8BAAR,SAAsC9hE,GACpC,IAAMyU,EAAmBpV,EAAgBe,oBlVjDG,uBkVmD1CJ,EAAQP,SAEV,OAAO8L,QAAQkJ,6CApCsBgtD,uHAH5BG,EAAwCpqE,EAAA,CADpDyU,EAAAA,WAAW,CAAEC,WAAY,UACb01D,oBCCX,SAAAG,EAAoBL,GAAAhrE,KAAAgrE,eAAAA,SAEpBK,EAAAnrE,UAAAqd,UAAA,SACEjU,EACA/G,GAEA,OAAOvC,KAAKkqE,6BAA6B5gE,GAASuK,KAChDI,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAAC5C,GAQT,OAPIA,IACF1J,EAAUA,EAAQG,MAAM,CACtBsM,WAAY,CACVC,cAAkBhD,EAAMiD,WAAU,IAAIjD,EAAMqC,iBAI3C9S,EAAKsT,OAAOvM,QAKjB+hE,EAAAnrE,UAAAgqE,6BAAR,SACE5gE,GAEA,OACEX,EAAgBe,oBnVxC0B,uBmV0CxCJ,EAAQP,SAGH/I,KAAKgrE,eAAed,+BAEtBtzD,EAAAA,GAAG,gDAhCwBwzD,uHADzBiB,EAAoCvqE,EAAA,CADhDyU,EAAAA,WAAW,CAAEC,WAAY,UACb61D,MCZApmD,GAA2B,CACtC,CACErf,QAASsf,EAAAA,kBACTC,YAAakmD,GACbvlE,OAAO,GAET,CACEF,QAASsf,EAAAA,kBACTC,YAAa+lD,GACbplE,OAAO,kBCFX,SAAAwlE,WAWA,SAXaA,EACJA,EAAAxkE,QAAP,WACE,MAAO,CACLJ,SAAU6kE,EACV3kE,UAASrC,EAAA,CACP,CAAEqB,QAAS+vB,GAAWxQ,YAAa9f,IAChC4f,GAAY,CACf9e,EAAqB+6D,QAPhBoK,EAASC,EAAAzqE,EAAA,CAHrBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,iBAAkBk2C,OAE/ByH,oBCIX,SAAAE,EAAsBl4D,GAAAtT,KAAAsT,MAAAA,SAMtBk4D,EAAAtrE,UAAA62B,eAAA,SAAeC,GACbh3B,KAAKsT,MAAMI,SAAS,IAAI+3D,GAA0Bz0C,KAMpDw0C,EAAAtrE,UAAAwrE,oBAAA,WACE1rE,KAAKsT,MAAMI,SAAS,IAAIi4D,KAM1BH,EAAAtrE,UAAA2pE,yBAAA,WACE,OAAO7pE,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOy3D,MAMhCJ,EAAAtrE,UAAA6pE,gCAAA,WACE,OAAO/pE,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO03D,MAOXL,EAAAtrE,UAAA4rE,iBAAA,SAAiB9I,GACfhjE,KAAKsT,MAAMI,SAAS,IAAIq4D,GAAuB/I,KAMjDwI,EAAAtrE,UAAA8rE,cAAA,WACE,OAAOhsE,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO83D,+CA5CH32D,EAAAA,+HADlBk2D,EAAU1qE,EAAA,CAHtByU,EAAAA,WAAW,CACVC,WAAY,UAEDg2D,MCNbU,GAAA,WAAA,SAAAA,KAqBA,OAVEA,EAAAhsE,UAAAisE,SAAA,SAAS5pC,GACP,IAAI6pC,EAAQ,EAOZ,OANIpsE,KAAK8gC,WACPsrC,GAAS7pC,EAAKx4B,OAAS/J,KAAK8gC,SAAW,GAAK,GAE1C9gC,KAAKqsE,eACPD,GAAS7pC,EAAKrR,WAAalxB,KAAKqsE,aAAe,GAAK,GAE/CD,GAEXF,EArBA,GCRaI,GAAgB,yJCGhBC,GAAkB,+BCiBlBC,GAGT95D,EAAAA,sBDrB8B,WC0BI,SAACxG,GAA0B,OAAAA,EAAMosB,OAH1Dm0C,GAGT55D,EAAAA,eAAe25D,GAAiBE,IAEvBC,GAA+B,SAC1CzzC,GAEA,OAAOrmB,EAAAA,eACL45D,IACA,SAACvgE,GACC,OAAA+C,GAAmC/C,EAAOgtB,OAInC0zC,GAAyB,SACpC1zC,GAEA,OAAOrmB,EAAAA,eACL45D,IACA,SAACvgE,GACC,OAAAM,GAAoBN,EAAOgtB,OAIpB2zC,GAAiC,SAC5C3zC,GAEA,OAAOrmB,EAAAA,eACL45D,IACA,SAACvgE,GACC,OAAA8C,GAAuB9C,EAAOgtB,OAIvB4zC,GAA4C,SACvD5zC,GAEA,OAAOrmB,EAAAA,eACL45D,IACA,SAACvgE,GACC,OAAA6C,GAAkC7C,EAAOgtB,OAIlC6zC,GAAgC,SAC3C7zC,GAEA,OAAOrmB,EAAAA,eAAe+5D,GAAuB1zC,IAAS,SAAChtB,GACrD,OAAOA,GAASA,EAAMsrB,QAAUtrB,EAAMsrB,QAAU,OAIvCw1C,GAA8B,SACzC9zC,EACAC,GAEA,OAAOtmB,EAAAA,eACLk6D,GAA8B7zC,IAC9B,SAAChtB,GACC,OAAOA,EACHA,EAAMmO,MAAK,SAACod,GAAU,OAAAA,EAAMC,QAAQ4B,OAASH,UAC7CptB,SAQ4B,SAACG,GAA0B,OAAAA,EAAMgW,QAH1D+qD,GAGTp6D,EAAAA,eAAe25D,GAAiBU,OAOlC,SAAChhE,GAA0B,OAAAA,EAAMihE,UALtBC,GAGTv6D,EAAAA,eACF25D,GAAiBa,kWCnGHC,GAAkB/0C,EAAY/kB,GAC5C,MlUHmC,ckUG/BA,EACK+kB,EAAKib,KAEPjb,EAAKe,KAGd,SAAgBi0C,GAAgB9C,GAC9B,MAAO,WAAWA,EAqBpB,SAAgB+C,GAAat0C,GAC3B,OAAOA,EAAOjhB,WAAW,SC1BpB,IAWPw1D,GAAA,SAAApmE,GAEE,SAAAomE,EACS9hE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAZmB,2BAuB9B,OAZkCjK,EAAA2tE,EAAApmE,GAYlComE,EAZA,CAAkCr/D,IAclCs/D,GAAA,SAAArmE,GAEE,SAAAqmE,EACS/hE,GADT,IAAAyF,EAaE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAZ/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzB2B,mCAyCtC,OAjByCjK,EAAA4tE,EAAArmE,GAiBzCqmE,EAjBA,CAAyCr/D,IAmBzCs/D,GAAA,SAAAtmE,GAEE,SAAAsmE,EACShiE,GADT,IAAAyF,EASE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAR/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA3CwB,gCAuDnC,OAbsCjK,EAAA6tE,EAAAtmE,GAatCsmE,EAbA,CAAsCt/D,IAetCu/D,GAAA,SAAAvmE,GAEE,SAAAumE,EACSjiE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzDsB,8BA+DjC,OAPqCjK,EAAA8tE,EAAAvmE,GAOrCumE,EAPA,CAAqCx/D,IASrCy/D,GAAA,SAAAxmE,GAEE,SAAAwmE,EACSliE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAjE8B,sCAuEzC,OAP4CjK,EAAA+tE,EAAAxmE,GAO5CwmE,EAPA,CAA4Cx/D,IAS5Cy/D,GAAA,SAAAzmE,GAEE,SAAAymE,EACSniE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzE2B,mCAoFtC,OAZyCjK,EAAAguE,EAAAzmE,GAYzCymE,EAZA,CAAyCz/D,IAczC0/D,GAAA,SAAA1mE,GAEE,SAAA0mE,EACSpiE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KArFsB,8BAgGjC,OAZqCjK,EAAAiuE,EAAA1mE,GAYrC0mE,EAZA,CAAqC3/D,IAcrC4/D,GAAA,SAAA3mE,GAEE,SAAA2mE,EACSriE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAlG8B,sCA6GzC,OAZ4CjK,EAAAkuE,EAAA3mE,GAY5C2mE,EAZA,CAA4C3/D,IAc5C4/D,GAAA,SAAA5mE,GAEE,SAAA4mE,EACStiE,GADT,IAAAyF,EASE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAR/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA/G2B,mCA2HtC,OAbyCjK,EAAAmuE,EAAA5mE,GAazC4mE,EAbA,CAAyC5/D,ICjH5B6/D,GAAmB,mCAahCC,GAAA,SAAA9mE,GAEE,SAAA8mE,EACSxiE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,K9H7B2B,U0HSO,eIoBYA,YAFvCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAAOmkE,KAMlB,OAPoCpuE,EAAAquE,EAAA9mE,GAOpC8mE,EAPA,CAAoC3iE,IASpC4iE,GAAA,SAAA/mE,GAEE,SAAA+mE,EACSziE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,K9H3C2B,U0HSO,aIkCa2L,EAAQrH,QAAMtE,YAPtDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAtB0B,yCAiCrC,OAZwCjK,EAAAsuE,EAAA/mE,GAYxC+mE,EAZA,CAAwC3iE,IAcxC4iE,GAAA,SAAAhnE,GAEE,SAAAgnE,EACS1iE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,K9HpD2B,U0HSO,eI2CYA,YAFvCoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAlCT,4CAwCF,OAP2CjK,EAAAuuE,EAAAhnE,GAO3CgnE,EAPA,CAA2C3iE,IAe3C4iE,GAAA,SAAAjnE,GAEE,SAAAinE,IAAA,IAAAl9D,EACE/J,EAAAzG,KAAAZ,K9HjE2B,U0HSO,eIwDYA,YAFvCoR,EAAArH,KAhD2B,0CAoDtC,OALyCjK,EAAAwuE,EAAAjnE,GAKzCinE,EALA,CAAyC1iE,IAQzC2iE,GAAA,SAAAlnE,GAEE,SAAAknE,EACS5iE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAtDwB,uCA4DnC,OAPuCjK,EAAAyuE,EAAAlnE,GAOvCknE,EAPA,CAAuCngE,IASvCogE,GAAA,SAAAnnE,GAEE,SAAAmnE,EACS7iE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA7DT,4CAwEF,OAZ2CjK,EAAA0uE,EAAAnnE,GAY3CmnE,EAZA,CAA2CngE,IAc3CogE,GAAA,SAAApnE,GAEE,SAAAonE,EACS9iE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzET,+CA+EF,OAP8CjK,EAAA2uE,EAAApnE,GAO9ConE,EAPA,CAA8CpgE,IChFjCqgE,GAAc,qBAoC3BC,GAAA,SAAAtnE,GAEE,SAAAsnE,EAAmBhjE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQijE,aAAW5uE,YADzBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAAO2kE,KAIlB,OALgC5uE,EAAA6uE,EAAAtnE,GAKhCsnE,EALA,CAAgCnjE,IAWhCqjE,GAAA,SAAAxnE,GAEE,SAAAwnE,EAAmBljE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQijE,aAAW5uE,YADzBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/CqB,4BAmDhC,OALoCjK,EAAA+uE,EAAAxnE,GAKpCwnE,EALA,CAAoCpjE,IAYpCqjE,GAAA,SAAAznE,GAEE,SAAAynE,EAAmBnjE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA1DwB,+BA8DnC,OALuCjK,EAAAgvE,EAAAznE,GAKvCynE,EALA,CAAuCpjE,IAOvCqjE,GAAA,SAAA1nE,GAEE,SAAA0nE,EACSpjE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA3DsB,6BAiEjC,OAPoCjK,EAAAivE,EAAA1nE,GAOpC0nE,EAPA,CAAoC3gE,IASpC4gE,GAAA,SAAA3nE,GAEE,SAAA2nE,EACSrjE,GADT,IAAAyF,EAQE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAP/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAnE2B,kCA8EtC,OAZwCjK,EAAAkvE,EAAA3nE,GAYxC2nE,EAZA,CAAwC3gE,IAcxC4gE,GAAA,SAAA5nE,GAEE,SAAA4nE,EACStjE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YAF/BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAhF8B,qCAsFzC,OAP2CjK,EAAAmvE,EAAA5nE,GAO3C4nE,EAPA,CAA2C5gE,IAiB3C6gE,GAAA,SAAA7nE,GAEE,SAAA6nE,EAAmBvjE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvGc,qBA2GzB,OAL8BjK,EAAAovE,EAAA7nE,GAK9B6nE,EALA,CAA8B1jE,IAW9B2jE,GAAA,SAAA9nE,GAEE,SAAA8nE,EAAmBxjE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,OAAQvtB,EAAQrH,QAAMtE,YADpCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjHmB,0BAqH9B,OALkCjK,EAAAqvE,EAAA9nE,GAKlC8nE,EALA,CAAkC1jE,IAWlC2jE,GAAA,SAAA/nE,GAEE,SAAA+nE,EAAmBzjE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3HsB,6BA+HjC,OALqCjK,EAAAsvE,EAAA/nE,GAKrC+nE,EALA,CAAqC1jE,IAiBrC2jE,GAEE,SAAmB1jE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAtIe,qBAkJ1BulE,GAAA,SAAAjoE,GAEE,SAAAioE,EAAmB3jE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQ0uB,YAAUr6B,YADxBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlJuB,8BAsJlC,OALsCjK,EAAAwvE,EAAAjoE,GAKtCioE,EALA,CAAsChlE,GAWtCilE,GAAA,SAAAloE,GAEE,SAAAkoE,IAAA,IAAAn+D,EACE/J,EAAAzG,KAAAZ,KAAMusE,KAAgBvsE,YAFfoR,EAAArH,KA3JuB,8BA+JlC,OALsCjK,EAAAyvE,EAAAloE,GAKtCkoE,EALA,CAAsC1hE,IAWtC2hE,GAAA,SAAAnoE,GAEE,SAAAmoE,EAAmB7jE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApKgB,uBAwK3B,OALgCjK,EAAA0vE,EAAAnoE,GAKhCmoE,EALA,CAAgCllE,GAOhCmlE,GAEE,SAAmB9jE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAzKgB,sBA6K3B2lE,GAAA,SAAAroE,GAEE,SAAAqoE,EAAmB/jE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA7KwB,+BAiLnC,OALuCjK,EAAA4vE,EAAAroE,GAKvCqoE,EALA,CAAuCplE,GAOvCqlE,GAEE,SAAmBhkE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAnLqB,2BCZhC6lE,GAAA,SAAAvoE,GAEE,SAAAuoE,EAAmBjkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQijE,WAAYjjE,EAAQ4sB,OAAKv4B,YADvCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAfkB,yBAmB7B,OALiCjK,EAAA8vE,EAAAvoE,GAKjCuoE,EALA,CAAiClkE,IAajCmkE,GAAA,SAAAxoE,GAEE,SAAAwoE,EAAmBlkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,IAAQ3L,YADdoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA1B6B,oCA8BxC,OAL4CjK,EAAA+vE,EAAAxoE,GAK5CwoE,EALA,CAA4CzhE,IAa5C0hE,GAAA,SAAAzoE,GAEE,SAAAyoE,EAAmBnkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,IAAQ3L,YADdoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtC6B,oCA0CxC,OAL4CjK,EAAAgwE,EAAAzoE,GAK5CyoE,EALA,CAA4CzhE,IAU5C0hE,GAEE,SAAmBpkE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA9CuB,6BAqDlCimE,GAAA,SAAA3oE,GAEE,SAAA2oE,IAAA,IAAA5+D,EACE/J,EAAAzG,KAAAZ,KAAMusE,KAAgBvsE,YAFfoR,EAAArH,KApDqB,4BAwDhC,OALoCjK,EAAAkwE,EAAA3oE,GAKpC2oE,EALA,CAAoCxlE,GChDpCylE,GAEE,SACStkE,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KAXqB,gCAqBhCmmE,GAAA,SAAA7oE,GAEE,SAAA6oE,EAAmBvkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiBe,GAAkB3hE,EAAQ4sB,KAAM5sB,EAAQ6H,UAAQxT,YADtDoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApB6B,yCAwBxC,OAL2CjK,EAAAowE,EAAA7oE,GAK3C6oE,EALA,CAA2CxkE,IAO3CykE,GAAA,SAAA9oE,GAEE,SAAA8oE,EAAmBxkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,OAAQvtB,EAAQrH,QAAMtE,YADpCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5B0B,sCAgCrC,OALwCjK,EAAAqwE,EAAA9oE,GAKxC8oE,EALA,CAAwC1kE,IAoBxC2kE,GAAA,SAAA/oE,GAEE,SAAA+oE,EAAmBzkE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQijE,aAAW5uE,YADzBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA7CmB,+BAiD9B,OALkCjK,EAAAswE,EAAA/oE,GAKlC+oE,EALA,CAAkC5kE,IA2BlC6kE,GAAA,SAAAhpE,GAEE,SAAAgpE,EAAmB1kE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvE2B,uCA2EtC,OALyCjK,EAAAuwE,EAAAhpE,GAKzCgpE,EALA,CAAyC3kE,IAsBzC4kE,GAAA,SAAAjpE,GAEE,SAAAipE,EAAmB3kE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,OAAQvtB,EAAQrH,QAAMtE,YADpCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5FwB,oCAgGnC,OALsCjK,EAAAwwE,EAAAjpE,GAKtCipE,EALA,CAAsC7kE,oDJpGR,gDACQ,qDACH,gDACF,sDACQ,2DACH,mDAEL,sDACQ,2DACH,8QCFD,gEAEnC,iEACoC,4DAEH,8DAEjC,sEAEA,+OCP8B,8CACG,uCAEV,kCACK,0CACG,6CAEA,kDACK,0DACG,8CAEf,uCACQ,+CAEA,wCAEP,iCAEA,yCACQ,8CACH,qUC1BH,gDAEW,2DACA,qDAEN,6CAEF,mJCPA,qDACK,6DACG,sDAEV,oDACQ,yDACH,0DAEI,0KCLrC,SAAA8kE,EAAsBj9D,GAAAtT,KAAAsT,MAAAA,EAwRxB,OAjREi9D,EAAArwE,UAAAswE,QAAA,SAAQt3C,GACN,OAAOl5B,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOs8D,GAA0Cv3C,MASrDq3C,EAAArwE,UAAAwwE,cAAA,SAAcx3C,GACZ,OAAOl5B,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOw8D,GAAgDz3C,MAS3Dq3C,EAAArwE,UAAAo5D,SAAA,SAASpgC,GACP,OAAOl5B,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOy8D,GAAkD13C,IAKzD23C,EAAAA,UAAS,SAACvX,GAAa,OAACA,EAAWwX,EAAAA,MAAM,GAAK/rD,EAAAA,SAC9CpO,EAAAA,yBAOI45D,EAAArwE,UAAA6wE,mBAAR,WAEE,MAAO,QADYC,KAAKC,SAAS3sD,SAAS,IAAIqkB,OAAO,EAAG,IAS1D4nC,EAAArwE,UAAAs4B,WAAA,SAAWtzB,OACTsO,EAAAtO,EAAAsO,OACA6mB,EAAAn1B,EAAAm1B,UACAC,EAAAp1B,EAAAo1B,gBACA42C,EAAAhsE,EAAAgsE,UAWMtC,EAAa5uE,KAAK+wE,qBAUxB,OATA/wE,KAAKsT,MAAMI,SACT,IAAIy9D,GAAuB,CACzBD,UAASA,EACT19D,OAAMA,EACN6mB,UAASA,EACTC,gBAAeA,EACfs0C,WAAUA,KAGP5uE,KAAK0wE,cAAc9B,IAQ5B2B,EAAArwE,UAAAkxE,mBAAA,SAAmBlsE,OACjBsO,EAAAtO,EAAAsO,OACA0lB,EAAAh0B,EAAAg0B,OACAg4C,EAAAhsE,EAAAgsE,UAQMtC,EAAa5uE,KAAK+wE,qBACxB/wE,KAAKsT,MAAMI,SACT,IAAI29D,GAAsB,CACxB79D,OAAMA,EACN0lB,OAAMA,EACNg4C,UAASA,EACTtC,WAAUA,MAUhB2B,EAAArwE,UAAAoxE,SAAA,SAASpsE,OACPg0B,EAAAh0B,EAAAg0B,OACA1lB,EAAAtO,EAAAsO,OACA09D,EAAAhsE,EAAAgsE,UAMAlxE,KAAKsT,MAAMI,SACT,IAAI69D,GAAqB,CACvB/9D,OAAMA,EACN0lB,OAAMA,EACNg4C,UAASA,MASfX,EAAArwE,UAAAsxE,WAAA,SAAWt4C,GACT,OAAOl5B,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOs9D,GAAiDv4C,MAY5Dq3C,EAAArwE,UAAAwxE,SAAA,SACEl+D,EACA0lB,EACAC,EACAC,GAEAp5B,KAAKsT,MAAMI,SACT,IAAIi+D,GAAyB,CAC3Bn+D,OAAMA,EACN0lB,OAAMA,EACNC,YAAWA,EACXC,SAAQA,MAYdm3C,EAAArwE,UAAAu4B,WAAA,SACEjlB,EACA0lB,EACAqM,GAHF,IAAAn0B,EAAApR,KAKEulC,EAASxhB,SAAQ,SAAC2T,GAChBtmB,EAAKkC,MAAMI,SACT,IAAIi+D,GAAyB,CAC3Bn+D,OAAMA,EACN0lB,OAAMA,EACNC,YAAazB,EAAQyB,YACrBC,SAAU1B,EAAQ0B,gBAa1Bm3C,EAAArwE,UAAA0xE,YAAA,SAAYp+D,EAAgB0lB,EAAgBO,GAC1Cz5B,KAAKsT,MAAMI,SACT,IAAIm+D,GAA4B,CAC9Br+D,OAAMA,EACN0lB,OAAMA,EACNO,YAAa,GAAGA,MAatB82C,EAAArwE,UAAA4xE,YAAA,SACEt+D,EACA0lB,EACAO,EACAL,GAEIA,EAAW,EACbp5B,KAAKsT,MAAMI,SACT,IAAIq+D,GAA4B,CAC9Bv+D,OAAMA,EACN0lB,OAAMA,EACNO,YAAa,GAAGA,EAChBL,SAAUA,KAIdp5B,KAAK4xE,YAAYp+D,EAAQ0lB,EAAQO,IAUrC82C,EAAArwE,UAAA8xE,SAAA,SAAS94C,EAAgBC,GACvB,OAAOn5B,KAAKsT,MAAMO,KAChBM,EAAAA,OACE89D,GAA+C/4C,EAAQC,MAY7Do3C,EAAArwE,UAAAgyE,YAAA,SAAYh5C,EAAgB1lB,EAAgB+mB,GAC1Cv6B,KAAKsT,MAAMI,SACT,IAAIy+D,GAA2B,CAC7B3+D,OAAMA,EACN0lB,OAAMA,EACNqB,MAAKA,MAWXg2C,EAAArwE,UAAA24B,WAAA,SAAWK,EAAgB1lB,GACzBxT,KAAKsT,MAAMI,SACT,IAAI0+D,GAAuB,CACzB5+D,OAAMA,EACN0lB,OAAMA,+CApRiB5jB,EAAAA,SADlBi7D,EAAgBzvE,EAAA,CAD5ByU,EAAAA,cACYg7D,oBC0CX,SAAA8B,EACY/+D,EACAoC,EACA48D,GAHZ,IAAAlhE,EAAApR,KACYA,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,EACA1V,KAAAsyE,iBAAAA,EAzBKtyE,KAAAuyE,+BACf,iCACMvyE,KAAAwyE,eAAiBxyE,KAAKuyE,+BAGtBvyE,KAAAwT,OzUpC2B,YyUwC3BxT,KAAAyyE,cAAgBzyE,KAAKsT,MAAMO,KACjCM,EAAAA,OAAOu+D,IACP5+D,EAAAA,KAAI,SAAColB,GACH,OAAKA,GzUxCwB,cyU8CzBl5B,KAAA2yE,cAAgB3yE,KAAKyyE,cAAc5+D,KACzC+B,EAAAA,WAAU,SAACsjB,GAAW,OAAA9nB,EAAKkhE,iBAAiB5B,cAAcx3C,OAQ1Dl5B,KAAK0V,YAAY9B,eAAeM,WAAU,SAACV,GACzCpC,EAAKoC,OAASA,EzU3DiB,cyU4D3BpC,EAAKoC,QACHpC,EAAKwhE,eAAep/D,IACtBpC,EAAKyhE,YAAYzhE,EAAK8nB,QAG1B9nB,EAAKohE,eAAiBh/D,KAGxBxT,KAAKyyE,cAAcv+D,WAAU,SAACglB,GAC5B9nB,EAAK8nB,OAASA,KAGhBl5B,KAAK8yE,iBA6VT,OA1VUT,EAAAnyE,UAAA4yE,eAAR,WAAA,IAAA1hE,EAAApR,KACEA,KAAK+yE,YAAc/yE,KAAK2yE,cAAc9+D,KACpCse,EAAAA,eAAenyB,KAAKyyE,eACpB3+D,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAAC8tE,EAAA7tE,EAAA,GAAY8tE,EAAA9tE,EAAA,GAMhB,MAAO,CACLozB,KAAMy6C,EAAW3wE,MACjB62B,OAAQ+5C,EACR3Z,UAAW0Z,EAAWlnE,SAAyC,IAA9BknE,EAAWzkE,eAC5CmkD,QACGsgB,EAAW1uE,OAAS0uE,EAAWloE,WAAakoE,EAAWlnE,YAM9DgF,EAAAA,QAAO,SAAC5L,OAAEo0D,EAAAp0D,EAAAo0D,SAAU/gC,EAAArzB,EAAAqzB,KAAW,OAAA+gC,GAAYloD,EAAK8hE,QAAQ36C,MACxDpb,EAAAA,KAAI,SAACjY,OAAEqzB,EAAArzB,EAAAqzB,KAAMW,EAAAh0B,EAAAg0B,OAAQw5B,EAAAxtD,EAAAwtD,OAAQxtD,EAAAo0D,UAGzBloD,EAAK8hE,QAAQ36C,KACZm6B,IACA8a,GAAat0C,IAEd9nB,EAAKzG,KAAKuuB,MAGdplB,EAAAA,KAAI,SAAC5O,OAAEqzB,EAAArzB,EAAAqzB,KAAW,OAACA,GAAc,MACjCpb,EAAAA,KAAI,SAACob,GACCA,IACFnnB,EAAK+hE,SAAW56C,EAAK8a,SAGzB18B,EAAAA,uBACAi0B,EAAAA,YAAY,CAAEwoC,WAAY,EAAGC,UAAU,MAO3ChB,EAAAnyE,UAAA8hB,UAAA,WACE,OAAOhiB,KAAK+yE,aAMdV,EAAAnyE,UAAA+sE,gBAAA,WAAA,IAAA77D,EAAApR,KACE,OAAOA,KAAK+yE,YAAYl/D,KACtBC,EAAAA,KAAI,SAACykB,GAAS,OAAA+0C,GAAkB/0C,EAAMnnB,EAAKoC,WAC3CmD,EAAAA,yBAOJ07D,EAAAnyE,UAAAsxE,WAAA,WAAA,IAAApgE,EAAApR,KACE,OAAOA,KAAKyyE,cAAc5+D,KACxB+B,EAAAA,WAAU,SAACsjB,GAAW,OAAA9nB,EAAKkhE,iBAAiBd,WAAWt4C,MACvDviB,EAAAA,yBAOJ07D,EAAAnyE,UAAAo5D,SAAA,WAAA,IAAAloD,EAAApR,KAKE,OAAOA,KAAKyyE,cAAc5+D,KACxB+B,EAAAA,WAAU,SAACsjB,GAAW,OAAA9nB,EAAKkhE,iBAAiBhZ,SAASpgC,MACrD23C,EAAAA,UAAS,SAAC3kE,GAAU,OAACA,EAAQ4kE,EAAAA,MAAM,GAAK/rD,EAAAA,SACxCpO,EAAAA,yBAII07D,EAAAnyE,UAAA2yE,YAAR,SAAoB35C,GAGbA,GzU/J0B,YyU+JhBA,EAQJl5B,KAAKszE,cACdtzE,KAAKuzE,eAAer6C,GAEpBl5B,KAAKsyE,iBAAiBlB,mBAAmB,CACvC59D,OAAQxT,KAAKwT,OACb0lB,OAAMA,EACNg4C,UAAW,CACThvD,QAAQ,KAdZliB,KAAKsyE,iBAAiBhB,SAAS,CAC7B99D,OAAQxT,KAAKwT,OACb0lB,OzUlK2B,UyUmK3Bg4C,UAAW,CACThvD,QAAQ,MAgBRmwD,EAAAnyE,UAAAyK,KAAR,SAAauuB,GzUvLsB,cyUwL7Bl5B,KAAKwT,OACPxT,KAAKsyE,iBAAiBhB,SAAS,CAC7B99D,OAAQxT,KAAKwT,OACb0lB,OAAQA,GzUxLmB,UyUyL3Bg4C,UAAW,CACThvD,QAAQ,KAGHgX,GzU7LoB,YyU6LVA,GACnBl5B,KAAKsyE,iBAAiBhB,SAAS,CAC7B99D,OAAQxT,KAAKwT,OACb0lB,OAAQA,EACRg4C,UAAW,CACThvD,QAAQ,MAMRmwD,EAAAnyE,UAAAszE,qBAAR,SAA6BC,GAA7B,IAAAriE,EAAApR,KACQ0zE,EAAeD,EAAY3/D,KAAI,SAAC2jB,GAAU,MAAA,CAC9C0B,YAAa1B,EAAMC,QAAQ4B,KAC3BF,SAAU3B,EAAM2B,aAElBp5B,KAAK2zE,iCAAiCz/D,WAAU,SAAC0/D,GAC/CxiE,EAAKkhE,iBAAiB75C,WACpBrnB,EAAKoC,OACL85D,GAAkBsG,EAAUvxE,MAAO+O,EAAKoC,QACxCkgE,OAKErB,EAAAnyE,UAAAyzE,+BAAR,WAAA,IAAAviE,EAAApR,KACE,OAAOA,KAAK6zE,kBACV7zE,KAAK2yE,cAAc9+D,KAAK/C,EAAAA,QAAO,WAAM,OAACM,EAAKkiE,oBAIvCjB,EAAAnyE,UAAA4zE,eAAR,SAAuBF,GAIrB,OACEpG,GAAaxtE,KAAKk5B,UACjB06C,EAAU9nE,SAAW8nE,EAAU9oE,SAAW8oE,EAAUtvE,QAIjD+tE,EAAAnyE,UAAA2zE,kBAAR,SACEE,GADF,IAAA3iE,EAAApR,KAMQ2yE,EAAgBoB,GAElB/zE,KAAK2yE,cAET,OAAOA,EAAc9+D,KACnB/C,EAAAA,QAAO,SAAC8iE,GAAc,OAACA,EAAU9nE,WAEjCgF,EAAAA,QAAO,SAAC8iE,GAAc,OAACxiE,EAAK0iE,eAAeF,MAC3C3/D,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAACg+D,GAQT,OALExiE,EAAK8hE,QAAQU,EAAUvxE,QzU3PI,cyU4P3B+O,EAAKoC,QAELpC,EAAKzG,UAAKoB,GAEL4mE,KAET7hE,EAAAA,QAAO,SAAC8iE,GAAc,OAACA,EAAU9nE,WAEjCgF,EAAAA,QACE,SAAC8iE,GACC,MzUtQ2B,cyUsQ3BxiE,EAAKoC,QACLogE,EAAU9oE,SACV8oE,EAAUtvE,SAEd2P,EAAAA,KAAK,GACL2B,EAAAA,WAAU,SAACg+D,GAST,OARIxiE,EAAK8hE,QAAQU,EAAUvxE,QACzB+O,EAAKkhE,iBAAiB95C,WAAW,CAC/BhlB,OAAQpC,EAAKoC,OACb09D,UAAW,CACThvD,QAAQ,KAIPywD,KAET7hE,EAAAA,QAAO,SAAC8iE,GAAc,OAACA,EAAU9nE,WACjCgF,EAAAA,QAAO,SAAC8iE,GAAc,OAAAA,EAAU9oE,SAAW8oE,EAAUtvE,SAErDwM,EAAAA,QAAO,SAAC8iE,GAAc,OAACxiE,EAAK0iE,eAAeF,MAC3C9iE,EAAAA,QAAO,SAAC8iE,GAAc,OAACxiE,EAAK8hE,QAAQU,EAAUvxE,UAC9C4R,EAAAA,KAAK,KAUTo+D,EAAAnyE,UAAAwxE,SAAA,SAASv4C,EAAqBC,GAA9B,IAAAhoB,EAAApR,KACEA,KAAK6zE,oBAAoB3/D,WAAU,SAAC0/D,GAClCxiE,EAAKkhE,iBAAiBZ,SACpBtgE,EAAKoC,OACL85D,GAAkBsG,EAAUvxE,MAAO+O,EAAKoC,QACxC2lB,EACAC,OAUNi5C,EAAAnyE,UAAA0xE,YAAA,SAAYn6C,GACVz3B,KAAKsyE,iBAAiBV,YACpB5xE,KAAKwT,OACLxT,KAAKk5B,OACLzB,EAAMgC,cAUV44C,EAAAnyE,UAAA4xE,YAAA,SAAYr4C,EAAqBL,GAC/Bp5B,KAAKsyE,iBAAiBR,YACpB9xE,KAAKwT,OACLxT,KAAKk5B,OACLO,EACAL,IASJi5C,EAAAnyE,UAAA8xE,SAAA,SAAS74C,GAAT,IAAA/nB,EAAApR,KACE,OAAOA,KAAKyyE,cAAc5+D,KACxB+B,EAAAA,WAAU,SAACsjB,GACT,OAAA9nB,EAAKkhE,iBAAiBN,SAAS94C,EAAQC,MAEzCxiB,EAAAA,yBASJ07D,EAAAnyE,UAAA04B,SAAA,SAAS2B,GACPv6B,KAAKsyE,iBAAiBJ,YAAYlyE,KAAKk5B,OAAQl5B,KAAKwT,OAAQ+mB,IAM9D83C,EAAAnyE,UAAA8zE,gBAAA,WACE,OAAOh0E,KAAKgiB,YAAYnO,KAAKC,EAAAA,KAAI,SAACykB,GAAS,OAAAA,EAAK8a,UAMlDg/B,EAAAnyE,UAAAozE,YAAA,WACE,OACEtzE,KAAKmzE,WzU9WsB,UyU+W1BnzE,KAAKmzE,SAASvpD,MACb5pB,KAAKi0E,QAAQj0E,KAAKmzE,SAAStwC,IAAIxzB,MAAM,KAAK8I,MAAM,GAAGqwB,KAAK,QAS9D6pC,EAAAnyE,UAAAu4B,WAAA,SAAWg7C,GAAX,IAAAriE,EAAApR,KACEyzE,EAAY1vD,SAAQ,SAAC0T,GACnBrmB,EAAKsgE,SAASj6C,EAAMC,QAAQ4B,KAAM7B,EAAM2B,cAIpCi5C,EAAAnyE,UAAA+zE,QAAR,SAAgBC,GACd,QAAIA,KACKA,EAAIz7B,MAAM6zB,KAUb+F,EAAAnyE,UAAAqzE,eAAR,SAAuBr6C,GACrB,IAAIu6C,EACJzzE,KAAKwxE,aACF39D,KAAKI,EAAAA,KAAK,IACVC,WAAU,SAACsjB,GACVi8C,EAAcj8C,KAGlBx3B,KAAKsyE,iBAAiBz5C,WAAWK,EzUpZA,ayUsZjCl5B,KAAKwzE,qBAAqBC,IAGpBpB,EAAAnyE,UAAAgzE,QAAR,SAAgB36C,GACd,OACGA,GAAyB,iBAATA,GAAkD,IAA7B/4B,OAAOuN,KAAKwrB,GAAM53B,QAIpD0xE,EAAAnyE,UAAA0yE,eAAR,SAAuBp/D,GACrB,OACExT,KAAKwyE,iBAAmBh/D,GACxBxT,KAAKwyE,iBAAmBxyE,KAAKuyE,yEA5Wdj9D,EAAAA,aACMjC,UACKk9D,MA1BnB8B,EAAiBvxE,EAAA,CAD7ByU,EAAAA,cACY88D,MCnBb,SAAgB8B,GACdC,GAEA,OAAO,SAACrvE,GACN,OAAAqvE,EAASvgE,KAAK6C,EAAAA,eAAU3K,GAAYsoE,EAAAA,YAAYtvE,uBCPlD,SAAAuvE,EAAsBjlC,GAAArvC,KAAAqvC,QAAAA,SAEfilC,EAAAp0E,UAAAspB,IAAP,SACEhW,EACA0lB,EACAC,EACAC,GAEA,OAAOp5B,KAAKqvC,QAAQ7lB,IAAIhW,EAAQ0lB,EAAQC,EAAaC,IAGhDk7C,EAAAp0E,UAAAs5B,OAAP,SACEhmB,EACA0lB,EACAO,EACAF,EACAG,GAEA,OAAO15B,KAAKqvC,QAAQ7V,OAAOhmB,EAAQ0lB,EAAQO,EAAaF,EAAKG,IAGxD46C,EAAAp0E,UAAA05B,OAAP,SACEpmB,EACA0lB,EACAO,GAEA,OAAOz5B,KAAKqvC,QAAQzV,OAAOpmB,EAAQ0lB,EAAQO,6CA1BduB,uHADpBs5C,EAAkBxzE,EAAA,CAH9ByU,EAAAA,WAAW,CACVC,WAAY,UAED8+D,oBC8HX,SAAAC,EACUrqD,EACAsqD,GAFV,IAAApjE,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw0E,mBAAAA,EA3HFx0E,KAAAy0E,eAAiBz0E,KAAKkqB,SAASrW,KACrCwW,EAAAA,OACEqqD,GACA9T,KAKJ5gE,KAAA20E,UAII30E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OTnB0B,0BSoB1BvW,EAAAA,KAAI,SAAC3H,GAAqC,OAAAA,EAAOR,WACjD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAOyF,EAAKojE,mBACThrD,IACC7d,EAAQ6H,OACR7H,EAAQutB,OACRvtB,EAAQwtB,YACRxtB,EAAQytB,UAETvlB,KACCC,EAAAA,KACE,SAAC8gE,GACC,OAAA,IAAIC,GAA+Bz0E,EAAAA,EAAA,GAC9BuL,GACCipE,OAGVn3D,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIC,GAA4B30E,EAAAA,EAAA,GAC3BuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAIitE,GAAqB,CACvBr4C,OAAQvtB,EAAQutB,OAChB1lB,OAAQ7H,EAAQ6H,kBAM5B2gE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAg1E,aAIIh1E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OTzD6B,6BS0D7BvW,EAAAA,KAAI,SAAC3H,GAAwC,OAAAA,EAAOR,WACpD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAyF,EAAKojE,mBACF56C,OAAOjuB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQ8tB,aAC/C5lB,KACCC,EAAAA,KAAI,WACF,OAAO,IAAImhE,GAAkC70E,EAAA,GACxCuL,OAGP8R,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAII,GAA+B90E,EAAAA,EAAA,GAC9BuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAIitE,GAAqB,CACvBr4C,OAAQvtB,EAAQutB,OAChB1lB,OAAQ7H,EAAQ6H,kBAM5B2gE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAm1E,aAIIn1E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OTvF6B,6BSwF7BvW,EAAAA,KAAI,SAAC3H,GAAwC,OAAAA,EAAOR,WACpD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAyF,EAAKojE,mBACFh7C,OACC7tB,EAAQ6H,OACR7H,EAAQutB,OACRvtB,EAAQ8tB,YACR9tB,EAAQytB,UAETvlB,KACCC,EAAAA,KAAI,WACF,OAAO,IAAIshE,GAAkCh1E,EAAA,GACxCuL,OAGP8R,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIO,GAA+Bj1E,EAAAA,EAAA,GAC9BuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAIitE,GAAqB,CACvBr4C,OAAQvtB,EAAQutB,OAChB1lB,OAAQ7H,EAAQ6H,kBAM5B2gE,GAAWn0E,KAAKy0E,iBAOpB,gDAHsBhqD,EAAAA,eACU6pD,MAnH9BxzE,EAAA,CADC4pB,EAAAA,0CA0CD5pB,EAAA,CADC4pB,EAAAA,6CAmCD5pB,EAAA,CADC4pB,EAAAA,6CAnFU6pD,EAAgBzzE,EAAA,CAD5ByU,EAAAA,cACYg/D,oBCJX,SAAAe,EAAsBjmC,GAAArvC,KAAAqvC,QAAAA,SAEfimC,EAAAp1E,UAAAspB,IAAP,SACEhW,EACA0lB,EACAe,GAEA,OAAOj6B,KAAKqvC,QAAQ7lB,IAAIhW,EAAQ0lB,EAAQe,IAGnCq7C,EAAAp1E,UAAA05B,OAAP,SACEpmB,EACA0lB,EACAe,GAEA,OAAOj6B,KAAKqvC,QAAQzV,OAAOpmB,EAAQ0lB,EAAQe,6CAfdgB,uHADpBq6C,EAAoBx0E,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAED8/D,oBCKX,SAAAC,EACUrrD,EACAsrD,EACAC,GAHV,IAAArkE,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1E,qBAAAA,EACAx1E,KAAAy1E,eAAAA,EAIVz1E,KAAA01E,gBAII11E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOsrD,IACP7hE,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKokE,qBACThsD,IAAI7d,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQsuB,WAC5CpmB,KACCC,EAAAA,KAAI,WAMF,OALA1C,EAAKwkE,kBACH,8BACAjqE,EAAQsuB,UACR2pC,EAAAA,kBAAkBqC,uBAEb,IAAI4P,GAAiCz1E,EAAA,GACvCuL,OAGP8R,EAAAA,YAAW,SAACnZ,SAWV,OAVgB,QAAhBY,EAAIZ,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAY,OAAA,EAAAA,EAAE+Y,SAChB3Z,EAAMA,MAAM2Z,OAAO8F,SAAQ,SAAC+xD,GACtBA,EAAInsD,SACNvY,EAAKqkE,eAAejsD,IAClBssD,EAAInsD,QACJi6C,EAAAA,kBAAkB4B,mBAKnBsP,EAAAA,KAAK,CACV,IAAIiB,GAA8B31E,EAAAA,EAAA,GAC7BuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAI0xE,GAAmCrqE,EAAQutB,QAC/C,IAAIq4C,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,mBAS9Bl5B,KAAAi2E,mBAEIj2E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OVpD+B,sCUqD/BvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKokE,qBACT57C,OAAOjuB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQsuB,WAC/CpmB,KACCC,EAAAA,KAAI,WAMF,OALA1C,EAAKwkE,kBACH,+BACAjqE,EAAQsuB,UACR2pC,EAAAA,kBAAkByF,eAEb,IAAI6M,GAAqC,CAC9C1iE,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,OAChBe,UAAWtuB,EAAQsuB,eAGvBxc,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIqB,GAAkC,CACpC7xE,MAAOmlB,GAAsBnlB,GAC7B40B,OAAQvtB,EAAQutB,OAChB1lB,OAAQ7H,EAAQ6H,OAChBymB,UAAWtuB,EAAQsuB,YAErB,IAAIs3C,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,mBAkBhC,OAVUq8C,EAAAr1E,UAAA01E,kBAAR,SACEhR,EACAhmD,EACAw3D,GAEAp2E,KAAKy1E,eAAejsD,IAClB,CAAEvoB,IAAK2jE,EAAM9qD,OAAQ,CAAEu8D,YAAaz3D,IACpCw3D,6CArGgB3rD,EAAAA,eACY6qD,UACN5Q,MAI1B5jE,EAAA,CADC4pB,EAAAA,gDAkDD5pB,EAAA,CADC4pB,EAAAA,mDAxDU6qD,EAAkBz0E,EAAA,CAD9ByU,EAAAA,cACYggE,MCDbe,GAEE,SAAmB3qE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KARmB,6BAY9BwsE,GAEE,SAAmB5qE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAZwB,kCAgBnCysE,GAEE,SAAmB7qE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAhB2B,qCAoBtC0sE,GAEE,WADSz2E,KAAA+J,KAlBT,iDCDF2sE,GAEE,WADS12E,KAAA+J,KALoB,8BAS/B4sE,GAEE,SAAmBhrE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KATyB,6BAapC6sE,GAEE,SAAmBjrE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAb4B,gCCC1B8sE,GAAmB,8BCgFnBC,GAAc,yBAgB3BC,GAEE,SACSprE,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KAlEyB,mCAwEpCitE,GAEE,SAAmBrrE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAxE8B,wCA4EzCktE,GAEE,SAAmBtrE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA3ET,2CA+EFmtE,GAAA,SAAA7vE,GAEE,SAAA6vE,EACSvrE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,K5I1H2B,U2IMgB,uBCoHYA,YAFhDoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA9EyB,oCAoFpC,OAPwCjK,EAAAo3E,EAAA7vE,GAOxC6vE,EAPA,CAAwCnvB,IASxCovB,GAAA,SAAA9vE,GAEE,SAAA8vE,EAAmBxrE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5IjI2B,U2IMgB,qBC2Ha2L,IAAQ3L,YAD/CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtF8B,yCA0FzC,OAL4CjK,EAAAq3E,EAAA9vE,GAK5C8vE,EALA,CAA4ClvB,IAO5CmvB,GAAA,SAAA/vE,GAEE,SAAA+vE,EAAmBzrE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5IxI2B,U2IMgB,uBCkIYA,YADtCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3FT,4CA+FF,OAL+CjK,EAAAs3E,EAAA/vE,GAK/C+vE,EALA,CAA+CjvB,IAO/CkvB,GAAA,SAAAhwE,GAEE,SAAAgwE,IAAA,IAAAjmE,EACE/J,EAAAzG,KAAAZ,K5I/I2B,U2IMgB,uBCyIYA,YAFhDoR,EAAArH,KAhGT,kDAoGF,OALoDjK,EAAAu3E,EAAAhwE,GAKpDgwE,EALA,CAAoDhvB,IAOpDivB,GAAA,SAAAjwE,GAEE,SAAAiwE,EAAmB3rE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5ItJ2B,U2IS7B,6BC6IgEA,YAD7CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KApGT,6CAwGF,OALgDjK,EAAAw3E,EAAAjwE,GAKhDiwE,EALA,CAAgDvvB,IAOhDwvB,GAAA,SAAAlwE,GAEE,SAAAkwE,EAAmB5rE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5I7J2B,U2IS7B,6BCoJgEA,YAD7CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAzGT,kDA6GF,OALoDjK,EAAAy3E,EAAAlwE,GAKpDkwE,EALA,CAAoDtvB,IAOpDuvB,GAAA,SAAAnwE,GAEE,SAAAmwE,EAAmB7rE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5IpK2B,U2IS7B,6BC2JgEA,YAD7CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA9GT,qDAkHF,OALuDjK,EAAA03E,EAAAnwE,GAKvDmwE,EALA,CAAuDrvB,IAOvDsvB,GAAA,SAAApwE,GAEE,SAAAowE,IAAA,IAAArmE,EACE/J,EAAAzG,KAAAZ,K5I3K2B,U2IS7B,6BCkKgEA,YAFvDoR,EAAArH,KApGT,0DAwGF,OAL4DjK,EAAA23E,EAAApwE,GAK5DowE,EALA,CAA4DpvB,IAO5DqvB,GAAA,SAAArwE,GAEE,SAAAqwE,EACS/rE,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,K5IpL2B,U2IOa,oBC6KYA,YAF7CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAxHsB,iCA8HjC,OAPqCjK,EAAA43E,EAAArwE,GAOrCqwE,EAPA,CAAqC3vB,IASrC4vB,GAAA,SAAAtwE,GAEE,SAAAswE,EAAmBhsE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5I3L2B,U2IOa,kBCoLa2L,IAAQ3L,YAD5CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAhI2B,sCAoItC,OALyCjK,EAAA63E,EAAAtwE,GAKzCswE,EALA,CAAyC1vB,IAOzC2vB,GAAA,SAAAvwE,GAEE,SAAAuwE,EAAmBjsE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5IlM2B,U2IOa,oBC2LYA,YADnCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtI8B,yCA0IzC,OAL4CjK,EAAA83E,EAAAvwE,GAK5CuwE,EALA,CAA4CzvB,IAO5C0vB,GAAA,SAAAxwE,GAEE,SAAAwwE,IAAA,IAAAzmE,EACE/J,EAAAzG,KAAAZ,K5IzM2B,U2IOa,oBCkMYA,YAF7CoR,EAAArH,KA3IT,+CA+IF,OALiDjK,EAAA+3E,EAAAxwE,GAKjDwwE,EALA,CAAiDxvB,IAOjDyvB,GAAA,SAAAzwE,GAEE,SAAAywE,EACSnsE,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,K5ItN2B,U2IUe,sBC4MYA,YAN/CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAvI2B,sCAiJtC,OAX0CjK,EAAAg4E,EAAAzwE,GAW1CywE,EAXA,CAA0C/vB,IAa1CgwB,GAAA,SAAA1wE,GAEE,SAAA0wE,EAAmBpsE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5I7N2B,U2IUe,sBCmNYA,YADrCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlJT,2CAsJF,OAL8CjK,EAAAi4E,EAAA1wE,GAK9C0wE,EALA,CAA8C9vB,IAO9C+vB,GAEE,SAAmBrsE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAvJT,6CA2JFkuE,GAAA,SAAA5wE,GAEE,SAAA4wE,IAAA,IAAA7mE,EACE/J,EAAAzG,KAAAZ,K5IzO2B,U2IUe,sBC+NYA,YAF/CoR,EAAArH,KArI4B,uCAyIvC,OAL2CjK,EAAAm4E,EAAA5wE,GAK3C4wE,EALA,CAA2C9vB,IAO3C+vB,GAAA,SAAA7wE,GAEE,SAAA6wE,EACSvsE,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,K5ItP2B,U2IUe,sBC4OYA,YAN/CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAjKwB,mCA2KnC,OAXuCjK,EAAAo4E,EAAA7wE,GAWvC6wE,EAXA,CAAuCnwB,IAavCowB,GAAA,SAAA9wE,GAEE,SAAA8wE,EAAmBxsE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5I7P2B,U2IUe,oBCmPa2L,IAAQ3L,YAD9CoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA7K6B,wCAiLxC,OAL2CjK,EAAAq4E,EAAA9wE,GAK3C8wE,EALA,CAA2ClwB,IAO3CmwB,GAAA,SAAA/wE,GAEE,SAAA+wE,EAAmBzsE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,K5IpQ2B,U2IUe,sBC0PYA,YADrCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAlLT,2CAsLF,OAL8CjK,EAAAs4E,EAAA/wE,GAK9C+wE,EALA,CAA8CjwB,IAO9CkwB,GAAA,SAAAhxE,GAEE,SAAAgxE,IAAA,IAAAjnE,EACE/J,EAAAzG,KAAAZ,K5I3Q2B,U2IUe,sBCiQYA,YAF/CoR,EAAArH,KAvLT,iDA2LF,OALmDjK,EAAAu4E,EAAAhxE,GAKnDgxE,EALA,CAAmDhwB,IAOnDiwB,GAEE,SAAmB3sE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAAO+sE,IAIlByB,GAEE,SAAmB5sE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAhMqB,+BAoMhCyuE,GAEE,SAAmB7sE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KApMwB,kCAwMnC0uE,GAAA,WACWz4E,KAAA+J,KAzOT,6CA4OF2uE,GAEE,SAAmB/sE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA3MwB,sCA+MnC4uE,GAAA,WACW34E,KAAA+J,KA/MwB,kCAkNnC6uE,GAAA,SAAAvxE,GAEE,SAAAuxE,EAAmBjtE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM62E,KAAiB72E,YADNoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjN0B,qCAqNrC,OALyCjK,EAAA84E,EAAAvxE,GAKzCuxE,EALA,CAAyCvnE,GAOzCwnE,GAAA,SAAAxxE,GAEE,SAAAwxE,EAAmBltE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM62E,GAAkBlrE,IAAQ3L,YADfoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAtNT,0CA0NF,OAL6CjK,EAAA+4E,EAAAxxE,GAK7CwxE,EALA,CAA6CtnE,GAO7CunE,GAAA,SAAAzxE,GAEE,SAAAyxE,EAAmBntE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM62E,KAAiB72E,YADNoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA3NT,6CA+NF,OALgDjK,EAAAg5E,EAAAzxE,GAKhDyxE,EALA,CAAgDrnE,IAOhDsnE,GAAA,WACW/4E,KAAA+J,KAhO8B,+BAmOzCivE,GAEE,SAAmBrtE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA/ST,8CAmTFkvE,GAEE,WADSj5E,KAAA+J,KAlTT,sDAsTFmvE,GAEE,SAAmBvtE,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KArTT,mDAyTFovE,GAAA,SAAA9xE,GAEE,SAAA8xE,EAAmBxtE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAvTT,4CA2TF,OAL+CjK,EAAAq5E,EAAA9xE,GAK/C8xE,EALA,CAA+C/qE,IAO/CgrE,GAAA,SAAA/xE,GAEE,SAAA+xE,EAAmBztE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA5TT,oDAgUF,OALsDjK,EAAAs5E,EAAA/xE,GAKtD+xE,EALA,CAAsD/qE,IAOtDgrE,GAAA,SAAAhyE,GAEE,SAAAgyE,EAAmB1tE,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAMusE,GAAiB5gE,EAAQutB,SAAOl5B,YADrBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjUT,iDAqUF,OALmDjK,EAAAu5E,EAAAhyE,GAKnDgyE,EALA,CAAmDhrE,oDHhWrB,gDACK,wDACG,uEAGpC,iKCL6B,kDACK,oDACG,6HEmBrC,qFAEA,0FAEA,+EAGA,+EAEA,oFAEA,oEAEkC,4DACK,oEAEvC,+DAEkC,4DACK,oEAEvC,6EAEA,8EAGA,8EAEA,sFAEA,kFAEA,8DAE+B,sDACK,8DACG,uEAEvC,0EAGA,4EAEA,oFAEA,6FAEA,+EAEoC,gEAEpC,wEAEA,gEAEiC,0DACK,kEAEtC,2EAEA,+EAG8B,kDACG,qDAEA,yDACA,uDAEE,8DAEnC,sEAEA,qEAEuC,sDACF,+mCC3FrC,SAAAirE,EAAsBjqC,GAAArvC,KAAAqvC,QAAAA,SAEfiqC,EAAAp5E,UAAAi6B,QAAP,SAAe3mB,GACb,OAAOxT,KAAKqvC,QAAQlV,QAAQ3mB,IAGvB8lE,EAAAp5E,UAAAyK,KAAP,SAAY6I,EAAgB0lB,GAC1B,OAAOl5B,KAAKqvC,QAAQ1kC,KAAK6I,EAAQ0lB,IAG5BogD,EAAAp5E,UAAAC,OAAP,SACEqT,EACA6mB,EACAC,GAEA,OAAOt6B,KAAKqvC,QAAQlvC,OAAOqT,EAAQ6mB,EAAWC,IAGzCg/C,EAAAp5E,UAAAsJ,OAAP,SAAcgK,EAAgB0lB,GAC5B,OAAOl5B,KAAKqvC,QAAQ7lC,OAAOgK,EAAQ0lB,IAG9BogD,EAAAp5E,UAAA04B,SAAP,SACEplB,EACA0lB,EACAqB,GAEA,OAAOv6B,KAAKqvC,QAAQzW,SAASplB,EAAQ0lB,EAAQqB,6CA3BhBQ,uHADpBu+C,EAAax4E,EAAA,CAHzByU,EAAAA,WAAW,CACVC,WAAY,UAED8jE,oBCiUX,SAAAC,EACUrvD,EACAsvD,EACAlmE,GAHV,IAAAlC,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw5E,cAAAA,EACAx5E,KAAAsT,MAAAA,EAhTFtT,KAAAy0E,eAAiBz0E,KAAKkqB,SAASrW,KACrCwW,EAAAA,OACEqqD,GACA9T,KAKJ5gE,KAAAy5E,UAIIz5E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OftBqB,oBeuBrBvW,EAAAA,KAAI,SAAC3H,GAAiC,OAAAA,EAAOR,WAC7C+tE,EAAAA,SAAQ,SAAC/tE,GAAY,OAAAA,EAAQutB,UAC7BnO,EAAAA,UAAS,SAAC4uD,GACR,OAAAA,EAAO9lE,KACL+B,EAAAA,WAAU,SAACjK,GACT,OAAOiL,EAAAA,GAAGjL,GAASkI,KACjBse,EAAAA,eACE/gB,EAAKkC,MAAMO,KACTM,EAAAA,OACE24D,GAA0CnhE,EAAQutB,eAM5DpoB,EAAAA,QAAO,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAACC,EAAA,GAA4B,OAAzBA,EAAA,MACZ2O,EAAAA,KAAI,SAAC5O,GAAc,OAAdd,EAAAc,EAAA,GAAC,MACN0Q,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKooE,cAAc7uE,KAAKgB,EAAQ6H,OAAQ7H,EAAQutB,QAAQrlB,KAC7DkX,EAAAA,UAAS,SAACwN,GACR,IAAIs/B,EAAU,GAyBd,OAxBIt/B,GACFs/B,EAAQ7zD,KACN,IAAI41E,GAA2Bx5E,EAAAA,EAAA,GAC1BuL,GAAO,CACV4sB,KAAIA,EACJW,OAAQo0C,GAAkB/0C,EAAM5sB,EAAQ6H,YpVhEzB,YoVoEf7H,EAAQutB,QAGV2+B,EAAQ7zD,KACN,IAAI61E,GAAuB,CAAE3gD,OpVxEd,coV4EnB2+B,EAAU,CACR,IAAIiiB,GAAwB15E,EAAAA,EAAA,GACvBuL,GAAO,CACVrH,MAAO,OAINuzD,KAETp6C,EAAAA,YAAW,SAACnZ,SACV,GAAgB,QAAhBY,EAAIZ,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAY,OAAA,EAAAA,EAAE+Y,OAAQ,CAIxB,GAH4B3Z,EAAMA,MAAM2Z,OAAOnN,QAC7C,SAACglE,GAAQ,MAAe,YAAfA,EAAIjsD,UAESlpB,OAAS,EAE/B,OAAOiW,EAAAA,GAAG,IAAI26D,GAAoBnxE,EAAA,GAAMuL,KAM1C,GAH2BrH,EAAMA,MAAM2Z,OAAOnN,QAC5C,SAACglE,GAAQ,MAAe,aAAfA,EAAIjsD,QAAyB,0BAEjBlpB,OAAS,EAE9B,OAAOiW,EAAAA,GACL,IAAIijE,GAAuB,CAAE3gD,OAAQvtB,EAAQutB,UAInD,OAAOtiB,EAAAA,GACL,IAAIkjE,GAAwB15E,EAAAA,EAAA,GACvBuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,kBAQ3C6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAA+5E,YAKI/5E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAO2vD,IACPlmE,EAAAA,KAAI,SAAC3H,GAAmC,OAAAA,EAAOR,WAC/Cof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKooE,cACTr5E,OAAOwL,EAAQ6H,OAAQ7H,EAAQ0uB,UAAW1uB,EAAQ2uB,iBAClDzmB,KACC+B,EAAAA,WAAU,SAAC2iB,GACT,IAAM0hD,EAAqB,GAY3B,OAXItuE,EAAQ0uB,WACV4/C,EAAmBj2E,KACjB,IAAIk2E,GAA6B,CAC/BhJ,UAAWvlE,EAAQulE,UACnB19D,OAAQ7H,EAAQ6H,OAChBo7D,WAAYjjE,EAAQijE,WACpB11C,OAAQo0C,GAAkB/0C,EAAM5sB,EAAQ6H,QACxC6mB,UAAW1uB,EAAQ0uB,aAIzB91B,EAAA,CACE,IAAI41E,GAA6B/5E,EAAAA,EAAA,GAC5BuL,GAAO,CACV4sB,KAAIA,EACJW,OAAQo0C,GAAkB/0C,EAAM5sB,EAAQ6H,WAE1C,IAAI4mE,GAAwB,CAC1B7hD,KAAIA,EACJq2C,WAAYjjE,EAAQijE,cAEnBqL,MAGPx8D,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIyjE,GAA0Bj6E,EAAAA,EAAA,GACzBuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,cAMzC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAs6E,WAAiDt6E,KAAKkqB,SAASrW,KAC7DwW,EAAAA,OftJsB,qBeuJtBvW,EAAAA,KAAI,SAAC3H,GAAkC,OAAAA,EAAOR,WAC9Cof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKooE,cAAc7uE,KAAKgB,EAAQ6H,OpVhLV,WoVgLuCK,KAClEkX,EAAAA,UAAS,SAACwvD,GACR,MAAO,CACL,IAAIpJ,GAAuB,CACzB39D,OAAQ7H,EAAQ6H,OAChB6mB,UAAW1uB,EAAQutB,OACnBoB,gBAAiBigD,EAAcA,EAAY/mC,UAAOznC,EAClDmlE,UAAWvlE,EAAQulE,UACnBtC,WAAYjjE,EAAQijE,qBAM9BuF,GAAWn0E,KAAKy0E,iBAKlBz0E,KAAAw6E,SAEIx6E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OhB1LF,2CgB2LEvW,EAAAA,KAAI,SAAC3H,GAA8C,OAAAA,EAAOR,WAC1D2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAmpE,EAAAA,KAAK,CACH,IAAIkB,GAAmCrqE,EAAQutB,QAC/C,IAAIq4C,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,eAQxBl5B,KAAAy6E,yBAEIz6E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OjBpNkC,iCAGG,oCAIA,oCCQvC,6CcUA,mDEkMEvW,EAAAA,KACE,SACE3H,GAMG,OAAAA,EAAOR,WAEdmI,EAAAA,KACE,SAACnI,GACC,OAAA,IAAI4lE,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,aAMxBl5B,KAAA06E,qCAEI16E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OACEu2C,GACA8T,IAEF3pD,EAAAA,UAAS,WACP,MAAO,CAAC,IAAI4vD,QAKhB36E,KAAA46E,UAII56E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OflP6B,4BemP7BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKooE,cACF5gD,SAASjtB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQ4uB,OACjD1mB,KACCkX,EAAAA,UAAS,WACP,MAAO,CACL,IAAI8vD,GAAiCz6E,EAAA,GAChCuL,IAEL,IAAI4lE,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,aAItBzb,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIgG,GAA8B16E,EAAAA,EAAA,GAC7BuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAIitE,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,kBAM5Bi7C,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAA+6E,YAII/6E,KAAKkqB,SAASrW,KAChBwW,EAAAA,Of/QuB,sBegRvBvW,EAAAA,KAAI,SAAC3H,GAAmC,OAAAA,EAAOR,WAC/Cof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKooE,cAAchwE,OAAOmC,EAAQ6H,OAAQ7H,EAAQutB,QAAQrlB,KACxDC,EAAAA,KAAI,WACF,OAAO,IAAIknE,GAA6B56E,EAAA,GAAMuL,OAEhD8R,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAImG,GAA0B76E,EAAAA,EAAA,GACzBuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAI/B,IAAIitE,GAAoBnxE,EAAA,GACnBuL,cAajB,gDAJsB8e,EAAAA,eACK6uD,UACRhkE,EAAAA,SAxSjBxU,EAAA,CADC4pB,EAAAA,0CAyFD5pB,EAAA,CADC4pB,EAAAA,4CAqDD5pB,EAAA,CADC4pB,EAAAA,2CAwBD5pB,EAAA,CADC4pB,EAAAA,yCAmBD5pB,EAAA,CADC4pB,EAAAA,yDA+BD5pB,EAAA,CADC4pB,EAAAA,qEAcD5pB,EAAA,CADC4pB,EAAAA,0CAyCD5pB,EAAA,CADC4pB,EAAAA,4CAhRU6uD,EAAWz4E,EAAA,CADvByU,EAAAA,cACYgkE,oBClBX,SAAA2B,EAAsB7rC,GAAArvC,KAAAqvC,QAAAA,SAEf6rC,EAAAh7E,UAAA64B,SAAP,SACEvlB,EACA0lB,EACA0B,EACAC,GAEA,OAAO76B,KAAKqvC,QAAQtW,SAClBvlB,EACA0lB,EACA0B,EACAC,6CAZ2BK,uHADpBggD,EAAiBp6E,EAAA,CAH7ByU,EAAAA,WAAW,CACVC,WAAY,UAED0lE,oBC6IX,SAAAC,EACUjxD,EACAsvD,EACA4B,EACA1lE,EACApC,GALV,IAAAlC,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw5E,cAAAA,EACAx5E,KAAAo7E,kBAAAA,EACAp7E,KAAA0V,YAAAA,EACA1V,KAAAsT,MAAAA,EAlIVtT,KAAAq7E,gBAEIr7E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OfjB4B,gCekB5BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKooE,cAAcr5E,OAAOwL,EAAQ6H,QAAQK,KAC/C+B,EAAAA,WAAU,SAAC2iB,GACT,OAAOnnB,EAAKgqE,kBACTriD,SACCptB,EAAQ6H,OACR+kB,EAAKe,KACL3tB,EAAQie,KACRje,EAAQ2vE,aAETznE,KACC+B,EAAAA,WAAU,SAAC2lE,GAAmB,MAAA,CAC5B,IAAIC,GAAkC,CACpCjjD,KAAMgjD,EAAeE,cACrBjoE,OAAQ7H,EAAQ6H,aAGpBiK,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAI4G,GAA+B,CACjCxiD,OAAQX,EAAKe,KACbh1B,MAAOmlB,GAAsBnlB,mBAW/CtE,KAAA27E,cAKI37E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OfrD0B,8BesD1BvW,EAAAA,KAAI,SAAC3H,GAAqC,OAAAA,EAAOR,WACjD2rD,EAAAA,WAAU,SAAC3rD,GACD,IAAA6H,EAAA7H,EAAA6H,OAAQi3D,EAAA9+D,EAAA8+D,WAAYmE,EAAAjjE,EAAAijE,WAC5B,OAAOx9D,EAAKooE,cAAcr/C,QAAQ3mB,GAAQK,KACxC+B,EAAAA,WAAU,SAAC0iB,GACT,GAAIA,EAAO,CACT,IAAM60C,EAAW70C,EAAMje,MACrB,SAACke,GAAS,OAAAA,EAAK3O,OAAS2jD,GAAgB9C,MAE1C,OAAI51D,QAAQs4D,GACH,CACL,IAAIyO,GAAgC,CAClCrjD,KAAM40C,EACN35D,OAAMA,EACNo7D,WAAUA,EACVnE,WAAUA,EACVvxC,OAAQo0C,GAAkBH,EAAU35D,KAEtC,IAAIqmE,GAAuB,CAAE3gD,OAAQ01C,KAGhC,CACL,IAAIiN,GAA2B,CAC7BroE,OAAMA,EACNoW,KAAM2jD,GAAgB9C,UAMhChtD,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIgH,GAA6B,CAC/BtoE,OAAMA,EACN0lB,OAAQ01C,EACRnE,WAAUA,EACVnmE,MAAOmlB,GAAsBnlB,eASzCtE,KAAA+7E,eAEI/7E,KAAKkqB,SAASrW,KAChBwW,EAAAA,OACEu2C,GACA8T,IAEFviD,EAAAA,eACEnyB,KAAK0V,YAAY9B,eACjB5T,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO6nE,MAEzBpmE,EAAAA,WAAU,SAAC1Q,OAAAC,EAAAf,EAAAc,EAAA,GAAGsO,EAAArO,EAAA,GAAQ82E,EAAA92E,EAAA,GACpB,OAAI0P,QAAQonE,GACH7qE,EAAKooE,cAAc7uE,KAAK6I,EAAQyoE,GAAYpoE,KACjD+B,EAAAA,WAAU,SAACu3D,GAAa,MAAA,CACtB,IAAIyO,GAAgC,CAClCrjD,KAAM40C,EACN35D,OAAMA,EACN0lB,OAAQo0C,GAAkBH,EAAU35D,SAGxCiK,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAIgH,GAA6B,CAC/BtoE,OAAMA,EACN0lB,OAAQ+iD,EACR33E,MAAOmlB,GAAsBnlB,WAMhCygB,EAAAA,UAWb,gDANsB0F,EAAAA,eACK6uD,UACI4B,UACN7nE,UACNiC,EAAAA,SAlIjBxU,EAAA,CADC4pB,EAAAA,gDAsCD5pB,EAAA,CADC4pB,EAAAA,8CAqDD5pB,EAAA,CADC4pB,EAAAA,+CA1FUywD,EAAer6E,EAAA,CAD3ByU,EAAAA,cACY4lE,MCfb,SAAgBe,GACdhwE,EACAC,aAEA,YAHA,IAAAD,IAAAA,EAJoC,IAO5BC,EAAOpC,MACb,IlBS6B,2BkBR7B,IlBI+B,6BkBF/B,KAAKiwE,GACH,OAA8B,QAA9B70E,EAAmB,QAAnBD,EAAIiH,MAAAA,OAAM,EAANA,EAAQR,eAAO,IAAAzG,OAAA,EAAAA,EAAEgsE,iBAAS,IAAA/rE,OAAA,EAAAA,EAAE+c,QACvB/V,EAAO5B,KAAKL,SAEZgC,EAEX,IjBN8B,4BiBO5B,OAAOC,EAAOR,QAChB,IlBSuB,qBkBRvB,IlBW+B,6BkBV7B,OAAkB,QAAdvG,EAAA+G,EAAOR,eAAO,IAAAvG,OAAA,EAAAA,EAAE8zB,UAAWhtB,EArBC,GAwBzBA,EACT,IjBZ4B,0BiBa1B,MA1BgC,GA4BpC,OAAOA,EAKT,SAAgBiwE,GACdjwE,EACAC,GAEA,YAHA,IAAAD,IAAAA,OAHsCH,GAM9BI,EAAOpC,MACb,IlBrB6B,2BkBsB7B,IlB1B+B,6BkB2B/B,IhBhCoC,uCgBiCpC,IhB9BkC,qCgB+BlC,IjBpCyB,uBiBqCvB,OAAOoC,EAAOR,QAAQ4sB,KAE1B,OAAOrsB,EAGT,SAAgBkwE,GACdlwE,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAhDkC,IAmD1BC,EAAOpC,MACb,IhB7CoC,uCgB8CpC,IhB3CkC,qCgB4ChC,OAAOoC,EAAO5B,KAAKL,SACrB,IjB3C4B,0BiB4C1B,MAxD8B,GA0DlC,OAAOgC,WCnDOmwE,GACdpwE,GAEA,OAAO,SAAUC,EAAOC,GAItB,OAHIA,EAAOpC,OAASyiB,KAClBtgB,OAAQH,GAEHE,EAAQC,EAAOC,IAI1B,IAAamwE,GAA4C,CAACD,IAE7CE,GAER,IAAIj3E,EAAAA,eAAiD,qBAE1D,SAAgBk3E,KACd,MAAO,CACLlkD,MAAOppB,GACLq9D,GACA4P,IAEFj6D,OAAQg6D,GACR/O,SAAUiP,IAId,IAAaK,GAAqC,CAChD72E,QAAS22E,GACTr2E,WAAYs2E,IC9BdE,GAAA,gBAOA,gBAUA,aCTAC,GAAA,WACE,SAAAA,EACYl4B,EACA9B,EACAi6B,GAFA58E,KAAAykD,eAAAA,EACAzkD,KAAA2iD,MAAAA,EACA3iD,KAAA48E,kBAAAA,EAEV58E,KAAKszC,kBAMGqpC,EAAAz8E,UAAAozC,SAAV,WACEtzC,KAAK68E,oBAMGF,EAAAz8E,UAAA28E,iBAAV,WACE78E,KAAK88E,eAAe,CAClB3wE,OvBlCwB,yBuBmCxBw2C,MAAO+5B,KAET18E,KAAK88E,eAAe,CAClB3wE,OvBrCgC,iCuBsChCw2C,MAAOo6B,KAET/8E,KAAK88E,eAAe,CAClB3wE,OvBxC6B,8BuByC7Bw2C,MAAOq6B,MAUDL,EAAAz8E,UAAA48E,eAAV,SAA4Bn4B,GAC1B,IAAMs4B,EAAej9E,KAAKk9E,UAAUv4B,EAAQx4C,QAAQ0H,KAClDse,EAAAA,eAAenyB,KAAK48E,kBAAkB3P,mBACtCn8D,EAAAA,QACE,SAAC5L,OAAAC,EAAAf,EAAAc,EAAA,GAACiH,EAAAhH,EAAA,GAAQ8tE,EAAA9tE,EAAA,GAAkB,OAAAgH,EAAOR,QAAgB,SAAMsnE,KAE3Dn/D,EAAAA,KAAI,SAAC5O,OAACiH,EAAD/H,EAAAc,EAAA,GAAC,GAAY,OAAAq/C,GAAWI,EAAQhC,MAAOx2C,EAAOR,aAGrD,OAAO3L,KAAK2iD,MAAMrP,SAASqR,EAAQhC,MAAOs6B,IAQlCN,EAAAz8E,UAAAg9E,UAAV,SACEC,GAEA,OAAOn9E,KAAKykD,eAAe5wC,KAAKwW,EAAAA,OAAMxpB,WAAA,EAAA0D,EAAI,GAAGC,OAAO24E,gDA1D1Bp4B,EAAAA,sBACT5B,UACYkvB,yKAJpBsK,EAAgB77E,EAAA,CAD5ByU,EAAAA,WAAW,CAAEC,WAAY,UACbmnE,GAAb,iBCfE,SAAAS,EAAYC,IACd,gDADiCV,MADpBS,EAAet8E,EAAA,CAD3BkG,EAAAA,SAAS,KACGo2E,oBCaX,SAAAE,EACYhqE,EACAoC,EACAknE,GAFA58E,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,EACA1V,KAAA48E,kBAAAA,EAkFd,OA/EEU,EAAAp9E,UAAAq9E,WAAA,SAAWtjD,EAAmBf,GAA9B,IAAA9nB,EAAApR,KACEA,KAAKw9E,qBAAqBtkD,GAAQhlB,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAACu4E,EAAAt4E,EAAA,GAAWu4E,EAAAv4E,EAAA,GACvD,OAAAiM,EAAKkC,MAAMI,SACT,IAAIiqE,GAA2B,CAC7BnqE,OAAQiqE,EACRvkD,OAAQwkD,EACRzjD,UAAWA,SAMnBqjD,EAAAp9E,UAAA09E,cAAA,SAAc3jD,EAAmBf,GAAjC,IAAA9nB,EAAApR,KACEA,KAAKw9E,qBAAqBtkD,GAAQhlB,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAACu4E,EAAAt4E,EAAA,GAAWu4E,EAAAv4E,EAAA,GACvD,OAAAiM,EAAKkC,MAAMI,SACT,IAAImqE,GAA8B,CAChCrqE,OAAQiqE,EACRvkD,OAAQwkD,EACRzjD,UAAWA,SAWnBqjD,EAAAp9E,UAAA49E,yBAAA,WACE,OAAO99E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,G5B3CyB,iB4BoDpCm3B,EAAAp9E,UAAA69E,2BAAA,WACE,OAAO/9E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G5BtDyB,iB4B+DpCo3B,EAAAp9E,UAAA89E,2BAAA,WACE,OAAOh+E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G5BjEyB,iB4B0EpCq3B,EAAAp9E,UAAA+9E,+BAAA,WACEj+E,KAAKsT,MAAMI,SAAS,IAAIwqE,KAGlBZ,EAAAp9E,UAAAs9E,qBAAR,SAA6BtkD,GAC3B,OAAIA,EACKl5B,KAAK0V,YAAY9B,eAAeC,KACrCI,EAAAA,KAAK,GACLH,EAAAA,KAAI,SAACN,GAAW,MAAA,CAACA,EAAQ0lB,OAGpBxE,EAAAA,cAAc,CACnB10B,KAAK0V,YAAY9B,eACjB5T,KAAK48E,kBAAkB3P,oBACtBp5D,KAAKI,EAAAA,KAAK,8CAjFEqB,EAAAA,aACMjC,UACMg/D,MAJpBiL,EAAkBx8E,EAAA,CAD9ByU,EAAAA,cACY+nE,oBCUX,SAAAa,EACY7qE,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZyoE,EAAAj+E,UAAA0J,IAAA,WAAA,IAAAwH,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOiqE,IACPjhE,EAAAA,KAAI,SAACsD,GACiC,IAAhCjhB,OAAOuN,KAAK0T,GAAS9f,QACvByQ,EAAKzG,YASbwzE,EAAAj+E,UAAAyK,KAAA,WAAA,IAAAyG,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,G7VhDF,c6ViD3BA,GACFpC,EAAKkC,MAAMI,SAAS,IAAI2qE,GAA4B7qE,QAU1D2qE,EAAAj+E,UAAAozC,SAAA,SAASgrC,GACPt+E,KAAKsT,MAAMI,SAAS,IAAI6qE,GAAyBD,KASnDH,EAAAj+E,UAAAqzC,cAAA,SAAcC,EAAc//B,GAC1BzT,KAAKsT,MAAMI,SAAS,IAAI8qE,GAA0B,CAAEhrC,KAAIA,EAAE//B,SAAQA,MAMpE0qE,EAAAj+E,UAAAu+E,6BAAA,WACE,OAAOz+E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GlJ5D2B,mBkJmEtCk4B,EAAAj+E,UAAAw+E,6BAAA,WACE,OAAO1+E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GlJrE2B,mBkJ4EtCi4B,EAAAj+E,UAAAy+E,2BAAA,WACE,OAAO3+E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GlJ9E2B,mBkJqFtCg4B,EAAAj+E,UAAA0+E,8BAAA,WACE,OAAO5+E,KAAKsT,MAAMI,SAAS,IAAImrE,KAMjCV,EAAAj+E,UAAA05B,OAAA,WAAA,IAAAxoB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SAAS,IAAIorE,GAAuBtrE,QAOnD2qE,EAAAj+E,UAAA6+E,2BAAA,WACE,OAAO/+E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GlJtGyB,iBkJ6GpCk4B,EAAAj+E,UAAA8+E,yBAAA,WACE,OAAOh/E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GlJ/GyB,iBkJsHpCg4B,EAAAj+E,UAAA++E,2BAAA,WACE,OAAOj/E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GlJxHyB,iBkJgIpCi4B,EAAAj+E,UAAAg/E,4BAAA,WACEl/E,KAAKsT,MAAMI,SAAS,IAAIyrE,KAM1BhB,EAAAj+E,UAAAk/E,UAAA,WACE,OAAOp/E,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOkrE,MAMhClB,EAAAj+E,UAAAg0C,WAAA,WACEl0C,KAAKsT,MAAMI,SAAS,IAAI4rE,KAM1BnB,EAAAj+E,UAAAq/E,gBAAA,WACE,OAAOv/E,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOqrE,MAOhCrB,EAAAj+E,UAAAu/E,sBAAA,SAAsBC,GAAtB,IAAAtuE,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIisE,GAA8B,CAChCC,SAAUpsE,EACVksE,YAAWA,SASnBvB,EAAAj+E,UAAA2/E,sCAAA,WACE,OAAO7/E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GlJ/KiC,wBkJsL5Ck4B,EAAAj+E,UAAA4/E,oCAAA,WACE,OAAO9/E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GlJxLiC,wBkJ+L5Cg4B,EAAAj+E,UAAA6/E,sCAAA,WACE,OAAO//E,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GlJjMiC,wBkJwM5Ci4B,EAAAj+E,UAAA8/E,0CAAA,WACEhgF,KAAKsT,MAAMI,SAAS,IAAIusE,KAQ1B9B,EAAAj+E,UAAAyzC,cAAA,SAAc3gC,EAAeS,GAC3BzT,KAAKsT,MAAMI,SAAS,IAAIwsE,GAA0B,CAAEltE,MAAKA,EAAES,SAAQA,MAMrE0qE,EAAAj+E,UAAAuzC,2BAAA,SAA2BC,GACzB1zC,KAAKsT,MAAMI,SACT,IAAIysE,GAAuCzsC,KAO/CyqC,EAAAj+E,UAAA2zC,YAAA,SAAYpgC,EAAkBk2C,GAA9B,IAAAv4C,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAI0sE,GAA8B,CAChCv9C,IAAKrvB,EACLC,SAAQA,EACRk2C,OAAMA,SASdw0B,EAAAj+E,UAAAmgF,4BAAA,WACE,OAAOrgF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GlJpP0B,kBkJ2PrCi4B,EAAAj+E,UAAAogF,0BAAA,WACE,OAAOtgF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GlJ7P0B,kBkJoQrCg4B,EAAAj+E,UAAAqgF,4BAAA,WACE,OAAOvgF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GlJtQ0B,kBkJ6QrCk4B,EAAAj+E,UAAAsgF,4BAAA,WACExgF,KAAKsT,MAAMI,SAAS,IAAI+sE,KAQ1BtC,EAAAj+E,UAAA8zC,eAAA,SAAeC,EAAqBL,GAApC,IAAAxiC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIgtE,GAA2B,CAC7BltE,OAAMA,EACNygC,YAAWA,EACXL,YAAWA,SASnBuqC,EAAAj+E,UAAAygF,+BAAA,WACE,OAAO3gF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GlJtS6B,qBkJ6SxCk4B,EAAAj+E,UAAA0gF,6BAAA,WACE,OAAO5gF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,GlJ/S6B,qBkJsTxCg4B,EAAAj+E,UAAA2gF,+BAAA,WACE,OAAO7gF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GlJxT6B,qBkJgUxCi4B,EAAAj+E,UAAA4gF,gCAAA,WACE9gF,KAAKsT,MAAMI,SAAS,IAAIqtE,8CAxTPzrE,EAAAA,aACMjC,8IAHd8qE,EAAWr9E,EAAA,CADvByU,EAAAA,WAAW,CAAEC,WAAY,UACb2oE,oBCUX,SAAA6C,EACY1tE,EACA2tE,EACAvrE,EACA48D,EACApvD,GALZ,IAAA9R,EAAApR,KACYA,KAAAsT,MAAAA,EACAtT,KAAAihF,YAAAA,EACAjhF,KAAA0V,YAAAA,EACA1V,KAAAsyE,iBAAAA,EACAtyE,KAAAkjB,gBAAAA,EApBJljB,KAAAkhF,QAAmC,IAAI/8B,EAAAA,qBAC7Cp4C,GAGe/L,KAAAuyE,+BACf,iCACMvyE,KAAAwyE,eAAiBxyE,KAAKuyE,+BAEtBvyE,KAAA2yE,cAAgB3yE,KAAKkhF,QAAQrtE,KACnC+B,EAAAA,WAAU,SAACsjB,GAET,OADA9nB,EAAK8nB,OAASA,EACP9nB,EAAKkhE,iBAAiB5B,cAAcx3C,OAW7CxE,EAAAA,cAAc,CACZ10B,KAAKihF,YAAYr3E,MACjB5J,KAAKkjB,gBAAgBlB,cACpB9N,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAACmuC,EAAAluC,EAAA,GAAMkd,EAAAld,EAAA,GACfkuC,GAAQA,EAAKo3B,YAAcpoD,GAC7BjR,EAAKq5D,WAAap3B,EAAKo3B,WACvBr5D,EAAK8vE,QAAQ3+E,KAAK,gBAAgB8f,EAAiBjR,EAAKq5D,aAC/Cp3B,IAASA,EAAKo3B,YACvBr5D,EAAK8vE,QAAQ3+E,UAAKwJ,MAItB/L,KAAK0V,YAAY9B,eAAeM,WAAU,SAACV,GACzCpC,EAAKoC,OAASA,EAEVpC,EAAKwhE,eAAep/D,IACtBpC,EAAKzG,OAGPyG,EAAKohE,eAAiBh/D,KAGxBxT,KAAKmhF,eAAiBnhF,KAAK2yE,cAAc9+D,KACvCC,EAAAA,KAAI,SAACk/D,GAKH,MAAO,CACLz6C,KAAMy6C,EAAW3wE,MACjByJ,QAASknE,EAAWlnE,QACpB4mD,QACGsgB,EAAW1uE,OAAS0uE,EAAWloE,WAAakoE,EAAWlnE,YAG9DgF,EAAAA,QAAO,SAAC5L,GAAgB,OAAdA,EAAA4G,WACVqR,EAAAA,KAAI,SAACjY,OAAEqzB,EAAArzB,EAAAqzB,KAAMm6B,EAAAxtD,EAAAwtD,OACPthD,EAAK8nB,QAAU9nB,EAAK8hE,QAAQ36C,KAAUm6B,GACxCthD,EAAKzG,UAGTmJ,EAAAA,KAAI,SAAC5O,OAAEqzB,EAAArzB,EAAAqzB,KAAW,OAACA,GAAc,MACjCqS,EAAAA,YAAY,CAAEwoC,WAAY,EAAGC,UAAU,KA0F7C,OAtFE2N,EAAA9gF,UAAAswE,QAAA,WACE,OAAOxwE,KAAKmhF,gBAGdH,EAAA9gF,UAAAsxE,WAAA,WACE,OAAOxxE,KAAKsyE,iBAAiBd,WAAWxxE,KAAKk5B,SAG/C8nD,EAAA9gF,UAAAkhF,UAAA,WACE,OAAOphF,KAAK2yE,cAAc9+D,KACxBC,EAAAA,KAAI,SAACykB,GAAS,OAACA,EAAKztB,SAAWytB,EAAKj0B,SAAWi0B,EAAKzsB,aAIhDk1E,EAAA9gF,UAAAyK,KAAR,WACM3K,KAAKqhF,WAAWrhF,KAAKwT,SAAWxT,KAAKk5B,QACvCl5B,KAAKsyE,iBAAiBhB,SAAS,CAC7B99D,OAAQxT,KAAKwT,OACb0lB,OAAQl5B,KAAKk5B,UAKnB8nD,EAAA9gF,UAAAwxE,SAAA,SAASv4C,EAAqBC,GAA9B,IAAAhoB,EAAApR,KACMshF,GAAgB,EACpBthF,KAAK2yE,cACF9+D,KACC/C,EAAAA,QAAO,WAAM,OAACwwE,KACd1rE,EAAAA,WAAU,SAACg+D,GAKT,OAJIxiE,EAAK8hE,QAAQU,EAAUvxE,SAAWuxE,EAAU9nE,UAC9Cw1E,GAAgB,EAChBlwE,EAAKzG,QAEAiM,EAAAA,GAAGg9D,MAEZ9iE,EAAAA,QAAO,SAAC8iE,GAAc,OAACxiE,EAAK8hE,QAAQU,EAAUvxE,UAC9C4R,EAAAA,KAAK,IAENC,WAAU,WACT9C,EAAKkhE,iBAAiBZ,SACpBtgE,EAAKoC,OACLpC,EAAK8nB,OACLC,EACAC,OAKR4nD,EAAA9gF,UAAA0xE,YAAA,SAAYn6C,GACVz3B,KAAKsyE,iBAAiBV,YACpB5xE,KAAKwT,OACLxT,KAAKk5B,OACLzB,EAAMgC,cAIVunD,EAAA9gF,UAAA4xE,YAAA,SAAYr4C,EAAqBL,GAC/Bp5B,KAAKsyE,iBAAiBR,YACpB9xE,KAAKwT,OACLxT,KAAKk5B,OACLO,EACAL,IAIJ4nD,EAAA9gF,UAAA8xE,SAAA,SAAS74C,GACP,OAAOn5B,KAAKsyE,iBAAiBN,SAAShyE,KAAKk5B,OAAQC,IAG7C6nD,EAAA9gF,UAAAgzE,QAAR,SAAgB36C,GACd,OACGA,GAAyB,iBAATA,GAAkD,IAA7B/4B,OAAOuN,KAAKwrB,GAAM53B,QAIpDqgF,EAAA9gF,UAAA0yE,eAAR,SAAuBp/D,GACrB,OACExT,KAAKqhF,WAAW7tE,IAChBxT,KAAKwyE,iBAAmBh/D,GACxBxT,KAAKwyE,iBAAmBxyE,KAAKuyE,gCAIzByO,EAAA9gF,UAAAmhF,WAAR,SAAmB7tE,GACjB,YAAyB,IAAXA,G9V3KmB,c8V2KOA,4CAxIvB8B,EAAAA,aACM6oE,UACA9qE,UACKk9D,UACDxuD,MAzBlBi/D,EAAoBlgF,EAAA,CADhCyU,EAAAA,cACYyrE,oBCSX,SAAAO,EACYjuE,EACAoC,EACAurE,EACA3O,GAHAtyE,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,EACA1V,KAAAihF,YAAAA,EACAjhF,KAAAsyE,iBAAAA,EAkGd,OA/FEiP,EAAArhF,UAAAshF,eAAA,SAAehuE,EAAgBoW,EAAe0xD,GAC5Ct7E,KAAKsT,MAAMI,SACT,IAAImoE,GAA2B,CAAEroE,OAAMA,EAAEoW,KAAIA,EAAE0xD,YAAWA,MAI9DiG,EAAArhF,UAAAuhF,YAAA,WAAA,IAAArwE,EAAApR,KACE,OAAO00B,EAAAA,cAAc,CACnB10B,KAAKotE,gBACLptE,KAAKihF,YAAYr3E,MACjB5J,KAAK0V,YAAY9B,iBAChBC,KACD8C,EAAAA,uBACAwG,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAAC+2E,EAAA92E,EAAA,GAAYkuC,EAAAluC,EAAA,GAAMqO,EAAArO,EAAA,IAEnB0P,QAAQonE,I/V7CkB,c+V8C3BzoE,GACAqB,QAAQw+B,IACRx+B,QAAQw+B,EAAKo3B,aAEbr5D,EAAKswE,aAAaluE,EAAQ6/B,EAAKo3B,eAGnC35D,EAAAA,QAAO,SAAC5L,OAAC+2E,EAAD73E,EAAAc,EAAA,GAAC,GAAgB,OAAA2P,QAAQonE,MACjCrmE,EAAAA,WAAU,SAAC1Q,OAAC+2E,EAAD73E,EAAAc,EAAA,GAAC,GAAgB,OAAAkM,EAAKkhE,iBAAiB9B,QAAQyL,QAI9DsF,EAAArhF,UAAAwhF,aAAA,SAAaluE,EAAgBi3D,GAC3BzqE,KAAKsT,MAAMI,SACT,IAAIiuE,GAAyB,CAC3BnuE,OAAMA,EACNi3D,WAAUA,EACVmE,WAAYrB,GAAgB9C,OAKlC8W,EAAArhF,UAAAwxE,SAAA,SAASv4C,GAAT,IAAA/nB,EAAApR,KACEA,KAAKotE,gBACFv5D,KACC8C,EAAAA,uBACAwb,EAAAA,eAAenyB,KAAK0V,YAAY9B,eAAgB5T,KAAKihF,YAAYr3E,OACjEuT,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAAC+2E,EAAA92E,EAAA,GAAYqO,EAAArO,EAAA,GAAQkuC,EAAAluC,EAAA,IAErB0P,QAAQonE,IACTpnE,QAAQw+B,IACRx+B,QAAQw+B,EAAKo3B,aAEbr5D,EAAKswE,aAAaluE,EAAQ6/B,EAAKo3B,eAGnC35D,EAAAA,QAAO,SAAC5L,OAAC+2E,EAAD73E,EAAAc,EAAA,GAAC,GAAgB,OAAA2P,QAAQonE,MACjChoE,EAAAA,KAAK,IAENC,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAAC+2E,EAAA92E,EAAA,GAAYqO,EAAArO,EAAA,GACvB,OAAAiM,EAAKkhE,iBAAiBZ,SAASl+D,EAAQyoE,EAAY9iD,EAAa,OAItEooD,EAAArhF,UAAA0xE,YAAA,SAAYn6C,GAAZ,IAAArmB,EAAApR,KACEA,KAAKotE,gBACFv5D,KACC8C,EAAAA,uBACAwb,EAAAA,eAAenyB,KAAK0V,YAAY9B,eAAgB5T,KAAKihF,YAAYr3E,OACjEuT,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAAC+2E,EAAA92E,EAAA,GAAYqO,EAAArO,EAAA,GAAQkuC,EAAAluC,EAAA,IAErB0P,QAAQonE,IACTpnE,QAAQw+B,IACRx+B,QAAQw+B,EAAKo3B,aAEbr5D,EAAKswE,aAAaluE,EAAQ6/B,EAAKo3B,eAGnC35D,EAAAA,QAAO,SAAC5L,OAAC+2E,EAAD73E,EAAAc,EAAA,GAAC,GAAgB,OAAA2P,QAAQonE,MACjChoE,EAAAA,KAAK,IAENC,WAAU,SAAChP,OAAAC,EAAAf,EAAAc,EAAA,GAAC+2E,EAAA92E,EAAA,GAAYqO,EAAArO,EAAA,GACvB,OAAAiM,EAAKkhE,iBAAiBV,YAAYp+D,EAAQyoE,EAAYxkD,EAAMgC,iBAIlE8nD,EAAArhF,UAAA0hF,mBAAA,WAAA,IAAAxwE,EAAApR,KACE,OAAOA,KAAKotE,gBAAgBv5D,KAC1B+B,EAAAA,WAAU,SAACqmE,GACT,OAAA7qE,EAAKkhE,iBACFhZ,SAAS2iB,GACTpoE,KAAKC,EAAAA,KAAI,SAAC+tE,GAAW,OAACA,WAKrBN,EAAArhF,UAAAktE,cAAV,WACE,OAAOptE,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO6nE,+CAnGb1mE,EAAAA,aACMjC,UACA8qE,UACK5N,MALnBgR,EAAezgF,EAAA,CAD3ByU,EAAAA,cACYgsE,MCfAO,GAAmB,yBCEhCC,GAAA,SAAA16E,GAEE,SAAA06E,EACSp2E,GADT,IAAAyF,EAME/J,EAAAzG,KAAAZ,KAAM8hF,GAAkBn2E,EAAQk3B,MAAI7iC,YAL7BoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KANuB,yBAelC,OAVsCjK,EAAAiiF,EAAA16E,GAUtC06E,EAVA,CAAsCh6B,IAYtCi6B,GAAA,SAAA36E,GAEE,SAAA26E,EACSr2E,GADT,IAAAyF,EAGE/J,EAAAzG,KAAAZ,KAAM8hF,GAAkBn2E,EAAQk3B,IAAKl3B,EAAQrH,QAAMtE,YAF5CoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAjB4B,8BAuBvC,OAP0CjK,EAAAkiF,EAAA36E,GAO1C26E,EAPA,CAA0C/5B,IAS1Cg6B,GAAA,SAAA56E,GAIE,SAAA46E,EACSt2E,GADT,IAAAyF,EAOE/J,EAAAzG,KAAAZ,KAAM8hF,GAAkBn2E,EAAQk3B,KAAOl3B,EAAQ23B,UAAUT,KAAO,KAAG7iC,YAN5DoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KA3B+B,iCAqC1C,OAXUjK,EAAAmiF,EAAA56E,GAWV46E,EAbA,CAEU95B,IAaV+5B,GAAA,SAAA76E,GAIE,SAAA66E,EACSv2E,GADT,IAAAyF,EAKE/J,EAAAzG,KAAAZ,KACE8hF,GACA,GAAGt9E,OAAOmH,GAASmI,KAAI,SAACquE,GAAQ,OAAAA,EAAI7+C,UAAUT,SAC/C7iC,YAPMoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAzCgC,kCAoD3C,OAZUjK,EAAAoiF,EAAA76E,GAYV66E,EAdA,CAEU/5B,ICvCVi6B,GAAA,SAAA/6E,GAEE,SAAA+6E,EAAmBz2E,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KFLoC,0BEKJ2L,EAAQ02E,SAAOriF,YAD9BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAP8B,qCAWzC,OAL4CjK,EAAAsiF,EAAA/6E,GAK5C+6E,EALA,CAA4Cr6B,IAO5Cu6B,GAAA,SAAAj7E,GAEE,SAAAi7E,EAAYD,EAAuB12E,GAAnC,IAAAyF,EACE/J,EAAAzG,KAAAZ,KFZoC,0BEYJqiF,EAAQ12E,IAAQ3L,YADfoR,EAAAzF,QAAAA,EAD1ByF,EAAArH,KAZT,0CAgBF,OALgDjK,EAAAwiF,EAAAj7E,GAKhDi7E,EALA,CAAgDr6B,IAOhDs6B,GAAA,SAAAl7E,GAEE,SAAAk7E,EAAmB52E,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KFnBoC,0BEmBJ2L,EAAQ02E,SAAOriF,YAD9BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjBT,6CAqBF,OALmDjK,EAAAyiF,EAAAl7E,GAKnDk7E,EALA,CAAmDp6B,ICbnDq6B,GAAA,SAAAn7E,GAEE,SAAAm7E,EAAmB72E,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM2L,EAAQ5B,KAAM4B,EAAQ3B,KAAGhK,YADdoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAPuB,yBAWlC,OALqCjK,EAAA0iF,EAAAn7E,GAKrCm7E,EALA,CAAqCz6B,IAOrC06B,GAAA,SAAAp7E,GAEE,SAAAo7E,EAAY/hD,EAA0Bp8B,GAAtC,IAAA8M,EACE/J,EAAAzG,KAAAZ,KAAM0gC,EAAY32B,KAAM22B,EAAY12B,GAAI1F,IAAMtE,YAFvCoR,EAAArH,KAb4B,8BAiBvC,OALyCjK,EAAA2iF,EAAAp7E,GAKzCo7E,EALA,CAAyCx6B,IAOzCy6B,GAAA,SAAAr7E,GAEE,SAAAq7E,EAAYhiD,EAA0B/0B,GAAtC,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM0gC,EAAY32B,KAAM22B,EAAY12B,GAAI2B,IAAQ3L,YAFzCoR,EAAArH,KAnB+B,iCAuB1C,OAL4CjK,EAAA4iF,EAAAr7E,GAK5Cq7E,EALA,CAA4Cv6B,IAO5Cw6B,GAAA,SAAAt7E,GAEE,SAAAs7E,EAAYjiD,EAA0B/0B,GAAtC,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM0gC,EAAY32B,KAAM22B,EAAY12B,GAAI2B,IAAQ3L,YAFzCoR,EAAArH,KAzB+B,iCA6B1C,OAL4CjK,EAAA6iF,EAAAt7E,GAK5Cs7E,EALA,CAA4Cx6B,IAO5Cy6B,GAAA,SAAAv7E,GAEE,SAAAu7E,EAAYliD,EAAiC/0B,GAA7C,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM0gC,EAAY32B,KAAM22B,EAAY12B,KAAGhK,YADIoR,EAAAzF,QAAAA,EADpCyF,EAAArH,KA/B4B,8BAmCvC,OALyCjK,EAAA8iF,EAAAv7E,GAKzCu7E,EALA,CAAyC36B,wDFjCP,+CACK,uDACG,2DACC,4JCLF,kEAEvC,0EAEA,uJCHgC,+CACK,uDACG,0DACA,uDACH,mJCL1B46B,GAGTnwE,EAAAA,sBJAuB,UKQK,SAACxG,GAAU,OAAAA,EAAMk3B,YAHpC0/C,GAGTjwE,EAAAA,eAAegwE,GAAWE,IAEjBC,GAAmC,SAC9CngD,GAEA,OAAOhwB,EAAAA,eAAeiwE,IAAoB,SAACG,GACzC,OAAAC,GAAoCD,EAAiBpgD,OAI5CsgD,GAAuC,SAClDtgD,EACA7nB,GAEA,OAAOnI,EAAAA,eACLmwE,GAAiCngD,IACjC,SAACugD,GACC,OAACA,GACCA,EAAkB1iD,aAClB0iD,EAAkB1iD,YAAY1lB,IAChCnP,OAIOw3E,GAAyC,SACpDxgD,EACA7nB,GAEA,OAAOnI,EAAAA,eACLswE,GAAqCtgD,EAAK7nB,IAC1C,SAACrM,GACC,OAAA+hB,GAAyC/hB,KAAgB,MAIlD20E,GAAgC,SAC3CzgD,GAEA,OAAOhwB,EAAAA,eAAemwE,GAAiCngD,IAAM,SAAC32B,GAC5D,OAAAA,EAAQA,EAAMo3B,eAAYv3B,MAIjBw3E,GAA4B,SACvC1gD,EACA7nB,GAEA,OAAOnI,EAAAA,eACLywE,GAA8BzgD,GAC9BwgD,GAAuCxgD,EAAK7nB,IAC5C,SAACwoE,EAAgBC,GACf,OAAID,GAAkBC,EACbD,OAEP,MCzDKE,GAGT7wE,EAAAA,eAAegwE,IAAa,SAAC32E,GAAoB,OAAAA,EAAM0iB,cAE9C+0D,GAAsC,SACjDtB,GAEA,OAAOxvE,EAAAA,eAAe6wE,IAA6B,SAACE,GAClD,OAAA59B,GAA+C49B,EAAOvB,OAI7CwB,GAA0B,SACrCxB,GAEA,OAAOxvE,EAAAA,eACL8wE,GAAoCtB,IACpC,SAACyB,GAAc,OAAApzD,GAAyCozD,OCftDC,GAA0B,SAAC73E,GAAqB,OAAAA,EAAM83E,SAASz3E,UAC/D03E,GAAiB,SACrBvpC,EACA3wC,GAEA,OAAQA,GACN,KAAKojB,EAAAA,SAAS4T,aACZ,OAAO2Z,EAAM6B,QAEf,KAAKpvB,EAAAA,SAASyU,aACZ,OAAO8Y,EAAMhjB,QAEf,KAAKvK,EAAAA,SAAS0U,cACZ,OAAO6Y,EAAMwpC,SAEf,KAAK/2D,EAAAA,SAAS4U,aACZ,OAAO2Y,EAAMypC,QAGjB,MAAO,CAAE53E,SAAU,WAGf63E,GAA0D,SAC9D7hD,eAEM8hD,EAAiB,IAAIl2D,IAC3B,GAAIoU,GAAQA,EAAKO,UACf,IAAmB,IAAA19B,EAAAnB,EAAAzE,OAAOuN,KAAKw1B,EAAKO,QAAMO,EAAAj+B,EAAA7C,QAAA8gC,EAAA1gC,KAAA0gC,EAAAj+B,EAAA7C,OAAE,CAAvC,IAAM2gC,EAAIG,EAAAhhC,UACb,IAAwB,IAAAkhC,GAAA00B,OAAA,EAAAh0D,EAAAs+B,EAAKO,MAAMI,GAAME,YAAc,KAAEK,EAAAF,EAAAhhC,QAAAkhC,EAAA9gC,KAAA8gC,EAAAF,EAAAhhC,OAAE,CAAtD,IAAM+gC,EAASG,EAAAphC,MAClBgiF,EAAe76D,IAAI8Z,EAAUK,+MAInC,OAAOhkC,MAAMm1E,KAAKuP,aAMY,SAACn4E,GAAoB,OAAAA,EAAMq2B,MAH9C+hD,GAGTzxE,EAAAA,eAAegwE,GAAW0B,OAKG,SAAChiD,GAAoB,OAAAA,EAAKmY,OAH9C8pC,GAGT3xE,EAAAA,eAAeyxE,GAAYG,IAElBC,GAAqC,SAChDhkD,GAEA,OAAA7tB,EAAAA,eAAe2xE,IAAmB,SAAC9pC,GACjC,OAAAupC,GAAevpC,EAAOha,EAAY32B,UAGzB46E,GAA+B,SAC1CjkD,GAEA,OAAA7tB,EAAAA,eACE6xE,GAAmChkD,IACnC,SAACkkD,GACC,OAAA5+B,GAA+C4+B,EAAYlkD,EAAY12B,QAGhE66E,GAAyB,SACpCnkD,GAEA,OAAA7tB,EAAAA,eAAe8xE,GAA6BjkD,IAAc,SAACt0B,GACzD,OAAAskB,GAAiDtkB,OAGxC04E,GAGTjyE,EAAAA,eAAeyxE,GAAcP,IAEpBgB,GAAc,SACzBrkD,GAEA,OAAA7tB,EAAAA,eACEiyE,GACAD,GAAuBnkD,IACvB,SAACn0B,EAAkCy4E,GACjC,OAAAz4E,EAASy4E,OAGFC,GAAwB,SACnCvkD,GAEA,OAAA7tB,EAAAA,eAAekyE,GAAYrkD,IAAc,SAACsjD,GACxC,OAAAI,GAA8BJ,OAGrBkB,GAAgC,SAC3CxkD,EACAyC,GAEA,OAAOtwB,EAAAA,eAAekyE,GAAYrkD,IAAc,SAACt0B,GAC/C,GAAIA,EACF,OAAOA,EAAO02B,MAAMK,IAAa,CAAEC,WAAY,8mBCjGrD,SAAgB+hD,GACdzkD,EACA0kD,GAEA,OAAK1kD,EAID0kD,GAAuB1kD,EAAY32B,OAASojB,EAAAA,SAAS4T,aAChD,GAAGL,EAAY32B,KAGd22B,EAAY32B,KAAI,IAAI22B,EAAY12B,GAvBT,cCgEvBq7E,iBC9BV,SAAAC,EACYhyE,EACAwJ,GADA9c,KAAAsT,MAAAA,EACAtT,KAAA8c,eAAAA,EAVJ9c,KAAAulF,oBAAqB,EAErBvlF,KAAAojC,WAIJ,UAUJ5jC,OAAAgC,eAAI8jF,EAAAplF,UAAA,oBAAiB,KAArB,SAAsBmC,GACpBrC,KAAKulF,mBAAqBljF,mCAM5BijF,EAAAplF,UAAAslF,oBAAA,WACE,OAAOxlF,KAAKulF,oBAMdD,EAAAplF,UAAAulF,eAAA,WAAA,IAAAr0E,EAAApR,KACE,OAAOA,KAAK8c,eACT7B,iBACApH,KACC+B,EAAAA,WAAU,SAAC8qB,GACT,OAAAtvB,EAAKkC,MAAMa,OAAOuxE,GAAyBhlD,SAkBnD4kD,EAAAplF,UAAAylF,iBAAA,SACE9iD,EACAnC,GAEA,IAAM1lB,EAAUmqE,GAAqBzkD,GAAa,GAC7C1gC,KAAKojC,WAAWP,KAEnB7iC,KAAKojC,WAAWP,GAAO,IAGzB,IAAMS,EAAYtjC,KAAKojC,WAAWP,GAMlC,OALKS,EAAUtoB,KAEbsoB,EAAUtoB,GAAWhb,KAAK4lF,oBAAoB/iD,EAAKnC,IAG9C4C,EAAUtoB,IAGXsqE,EAAAplF,UAAA0lF,oBAAR,SACE/iD,EACAnC,GAFF,IAAAtvB,EAAApR,KAIE,IAAK0gC,EACH,OAAO1gC,KAAK8c,eAAe7B,iBAAiBpH,KAC1C/C,EAAAA,QAAO,SAAC+0E,GAAmB,QAAEA,KAC7BjwE,EAAAA,WAAU,SAACiwE,GACT,OAAAz0E,EAAKu0E,iBAAoB9iD,EAAKgjD,OAKpC,IAAM7qE,EAAUmqE,GAAqBzkD,GAAa,GAE5ColD,EAAWpxD,EAAAA,cAAc,CAC7B10B,KAAK8c,eAAe1B,qBACpBpb,KAAKsT,MAAMO,KACTM,EAAAA,OAAO4xE,GAAkDljD,EAAK7nB,OAE/DnH,KACDmyE,EAAAA,UAAUC,EAAAA,gBACV9oE,EAAAA,KAAI,SAACjY,OAAAC,EAAAf,EAAAc,EAAA,GAACghF,EAAA/gF,EAAA,GAAaghF,EAAAhhF,EAAA,GACXihF,EACJD,EAAar6E,SAAWq6E,EAAar7E,SAAWq7E,EAAa7hF,MAIzD+hF,IAA4BH,GAC9Bf,GAAqBe,GAAa,KAAUlrE,EAG3CorE,GAAkBC,GACrBj1E,EAAKkC,MAAMI,SACT,IAAI4yE,GAA4B,CAAEzjD,IAAGA,EAAEnC,YAAWA,SAMpD6lD,EAAavmF,KAAKsT,MAAMO,KAC5BM,EAAAA,OAAOqyE,GAAuC3jD,EAAK7nB,IAMnDlK,EAAAA,QAAO,SAACwyB,GAAc,QAAEA,MAG1B,OAAOmjD,EAAAA,OACL,WAAM,OAAAX,EAAS5xE,eACf,WAAM,OAAAqyE,KACN1yE,KAAK+2B,EAAAA,YAAY,CAAEwoC,WAAY,EAAGC,UAAU,MAOhDiS,EAAAplF,UAAAwmF,eAAA,SAAevjD,GAAf,IAAA/xB,EAAApR,KACE,OAAOA,KAAK8c,eACT7B,iBACApH,KACC+B,EAAAA,WAAU,SAAC8qB,GACT,OAAAtvB,EAAKkC,MAAMO,KACTM,EAAAA,OACEwyE,GAA2CjmD,EAAayC,IAE1DryB,EAAAA,OAAO+D,eAUjBywE,EAAAplF,UAAA2jF,wBAAA,SAAwB+C,GACtB,OAAO5mF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO0yE,GAAqCD,MAShDtB,EAAAplF,UAAA4mF,oBAAA,SACEC,EACA9uD,GAEAj4B,KAAKsT,MAAMI,SACT,IAAIszE,GAAkC,CACpC3E,OAAQ0E,EACRE,MAAOhvD,MAQbqtD,EAAAplF,UAAAgnF,kBAAA,WAAA,IAAA91E,EAAApR,KACEA,KAAK8c,eACF7B,iBACApH,KAAKI,EAAAA,KAAK,IACVC,WAAU,SAACwsB,GACV,OAAAtvB,EAAKkC,MAAMI,SAAS,IAAIyzE,GAA2BzmD,QAQzD4kD,EAAAplF,UAAAknF,gBAAA,SAAgBxkD,GACd,IAAMlC,EAA2B,CAAE12B,GAAI44B,GACvC5iC,KAAKsT,MAAMI,SAAS,IAAIyzE,GAA2BzmD,KASrD4kD,EAAAplF,UAAAmnF,iBAAA,SAAiBxkD,EAAanC,GAC5B1gC,KAAKsT,MAAMI,SAAS,IAAI4yE,GAA4B,CAAEzjD,IAAGA,EAAEnC,YAAWA,MAOxE4kD,EAAAplF,UAAAokF,aAAA,SAAa5jD,GACX,OAAO1gC,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOuxE,GAAyBhlD,MAOzD4kD,EAAAplF,UAAA+kF,sBAAA,SAAsBvkD,GACpB,OAAO1gC,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOmzE,GAAmC5mD,MAQ9C4kD,EAAAplF,UAAAqnF,QAAA,SAAQ7mD,EAA0B8mD,GAAlC,IAAAp2E,EAAApR,KACE,YADgC,IAAAwnF,IAAAA,GAAA,GACzBxnF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOszE,GAA0C/mD,IACjDvjB,EAAAA,KAAI,SAAC/Q,GACH,IAAMg6E,EAAgBh6E,EAAON,SAAWM,EAAOtB,SAAWsB,EAAO9H,MAC3DojF,EAAeF,IAAgBp7E,EAAON,QACvCs6E,IAAiBsB,IACpBt2E,EAAKkC,MAAMI,SAAS,IAAIyzE,GAA2BzmD,IACnD8mD,GAAc,MAGlB12E,EAAAA,QAAO,SAAC1E,GACN,QAAKA,EAAOvM,eAAe,WAKpBuM,EAAOtB,SAAYsB,EAAO9H,QAAU8H,EAAON,YAEpDsuB,EAAAA,MAAM,WACN3c,EAAAA,YAAW,WAAM,OAAA7G,EAAAA,IAAG,QAOxB0uE,EAAAplF,UAAAynF,QAAA,SAAQjnD,EAA0B8mD,GAAlC,IAAAp2E,EAAApR,KACE,YADgC,IAAAwnF,IAAAA,GAAA,GACzBxnF,KAAKunF,QAAQ7mD,EAAa8mD,GAAa3zE,KAC5C+B,EAAAA,WAAU,SAAC2xE,GACT,OAAAA,EAAUn2E,EAAKkzE,aAAa5jD,GAAe9pB,EAAAA,GAAG,WAKpD0uE,EAAAplF,UAAA0nF,aAAA,SAAalnD,GACX,OAAO1gC,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO0zE,GAAoCnnD,MAI/C4kD,EAAAplF,UAAA4nF,iBAAA,SAAiBpnD,EAA0Br+B,GACzCrC,KAAKsT,MAAMI,SAAS,IAAIq0E,GAA+BrnD,EAAar+B,8CApQnDiT,EAAAA,aACSkG,8IAXjB8pE,EAAUxkF,EAAA,CAHtByU,EAAAA,WAAW,CACVC,WAAY,UAED8vE,ODuCDD,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,OAAA,SACAA,GAAA,SAAA,WEjDF,IAAA2C,GAAA,SAAA3gF,GAME,SAAA2gF,EAAsBC,GAAtB,IAAA72E,EACE/J,EAAAzG,KAAAZ,OAAOA,YADaoR,EAAA62E,IAAAA,EAJZ72E,EAAA82E,KAAyB92E,EAAK62E,IACrCxC,iBACA5xE,KAAK/C,EAAAA,QAAO,SAACyxB,GAAS,QAAEA,MAIzBnxB,EAAK0vB,SAAW3T,EAAAA,SAAS4T,aACzB3vB,EAAKi7D,aAAe,4BATkBvsE,EAAAkoF,EAAA3gF,GAexC2gF,EAAA9nF,UAAAioF,aAAA,WACE,OAAOnoF,KAAKkoF,KAAKr0E,KAAKC,EAAAA,KAAI,SAAClU,GAAM,OAAAA,EAAE+iC,WAMrCqlD,EAAA9nF,UAAAkoF,cAAA,WACE,OAAOxxE,EAAAA,GAAG,CAACyuE,EAAAA,eAAegD,SAAUhD,EAAAA,eAAeiD,oDAjB1BhD,uHANhB0C,EAAoBlnF,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDwyE,GAAb,CAA0C9b,kBCRxC,SAAAqc,EACYC,EACAl1E,EACAm1E,GAFAzoF,KAAAwoF,wBAAAA,EACAxoF,KAAAsT,MAAAA,EACAtT,KAAAyoF,yBAAAA,SAGLF,EAAAroF,UAAAwoF,KAAP,WAAA,IAAAt3E,EAAApR,KACEA,KAAKwoF,wBAAwBvjC,gBAAgB,CAC3ChkD,IAAK,OACLikD,OAAQllD,KAAK2oF,eACbxjC,SAAUnlD,KAAKyoF,yBAAyB9sB,UAAU,ClVtBpB,akVuB9BpW,OAAQ,SAACr5C,GAAU,OAAAkF,EAAKm0C,OAAOr5C,OAIzBq8E,EAAAroF,UAAAyoF,aAAV,WACE,OAAO3oF,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOy0E,IACP93E,EAAAA,QAAO,SAAC5E,GAAU,QAAEA,KACpB28E,EAAAA,wBAAwB,UACxB/0E,EAAAA,KAAI,SAAC5H,GACH,MAAO,CACLgW,OAAQhW,EAAMgW,aAMZqmE,EAAAroF,UAAAqlD,OAAV,SAAiBr5C,GACflM,KAAKsT,MAAMI,SAAS,IAAIo1E,IACpB58E,GACFlM,KAAKsT,MAAMI,SAAS,IAAIq1E,GAA4B78E,EAAMgW,mDA9BzB8iC,UAClB1vC,EAAAA,aACmBylD,gKAJ3BwtB,EAAgCznF,EAAA,CAH5CyU,EAAAA,WAAW,CACVC,WAAY,UAED+yE,oBCaX,SAAAS,EAAoB9+D,GAAAlqB,KAAAkqB,SAAAA,EAjBpBlqB,KAAAipF,aAAejpF,KAAKkqB,SAASrW,KAC3BwW,EAAAA,OvCAyB,wBuCCzBvW,EAAAA,KAAI,SAAC3H,GACH,OAAO,IAAI0tE,GAAuB,CAAE3gD,OAAQ/sB,EAAOR,QAAQijE,iBAM/D5uE,KAAAkpF,oBAEIlpF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOsrD,IACP7hE,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDmI,EAAAA,KAAI,SAACnI,GAAY,OAAA,IAAIw9E,GAAmCx9E,EAAQutB,YAIpE,gDADgCzO,EAAAA,WAjB9B3pB,EAAA,CADC4pB,EAAAA,6CAUD5pB,EAAA,CADC4pB,EAAAA,oDAVUs+D,EAAgBloF,EAAA,CAD5ByU,EAAAA,cACYyzE,MCUPh9D,GAAiB,CACrButD,GACAhF,GACAgB,GACA4F,GACA6N,IAcFI,GAAA,WAAA,SAAAA,KAAmC,OAAtBA,EAAoBtoF,EAAA,CAXhCkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA8hB,GACA4E,EAAAA,YAAYC,W9C1BkB,O8C0Ba0uD,GAAuB,CAChE9vD,aAAc6vD,KAEhBxuD,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CAAC61E,OAED2M,GAAb,YCrBgBC,GACdC,EACA1uB,GAMA,OAJe,WACb,OAAAA,EAAWvB,gBAAgB,WAAWz2D,MAAK,WACzC0mF,EAA4BZ,WAQlC,IAAAa,GAAA,WAAA,SAAAA,WAwBA,SAxBaA,EACJA,EAAAziF,QAAP,WACE,MAAO,CACLJ,SAAU8iF,EACV5iF,UAAW,CACT02E,GACA/M,GACAgR,GACAlP,GACA2O,GACA,CACEp7E,QAASsmE,GACT/mD,YAAa6iE,GACbliF,OAAO,GAET,CACEF,QAASk1D,EAAAA,gBACT50D,WAAYmjF,GACZpjF,KAAM,CAACsiF,GAAkCrvB,IACzCpzD,OAAO,MAnBJyjF,EAAUC,EAAA1oF,EAAA,CAHtBkG,EAAAA,SAAS,CACRC,QAAS,CAACmiF,GAAsBhM,OAErBmM,GAAb,GC1Bat9D,GAAyC,CACpDurB,QAAS,IAGX,SAAgBvrC,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAu9E,IAGQt9E,EAAOpC,MACb,IjCPkC,oCiCQhC,IAAMytC,EAAUrrC,EAAOR,QAEvB,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRsrC,QAAOA,IAIX,IjCjB+B,iCiCkB7B,OAAAp3C,EAAAA,EAAA,GACK8L,GAAK,CACRsrC,QAAS,SAIb,IjCpBF,gDiCqBI,OAAAp3C,EAAAA,EAAA,GACK8L,GAAK,CACRsrC,QAAS,KAKf,OAAOtrC,EAGT,ICtBMw9E,GAA6B,SAACx9E,GAA8B,OAAAA,EAAMiwB,SAClEwtD,GAA0B,SAACz9E,GAC/B,OAAAA,EAAM09E,cACFC,GAA4B,SAAC39E,GACjC,OAAAA,EAAM8wB,sBACF8sD,GAA0B,SAAC59E,GAC/B,OAAAA,EAAM69E,oBAEKC,GAGTt3E,EAAAA,sBhCvB4B,egC8B9B,SAACu3E,GAAiC,OAAAA,EAAcC,OALrCC,GAGTt3E,EAAAA,eACFm3E,GAAgBI,OAOwB,SAACl+E,GACzC,OAAAwkB,GAAyCxkB,IAJ9Bm+E,GAGTx3E,EAAAA,eAAes3E,GAAqBG,IAI3BC,GAGT13E,EAAAA,eAAew3E,GAAkBX,IAExBc,GAMT33E,EAAAA,eAAew3E,GAAkBV,OAKD,SAACC,GACnC,OACEA,GACApqF,OAAOuN,KAAK68E,EAAaa,WAAW32E,KAClC,SAACwlB,GAAS,OAAAswD,EAAaa,UAAUnxD,OAP1BoxD,GAGT73E,EAAAA,eAAe23E,GAAeG,OAYE,SAACf,GACnC,OAAOA,GAAgBA,EAAa7jD,UAJzB6kD,GAGT/3E,EAAAA,eAAe23E,GAAeK,OAOE,SAACjB,GACnC,GAA8B,KAA1BA,EAAa7jD,SACf,OAAmD,IAA/CvmC,OAAOuN,KAAK68E,EAAaa,WAAW9pF,OAC/B,KAEFipF,EAAaa,UAAUb,EAAa7jD,WARlC+kD,GAGTj4E,EAAAA,eAAe23E,GAAeO,IASrBC,GAGTn4E,EAAAA,eAAew3E,GAAkBR,IAExBoB,GAGTp4E,EAAAA,eAAew3E,GAAkBP,OAOnC,SAAC59E,GACC,OAAA4kB,GAA2C5kB,KAC1C0kB,GAA2C1kB,IAPnCg/E,GAGTr4E,EAAAA,eACFs3E,GAAqBgB,OCxFrB,SAACj/E,GAAyB,OAAAA,EAAMgpC,qBALrBk2C,GAGTv4E,EAAAA,eACFm3E,GAAgBqB,IAILC,GAGTz4E,EAAAA,eACFu4E,IFiB2C,SAC3Cl/E,GACG,OAAAA,EAAMsrC,WGrCEvrB,GAA+B,CAC1C1f,SAAU,IAGZ,SAAgBN,GACdC,EACAC,GAIA,YALA,IAAAD,IAAAA,EAAAq/E,IAKQp/E,EAAOpC,MACb,InCVmC,+BmCWjC,IACMwC,EADwBJ,EAAOR,QACVqB,QACzB,SAACw+E,EAAiD5hE,SAChD,OAAAxpB,EAAAA,EAAA,GACKorF,KAAiBtmF,EAAA,IACnB0kB,EAAK0P,MAAO1P,EAAI1kB,MAEpB9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,IjCgEqC,8BiC/DnC,OAAO0f,GAIX,OAAO/f,EAGT,ICjCau/E,GAGT54E,EAAAA,eAAem3E,IAAkB,SAAC99E,GAAyB,OAAAA,EAAMiyB,aAExDutD,GAGT74E,EAAAA,eAAe44E,IDyBgB,SAACv/E,GAA0B,OAAAA,EAAMK,eCpB5B,SAACqkD,GACvC,OAAOpxD,OAAOuN,KAAK6jD,GAAS98C,KAAI,SAACwlB,GAAS,OAAAs3B,EAAQt3B,OAJvCqyD,GAGT94E,EAAAA,eAAe64E,GAAmBE,whBCVpC,SAAAC,EACYC,EACAp2E,EACAknE,GAFA58E,KAAA8rF,cAAAA,EACA9rF,KAAA0V,YAAAA,EACA1V,KAAA48E,kBAAAA,EAiGd,OA3FEiP,EAAA3rF,UAAAq7B,WAAA,WAEI,IAAIwwD,EAMAC,EAPFhsF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACsO,EAAStO,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC+Y,EAAS/Y,KACtCxX,cAECswB,GAAUC,GACZhsF,KAAK8rF,cAAcp4E,SACjB,IAAIw4E,GAA2B,CAC7B14E,OAAMu4E,EACN7yD,OAAM8yD,OAUhBH,EAAA3rF,UAAAisF,kBAAA,WACEnsF,KAAK8rF,cAAcp4E,SAAS,IAAI04E,KAOlCP,EAAA3rF,UAAAmsF,kBAAA,SAAkBC,GAChBtsF,KAAK8rF,cAAcp4E,SACjB,IAAI64E,GAAkCD,KAQ1CT,EAAA3rF,UAAAs7B,oBAAA,SAAoBtC,GAClB,IAAI1lB,EACJxT,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cACCjoD,GACFxT,KAAK8rF,cAAcp4E,SACjB,IAAI84E,GAAoC,CACtCh5E,OAAMA,EACN0lB,OAAMA,MASd2yD,EAAA3rF,UAAAgrF,yBAAA,WACE,OAAOlrF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAOs4E,MAOXZ,EAAA3rF,UAAAqxD,gBAAA,WACE,OAAOvxD,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAOu4E,MAIDb,EAAA3rF,UAAA+rF,cAAV,WACE,IAAIz4E,EAKJ,OAJAxT,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cAEAjoD,GrX5G8B,cqX4GpBA,GACXxT,KAAK48E,kBAAkBtJ,wDAhGAh+D,EAAAA,aACFjC,UACMg/D,MAJpBwZ,EAAe/qF,EAAA,CAD3ByU,EAAAA,cACYs2E,SCVb,aCqBAc,GAAA,SAAAtlF,GAIE,SAAAslF,EACYC,EACAhQ,GAFZ,IAAAxrE,EAIE/J,EAAAzG,KAAAZ,OAAOA,YAHGoR,EAAAw7E,YAAAA,EACAx7E,EAAAwrE,kBAAAA,EAJFxrE,EAAAy7E,MAAQz7E,EAAKwrE,kBAAkB56D,YAOvC5Q,EAAK0vB,SAAW3T,EAAAA,SAAS4T,aACzB3vB,EAAKi7D,aAAe,gDAVsBvsE,EAAA6sF,EAAAtlF,GAa5CslF,EAAAzsF,UAAAioF,aAAA,WAAA,IAAA/2E,EAAApR,KACE,OAAOA,KAAK6sF,MAAMh5E,KAChB+B,EAAAA,WAAU,SAACzU,GACT,OAAAiQ,EAAKw7E,YAAYE,UAAU,kCAAmC,CAC5D9mD,MAAO7kC,EAAE4rF,kBAMjBJ,EAAAzsF,UAAAkoF,cAAA,WACE,OAAOxxE,EAAAA,GAAG,CAACyuE,EAAAA,eAAegD,SAAUhD,EAAAA,eAAeiD,oDAnB5B0E,UACM3a,yIANpBsa,EAAwB7rF,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDm3E,GAAb,CAA8CzgB,IClBjCjgD,GAAmC,CAC9CkQ,QAAS,GACTytD,aAAc,CACZa,UAAW,GACX1kD,SAAU,IAEZ/I,eAAgB,GAChB+sD,aAAc,IAGhB,SAAgB99E,GACdC,EACAC,GAIA,YALA,IAAAD,IAAAA,EAAA+gF,IAKQ9gF,EAAOpC,MACb,ItCkBF,0CsCjBE,ItCsBF,0CsCrBI,IAAMoyB,EAAmBhwB,EAAOR,QAEhC,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRiwB,QAAOA,IAIX,ItCsBF,mDsCrBI,IAAM+wD,EAAiB/gF,EAAOR,QAC9B,IAAKuhF,EACH,OAAOhhF,EAGT,IAAMu+E,EAAYyC,EAAelgF,QAC/B,SAACmgF,EAAyCC,SACxC,OAAAhtF,EAAAA,EAAA,GACK+sF,KAAKjoF,EAAA,IACPkoF,EAAK9zD,MAAO8zD,EAAIloF,MAEpB9E,EAAA,GAEI8L,EAAM09E,aAAaa,YAI1B,OAAArqF,EAAAA,EAAA,GACK8L,GAAK,CACR09E,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrBa,UAASA,MAKf,ItCCqC,uCsCAnC,IAAM1kD,EAAW55B,EAAOR,QAExB,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACR09E,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrB7jD,SAAQA,MAKd,ItCMF,4CsCLE,ItCUF,yCsCTI,OAAA3lC,EAAAA,EAAA,GACK8L,GAAK,CACR8wB,eAAgB7wB,EAAOR,UAI3B,ItCJF,yCsCKI,IAAMqxB,EAAiB7wB,EAAOR,QAC9B,OAAIqxB,EAAyB,SAC3B58B,EAAAA,EAAA,GACK8L,GAAK,CACR8wB,eAAcA,IAIX9wB,EAGT,ItCH+B,iCsCI7B,IAAM69E,EAAsB59E,EAAOR,QAEnC,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACR69E,aAAYA,IAIhB,ItCT+B,iCsCU7B,OAAO99D,GAGT,ItCd+B,qCsCgB7B,OADmB9f,EAAOR,SAExB,KAAK,EACH,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRiwB,QAAS,KAIb,KAAK,EACH,OAAA/7B,EAAAA,EAAA,GACK8L,GAAK,CACR09E,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrBa,UAAW,GACX1kD,SAAU,OAKhB,KAAK,EACH,OAAA3lC,EAAAA,EAAA,GACK8L,GAAK,CACR8wB,eAAgB,KAKtB,OAAO9wB,EAGT,ItChFF,4CsCiFE,ItCtCqC,8BsCuCnC,OAAA9L,EAAAA,EAAA,GACK8L,GAAK,CACR09E,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrBa,UAAW,OAIjB,ItCjDF,2CsCkDI,OAAArqF,EAAAA,EAAA,GACK8L,GAAK,CACRiwB,QAAShwB,EAAOR,QAAQ0hF,gBACxBzD,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrB7jD,SACE55B,EAAOR,QAAQi+E,cAAgBz9E,EAAOR,QAAQi+E,aAAatwD,OAE/D0D,eAAgB7wB,EAAOR,QAAQ2hF,cAInC,ItCvIF,6CsCwII,OAAAltF,EAAAA,EAAA,GACK8L,GAAK,CACRiwB,QAAS,KAIb,ItCvIF,0CsCwII,OAAA/7B,EAAAA,EAAA,GACK8L,GAAK,CACR09E,aAAYxpF,EAAAA,EAAA,GACP8L,EAAM09E,cAAY,CACrB7jD,SAAU,OAMlB,OAAO75B,WClKOggB,KACd,MAAO,CACLg+D,MAAOl+E,GACL6qE,GACA0W,IAEFpvD,UAAWqvD,GACXt4C,oBAAqBu4C,IAIzB,IAAaphE,GAER,IAAI/mB,EAAAA,eAAgD,oBAE5CgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,kBCvBZ,SAAAwhE,EAAsBr+C,GAAArvC,KAAAqvC,QAAAA,SAEtBq+C,EAAAxtF,UAAAiiB,OAAA,SAAO3O,GACL,OAAOxT,KAAKqvC,QAAQlV,QAAQ3mB,IAG9Bk6E,EAAAxtF,UAAAspB,IAAA,SAAIhW,EAAgB2oB,GAClB,OAAOn8B,KAAKqvC,QAAQ7lB,IAAIhW,EAAQ2oB,IAGlCuxD,EAAAxtF,UAAAs5B,OAAA,SAAOhmB,EAAgB6oB,EAAmBF,GACxC,OAAOn8B,KAAKqvC,QAAQ7V,OAAOhmB,EAAQ6oB,EAAWF,IAGhDuxD,EAAAxtF,UAAA2wC,OAAA,SAAOr9B,EAAgB2oB,GACrB,OAAOn8B,KAAKqvC,QAAQwB,OAAOr9B,EAAQ2oB,IAGrCuxD,EAAAxtF,UAAAsJ,OAAA,SAAOgK,EAAgB6oB,GACrB,OAAOr8B,KAAKqvC,QAAQ7lC,OAAOgK,EAAQ6oB,6CAnBNwb,uHADpB61C,EAAoB5sF,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDk4E,oBCoBX,SAAAC,EACUzjE,EACA0jE,GAFV,IAAAx8E,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4tF,qBAAAA,EAnBV5tF,KAAA6tF,eAEI7tF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O5CX0B,6B4CY1BvW,EAAAA,KAAI,SAAC3H,GAAW,OAAAA,EAAOR,WACvBof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKw8E,qBAAqB/8C,OAAOllC,EAAQ6H,OAAQ7H,EAAQwwB,SAAStoB,KAChEC,EAAAA,KAAI,SAACopB,GAAS,OAAA,IAAI4wD,GAAqC5wD,MACvDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIm3E,GAAkCtkE,GAAsBnlB,aAWxE,gDAHsBmmB,EAAAA,eACYijE,MAnBhC5sF,EAAA,CADC4pB,EAAAA,+CADUijE,EAAyB7sF,EAAA,CADrCyU,EAAAA,cACYo4E,oBCAX,SAAAK,EAAsB3+C,GAAArvC,KAAAqvC,QAAAA,SAEf2+C,EAAA9tF,UAAAC,OAAP,SACEqT,EACA0lB,EACA8D,GAEA,OAAOh9B,KAAKqvC,QAAQlvC,OAAOqT,EAAQ0lB,EAAQ8D,IAGtCgxD,EAAA9tF,UAAAkJ,IAAP,SACEoK,EACA0lB,EACA8E,GAEA,OAAOh+B,KAAKqvC,QAAQjmC,IAAIoK,EAAQ0lB,EAAQ8E,IAG1CgwD,EAAA9tF,UAAA+tF,aAAA,WACE,OAAOjuF,KAAKqvC,QAAQpR,0DAnBSsC,uHADpBytD,EAAwBltF,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDw4E,oBCmBX,SAAAE,EACUhkE,EACAikE,GAFV,IAAA/8E,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAmuF,yBAAAA,EAlBVnuF,KAAAouF,eAEIpuF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O7CX2B,8B6CY3BzU,EAAAA,WAAU,WACR,OAAOxE,EAAK+8E,yBAAyBF,eAAep6E,KAClDC,EAAAA,KAAI,SAACqqB,GAAc,OAAA,IAAIkwD,GAAqClwD,MAC5D1gB,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI03E,GAAkC7kE,GAAsBnlB,aAWxE,gDAHsBmmB,EAAAA,eACgBujE,MAlBpCltF,EAAA,CADC4pB,EAAAA,+CADUwjE,EAAgBptF,EAAA,CAD5ByU,EAAAA,cACY24E,oBCCX,SAAAK,EAAsBl/C,GAAArvC,KAAAqvC,QAAAA,SAEfk/C,EAAAruF,UAAAq7B,WAAP,SAAkB/nB,EAAgB0lB,GAChC,OAAOl5B,KAAKqvC,QAAQ9T,WAAW/nB,EAAQ0lB,IAGlCq1D,EAAAruF,UAAAs7B,oBAAP,SACEhoB,EACA0lB,GAEA,OAAOl5B,KAAKqvC,QAAQ7T,oBAAoBhoB,EAAQ0lB,IAG3Cq1D,EAAAruF,UAAAu7B,6BAAP,SACEjoB,EACA0lB,GAEA,OAAOl5B,KAAKqvC,QAAQ5T,6BAA6BjoB,EAAQ0lB,IAGpDq1D,EAAAruF,UAAAw7B,0BAAP,SACEloB,EACA0lB,GAEA,OAAOl5B,KAAKqvC,QAAQ3T,0BAA0BloB,EAAQ0lB,6CAxBzBmH,uHADpBkuD,EAAiBztF,EAAA,CAH7ByU,EAAAA,WAAW,CACVC,WAAY,UAED+4E,oBCCX,SAAAC,EAAsBn/C,GAAArvC,KAAAqvC,QAAAA,SAEfm/C,EAAAtuF,UAAAg8B,cAAP,SACE1oB,EACA0lB,EACAiD,GAEA,OAAOn8B,KAAKqvC,QAAQnT,cAAc1oB,EAAQ0lB,EAAQiD,IAG7CqyD,EAAAtuF,UAAAk8B,WAAP,SACE5oB,EACA0lB,EACAmD,GAEA,OAAOr8B,KAAKqvC,QAAQjT,WAAW5oB,EAAQ0lB,EAAQmD,IAG1CmyD,EAAAtuF,UAAAo8B,QAAP,SACE9oB,EACA0lB,EACAqD,GAEA,OAAOv8B,KAAKqvC,QAAQ/S,QAAQ9oB,EAAQ0lB,EAAQqD,IAGvCiyD,EAAAtuF,UAAAs8B,QAAP,SAAehpB,EAAgB0lB,GAC7B,OAAOl5B,KAAKqvC,QAAQ7S,QAAQhpB,EAAQ0lB,IAG/Bs1D,EAAAtuF,UAAAu8B,kBAAP,SACEjpB,EACA0lB,GAEA,OAAOl5B,KAAKqvC,QAAQ5S,kBAAkBjpB,EAAQ0lB,6CAlCjBoH,uHADpBkuD,EAAyB1tF,EAAA,CAHrCyU,EAAAA,WAAW,CACVC,WAAY,UAEDg5E,oBCqZX,SAAAC,EACUvkE,EACAwkE,EACAP,EACAQ,GAJV,IAAAv9E,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA0uF,0BAAAA,EACA1uF,KAAAmuF,yBAAAA,EACAnuF,KAAA2uF,kBAAAA,EAvYF3uF,KAAAy0E,eAAiBz0E,KAAKkqB,SAASrW,KACrCwW,EAAAA,OACEqqD,GACA9T,KAKJ5gE,KAAA4uF,oBAII5uF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9CHgC,mC8CIhCvW,EAAAA,KAAI,SAAC3H,GAA+C,OAAAA,EAAOR,WAC3Dof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKs9E,0BACFxyD,cAAcvwB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQwwB,SACtDtoB,KACCkX,EAAAA,UAAS,SAACoR,GAOR,OANAA,EAAmB,UAAIxwB,EAAQwwB,QAAQ4W,UACnCpnC,EAAQwwB,QAAQgD,QAAUxzB,EAAQwwB,QAAQgD,OAAOC,cACnD5/B,OAAOa,OAAO87B,EAAQgD,OAAQ,CAC5BC,aAAczzB,EAAQwwB,QAAQgD,OAAOC,ehYjDhB,cgYoDrBzzB,EAAQ6H,OACH,CACL,IAAIq7E,GAAmC,CACrCr7E,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,OAChBiD,QAASA,KAIN,CACL,IAAI2yD,GAA8BnjF,EAAQ6H,QAC1C,IAAIq7E,GAAmC,CACrCr7E,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,OAChBiD,QAASA,QAKjB1e,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIm4E,GACFtlE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAgvF,oBAOIhvF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9CnDgC,mC8CoDhCvW,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKs9E,0BACTtyD,WAAWzwB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQwwB,QAAQnyB,IAC3D6J,KACCkX,EAAAA,UAAS,WAAM,MAAA,CACb,IAAIkkE,GAA0CtjF,EAAQwwB,SACtD,IAAI+yD,GAA0C,CAC5C17E,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,SAElB,IAAIi2D,GACJ,IAAIC,GACJ,IAAIC,GAA2C,CAC7C77E,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,aAGpBzb,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI04E,GACF7lE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAuvF,4BAGIvvF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9C/EF,4C8CgFEvW,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKs9E,0BACTjyD,kBAAkB9wB,EAAQ6H,OAAQ7H,EAAQutB,QAC1CrlB,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIsyD,GAAkDtyD,MAE/Dzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI64E,GACFhmE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAA0vF,wCAGI1vF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOu2C,IACP71C,EAAAA,UAAS,WAAM,MAAA,CACb,IAAI4kE,GACJ,IAAIP,QAKRpvF,KAAA4vF,oCAEI5vF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOqqD,IACP5gE,EAAAA,KAAI,WAAM,OAAA,IAAIq7E,OAIhBnvF,KAAA6vF,2BAEI7vF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOmC,IACP1Y,EAAAA,KAAI,WAAM,OAAA,IAAIs4E,OAIhBpsF,KAAA8vF,0BAEI9vF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAO0lE,IACPj8E,EAAAA,KAAI,WAAM,OAAA,IAAIs4E,OAIhBpsF,KAAAgwF,iBAIIhwF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9CtI6B,gC8CuI7BvW,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKs9E,0BACTpyD,QAAQ3wB,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQskF,gBAChDp8E,KACCkX,EAAAA,UAAS,WACP,MAAO,CACL,IAAImlE,GACFvkF,EAAQskF,gBAEV,IAAI1e,GAAqB,CACvB/9D,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,aAItBzb,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIu5E,GACF1mE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAowF,sBAIIpwF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9C1JkC,qC8C2JlCvW,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GAER,OAAOyF,EAAK+8E,yBACThuF,OAAOwL,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQqxB,gBAC/CnpB,KACCkX,EAAAA,UAAS,SAACtK,GACR,MhY1OyB,cgY0OrB9U,EAAQ6H,OACH,CAAC,IAAI68E,GAA4C5vE,IAEjD,CACL,IAAI6vE,GAAmC3kF,EAAQ6H,QAC/C,IAAI68E,GAA4C5vE,OAItDhD,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI25E,GACF9mE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAwwF,mBAGIxwF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9CtL+B,kC8CuL/BvW,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK+8E,yBACT/kF,IAAIuC,EAAQ6H,OAAQ7H,EAAQutB,OAAQvtB,EAAQqxB,eAAehzB,IAC3D6J,KACCC,EAAAA,KACE,WACE,OAAA,IAAI28E,GACF9kF,EAAQqxB,mBAGdvf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI85E,GACFjnE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAA2wF,YAKI3wF,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOumE,IACP98E,EAAAA,KAAI,SAAC3H,GAAgB,OAAAA,EAAOR,WAC5Bof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKu9E,kBACTpzD,WAAW5vB,EAAQ6H,OAAQ7H,EAAQutB,QACnCrlB,KACC+B,EAAAA,WAAU,SAACsnB,GAAS,MAAA,CAClB,IAAI28C,GAAuB,CAAE3gD,OAAQvtB,EAAQutB,SAC7C,IAAI23D,GAAkC3zD,OAExCzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIk6E,GAA+BrnE,GAAsBnlB,YAIpE6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAA+wF,qBAGI/wF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9C9NiC,oC8C+NjCvW,EAAAA,KAAI,SAAC3H,GAAgD,OAAAA,EAAOR,WAC5Dof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKu9E,kBACTnzD,oBAAoB7vB,EAAQ6H,OAAQ7H,EAAQutB,QAC5CrlB,KACCC,EAAAA,KACE,SAACopB,GACC,OAAA,IAAI8zD,GAA2C9zD,MAEnDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIq6E,GACFxnE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAkxF,0BAEIlxF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O3DzT8B,6B2D0T9BvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrDmI,EAAAA,KAAI,SAACnI,GACH,OAAO,IAAI6gF,GAAoC,CAC7Ch5E,OAAQ7H,EAAQ6H,OAChB0lB,OAAQvtB,EAAQutB,aAMtBl5B,KAAAmxF,8BAGInxF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9C5UF,8C8C6UEvW,EAAAA,KACE,SAAC3H,GAAyD,OAAAA,EAAOR,WAEnEmF,EAAAA,QAAO,SAACnF,GAAY,OAAAkJ,QAAQlJ,EAAQutB,WACpCtjB,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKu9E,kBACTlzD,6BAA6B9vB,EAAQ6H,OAAQ7H,EAAQutB,QACrDrlB,KACCC,EAAAA,KAAI,WAAM,OAAA,IAAIs9E,MACd3zE,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIy6E,GACF5nE,GAAsBnlB,YAMlC6vE,GAAWn0E,KAAKy0E,iBAIlBz0E,KAAAsxF,2BAIItxF,KAAKkqB,SAASrW,KAChBwW,EAAAA,O9CjWF,2C8CkWEvW,EAAAA,KAAI,SAAC3H,GAAsD,OAAAA,EAAOR,WAClEmF,EAAAA,QAAO,SAACnF,GAAY,OAAAkJ,QAAQlJ,EAAQutB,WACpCo+B,EAAAA,WAAU,SAAC3rD,GACT,OAAOyF,EAAKu9E,kBACTjzD,0BAA0B/vB,EAAQ6H,OAAQ7H,EAAQutB,QAClDrlB,KACCC,EAAAA,KACE,WACE,OAAA,IAAIy9E,GAAgDnxF,EAAA,GAC/CuL,OAGT8R,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KAAK,CACH,IAAI0c,GAA6CpxF,EAAAA,EAAA,GAC5CuL,GAAO,CACVrH,MAAOmlB,GAAsBnlB,MAE/B,IAAIitE,GAAqB,CACvBr4C,OAAQvtB,EAAQutB,OAChB1lB,OAAQ7H,EAAQ6H,kBAM5B2gE,GAAWn0E,KAAKy0E,iBASpB,gDALsBhqD,EAAAA,eACiB+jE,UACDR,UACPO,MA/X7BztF,EAAA,CADC4pB,EAAAA,oDAmDD5pB,EAAA,CADC4pB,EAAAA,oDAyCD5pB,EAAA,CADC4pB,EAAAA,4DA2BD5pB,EAAA,CADC4pB,EAAAA,wEAaD5pB,EAAA,CADC4pB,EAAAA,oEASD5pB,EAAA,CADC4pB,EAAAA,2DASD5pB,EAAA,CADC4pB,EAAAA,0DASD5pB,EAAA,CADC4pB,EAAAA,iDAoCD5pB,EAAA,CADC4pB,EAAAA,sDAoCD5pB,EAAA,CADC4pB,EAAAA,mDA8BD5pB,EAAA,CADC4pB,EAAAA,4CA0BD5pB,EAAA,CADC4pB,EAAAA,qDA4BD5pB,EAAA,CADC4pB,EAAAA,0DAeD5pB,EAAA,CADC4pB,EAAAA,8DA4BD5pB,EAAA,CADC4pB,EAAAA,2DAhWU+jE,EAAe3tF,EAAA,CAD3ByU,EAAAA,cACYk5E,MCtBAziE,GAAiB,CAC5ByiE,GACAd,GACAO,kBCaF,SAAAuD,KAAkC,OAArBA,EAAmB3wF,EAAA,CAT/BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACAC,EAAAA,YAAYC,WjDVgB,WiDUaxB,IACzCyB,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CAAC0lB,OAEDmlE,oBCXb,SAAAC,WAcA,SAdaA,EACJA,EAAA5qF,QAAP,WACE,MAAO,CACLJ,SAAUirF,EACV/qF,UAAW,CACTilF,GACA,CACEjmF,QAASsmE,GACT/mD,YAAawnE,GACb7mF,OAAO,MATJ4rF,EAAcC,EAAA7wF,EAAA,CAH1BkG,EAAAA,SAAS,CACRC,QAAS,CAACwqF,OAECC,oBCsBX,SAAAE,EACY9F,EACAp2E,EACAknE,GAFA58E,KAAA8rF,cAAAA,EACA9rF,KAAA0V,YAAAA,EACA1V,KAAA48E,kBAAAA,SAMZgV,EAAA1xF,UAAAwqF,0BAAA,WAAA,IAAAt5E,EAAApR,KACE,OAAOA,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO09E,IACP1/D,EAAAA,eACEnyB,KAAK8rF,cAAcj4E,KACjBM,EAAAA,OAAO0xC,GnDlCf,+BmDqCI1oC,EAAAA,KAAI,SAACjY,OAAGihF,EAAH/hF,EAAAc,EAAA,GAAG,GAEFihF,EAAar6E,SAAWq6E,EAAar7E,SAAWq7E,EAAa7hF,OAE/D8M,EAAK0gF,gCAGT13D,EAAAA,MAAM,GACNwQ,EAAAA,YAAY,CAAEwoC,WAAY,EAAGC,UAAU,MAO3Cue,EAAA1xF,UAAA4qF,wBAAA,WACE,OAAO9qF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO49E,MAOXH,EAAA1xF,UAAA0qF,4BAAA,WACE,OAAO5qF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO69E,MAOXJ,EAAA1xF,UAAAqqF,mBAAA,WACE,OAAOvqF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO89E,MAOXL,EAAA1xF,UAAAgyF,6BAAA,WACE,OAAOlyF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO0xC,GnDpFkC,yBmD2F7C+rC,EAAA1xF,UAAAiyF,+BAAA,WACEnyF,KAAK8rF,cAAcp4E,SACjB,IAAI0+E,KAORR,EAAA1xF,UAAAmyF,0BAAA,WACE,OAAOryF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO0xC,GnDrG+B,sBmD4G1C+rC,EAAA1xF,UAAAoyF,4BAAA,WACEtyF,KAAK8rF,cAAcp4E,SACjB,IAAI6+E,KAORX,EAAA1xF,UAAAsyF,uCAAA,WACExyF,KAAK8rF,cAAcp4E,SACjB,IAAI07E,KAORwC,EAAA1xF,UAAAuyF,oCAAA,WACE,OAAOzyF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO0xC,GnD9HX,+BmDqIA+rC,EAAA1xF,UAAAwyF,2BAAA,WACE1yF,KAAK8rF,cAAcp4E,SACjB,IAAIy7E,KAORyC,EAAA1xF,UAAAorF,8BAAA,WACE,OAAOtrF,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAOw+E,IACP7hF,EAAAA,QAAO,SAAC0mC,GAAY,OAAgC,IAAhCh4C,OAAOuN,KAAKyqC,GAAS72C,YAQ7CixF,EAAA1xF,UAAA0yF,oBAAA,SAAoBz2D,GAEhB,IAAI4vD,EAMAC,EAPFhsF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACsO,EAAStO,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC+Y,EAAS/Y,KACtCxX,cACCswB,GAAUC,GACZhsF,KAAK8rF,cAAcp4E,SACjB,IAAIm/E,GAAmC,CACrCr/E,OAAMu4E,EACN7yD,OAAM8yD,EACN7vD,QAASA,OAUnBy1D,EAAA1xF,UAAA4xF,2BAAA,WAEI,IAAIgB,EAMAC,EAPF/yF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACqV,EAASrV,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC8f,EAAS9f,KACtCxX,cACCq3B,GAAUC,GACZ/yF,KAAK8rF,cAAcp4E,SACjB,IAAI27E,GAA2C,CAC7C77E,OAAMs/E,EACN55D,OAAM65D,OAWhBnB,EAAA1xF,UAAA8yF,gBAAA,SAAgB5F,GAEZ,IAAI6F,EAMAC,EAPFlzF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACwV,EAASxV,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAACigB,EAASjgB,KACtCxX,cACCw3B,GAAUC,GACZlzF,KAAK8rF,cAAcp4E,SACjB,IAAIy/E,GAAgC,CAClC3/E,OAAMy/E,EACN/5D,OAAMg6D,EACNjD,eAAgB7C,OAW1BwE,EAAA1xF,UAAAkzF,cAAA,SAAcj3D,GAEV,IAAIk3D,EADFrzF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAAC4V,EAAS5V,KACnChiB,cACC43B,GACFrzF,KAAK8rF,cAAcp4E,SACjB,IAAI4/E,GAA8B,CAChC9/E,OAAM6/E,EACNl3D,QAAOA,OAWjBy1D,EAAA1xF,UAAAqzF,mBAAA,SAAmBp3D,GAEf,IAAIq3D,EAMAC,EAPFzzF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAAC+V,EAAS/V,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAACwgB,EAASxgB,KACtCxX,cACCg4B,GAAUD,GACZxzF,KAAK8rF,cAAcp4E,SACjB,IAAIm7E,GAAmC,CACrCr7E,OAAMggF,EACNt6D,OAAMu6D,EACNt3D,QAASA,OAUnBy1D,EAAA1xF,UAAAwzF,gCAAA,WACE1zF,KAAK8rF,cAAcp4E,SACjB,IAAIigF,KAOR/B,EAAA1xF,UAAAu7B,6BAAA,WACE,IAAIjoB,EAMA0lB,EALJl5B,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC/5C,EAAS+5C,KACtCxX,cACCjoD,GAAU0lB,GACZl5B,KAAK8rF,cAAcp4E,SACjB,IAAIkgF,GAA6C,CAC/CpgF,OAAMA,EACN0lB,OAAMA,MASd04D,EAAA1xF,UAAAw7B,0BAAA,WACE,IAAIloB,EAMA0lB,EALJl5B,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC/5C,EAAS+5C,KACtCxX,cACCjoD,GAAU0lB,GACZl5B,KAAK8rF,cAAcp4E,SACjB,IAAIw7E,GAA0C,CAC5C17E,OAAMA,EACN0lB,OAAMA,MASd04D,EAAA1xF,UAAA2zF,6BAAA,WACE7zF,KAAKy7B,+BACLz7B,KAAK07B,4BACL17B,KAAK0yF,8BAGGd,EAAA1xF,UAAA+rF,cAAV,WACE,IAAIz4E,EAKJ,OAJAxT,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cAEAjoD,GpYlX8B,coYkXpBA,GACXxT,KAAK48E,kBAAkBtJ,wDApVAh+D,EAAAA,aACFjC,UACMg/D,gKAJpBuf,EAAuB9wF,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAEDo8E,oBCTX,SAAAkC,EACYhI,EACAp2E,EACAknE,GAFA58E,KAAA8rF,cAAAA,EACA9rF,KAAA0V,YAAAA,EACA1V,KAAA48E,kBAAAA,SAMZkX,EAAA5zF,UAAA+tF,aAAA,WACE,OAAOjuF,KAAK8rF,cAAcj4E,KAAKM,EAAAA,OAAO4/E,MAMxCD,EAAA5zF,UAAA8qF,kBAAA,WACE,OAAOhrF,KAAK8rF,cAAcj4E,KAAKM,EAAAA,OAAO6/E,MAMxCF,EAAA5zF,UAAA+zF,kCAAA,WACE,OAAOj0F,KAAK8rF,cAAcj4E,KACxBM,EAAAA,OAAO0xC,GpDlCiC,wBoDyC5CiuC,EAAA5zF,UAAAg0F,8BAAA,WACEl0F,KAAK8rF,cAAcp4E,SACjB,IAAIygF,KAORL,EAAA5zF,UAAAk0F,uBAAA,WACEp0F,KAAK8rF,cAAcp4E,SAAS,IAAI2gF,KAOlCP,EAAA5zF,UAAAo0F,qBAAA,SAAqBt3D,GAEjB,IAAI+uD,EAMAC,EAPFhsF,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACsO,EAAStO,KACnChiB,cAGHz7D,KAAK48E,kBACF3P,kBACA/4D,WAAU,SAAC++D,GAAiB,OAAC+Y,EAAS/Y,KACtCxX,cAECswB,GAAUC,GACZhsF,KAAK8rF,cAAcp4E,SACjB,IAAI6gF,GAAqC,CACvC/gF,OAAMu4E,EACN7yD,OAAM8yD,EACNhvD,eAAcA,OAWxB82D,EAAA5zF,UAAAs0F,kBAAA,SAAkBx3D,GAEd,IAAI81D,EAMA2B,EAPFz0F,KAAKisF,kBAEPjsF,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACqV,EAASrV,KACnChiB,cAGHz7D,KAAK48E,kBACF56D,YACA9N,WAAU,SAACwgF,GAAe,OAACD,EAAOC,KAClCj5B,cACCq3B,GAAU2B,GACZz0F,KAAK8rF,cAAcp4E,SACjB,IAAIihF,GAAkC,CACpCnhF,OAAMs/E,EACN55D,OAAQu7D,EAAKn7D,KACb0D,eAAgBA,OAU1B82D,EAAA5zF,UAAA00F,sBAAA,WACE50F,KAAK8rF,cAAcp4E,SAAS,IAAImhF,KAGxBf,EAAA5zF,UAAA+rF,cAAV,WACE,IAAIz4E,EAKJ,OAJAxT,KAAK0V,YACF9B,eACAM,WAAU,SAACupE,GAAc,OAACjqE,EAASiqE,KACnChiB,cAEAjoD,GrY1I8B,cqY0IpBA,GACXxT,KAAK48E,kBAAkBtJ,wDAtHAh+D,EAAAA,aACFjC,UACMg/D,gKAJpByhB,EAAsBhzF,EAAA,CAHlCyU,EAAAA,WAAW,CACVC,WAAY,UAEDs+E,MC8CbgB,GAAA,SAAAztF,GAAA,SAAAytF,mDAMA,OANiDh1F,EAAAg1F,EAAAztF,GAMjDytF,EANA,CAAiD7yD,IChEpC8yD,GAAoC,CAC/C1sF,QAAS,CACPC,IAAK,CACHC,UAAW,CACT+6B,UAAW,uBACXF,WAAY,iBACZ4xD,MAAO,YACPzyD,KAAM,mBAER0yD,QAAQ,IAGZC,cAAe,ICMjBC,GAAA,SAAA9tF,GAOE,SAAA8tF,EACYlN,EACA2E,GAFZ,IAAAx7E,EAIE/J,EAAAzG,KAAAZ,OAAOA,YAHGoR,EAAA62E,IAAAA,EACA72E,EAAAw7E,YAAAA,EANFx7E,EAAA82E,KAAyB92E,EAAK62E,IACrCxC,iBACA5xE,KAAK/C,EAAAA,QAAO,SAAClR,GAAM,OAAAiV,QAAQjV,OAO5BwR,EAAK0vB,SAAW3T,EAAAA,SAAS4T,sBAZgBjhC,EAAAq1F,EAAA9tF,GAmB3C8tF,EAAAj1F,UAAAioF,aAAA,WACE,OAAOnoF,KAAKkoF,KAAKr0E,KAAKC,EAAAA,KAAI,SAAClU,GAAM,OAAAA,EAAE+iC,WAOrCwyD,EAAAj1F,UAAAk1F,mBAAA,WACE,OAAOp1F,KAAK4sF,YACTE,UAAU,eACVj5E,KAAKC,EAAAA,KAAI,SAAC3Q,GAAU,MAAA,CAAC,CAAEA,MAAOA,EAAOkyF,KAAM,oDAtB/B/P,UACQ0H,yIATdmI,EAAuBr0F,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAED2/E,GAAb,CAA6CjpB,kBCP7C,SAAAopB,KAAiC,OAApBA,EAAkBx0F,EAAA,CAT9BkG,EAAAA,SAAS,CACRJ,UAAW,CACT,CACEhB,QAASsmE,GACT/mD,YAAagwE,GACbrvF,OAAO,OAIAwvF,eCVGC,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA,GAGO,SAACzwF,GACN,IAAI2wF,EAAsB,GAE1B,OAAO3wF,EAAO8O,KACZsJ,EAAAA,KAAI,SAAC9a,GAAU,OAAAqzF,EAAe1xF,KAAK3B,MACnCoU,EAAAA,aAAa++E,EAAMC,GACnB3hF,EAAAA,KAAI,WAAM,OAAA4hF,KACVv4E,EAAAA,KAAI,WAAM,OAACu4E,EAAiB,QCSlC,IAAAC,GAAA,WACE,SAAAA,EAAsBC,GAAA51F,KAAA41F,cAAAA,SAOtBD,EAAAz1F,UAAA21F,mBAAA,SACEjzD,EACAkzD,GAFF,IAAA1kF,EAAApR,KAIE,OAAOA,KAAK+1F,UAAUnzD,EAAQkzD,GAAejiF,KAC3C+B,EAAAA,WAAU,SAAC2sB,GAAS,OAAAnxB,EAAK4kF,WAAWzzD,QAaxCozD,EAAAz1F,UAAA+1F,oBAAA,SAAoBrzD,GAClB,OAAO5iC,KAAKk2F,kBAAkBtzD,GAAQ/uB,KACpCC,EAAAA,KAAI,SAACyuB,GAAS,QAAEA,KAAUA,EAAK4zD,mBAOnCR,EAAAz1F,UAAAk2F,uBAAA,SACEC,GAEA,OAAOz/E,EAAAA,GAAG5W,KAAKs2F,iBAAiBD,KAMlCV,EAAAz1F,UAAAq2F,wBAAA,SACE5pF,GADF,IAAAyE,EAAApR,KAGE,OAAO4W,EAAAA,GAAGjK,EAAImH,KAAI,SAAC9J,GAAO,OAAAoH,EAAKklF,iBAAiBtsF,QAMxC2rF,EAAAz1F,UAAAg2F,kBAAV,SAA4BtzD,GAC1B,OAAOhsB,EAAAA,GACL5W,KAAK41F,cAAcY,cAAgBx2F,KAAK41F,cAAcY,aAAaxB,MAC/Dh1F,KAAK41F,cAAcY,aAAaxB,MAAM36E,MAAK,SAACza,GAAM,OAAAA,EAAEgjC,SAAWA,KAC/D,OASE+yD,EAAAz1F,UAAA61F,UAAV,SACEnzD,EACAkzD,GAFF,IAAA1kF,EAAApR,KAIE,OAAOA,KAAKk2F,kBAAkBtzD,GAAQ/uB,KACpC+B,EAAAA,WAAU,SAAC2sB,GACT,OAAIA,GAEGuzD,EAAcvzD,OACjBuzD,EAAcvzD,KAAIniC,EAAA,GACbmiC,GAELuzD,EAAcvzD,KAAKO,MAAQ,IAExBgzD,EAAcvzD,KAAKO,QACtBgzD,EAAcvzD,KAAKO,MAAQ,IAEtB1xB,EAAK4kF,WAAWF,EAAevzD,EAAKO,QAEpClsB,EAAAA,GAAGk/E,QAaRH,EAAAz1F,UAAA81F,WAAV,SACEF,EACAhzD,eAWA,IAPGA,GACD9iC,KAAK41F,cAAcY,cACnBx2F,KAAK41F,cAAcY,aAAa1zD,QAEhCA,EAAQ9iC,KAAK41F,cAAcY,aAAa1zD,QAGrCA,EACH,OAAOlsB,EAAAA,GAAGk/E,OAGZ,IAAuB,IAAA1wF,EAAAnB,EAAAzE,OAAOuN,KAAK+1B,IAAMO,EAAAj+B,EAAA7C,QAAA8gC,EAAA1gC,KAAA0gC,EAAAj+B,EAAA7C,OAAE,CAAtC,IAAM4gC,EAAQE,EAAAhhC,MACjB,IAAK7C,OAAOuN,KAAK+oF,EAAcvzD,KAAKO,OAAO31B,SAASg2B,GAAW,CAE7D2yD,EAAcvzD,KAAKO,MAAMK,GAAY,OAErC,IAAwB,IAAAI,GAAA00B,OAAA,EAAAh0D,EAAAjE,KAAKy2F,wBAAwB3zD,EAAOK,KAASM,EAAAF,EAAAhhC,QAAAkhC,EAAA9gC,KAAA8gC,EAAAF,EAAAhhC,OAAE,CAAlE,IAAM+gC,EAASG,EAAAphC,MACbyzF,EAAcvzD,KAAKO,MAAMK,GAAUC,aACtC0yD,EAAcvzD,KAAKO,MAAMK,GAAUC,WAAa,IAElD0yD,EAAcvzD,KAAKO,MAAMK,GAAUC,WAAWp/B,KAAK,CACjD6+B,IAAKS,EAAUT,IACfc,SAAUL,EAAUK,SACpBjB,SAAUY,EAAUZ,WAEjBozD,EAAc1yD,aACjB0yD,EAAc1yD,WAAa,IAG7B0yD,EAAc1yD,WAAWp/B,KAAKs/B,yMAKpC,OAAO1sB,EAAAA,GAAGk/E,IAGFH,EAAAz1F,UAAAu2F,wBAAV,SACE3zD,EACAK,WAEMC,EAAa,GACnB,GAAIN,EAAMK,IAAaL,EAAMK,GAAUuzD,iBACrC,IAA0B,IAAAvxF,EAAAlB,EAAA6+B,EAAMK,GAAUuzD,cAAYtxF,EAAAD,EAAA5C,QAAA6C,EAAAzC,KAAAyC,EAAAD,EAAA5C,OAAE,CAAnD,IAAM8zF,EAAWjxF,EAAA/C,MACpB,GACErC,KAAK41F,cAAcY,cACnBx2F,KAAK41F,cAAcY,aAAapzD,WAChC,CACA,IAAME,EAAYtjC,KAAK41F,cAAcY,aAAapzD,WAChDizD,GAEE/yD,GACFF,EAAWp/B,KAAI5D,EAAA,CAAGyiC,IAAKwzD,GAAgB/yD,uGAK/C,OAAOF,GAGCuyD,EAAAz1F,UAAAo2F,iBAAV,SAA2BD,GACzB,OAAOr2F,KAAK41F,cAAcY,cACxBx2F,KAAK41F,cAAcY,aAAapzD,WAC9BpjC,KAAK41F,cAAcY,aAAapzD,WAAWizD,QAC3CtqF,4CAvK+B+oF,uHADjBa,EAAyB70F,EAAA,CAH9CyU,EAAAA,WAAW,CACVC,WAAY,UAEQmgF,GAAtB,iBCVE,SAAAgB,EACYC,EACAvnD,EACA3pC,GAFA1F,KAAA42F,0BAAAA,EACA52F,KAAAqvC,QAAAA,EACArvC,KAAA0F,OAAAA,SAGZixF,EAAAz2F,UAAA0J,IAAA,SACEI,EACA02B,GAFF,IAAAtvB,EAAApR,KAIE,OAAOA,KAAK42F,0BACTR,uBAAuBpsF,GACvB6J,KACC+B,EAAAA,WAAU,SAACihF,GACT,OAAAA,EACIjgF,EAAAA,GAAGigF,GACHzlF,EAAKi+B,QAAQ1kC,KAAKX,EAAI02B,QAKlCi2D,EAAAz2F,UAAA42F,QAAA,SAAQnqF,EAAe+zB,GAAvB,IAAAtvB,EAAApR,KACE,OAAOA,KAAK42F,0BAA0BL,wBAAwB5pF,GAAKkH,KACjE+B,EAAAA,WAAU,SAACmhF,GAET,IAAMC,EAAaD,EAAqB/pF,QACtC,SAACC,EAAKq2B,EAAWoX,GAIf,YAHkB3uC,IAAdu3B,GACFr2B,EAAIjJ,KAAK2I,EAAI+tC,IAERztC,IAET,IAGF,OAAI+pF,EAAWr2F,OAAS,GACdyQ,EAAK1L,OAAO2C,QAAQC,IAAI2sF,OAC5B7jF,EAAKi+B,QAAQ3N,0BAA0Bs1D,EAAYt2D,GACnDtvB,EAAKi+B,QAAQlO,oBAAoB61D,EAAYt2D,IAC/C7sB,KACAC,EAAAA,KAAI,SAACmjF,GAAqB,OAAA1yF,EACrBwyF,EAAqBjmF,OAAO+D,SAC5BoiF,OAIArgF,EAAAA,GAAGmgF,iDA7CqBpB,UAClB5xD,UACD38B,yJAJTuvF,EAAqB71F,EAAA,CAHjCyU,EAAAA,WAAW,CACVC,WAAY,UAEDmhF,oBCMX,SAAAO,EACUhtE,EACAitE,GAFV,IAAA/lF,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm3F,mBAAAA,EAGFn3F,KAAAy0E,eAAqCz0E,KAAKkqB,SAASrW,KACzDwW,EAAAA,OACEu2C,GACAp0C,GACAujE,KAIJ/vF,KAAAo3F,eAAiBC,EAAAA,cACf,WAAM,OAAA,SAACnyF,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAEuwF,EAAAtwF,EAAAswF,UAAWrwF,EAAAD,EAAA0rE,SAAAA,OAAA,IAAAzrE,EAAA,EAAAA,EAIlB,OAAAgM,EAAK8Y,SAASrW,KACZwW,EAAAA,O5ChC0B,wB4CiC1BqvD,EAAAA,SAAQ,SAAC7hB,GAAY,OAAAstB,GAAqBttB,EAAQlsD,QAAQ+0B,gBAC1D3V,EAAAA,UAAS,SAACusE,GACR,OAAAA,EAAYzjF,KACV0hF,GAAmB1kB,EAAU4kB,GAC7B1qE,EAAAA,UAAS,SAAC8sC,GACR,OAAAzmD,EAAKmmF,qBACH1/B,EAAQ/jD,KAAI,SAAC3H,GAAW,OAAAA,EAAOR,QAAQk3B,OACvCg1B,EAAQ,GAAGlsD,QAAQ+0B,oBAK3ByzC,GAAW/iE,EAAKqjE,qBAsCxB,OAlCUyiB,EAAAh3F,UAAAq3F,qBAAR,SACEC,EACA92D,GAKA,OAAO1gC,KAAKm3F,mBAAmBL,QAAQU,EAAe92D,GAAa7sB,KACjE+B,EAAAA,WAAU,SAACwtB,GACT,OAAA0xC,EAAAA,KACE1xC,EAAWtvB,KACT,SAACwvB,GACC,OAAA,IAAIm0D,GAAmC,CACrCn0D,UAASA,EACTT,IAAKS,EAAUT,IACfnC,YAAWA,WAKrBjjB,EAAAA,YAAW,SAACnZ,GACV,OAAAwwE,EAAAA,KACE0iB,EAAc1jF,KACZ,SAAC+uB,GACC,OAAA,IAAI60D,GAAgC,CAClC70D,IAAGA,EACHv+B,MAAOmlB,GAAsBnlB,GAC7Bo8B,YAAWA,sDA9DLjW,EAAAA,eACUksE,MAHnBO,EAAiBp2F,EAAA,CAD7ByU,EAAAA,cACY2hF,MCHPS,GAAiB,CACrB,CAAEn5E,QAAS,MAAOo5E,KAAM,OACxB,CAAEp5E,QAAS,MAAOo5E,KAAM,OACxB,CAAEp5E,QAAS,MAAOo5E,KALA,UAOdC,GAAqBtzF,EACtBozF,GAAc,CACjB,CAAEn5E,QAAS,MAAOo5E,KAVE,UAYhBE,GAAoBvzF,EACrBozF,GAAc,CACjB,CAAEn5E,QAAS,MAAOo5E,KAAM,SAe1B,SAAgBG,GAAYC,EAAcC,QAAA,IAAAA,IAAAA,GAAA,GAMxC,IALA,IAAMC,EAAWD,EACbH,GACAD,GACEpgF,EAAWugF,EAAK3oF,MAAM,KAAKi4D,UAC7B6wB,EAAQ,GACL1gF,EAAS9W,OAAS,GAAG,CAC1B,IAAMqX,EAAUP,EAAS1T,MACzB,GAAgB,OAAZiU,EACEP,EAAS9W,OAAS,EACpBw3F,GArCU,aAuCVA,GAAS,UAOXA,GAJkBD,EAASlrF,QACzB,SAACorF,EAAKC,GAAW,OAAAD,EAAI55E,QAAQ65E,EAAO75E,QAAS65E,EAAOT,QACpD5/E,GAGEP,EAAS9W,OAAS,IACpBw3F,GAAS,OAIf,OAAOA,EA4BT,SAAgBG,GACdC,GAEA,OAAOA,EAAKzkF,KAAI,SAACqD,GACf,IAAMqhF,GAAYrhF,EAAIc,WAAW,KAEjC,MAAO,CAAEugF,SAAQA,EAAEL,MAAO,IAAIJ,GAD9B5gF,EAAMqhF,EAAWrhF,EAAMA,EAAIwxB,OAAO,IACY,0BC/FlD,SAAA8vD,YAMEA,EAAAv4F,UAAAw4F,aAAA,SAAaC,GACX,IAAMC,EAGAN,GAAoBK,GAAU7kF,KAAI,SAAC5O,OAAEszF,EAAAtzF,EAAAszF,SAAUL,EAAAjzF,EAAAizF,MAAY,MAAA,CAC/DK,SAAQA,EACRL,MAAO,IAAI55E,OAAO45E,OAGdU,EAAkBD,EAAkB9nF,QAAO,SAACgoF,GAAS,OAAAA,EAAKN,YAC1DO,EAAkBH,EAAkB9nF,QAAO,SAACgoF,GAAS,OAACA,EAAKN,YAEjE,OAAO,SAACrhF,GACN,OAAA0hF,EAAgBG,MAAK,SAACC,GAAY,OAAAA,EAAQd,MAAMtzD,KAAK1tB,QACpD4hF,EAAgBC,MAAK,SAACC,GAAY,OAAAA,EAAQd,MAAMtzD,KAAK1tB,sGApB/CshF,EAAW33F,EAAA,CADvByU,EAAAA,WAAW,CAAEC,WAAY,UACbijF,oBCQX,SAAAS,EAAsBC,GAAAn5F,KAAAm5F,YAAAA,SAKtBD,EAAAh5F,UAAAk5F,SAAA,WACE,OAAO,WACL,OAAO,OAOXF,EAAAh5F,UAAAm5F,aAAA,SAAargF,GAAb,IAAA5H,EAAApR,KACQs5F,EAAWtgF,EAAMlF,KAAI,SAAC4D,GAAS,OAAAtG,EAAKmoF,YAAY7hF,MAChD8hF,EAAUx5F,KAAKy5F,YAAYH,GAIjC,OAHI1qF,EAAAA,cACF4qF,EAAgB,OAAIxgF,GAEfwgF,GAMTN,EAAAh5F,UAAAu5F,YAAA,SAAYH,GACV,IAAME,EAAU,SACd/hF,EACAiiF,EACAC,GAEA,IAAK,IAAIn5F,EAAI,EAAGA,EAAI84F,EAAS34F,OAAQH,IAAK,CACxC,IAAMkC,EAAS42F,EAAS94F,GAAGiX,EAAUiiF,EAAcC,GACnD,GAAIj3F,EACF,OAAOA,EAGX,OAAO,MAKT,OAHIkM,EAAAA,cACF4qF,EAAmB,UAAIF,GAElBE,GAQCN,EAAAh5F,UAAAq5F,YAAV,SAAsB7hF,QAAA,IAAAA,IAAAA,EAAA,IACpB,IAAM8hF,EAAU,SACd/hF,EACAiiF,EACAC;;;;;;;;;AAYA,GAAa,KAATjiF,EACF,MACsB,SAApBiiF,EAAMC,YACLF,EAAaG,eAAiBpiF,EAAS9W,OAAS,GAE1C,KAEF,CAAEm5F,SAAU,GAAIC,UAAW,IAGpC,IAAMvhD,EAAQ9gC,EAAKrI,MAAM,KAEzB,GAAImpC,EAAM73C,OAAS8W,EAAS9W,OAE1B,OAAO,KAGT,GACsB,SAApBg5F,EAAMC,YACLF,EAAaG,eAAiBrhD,EAAM73C,OAAS8W,EAAS9W,QAGvD,OAAO,KAMT,IAHA,IAAMo5F,EAA2C,GAGxCr/C,EAAQ,EAAGA,EAAQlC,EAAM73C,OAAQ+5C,IAAS,CACjD,IAAMs/C,EAAOxhD,EAAMkC,GACb1iC,EAAUP,EAASijC,GAEzB,GADoBs/C,EAAK/hF,WAAW,KAElC8hF,EAAUC,EAAKC,UAAU,IAAMjiF,OAC1B,GAAIgiF,IAAShiF,EAAQN,KAE1B,OAAO,KAIX,MAAO,CAAEoiF,SAAUriF,EAASU,MAAM,EAAGqgC,EAAM73C,QAASo5F,UAASA,IAK/D,OAHInrF,EAAAA,cACF4qF,EAAe,MAAI9hF,GAEd8hF,GAMTN,EAAAh5F,UAAAg6F,YAAA,SAAYC,GACV,IAAMX,EAAU,SACd/hF,EACAiyB,EACAiwD,GAEA,OAAOQ,EAAgB1iF,EAAUiyB,EAAOiwD,GACpC,KACA,CAAEG,SAAUriF,EAAUsiF,UAAW,KAKvC,OAHInrF,EAAAA,cACF4qF,EAA0B,iBAAIW,GAEzBX,GAMTN,EAAAh5F,UAAAk6F,YAAA,SAAYC,GACV,IAAMC,EAAgBt6F,KAAKm5F,YAAYT,aAAa2B,GAE9Cb,EAAU,SACd/hF,GAEA,IAAM8iF,EAAW,IAAI9iF,EAAS3D,KAAI,SAACvT,GAAM,OAAAA,EAAEmX,QAAM8wB,KAAK,KAEtD,OAAO8xD,EAAcC,GACjB,CAAET,SAAUriF,EAAUsiF,UAAW,IACjC,MAKN,OAHInrF,EAAAA,cACF4qF,EAAuB,cAAIa,GAEtBb,4CAxJ0Bf,uHADxBS,EAAiBp4F,EAAA,CAD7ByU,EAAAA,WAAW,CAAEC,WAAY,UACb0jF,oBCFX,SAAAsB,EACY1kE,EACAjd,EACA4hF,GAFAz6F,KAAA81B,SAAAA,EACA91B,KAAA6Y,qBAAAA,EACA7Y,KAAAy6F,kBAAAA,EAGFz6F,KAAA06F,YAAa,SAMvBF,EAAAt6F,UAAA+8D,KAAA,WACOj9D,KAAK06F,aACR16F,KAAK06F,YAAa,EAElB16F,KAAK26F,cAOCH,EAAAt6F,UAAAy6F,UAAV,WAEE,IAAM1jF,EAASjX,KAAK81B,SAASlsB,IAAIkO,EAAAA,QACjCb,EAAO2jF,YAAY56F,KAAK66F,gBAAgB5jF,EAAOvR,UAQvC80F,EAAAt6F,UAAA26F,gBAAV,SAA0BpiF,GAA1B,IAAArH,EAAApR,KACE,OAAOyY,EAAO3E,KAAI,SAAC6lF,GACjB,IAAMmB,EAAkB1pF,EAAK2pF,eAAepB,GAK5C,OAHIA,EAAM/hF,UAAY+hF,EAAM/hF,SAASjX,SACnCm6F,EAAgBljF,SAAWxG,EAAKypF,gBAAgBlB,EAAM/hF,WAEjDkjF,MAWDN,EAAAt6F,UAAA66F,eAAV,SAAyBpB,SACjBrhF,EAAYtY,KAAKg7F,aAAarB,GACpC,GAAIrhF,EAAW,CACb,IAAMC,EAAcvY,KAAK6Y,qBAAqBR,eAAeC,GAG7D,OAFAtY,KAAKi7F,oBAAoB1iF,EAAaD,EAAWqhF,IAE7CphF,MAAAA,OAAW,EAAXA,EAAa2iF,kBACRvB,EAAMjiF,KACbtX,EAAAA,EAAA,GACKu5F,GAAK,CACRH,QAASx5F,KAAKy6F,kBAAkBrB,eAEzB7gF,MAAAA,OAAW,EAAXA,EAAa+gF,kBACfK,EAAMjiF,KACbtX,EAAAA,EAAA,GACKu5F,GAAK,CACRH,QAASx5F,KAAKm7F,mBAAmBxB,EAAOphF,MAAAA,OAAW,EAAXA,EAAa+gF,aAEf,KAAb,QAAlBp0F,EAAAqT,MAAAA,OAAW,EAAXA,EAAaS,aAAK,IAAA9T,OAAA,EAAAA,EAAEvE,gBACtBg5F,EAAMH,QACbp5F,EAAAA,EAAA,GAAYu5F,GAAK,CAAEjiF,KAAMa,MAAAA,OAAW,EAAXA,EAAaS,MAAM,cAErC2gF,EAAMjiF,KACbtX,EAAAA,EAAA,GACKu5F,GAAK,CACRH,QAASx5F,KAAKy6F,kBAAkBpB,cAC9B9gF,MAAAA,OAAW,EAAXA,EAAaS,QAAS,OAK9B,OAAO2gF,GAUCa,EAAAt6F,UAAAi7F,mBAAV,SACExB,EACAyB,GAFF,IAAAhqF,EAAApR,KAIQs5F,EAAyB8B,EAAoBtnF,KACjD,SAACunF,GACC,MAAmC,mBAArBA,EACVA,EACAjqF,EAAKkqF,yBAAyB3B,EAAO0B,MAG7C,OAAOr7F,KAAKy6F,kBAAkBhB,YAAYH,IASlCkB,EAAAt6F,UAAAo7F,yBAAV,SACE3B,EACA4B,GAGA,OADgBv7F,KAAK81B,SAASlsB,IAAI2xF,EAC3Bz2C,CAAQ60C,IAOPa,EAAAt6F,UAAA86F,aAAV,SAAuBrB,GACrB,OAAOA,EAAMz8D,MAAQy8D,EAAMz8D,KAAKvjB,SAGxB6gF,EAAAt6F,UAAA+6F,oBAAV,SACE1iF,EACAD,EACAqhF,GAEA,GAAI/qF,EAAAA,YAAa,CAGf,GACkB,OAAhB2J,GACsB,OAAtBA,EAAYS,QACZT,MAAAA,OAAW,EAAXA,EAAa+gF,UAEb,OAIF,KAAK/gF,MAAAA,OAAW,EAAXA,EAAaS,OAMhB,YALAhZ,KAAK0Y,KACH,wCAAwCJ,EAAS,IACjDqhF,EACA,0EAOAa,EAAAt6F,UAAAwY,KAAR,eAAa,IAAA5B,EAAA,GAAAhS,EAAA,EAAAA,EAAApE,UAAAC,OAAAmE,IAAAgS,EAAAhS,GAAApE,UAAAoE,GACP8J,EAAAA,aACFC,QAAQ6J,KAAI7X,MAAZgO,QAAOtK,EAASuS,8CA9JE8f,EAAAA,gBACYxe,UACH8gF,mKAJpBsB,EAAyB15F,EAAA,CADrCyU,EAAAA,WAAW,CAAEC,WAAY,UACbglF,oBCAX,SAAAgB,EAAoBC,GAAAz7F,KAAAy7F,WAAAA,EAKtB,OAHED,EAAAt7F,UAAA+Y,UAAA,SAAUC,GACR,OAAOlZ,KAAKy7F,WAAWxiF,UAAUC,6CAHHN,MADrB4iF,EAAO16F,EAAA,CAHnB46F,EAAAA,KAAK,CACJ9xE,KAAM,WAEK4xE,oBCAX,SAAAG,EAAoBC,GAAA57F,KAAA47F,aAAAA,EAItB,OAHED,EAAAz7F,UAAA+Y,UAAA,SAAUye,GACR,OAAO13B,KAAK47F,aAAa3iF,UAAU,CAAEU,QAAS,UAAWG,OAAQ4d,8CAFjC9e,MADvB+iF,EAAc76F,EAAA,CAH1B46F,EAAAA,KAAK,CACJ9xE,KAAM,kBAEK+xE,oBCIb,SAAAE,KAAwB,OAAXA,EAAS/6F,EAAA,CALrBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACq0F,GAASG,IACxBr2C,QAAS,CAACk2C,GAASG,OAERE,SCVb,2BCWE,SAAAC,EACYrgF,EACqBmM,GADrB5nB,KAAAyb,OAAAA,EACqBzb,KAAA4nB,WAAAA,SAMjCk0E,EAAA57F,UAAA+uB,YAAA,SACE0qE,EACAztF,GAKA,OAHI6b,EAAAA,kBAAkB/nB,KAAK4nB,aACzB5nB,KAAKouB,SAASurE,EAAOztF,IAEhB,GAMC4vF,EAAA57F,UAAAkuB,SAAV,SAAmBlrB,EAA2BgJ,GAC5C,IAAMkK,EAASpW,KAAKyb,OAAOpF,aAEvBD,GAAUA,EAAOmG,WACnBnG,EAAOmG,SAAS4+B,KAAOjvC,EAAMiL,+CAxBbjB,UACyB1W,OAAMuB,WAAA,CAAA,CAAAgJ,KAAhD8M,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,gKAHCizE,EAAmBh7F,EAAA,CAD/ByU,EAAAA,WAAW,CAAEC,WAAY,SAIrB/T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,eAHCizE,eCRGC,GAAyBxgC,GAIvC,OAHe,WACbA,EAAQygC,aCMZ,IAAAC,GAAA,WACE,SAAAA,EACYv2F,EACA+0F,EACA3kE,GAFA91B,KAAA0F,OAAAA,EACA1F,KAAAy6F,kBAAAA,EACAz6F,KAAA81B,SAAAA,EAgDd,OA7CEt2B,OAAAgC,eAAcy6F,EAAA/7F,UAAA,sBAAmB,KAAjC,WACE,OACGF,KAAK0F,QAAU1F,KAAK0F,OAAO8S,SAAWxY,KAAK0F,OAAO8S,QAAQ0jF,UAAa,oCAO5ED,EAAA/7F,UAAA87F,UAAA,WACE,IAAM/kF,EAAiBjX,KAAK81B,SAASlsB,IAAIkO,EAAAA,QACnCqkF,EAAYn8F,KAAKo8F,YACnBD,EAAUx7F,QACZsW,EAAO2jF,YAAWr2F,EAAK43F,EAAcllF,EAAOvR,UAOtCu2F,EAAA/7F,UAAAk8F,UAAV,WACE,IAAKp8F,KAAKq8F,oBAAoB17F,OAC5B,MAAO,GAET,IAAM8X,EAAiB,GASvB,OAPAA,EAAOzU,KAAK,CACV41F,UAAW,OACXJ,QAASx5F,KAAKs8F,gBACdrtE,YAAa,CAAC6sE,IACdx4D,UAAW,KAGN7qB,GAMCwjF,EAAA/7F,UAAAo8F,cAAV,WACE,IAAM9C,EAAUx5F,KAAKy6F,kBAAkBL,YACrCp6F,KAAKq8F,qBAEP,OAAOr8F,KAAKy6F,kBAAkBP,YAAYV,6CAhDxB+C,UACWrD,UACTtiE,EAAAA,YAJXqlE,EAAqBn7F,EAAA,CADjCyU,EAAAA,cACY0mF,GAAb,GCAAO,GAAA,WAAA,SAAAA,WAgBA,SAhBaA,EACJA,EAAA11F,QAAP,WACE,MAAO,CACLJ,SAAU+1F,EACV71F,UAAW,CACTq1F,GACA,CAAEr2F,QAAS22F,GAAsBp3E,YAAa9f,GAC9C,CACEO,QAASk1D,EAAAA,gBACTh1D,OAAO,EACPI,WAAY61F,GACZ91F,KAAM,CAACg2F,QAXJO,EAAoBC,EAAA37F,EAAA,CADhCkG,EAAAA,YACYw1F,GAAb,MCJE,SAAYxyF,EAAYD,GACtB/J,KAAKgK,GAAKA,EACVhK,KAAK+J,KAAOA,iBCYd,SAAA2yF,EAAsBh3F,GAAtB,IAAA0L,EAAApR,KAAsBA,KAAA0F,OAAAA,EAfd1F,KAAA28F,kBAAgC,GAgBlC38F,KAAK48F,gBAEP58F,KAAK28F,kBAAoB38F,KAAK68F,uBAAuB/oF,KAAI,SAAC4D,GACxD,OAAAtG,EAAK0rF,YAAYplF,cAjBvBlY,OAAAgC,eAAck7F,EAAAx8F,UAAA,gBAAa,KAA3B,WACE,OAAOF,KAAK0F,QAAU1F,KAAK0F,OAAO8S,yCAQpChZ,OAAAgC,eAAWk7F,EAAAx8F,UAAA,gBAAa,KAAxB,WACE,OAAOF,KAAK+8F,cAAcC,2CAe5BN,EAAAx8F,UAAA+8F,eAAA,SAAeC,GACb,OACEl9F,KAAK48F,gBACJ58F,KAAKm9F,aAAaD,EAAal9F,KAAK28F,oBAO/BD,EAAAx8F,UAAAi9F,aAAV,SACED,EACAE,GAFF,IAAAhsF,EAAApR,KAIE,OAAOo9F,EAAcpE,MAAK,SAACqE,GACzB,OAAAjsF,EAAKksF,UAAUJ,EAAaG,OAOtBX,EAAAx8F,UAAAo9F,UAAV,SAAoBJ,EAAuBG,GACzC,GAAIH,EAAYv8F,SAAW08F,EAAa18F,OACtC,OAAO,EAGT,IAAK,IAAIH,EAAI,EAAGA,EAAI68F,EAAa18F,OAAQH,IAAK,CAC5C,IAAM+8F,EAAUF,EAAa78F,GACvBg9F,EAASN,EAAY18F,GAG3B,IAAK+8F,EAAQtlF,WAAW,MAAQslF,IAAYC,EAC1C,OAAO,EAGX,OAAO,GAMCd,EAAAx8F,UAAA28F,qBAAV,WACE,OAAOr9F,OAAOkgC,OAAO1/B,KAAK+8F,cAActkF,QAAQzL,QAC9C,SAACC,EAAKsL,GACJ,OAA0B,IAA1BA,EAAYykF,WACZzkF,EAAYS,OACZT,EAAYS,MAAMrY,OACdsM,EAAIzI,OAAO+T,EAAYS,OACvB/L,IACN,KAOMyvF,EAAAx8F,UAAA48F,YAAV,SAAsB3lF,GACpB,OAAQA,GAAO,IAAI9H,MAAM,+CAtEGsJ,uHAhBnB+jF,EAAsB57F,EAAA,CADlCyU,EAAAA,WAAW,CAAEC,WAAY,UACbknF,oBCIX,SAAAe,EACYliC,EACAmiC,GADA19F,KAAAu7D,QAAAA,EACAv7D,KAAA09F,UAAAA,SAMZD,EAAAv9F,UAAA+uB,YAAA,SAAY0qE,GACV,IAAIuD,EAAwBvD,EAAMxiF,IAAIrD,KAAI,SAACskF,GAAQ,OAAAA,EAAI1gF,QAKvD,OAFAwlF,EAAcA,EAAYv8F,OAASu8F,EAAc,CAAC,IAE9Cl9F,KAAKu7D,QAAQ0hC,eAAeC,GACvBl9F,KAAK09F,UAAUzuE,cAEjBrY,EAAAA,IAAG,6CAhBS8lF,UACE3tE,yIAHZ0uE,EAAoB38F,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACbioF,oBCsDX,SAAAE,EACUzzE,EACAjT,EACAsF,GAHV,IAAAnL,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAiX,OAAAA,EACAjX,KAAAuc,SAAAA,EAjDVvc,KAAA49F,UAA6B59F,KAAKkqB,SAASrW,KACzCwW,EAAAA,OrZbqB,eqZcrBvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrDwR,EAAAA,KAAI,SAACjY,OAAEwS,EAAAxS,EAAAwS,KAAMkM,EAAA1e,EAAA8W,MAAoBC,EAAA/W,EAAA+W,OAC/B7K,EAAK6F,OAAOiF,SAASxE,EAAItX,EAAA,CAAIwjB,YAAWA,GAAK3H,QAKjDjc,KAAA69F,eAAkC79F,KAAKkqB,SAASrW,KAC9CwW,EAAAA,OrZrB4B,sBqZsB5BvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrDwR,EAAAA,KAAI,SAAChG,GACH/F,EAAK6F,OAAO6mF,cAAc3mF,OAK9BnX,KAAA+9F,gBAAsC/9F,KAAKkqB,SAASrW,KAClDwW,EAAAA,OACEu2C,GACAp0C,GACAujE,IAEF5yE,EAAAA,KAAI,WACF,IAAM6gF,EAAiB5sF,EAAK6F,OAAOvR,OAAOoL,QACxC,SAAC6oF,GAAoB,QAAEA,EAAMz8D,MAAQy8D,EAAMz8D,KAAK+gE,sBAE9CD,EAAer9F,SAAWyQ,EAAK6F,OAAOvR,OAAO/E,QAC/CyQ,EAAK6F,OAAO2jF,YAAYoD,OAM9Bh+F,KAAAk+F,cAAoCl+F,KAAKkqB,SAASrW,KAChDwW,EAAAA,OrZ9CuB,iBqZ+CvBlN,EAAAA,KAAI,WAAM,OAAA/L,EAAKmL,SAASF,WAI1Brc,KAAAm+F,iBAAuCn+F,KAAKkqB,SAASrW,KACnDwW,EAAAA,OrZnD0B,oBqZoD1BlN,EAAAA,KAAI,WAAM,OAAA/L,EAAKmL,SAASG,cAQ5B,gDAJsB+N,EAAAA,eACF3S,EAAAA,cACEolD,EAAAA,YAjDpBp8D,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,qCAUpB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,0CAUpB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,2CAkBpB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,yCAOpB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,4CA1CTiqF,EAAa78F,EAAA,CADzByU,EAAAA,cACYooF,MCXA3xE,GAAiB,CAAC2xE,ICWlB1xE,GAA4B,CACvCwC,aAAc,EACdviB,MAAO,CACLiL,IAAK,GACLyM,YAAa,GACb9J,OAAQ,GACRkB,QAAS,CACPhR,GAAI,IAENo0F,aAAa,GAEfjjF,eAAWpP,GAGb,SAAgBmgB,KACd,MAAO,CACLjV,OAAQhL,IAIZ,SAAgBA,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAmyF,IAGQlyF,EAAOpC,MACb,KAAKu0F,EAAAA,kBACH,OAAAl+F,EAAAA,EAAA,GACK8L,GAAK,CACRiP,UAAWhP,EAAOR,QAAQ4yF,YAC1B9vE,aAActiB,EAAOR,QAAQg3C,MAAM34C,KAIvC,KAAKw0F,EAAAA,aACL,KAAKC,EAAAA,cACH,OAAAr+F,EAAAA,EAAA,GACK8L,GAAK,CACRiP,eAAWpP,IAIf,KAAK2yF,EAAAA,iBACH,MAAO,CACLxyF,MAAOC,EAAOR,QAAQ4yF,YACtB9vE,aAActiB,EAAOR,QAAQg3C,MAAM34C,GACnCmR,eAAWpP,GAIf,QACE,OAAOG,GAKb,IAAamgB,GAER,IAAI/mB,EAAAA,eAAwC,kBAEpCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAMdyyE,GAAA,WAAA,SAAAA,KAqEA,OAlEEA,EAAAz+F,UAAAu8D,UAAA,SAAU8hC,GAQR,IAPQ,IAKJvjF,EALI7D,EAAAonF,EAAApnF,IACAyM,EAAA26E,EAAAhnF,KAAAqM,YAEJ1X,EAAmCqyF,EAAYhnF,KAC/C6mF,GAAc,EAGXlyF,EAAM0yF,aACX1yF,EAAQA,EAAM0yF,YAGJ1hE,MAAQhxB,EAAMgxB,KAAK+gE,oBAC3BjjF,EAAU9O,EAAMgxB,KAAK+gE,oBAMpBG,IACApjF,GACE9O,EAAMqM,aACLrM,EAAMqM,YAAY0W,aAClB/iB,EAAMqM,YAAY0W,YAAY5U,MAC5B,SAACwkF,GAAM,OAAAA,GAAqB,iBAAhBA,EAAEC,gBAGpBV,GAAc,GAGV,IAAAtkF,EAAA5N,EAAA4N,OAGR,GAAI5N,EAAMiL,IAAIxW,OAAS,GAA2B,eAAtBuL,EAAMiL,IAAI,GAAGO,KACvCsD,EAAU,CACRhR,GAAI,oBACJD,KAAMojB,EAAAA,SAAS4T,mBAGjB,GAAIjnB,EAAoB,YACtBkB,EAAU,CAAEhR,GAAI8P,EAAoB,YAAG/P,KAAMojB,EAAAA,SAASyU,mBACjD,GAAI9nB,EAAqB,aAC9BkB,EAAU,CAAEhR,GAAI8P,EAAqB,aAAG/P,KAAMojB,EAAAA,SAAS0U,oBAClD,GAAI/nB,EAAkB,UAC3BkB,EAAU,CAAEhR,GAAI8P,EAAkB,UAAG/P,KAAMojB,EAAAA,SAAS0U,oBAC/C,QAA6B91B,IAAzBG,EAAMgxB,KAAK6hE,UACpB/jF,EAAU,CAAEhR,GAAIkC,EAAMgxB,KAAK6hE,UAAWh1F,KAAMojB,EAAAA,SAAS4T,mBAChD,IAAK/lB,EAAS,CACnB,GAAI9O,EAAMiL,IAAIxW,OAAS,EAGrBqa,EAAU,CACRhR,GAFA,IAAMkC,EAAMiL,IAAIrD,KAAI,SAACkrF,GAAe,OAAAA,EAAWtnF,QAAM8wB,KAAK,KAG1Dz+B,KAAMojB,EAAAA,SAAS4T,mBAGjB/lB,EAAU,CACRhR,GAAI,WACJD,KAAMojB,EAAAA,SAAS4T,cAMvB,MAAO,CAAE5pB,IAAGA,EAAEyM,YAAWA,EAAE9J,OAAMA,EAAEkB,QAAOA,EAAEojF,YAAWA,IAE3DO,EArEA,YC7DgBM,GACd1jC,GAGA,OADe,WAAM,OAAAA,EAAQ0B,QAc/B,IAAAiiC,GAAA,WAAA,SAAAA,WAoBA,SApBaA,EACJA,EAAAp4F,QAAP,WACE,MAAO,CACLJ,SAAUy4F,EACVv4F,UAAW,CACT0lB,GACA,CACE1mB,QAASw5F,EAAAA,sBACThoE,SAAUunE,IAEZ,CACE/4F,QAASk1D,EAAAA,gBACT50D,WAAY+4F,GACZh5F,KAAM,CAACu0F,IACP10F,OAAO,GAET,CAAEF,QAAS+S,GAAewM,YAAa9f,MAhBlC65F,EAAaC,EAAAr+F,EAAA,CAVzBkG,EAAAA,SAAS,CACRC,QAAS,CACP2mB,EAAAA,YAAYC,WtZxBe,SsZwBaxB,IACxCyB,EAAAA,cAAcD,WAAW7B,IACzBqzE,EAAAA,4BAA4Bv4F,QAAQ,CAClCy3F,YAAW,EACXe,StZ5ByB,esZgClBJ,GAAb,GCRA,IAAaK,GAAsB,IAAIj6F,EAAAA,eACrC,sBACA,CACEkQ,WAAY,OACZsvC,QAAS,WACP,OA1BJjsC,EA2BM2mF,EAAAA,OAAOpnF,IA1BbqiF,EA2BM+E,EAAAA,OAAOtG,IAzBG,SAACS,GACf,IAAMrhF,EAAYqhF,EAAMz8D,MAAQy8D,EAAMz8D,KAAc,QAC9C3kB,EAAcM,EAAqBR,eAAeC,GAClDU,EAAST,GAAeA,EAAYS,OAAU,GACpD,OAAOyhF,EAAkBpB,aAAargF,QAPxCH,EACA4hF,mBCkFA,SAAAgF,EACUv1E,EACAw1E,EACA5iF,GAHV,IAAA1L,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA0/F,sBAAAA,EACA1/F,KAAA8c,eAAAA,EAjFV9c,KAAA2/F,qBAGI3/F,KAAKkqB,SAASrW,KAChBwW,EAAAA,OhEbqC,oCgEcrCvW,EAAAA,KAAI,SAAC3H,GAA8C,OAAAA,EAAOR,WAC1DmI,EAAAA,KAAI,SAACnI,GACH,MAAO,CACLgB,IAAKyE,EAAKwuF,oBAAoBj0F,EAAQs7E,OACtC5E,OAAQ12E,EAAQ02E,WAGpBt3D,EAAAA,UAAS,SAACmS,GACR,GAAIA,EAAKvwB,IAAI+pF,aAAa/1F,OAAS,EACjC,OAAOyQ,EAAK0L,eAAejC,iBAAiBhH,KAC1C/C,EAAAA,QAAO,SAACytF,GAAgB,YAAgBxyF,IAAhBwyF,KACxBzqF,EAAAA,KAAI,SAACyqF,GAAgB,OAAAA,EAAYryF,MAAM8O,WACvC/G,EAAAA,KAAK,GACL8W,EAAAA,UAAS,SAAC2V,GAER,OAAAtvB,EAAKsuF,sBACF5I,QAAQ55D,EAAKvwB,IAAI+pF,aAAch2D,GAC/B7sB,KACCC,EAAAA,KACE,SAACsvB,GACC,OAAA,IAAIy8D,GAAyC,CAC3Cxd,OAAQnlD,EAAKmlD,OACbj/C,WAAYA,OAGlB3lB,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIkpF,GACF5iE,EAAKmlD,OACL54D,GAAsBnlB,aAO/B,GAAI44B,EAAKvwB,IAAIozF,QAAQp/F,OAAS,QAG9B,KAAIu8B,EAAKvwB,IAAIqzF,SAASr/F,OAAS,GAIpC,OAAOiW,EAAAA,GACL,IAAIkpF,GACF5iE,EAAKmlD,OACL,mCAgCZ,OAxBEod,EAAAv/F,UAAA0/F,oBAAA,SACE3nE,GAEA,IAAM8nE,EAAoB,GACpBrJ,EAAyB,GACzBsJ,EAAqB,GAW3B,OATA/nE,EAASlU,SAAQ,SAACrf,GACO,yBAAnBA,EAAKu7F,UACPvJ,EAAa1yF,KAAKU,EAAKsF,IACK,iBAAnBtF,EAAKu7F,UACdF,EAAQ/7F,KAAKU,EAAKsF,IACU,kBAAnBtF,EAAKu7F,WACdD,EAASh8F,KAAKU,EAAKsF,OAGhB,CAAE+1F,QAASA,EAASrJ,aAAcA,EAAcsJ,SAAUA,6CAI/Cv1E,EAAAA,eACaksE,UACPn7E,MAjF1B1a,EAAA,CADC4pB,EAAAA,qDADU+0E,EAA0B3+F,EAAA,CADtCyU,EAAAA,cACYkqF,oBCGX,SAAAS,EACYC,EACAvJ,GADA52F,KAAAmgG,eAAAA,EACAngG,KAAA42F,0BAAAA,SAQZsJ,EAAAhgG,UAAA0J,IAAA,SAAI82B,GAAJ,IAAAtvB,EAAApR,KACE,OAAOA,KAAK42F,0BACTX,oBAAoBv1D,EAAY12B,IAChC6J,KACC+B,EAAAA,WAAU,SAACwqF,GACT,OAAKA,EAcIxpF,EAAAA,GAAG,IAbHxF,EAAK+uF,eAAex1F,KAAK+1B,GAAa7sB,KAC3C4J,EAAAA,YAAW,SAACnZ,GACV,OACEA,aAAiBqZ,EAAAA,mBACA,MAAjBrZ,EAAMsZ,OAEChH,EAAAA,GAAG,IAEHkH,EAAAA,WAAWxZ,UAQ5BsR,EAAAA,WAAU,SAAC2sB,GAAS,OAAAnxB,EAAKivF,0BAA0B3/D,EAAa6B,QAU9D29D,EAAAhgG,UAAAmgG,0BAAR,SACE3/D,EACAo1D,GAEA,OAAO91F,KAAK42F,0BAA0Bf,mBACpCn1D,EAAY12B,GACZ8rF,6CA/CwBjyD,UACW8xD,yIAH5BuK,EAAgBp/F,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAED0qF,oBCsFX,SAAAI,EACUp2E,EACAq2E,EACAzjF,GAHV,IAAA1L,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAugG,iBAAAA,EACAvgG,KAAA8c,eAAAA,EA5EV9c,KAAAwgG,aAAmCxgG,KAAKkqB,SAASrW,KAC/CwW,EAAAA,OACEu2C,GACAp0C,GACAujE,IAEFn6E,EAAAA,WAAU,WACR,OAAAxE,EAAK0L,eAAejC,iBAAiBhH,KACnC/C,EAAAA,QACE,SAACytF,GACC,OAAAA,GACAA,EAAYryF,OACZqyF,EAAYryF,MAAMkyF,cACjBG,EAAYpjF,aAEjBlH,EAAAA,KAAK,GACLH,EAAAA,KAAI,SAACyqF,GAAgB,OAAAA,EAAYryF,MAAM8O,WACvC+P,EAAAA,UAAS,SAAC/P,GAAY,OAAApE,EAAAA,GAAG,IAAIuwE,GAA2BnsE,YAM9Dhb,KAAAygG,cAAoCzgG,KAAKkqB,SAASrW,KAChDwW,EAAAA,OjE7C8B,wBiE8C9BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnD+tE,EAAAA,SAAQ,SAACh5C,GAAgB,OAAAykD,GAAqBzkD,MAC9C3V,EAAAA,UAAS,SAAC2e,GACR,OAAAA,EAAM71B,KACJ+B,EAAAA,WAAU,SAAC8qB,GACT,OAAAtvB,EAAKmvF,iBAAiB32F,IAAI82B,GAAa7sB,KACrCkX,EAAAA,UAAS,SAACyrE,GACR,IAAM3+B,EAAoB,CACxB,IAAI6oC,GACFlK,EAAapzD,WAAWtvB,KAAI,SAACwvB,GAAc,MAAA,CACzCA,UAASA,EACT5C,YAAWA,OAGf,IAAIigE,GACFjgE,EACA81D,EAAaj0D,OAIXw8D,EAAYvI,EAAaj0D,KAAKp/B,MAYpC,OATI47F,GAAaA,IAAcr+D,EAAY12B,IACzC6tD,EAAQn+C,QACN,IAAIknF,GACF,CAAE52F,GAAI+0F,EAAWh1F,KAAM22B,EAAY32B,MACnCysF,EAAaj0D,OAKZs1B,KAETp6C,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIiqF,GACFngE,EACAjX,GAAsBnlB,iBAexC,gDAJsBmmB,EAAAA,eACQy1E,UACF1kF,MA5E1B1a,EAAA,CADC4pB,EAAAA,6CAwBD5pB,EAAA,CADC4pB,EAAAA,8CAxBU41E,EAAWx/F,EAAA,CADvByU,EAAAA,cACY+qF,MCnBAt0E,GAAiB,CAC5Bs0E,GACApJ,GACAuI,ICFWxzE,GAAkC,CAC7CqX,eAAWv3B,EACX20B,YAAa,IAGf,SAASogE,GACP50F,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAAA,GAGQC,EAAOpC,MACb,IrETmC,4BqEUjC,OAAO,EAET,IrEVuC,gCqEWvC,IrEZsC,+BqEapC,OAAO,EAEX,OAAOmC,EAGT,SAAgBD,GACdC,EACAC,eAEA,YAHA,IAAAD,IAAAA,EAAA60F,IAGQ50F,EAAOpC,MACb,IrEzB8B,uBqE0B5B,IAAMi3F,EAAqBh1F,GACzBG,EAAO5B,KAAKN,WACZ62F,IAEI9lF,EAAUmqE,GAAqBh5E,EAAOR,QAAQ+0B,aAAa,GACjE,OAAAtgC,EAAAA,EAAA,GACK8L,GAAK,CACRw0B,YAAWtgC,EAAAA,EAAA,GACN8L,EAAMw0B,cAAWx7B,EAAA,GAAAA,EACnB8V,GAAUgmF,EAAmB90F,EAAMw0B,YAAY1lB,GAAU7O,GAAOjH,MAIvE,IrEtCmC,4BqEuC3B87F,EAAqBh1F,GACzBG,EAAO5B,KAAKN,WACZ62F,IAEI9lF,EAAUmqE,GAAqBh5E,EAAOR,QAAQ+0B,aAAa,GACjE,OAAAtgC,EAAAA,EAAA,GACK8L,GAAK,CACRw0B,YAAWtgC,EAAAA,EAAA,GACN8L,EAAMw0B,cAAWv7B,EAAA,GAAAA,EACnB6V,GAAUgmF,EAAmB90F,EAAMw0B,YAAY1lB,GAAU7O,GAAOhH,MAIvE,IrEnDsC,+BqEoD9B67F,EAAqBh1F,GACzBG,EAAO5B,KAAKN,WACZ62F,IAEI9lF,EAAUmqE,GAAqBh5E,EAAOR,QAAQ+0B,aAAa,GACjE,OAAAtgC,EAAAA,EAAA,GACK8L,GAAK,CACRo3B,UAAWn3B,EAAOR,QAAQ23B,UAC1B5C,YAAWtgC,EAAAA,EAAA,GACN8L,EAAMw0B,cAAWt7B,EAAA,GAAAA,EACnB4V,GAAUgmF,EAAmB90F,EAAMw0B,YAAY1lB,GAAU7O,GAAO/G,MAIvE,IrEjEuC,gCqEkE/B47F,EAAqBh1F,GACzBG,EAAO5B,KAAKN,WACZ62F,IAEF,IAAKnhG,MAAMgF,QAAQwH,EAAOR,SAAU,CAC5BqP,EAAUmqE,GAAqBh5E,EAAOR,QAAQ+0B,aAAa,GACjE,OAAAtgC,EAAAA,EAAA,GACK8L,GAAK,CACRo3B,UAAWn3B,EAAOR,QAAQ23B,UAC1B5C,YAAWtgC,EAAAA,EAAA,GACN8L,EAAMw0B,cAAW2C,EAAA,GAAAA,EACnBroB,GAAUgmF,EAAmB90F,EAAMw0B,YAAY1lB,GAAU7O,GAAOk3B,OAM3E,OAAOn3B,ECtFT,SAAgBD,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,OAHoCH,GAM5BI,EAAOpC,MACb,IrEHF,2CqEII,GAAIoC,EAAOR,QAAQy3B,WAAY,CAC7B,IACM69D,EADa90F,EAAOR,QAAQy3B,WACGp2B,QACnC,SAACk0F,EAAwC59D,SACvC,OAAAljC,EAAAA,EAAA,GACK8gG,KAASh8F,EAAA,IACRo+B,EAAUT,IAAG,yBAA0BS,EAASp+B,MAEvD9E,EAEI,KAIP,OAAAA,EAAAA,EAAA,GACK8L,GACA+0F,IAMX,OAAO/0F,EC7BF,IAAM+f,GAAkC,CAAE1f,SAAU,IAE3D,SAAgBN,GACdC,EACAC,SAEA,YAHA,IAAAD,IAAAA,EAAAi1F,IAGQh1F,EAAOpC,MACb,IrELsC,+BqEMpC,IAAMw4B,EAAap2B,EAAOR,QAC1B,OAAAvL,EAAAA,EAAA,GAAY8L,GAAK,CAAEK,SAAQnM,EAAAA,EAAA,GAAO8L,EAAMK,WAAQrH,EAAA,GAAAA,EAAGq9B,EAAKK,QAASL,EAAIr9B,MAGzE,OAAOgH,ECZT,SAAgBD,GACdhC,GAQA,OAAO,SACLiC,EACAC,GAMA,QAPA,IAAAD,IAAAA,OAZwBH,GAmBpBI,EAAO5B,MAAQ4B,EAAO5B,KAAKN,aAAeA,EAC5C,OAAQkC,EAAOpC,MACb,ItEjBkC,+BsEkBhC,OAAOoC,EAAOR,QAAQi3B,OAGxB,ItEtB+B,4BsEuB7B,OAGF,ItEvB+B,4BsEwB7B,OAAOz2B,EAAOR,QAGhB,ItE5BkC,+BsE6BhC,OAAOQ,EAAOR,QAAQi3B,OAI5B,OAAO12B,YCfKggB,KACd,MAAO,CACLqW,KAAMpW,EAAAA,gBAAgB,CACpB63D,SAAUod,GACV1mD,MAAOvuB,EAAAA,gBAAgB,CACrBowB,QAAShvC,GACP4f,EAAAA,SAAS4T,aACTsgE,GAA6Bl0E,EAAAA,SAAS4T,eAExCrJ,QAASnqB,GACP4f,EAAAA,SAASyU,aACTy/D,GAA6Bl0E,EAAAA,SAASyU,eAExCsiD,SAAU32E,GACR4f,EAAAA,SAAS0U,cACTw/D,GAA6Bl0E,EAAAA,SAAS0U,gBAExCsiD,QAAS52E,GACP4f,EAAAA,SAAS4U,aACTs/D,GAA6Bl0E,EAAAA,SAAS4U,mBAI5CqB,WAAY12B,GAAco1E,GAAkBwf,IAC5C1yE,WAAYrhB,G1E1CwB,0B0E4ClCg0F,KAKN,IAAal1E,GAER,IAAI/mB,EAAAA,eAA2C,eAEvCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgBs1E,GACdv1F,GAEA,OAAO,SAAUC,EAAOC,GAQtB,OANEA,EAAOpC,OAAS62D,IAChBz0D,EAAOpC,OAASyiB,IAChBrgB,EAAOpC,OAASgmF,KAEhB7jF,OAAQH,GAEHE,EAAQC,EAAOC,IAI1B,IAAasgB,GAA4C,CAAC+0E,aCjE1CC,WASd,MAP4B,CAC1Bv1F,MAAO,CACL4b,YAAa,CACX/a,MAAI7H,EAAA,GAAIA,EAAY,IAAG6gB,EAAAA,kBAAkBkC,eAAc/iB,MAoB/D,IAAAw8F,GAAA,WAAA,SAAAA,KAA6B,OAAhBA,EAAc5gG,EAAA,CAb1BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACA3E,GACA4E,EAAAA,YAAYC,W3E1BW,M2E0BaxB,GAAc,CAAEI,aAAYk1E,KAChE7zE,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4Bq7F,IAC5Bn1E,OAGSo1E,GAAb,iBC5BA,SAAAE,WAYA,SAZaA,EACJA,EAAA96F,QAAP,WACE,MAAO,CACLJ,SAAUm7F,EACVj7F,UAAW,CACT0+E,GACA,CAAE1/E,QAASq8B,GAAW9c,YAAa9f,GACnC,CAAEO,QAASkvF,GAAoB3vE,YAAa9f,GAC5Cc,EAAqB4uF,OARhB6M,EAASC,EAAA/gG,EAAA,CAHrBkG,EAAAA,SAAS,CACRC,QAAS,CAACy6F,GAAgBpM,OAEfsM,oBCDX,SAAAE,EAGYC,EACA9Z,GADAjoF,KAAA+hG,UAAAA,EACA/hG,KAAAioF,IAAAA,EAWFjoF,KAAAgiG,gBAA6C,CACrDr/D,MAAO,eACPs/D,QAAS,iBACT3mB,YAAa,qBACb4mB,YAAa,qBACb79D,MAAO,eACP89D,OAAQ,iBAfRniG,KAAK+hG,UAAY/hG,KAAK+hG,WAAa,UAkBrCD,EAAA5hG,UAAAkiG,QAAA,WAAA,IAAAhxF,EAAApR,KACE,OAAOA,KAAKioF,IAAIxC,iBAAiB5xE,KAC/B/C,EAAAA,OAAO+D,SACPe,EAAAA,WAAU,SAAC2sB,GACT,IAAM8/D,EAAejxF,EAAKkxF,gBAAgB//D,GAE1C,OAAI8/D,EACKjxF,EAAKlP,QAAQmgG,GAGbzrF,EAAAA,GAAG,WAWRkrF,EAAA5hG,UAAAgC,QAAV,SAAkBmgG,GAAlB,IAAAjxF,EAAApR,KACQuiG,EAAwB/iG,OAAOuN,KAAK/M,KAAKgiG,iBAC5ClxF,QAAO,SAAC7P,GAAQ,OAAAohG,EAAajxF,EAAK4wF,gBAAgB/gG,OAClD6S,KAAI,SAAC7S,GACJ,OAAAohG,EAAajxF,EAAK4wF,gBAAgB/gG,MAAQ4S,KACxCC,EAAAA,KAAI,SAACopB,SAAS,OAAAh4B,EAAA,IACXjE,GAAMi8B,WAKf,OAAOxI,EAAAA,cAAc6tE,GAAgB1uF,KACnCC,EAAAA,KAAI,SAACopB,GAAS,OAAA19B,OAAOa,OAAMQ,MAAbrB,OAAM+E,EAAA,CAAQ,IAAO24B,SAU7B4kE,EAAA5hG,UAAAoiG,gBAAV,SAA0B//D,GACxB,IAAMigE,EAAoBxiG,KAAK+hG,UAAUjxF,QACvC,SAAC2xF,GAAa,OAAAA,EAASt2B,SAAS5pC,GAAQ,KAK1C,OAHAigE,EAAkBnhE,MAAK,SAAUnJ,EAAG34B,GAClC,OAAOA,EAAE4sE,SAAS5pC,GAAQrK,EAAEi0C,SAAS5pC,MAEhCigE,EAAkB,qEAzExBz7F,EAAAA,UAAQ,CAAAgD,KACR8M,EAAAA,OAAMC,KAAA,CAACo1D,aAEOoZ,2IALNwc,EAAehhG,EAAA,CAH3ByU,EAAAA,WAAW,CACVC,WAAY,SAIT/T,EAAA,EAAAsF,EAAAA,YACAtF,EAAA,EAAAoV,EAAAA,OAAOq1D,MAHC41B,oBCLb,SAAAY,YASEA,EAAAxiG,UAAAyiG,qBAAA,SACE5/D,EACA6/D,EACAC,GAEI9/D,GAEFvjC,OAAOuN,KAAKg2B,GAAYhf,SAAQ,SAAC2lB,GAC/B,IAAM9f,EAAO,QAAU8f,EAAQ,IACzBo5D,EAAa//D,EAAW2G,GAG9BlqC,OAAOuN,KAAK+1F,GAAY/+E,SAAQ,SAACg/E,GAC/B,IAAMC,EAAYF,EAAWC,GACZ,YAAbA,EACcC,EAAU3zF,MAAM,KACxB0U,SAAQ,SAACk/E,GACfL,EAAQM,UAAU15E,IAAIy5E,MAGxBJ,EAASM,aACPP,EACAh5E,EACEm5E,EACG1zF,MAAM,aACNm5B,KAAK,KACL46D,cACLJ,wGApCDN,EAAuB5hG,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAEDktF,UCKAW,GAA0B,IAAI/9F,EAAAA,eACzC,2BAWF,SAAgBg+F,GACdC,EACAvoD,EACA7kC,GAGE,IC5BsBqtF,EAElB9gG,EDyBN,OAAIqlB,EAAAA,kBAAkBizB,IAAauoD,EAbrC,SAAgC79F,GAC9B,IACE,OAAOuD,KAAKY,MAAMkZ,mBAAmBrd,IACrC,MAAOxC,GACP,MAAO,IAWAugG,EC7BeD,ED4BGrtF,EAASqtF,QC1B9B9gG,EADS,IAAI6b,OAAO,cD2BkBglF,EC3BK,WAAY,KACtBG,KAAKF,KAE1BzgF,mBAAmBrgB,EAAO,KAAQ,KD2B7C,GAaT,IAAAihG,GAAA,WAAA,SAAAA,WA0BA,SA1BaA,EAQJA,EAAA78F,QAAP,SACEkwB,GAEA,MAAO,CACLtwB,SAAUk9F,EACVh9F,UAAW,CACT,CACEhB,QAASy9F,GACTx9F,SAAUmxB,GAAWA,EAAQwsE,QAE/Bz9F,EAAqBu9F,GAAyB,CAC5CD,GACAx6E,EAAAA,YACA9R,EAAAA,cArBG4sF,EAAgBC,EAAA9iG,EAAA,CAD5BkG,EAAAA,SAAS,KACG28F,GAAb,YE9BgBE,GACdC,EACAC,GASA,OAPiB,WACXn1F,EAAAA,aACFk1F,EACGzqC,kBACAz2D,MAAK,SAAC8C,GAAW,OAAA07C,GAAe17C,EAAQq+F,GAAc,QAa/D,IAAAC,GAAA,WAAA,SAAAA,WAiBA,SAjBaA,EACJA,EAAAl9F,QAAP,WACE,MAAO,CACLJ,SAAUu9F,EACVr9F,UAAW,CACT,CACEhB,QAASk1D,EAAAA,gBACTh1D,OAAO,EACPI,WAAY29F,GACZ59F,KAAM,CACJizD,GACA,CAAC,IAAInyD,EAAAA,SAAYk6C,SAXhB+iD,EAAqBC,EAAAnjG,EAAA,CADjCkG,EAAAA,YACYg9F,GAAb,YCtBgBE,GACdJ,EACA1pC,GAGA,OADgB,WAAM,OAAA0pC,EAAkBvhF,WAAW63C,IAKrD,IAAA+pC,GAAA,WAAA,SAAAA,WAqBA,SArBaA,EACJA,EAAAr9F,QAAP,WACE,MAAO,CACLJ,SAAU09F,EACVx9F,UAAW,CACT,CACEhB,QAASizC,GACThzC,UAAU,GAEZ,CACED,QAASk1D,EAAAA,gBACTh1D,OAAO,EACPI,WAAYg+F,GACZj+F,KAAM,CACJizD,GACA,CAAC,IAAInyD,EAAAA,SAAY6xC,SAfhBurD,EAAuBC,EAAAtjG,EAAA,CADnCkG,EAAAA,SAAS,KACGm9F,GAAb,MCtBA,aCEA,SAASE,GAAgB3+F,GACvB,MAAyB,iBAAXA,GAAuBA,EAAO4+F,SAG9C,SAASC,GAAUC,EAAOxvE,GACxB,GAAc,MAAVwvE,EACF,OAAO,EAKT,IAHA,IAAMC,EAAaD,EAAMn1F,MAAM,KACzBq1F,EAAe1vE,EAAQ3lB,MAAM,KAE1B7O,EAAI,EAAGA,EAAIkkG,EAAa/jG,OAAQH,IAAK,CAC5C,IAAMmkG,EAAoBC,OAAOF,EAAalkG,IACxCqkG,EAAkBD,OAAOH,EAAWjkG,KAAO,EAEjD,GAAImkG,IAAsBE,EACxB,OAAOA,EAAkBF,EAG7B,OAAO,EAGT,SAAgBG,GAAep/F,EAAiB8+F,GAC9C,GAAIH,GAAgB3+F,GAClB,MAAoB,MAAb8+F,EAAM,IACRD,GAAU7+F,EAAO4+F,SAASE,MAAOA,EAAM77D,OAAO,EAAG67D,EAAM7jG,SACxD4jG,GAAU7+F,EAAO4+F,SAASE,MAAOA,GAIzC,SAAgBO,GAAiBr/F,EAAiBs/F,GAChD,GAAIX,GAAgB3+F,GAAS,CAC3B,IAAMu/F,EACW,MAAfD,EAAQ,GACJt/F,EAAO4+F,SAASU,EAAQr8D,OAAO,EAAGq8D,EAAQrkG,SAC1C+E,EAAO4+F,SAASU,GAEhBtiG,EACqB,iBAAlBuiG,EACHH,GAAep/F,EAAQu/F,GACvBA,EAEN,MAAsB,MAAfD,EAAQ,IAActiG,EAASA,qBCjCxC,SAAAwiG,EAAsBx/F,GAAA1F,KAAA0F,OAAAA,SAEtBw/F,EAAAhlG,UAAAilG,QAAA,SAAQnwE,GACN,OAAO8vE,GAAe9kG,KAAK0F,OAAQsvB,IAGrCkwE,EAAAhlG,UAAAklG,UAAA,SAAUJ,GACR,OAAOD,GAAiB/kG,KAAK0F,OAAQs/F,6CAPTK,uHADnBH,EAAoBpkG,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAED0vF,oBCHX,SAAAI,EACYC,EACAC,EACAP,GAFAjlG,KAAAulG,YAAAA,EACAvlG,KAAAwlG,cAAAA,EACAxlG,KAAAilG,cAAAA,EAGJjlG,KAAAylG,SAAU,EAWpB,OATWjmG,OAAAgC,eAAI8jG,EAAAplG,UAAA,iBAAc,KAAlB,SAAmBskG,GACtBxkG,KAAKilG,cAAcE,QAAQX,EAAMlgF,cAAgBtkB,KAAKylG,SACxDzlG,KAAKwlG,cAAcE,mBAAmB1lG,KAAKulG,aAC3CvlG,KAAKylG,SAAU,IACLzlG,KAAKilG,cAAcE,QAAQX,EAAMlgF,aAAetkB,KAAKylG,UAC/DzlG,KAAKwlG,cAAcG,QACnB3lG,KAAKylG,SAAU,6EAbMG,EAAAA,mBACEC,EAAAA,wBACAX,MAKlBpkG,EAAA,CAARglG,EAAAA,4CATUR,EAAqBxkG,EAAA,CAHjCilG,EAAAA,UAAU,CACTC,SAAU,sBAECV,oBCCX,SAAAW,EACYV,EACAC,EACAP,GAFAjlG,KAAAulG,YAAAA,EACAvlG,KAAAwlG,cAAAA,EACAxlG,KAAAilG,cAAAA,EAGJjlG,KAAAylG,SAAU,EAWpB,OATWjmG,OAAAgC,eAAIykG,EAAA/lG,UAAA,YAAS,KAAb,SAAc8kG,GACjBhlG,KAAKilG,cAAcG,UAAUJ,KAAahlG,KAAKylG,SACjDzlG,KAAKwlG,cAAcE,mBAAmB1lG,KAAKulG,aAC3CvlG,KAAKylG,SAAU,IACLzlG,KAAKilG,cAAcG,UAAUJ,IAAYhlG,KAAKylG,UACxDzlG,KAAKwlG,cAAcG,QACnB3lG,KAAKylG,SAAU,6EAbMG,EAAAA,mBACEC,EAAAA,wBACAX,MAKlBpkG,EAAA,CAARglG,EAAAA,uCATUG,EAAgBnlG,EAAA,CAH5BilG,EAAAA,UAAU,CACTC,SAAU,iBAECC,oBCIb,SAAAC,WAmBA,SAnBaA,EACJA,EAAAp/F,QAAP,SACEq/F,GAEA,MAAO,CACLz/F,SAAU0/F,EACVx/F,UAAW,CACTT,EAAqC,CACnCm+F,SAAU,CACRE,MAAO2B,GAAgB,OAG3B,CACEvgG,QAASy/F,GACTlgF,YAAa9f,MAdV6gG,EAAoBE,EAAAtlG,EAAA,CAJhCkG,EAAAA,SAAS,CACRG,aAAc,CAACm+F,GAAuBW,IACtC3gD,QAAS,CAACggD,GAAuBW,OAEtBC,MCJbG,GAAA,SAAAh/F,GACE,SAAAg/F,EAAsBvmC,GAAtB,IAAA1uD,EACE/J,EAAAzG,KAAAZ,KAAM,OAAKA,YADSoR,EAAA0uD,SAAAA,IAmCxB,OApCgChgE,EAAAumG,EAAAh/F,GAK9Bg/F,EAAAnmG,UAAA+Y,UAAA,SAAU5W,EAAYuiC,EAAiB0hE,GACrC,OAAOj/F,EAAAnH,UAAM+Y,UAASrY,KAAAZ,KAACqC,EAAOuiC,EAAQ0hE,EAAUtmG,KAAKumG,YAG/CF,EAAAnmG,UAAAqmG,QAAR,WACE,IAAM13D,EAAO7uC,KAAKwmG,gBAClB,IAEE,OADAC,EAAAA,YAAY53D,GACLA,EACP,MAAA3pC,GAEA,OADAlF,KAAK0mG,wBAAwB73D,GACtB,OAIHw3D,EAAAnmG,UAAAsmG,cAAR,WACE,IAAI9jG,EAKJ,OAJA1C,KAAK8/D,SACF99C,YACA9N,WAAU,SAAC26B,GAAS,OAACnsC,EAASmsC,KAC9B4sB,cACI/4D,GAGD2jG,EAAAnmG,UAAAwmG,wBAAR,SAAgC73D,GAC1BjgC,EAAAA,aACFC,QAAQ6J,KACN,+CAA+Cm2B,EAAI,uGA/BzBZ,MADrBo4D,EAAUvlG,EAAA,CADtB46F,EAAAA,KAAK,CAAE9xE,KAAM,YACDy8E,GAAb,CAAgCM,EAAAA,wBCY9B,SAAAC,EACYrrC,EACAsrC,GADA7mG,KAAAu7D,QAAAA,EACAv7D,KAAA6mG,GAAAA,EA+Cd,OA5CED,EAAA1mG,UAAA+Y,UAAA,SACE0mB,EACA3I,GAEA,QAFA,IAAAA,IAAAA,EAAA,IAEK2I,EAAuBolC,IAC1B,OAAQplC,EAAuBolC,IAGjC,IAAM9jE,EAAuB,iBAAV0+B,EAAqBA,EAAQA,EAAM1+B,IAMtD,MALqB,iBAAV0+B,IACT3I,EAAO52B,EAAAA,EAAA,GAAQ42B,GAAY2I,EAAM7lB,SAGnC9Z,KAAK8sF,UAAU7rF,EAAK+1B,GACbh3B,KAAK8mG,iBAGNF,EAAA1mG,UAAA4sF,UAAR,SAAkB7rF,EAAU+1B,GAA5B,IAAA5lB,EAAApR,KAEIiB,IAAQjB,KAAK+mG,kB3I1CiBx+B,EAAcC,GAChD,GAAID,IAASC,EACX,OAAO,EAET,IAAKD,IAASC,EACZ,OAAO,EAET,IAAMw+B,EAAQxnG,OAAOuN,KAAKw7D,GACpB0+B,EAAQznG,OAAOuN,KAAKy7D,GACpB0+B,EAAWF,EAAMrmG,OAGvB,GAAIumG,IAFaD,EAAMtmG,OAGrB,OAAO,EAET,IAAK,IAAIH,EAAI,EAAGA,EAAI0mG,EAAU1mG,IAAK,CACjC,IAAMS,EAAM+lG,EAAMxmG,GAClB,GAAI+nE,EAAKtnE,KAASunE,EAAKvnE,GACrB,OAAO,EAGX,OAAO,E2IsBFkmG,CAAoBnwE,EAASh3B,KAAKonG,eAEnCpnG,KAAK+mG,QAAU9lG,EACfjB,KAAKonG,YAAcpwE,EAEfh3B,KAAKy9B,KACPz9B,KAAKy9B,IAAIg+B,cAEXz7D,KAAKy9B,IAAMz9B,KAAKu7D,QACbuxB,UAAU7rF,EAAK+1B,GAAS,GACxB9iB,WAAU,SAACsnD,GAAQ,OAAApqD,EAAKi2F,aAAa7rC,QAIpCorC,EAAA1mG,UAAAmnG,aAAR,SAAqBhlG,GACnBrC,KAAK8mG,gBAAkBzkG,EACvBrC,KAAK6mG,GAAGQ,gBAGVT,EAAA1mG,UAAA29D,YAAA,WACM79D,KAAKy9B,KACPz9B,KAAKy9B,IAAIg+B,wDA7CQuxB,UACLsa,EAAAA,qBARLV,EAAa9lG,EAAA,CADzB46F,EAAAA,KAAK,CAAE9xE,KAAM,cAAe29E,MAAM,KACtBX,SCVb,2BCKE,SAAAY,EAAsB9hG,GAAtB,IAAA0L,EAAApR,KAAsBA,KAAA0F,OAAAA,EAFZ1F,KAAAynG,WAA0C,GAC1CznG,KAAA07C,OAAoC,GAoB3B17C,KAAA0nG,cAAgB,IAlBjC,IAAMhsD,EAAUh2C,EAAOq0C,MAAQr0C,EAAOq0C,KAAK2B,QAAW,GACtDl8C,OAAOuN,KAAK2uC,GAAQ33B,SAAQ,SAAC4jF,GAC3BjsD,EAAOisD,GAAO5jF,SAAQ,SAAC9iB,GACjBmQ,EAAKsqC,OAAO77C,eAAeoB,IACxBmQ,EAAKq2F,WAAWxmG,KACnBmQ,EAAKq2F,WAAWxmG,GAAO,CAACmQ,EAAKsqC,OAAOz6C,KAEtCmQ,EAAKq2F,WAAWxmG,GAAK+C,KAAK2jG,IAE1Bv2F,EAAKsqC,OAAOz6C,GAAO0mG,QAIrBnoG,OAAOuN,KAAK/M,KAAKynG,YAAY9mG,OAAS,GAAKiO,EAAAA,aAC7C5O,KAAK4nG,eAAe5nG,KAAKynG,YA+B/B,OAzBED,EAAAtnG,UAAA2nG,mBAAA,SAAmB5mG,GACjB,IAAM6mG,GAAW7mG,GAAO,IAAIoO,MAAMrP,KAAK0nG,eAAe,GAChDC,EAAQ3nG,KAAK07C,QAAU17C,KAAK07C,OAAOosD,GAEzC,OAAKH,GACIG,GAKHN,EAAAtnG,UAAA0nG,eAAR,SAAuB3gB,GAAvB,IAAA71E,EAAApR,KACQ+nG,EAAkB,GACxBvoG,OAAOuN,KAAKk6E,GAAOljE,SAAQ,SAAC9iB,GAC1B8mG,EAAM/jG,KACJ,MAAM/C,EAAG,sBAAsBgmF,EAAMhmF,GAAKunC,KAAK,MAAK,WAClDp3B,EAAKsqC,OAAOz6C,GAAI,IACdA,EAAG,SAGX4N,QAAQ6J,KACN,iEAAiEqvF,EAAMv/D,KACrE,iDA1CwBw/D,MAHnBR,EAAuB1mG,EAAA,CADnCyU,EAAAA,cACYiyF,eCGGS,GACdrtC,EACApsB,EACA05D,EACAC,GAEA,OAAO,WACL,OAAAvtC,EAAWvB,gBAAgB,QAAQz2D,MAAK,SAAC8C,GACvC,IAAI0iG,EAA6B,CAC/BC,GAAI,GACJC,YAAa5iG,EAAOq0C,KAAKC,aACzBuuD,MAAO7iG,EAAOq0C,KAAKwuD,MACnBC,cAAe,CACbC,aAAa,IAGjB,GAAI/iG,EAAOq0C,KAAK1xC,QAAS,CACvBqgG,EAAQC,IAAIC,GACZ,IAIMvgG,EAAU,CACdwgG,SA0DV,SAA4BnxF,EAAcywF,GACxC,IAAKzwF,EACH,OAEF,GAAIywF,IAAwBzwF,EAAK+gC,MAAM,kBAAmB,CAQxD,OAPI/gC,EAAKO,WAAW,OAClBP,EAAOA,EAAKS,MAAM,IAEhBT,EAAKO,WAAW,QAClBP,EAAOA,EAAKS,MAAM,IAEFgwF,EAAmB,IAAIzwF,EAG3C,OAAOA,EA7EgBoxF,CACfpjG,EAAOq0C,KAAK1xC,QAAQwgG,SACpBV,GAIAY,KAAMC,GAAqBd,IAE7BE,EAAahoG,EAAAA,EAAA,GAAQgoG,GAAa,CAAE//F,QAAOA,IAG7C,OAAOqgG,EAAQzrC,KAAKmrC,GAAe,YASzC,SAAuCa,QAAA,IAAAA,IAAAA,EAAA,IACrCzpG,OAAOuN,KAAKk8F,GAAWllF,SAAQ,SAAC8qB,GAC9BrvC,OAAOuN,KAAKk8F,EAAUp6D,IAAO9qB,SAAQ,SAACmlF,GACpCR,EAAQS,kBACNt6D,EACAq6D,EACAD,EAAUp6D,GAAMq6D,IAChB,GACA,SAdAE,CAAuB1jG,EAAOq0C,KAAKkvD,WACRz6D,EAqBxBxsB,YAAY9N,WAAU,SAAC26B,GAAS,OAAA65D,EAAQW,eAAex6D,aAUlE,SAAgBm6D,GACdd,GAEA,OAAO,SAAC/wF,EAAamyF,EAAkBC,EAAoBC,GACzDtB,EAAWt+F,IAAIuN,EAAK,CAAEknB,aAAc,SAAUnqB,WAC5C,SAACgpB,GAAS,OAAAqsE,EAASrsE,EAAM,CAAEtf,OAAQ,SACnC,SAACtZ,GAAU,OAAAilG,EAAS,KAAM,CAAE3rF,OAAQtZ,EAAMsZ,oBCnEhCqqF,GAHHwB,GAA+B,CAC1C,CACE7jG,QAASk1D,EAAAA,gBACT50D,WAAUwjG,GACVzjG,KAAM,CACJizD,GACAjrB,GACAvoB,EAAAA,WACA,CAAC,IAAI3e,EAAAA,SAAYgyC,KAEnBjzC,OAAO,ICfE6jG,GAAgC,CAC3C5vD,KAAM,CACJC,cAAc,EACduuD,OAAO,kBCOT,SAAAqB,EACYlkG,EACAmkG,GADA7pG,KAAA0F,OAAAA,EACA1F,KAAA6pG,iBAAAA,EALK7pG,KAAA8pG,mBAAqB75D,OAAO85D,aAAa,KACvC/pG,KAAAgqG,oBAAsB,IAyE3C,OAlEEJ,EAAA1pG,UAAA4sF,UAAA,SACE7rF,EACA+1B,EACAizE,GAHF,IAAA74F,EAAApR,UAEE,IAAAg3B,IAAAA,EAAA,SACA,IAAAizE,IAAAA,GAAA,GASA,IAAMf,EAAYlpG,KAAK6pG,iBAAiBhC,mBAAmB5mG,GACrDipG,EAAgBlqG,KAAKmqG,iBAAiBlpG,EAAKioG,GAEjD,OAAO,IAAIkB,EAAAA,YAAmB,SAACC,GAC7B,IAAMvd,EAAY,WACX4b,EAAQ4B,gBAGT5B,EAAQjlB,OAAOymB,EAAelzE,GAChCqzE,EAAW9nG,KAAKmmG,EAAQpoG,EAAE4pG,EAAelzE,KAErCizE,GACFI,EAAW9nG,KAAK6O,EAAK04F,oBAEvBpB,EAAQ6B,eAAerB,GAAW,WAC3BR,EAAQjlB,OAAOymB,EAAelzE,GAIjCqzE,EAAW9nG,KAAKmmG,EAAQpoG,EAAE4pG,EAAelzE,KAHzC5lB,EAAKo5F,iBAAiBvpG,EAAKioG,GAC3BmB,EAAW9nG,KAAK6O,EAAKq5F,iBAAiBP,WAU9C,OAFApd,IACA4b,EAAQgC,GAAG,kBAAmB5d,GACvB,WAAM,OAAA4b,EAAQiC,IAAI,kBAAmB7d,QAIhD8c,EAAA1pG,UAAA0qG,WAAA,SAAWC,GACT,OAAOnC,EAAQ6B,eAAeM,IAOtBjB,EAAA1pG,UAAAuqG,iBAAV,SAA2BxpG,GACzB,OAAO2N,EAAAA,YAAc,IAAI3N,EAAG,IAAMjB,KAAK8pG,oBAGjCF,EAAA1pG,UAAAsqG,iBAAR,SAAyBvpG,EAAaioG,GAChCt6F,EAAAA,aACFC,QAAQ6J,KACN,4BAA4BzX,EAAG,mBAAmBioG,EAAS,MAKzDU,EAAA1pG,UAAAiqG,iBAAR,SAAyBlpG,EAAa0mG,GACpC,OAAOA,EAAQ3nG,KAAKgqG,oBAAsB/oG,4CApExB+mG,UACUR,MANnBoC,EAAyB9oG,EAAA,CADrCyU,EAAAA,cACYq0F,oBCOb,SAAAkB,WAaA,SAbaA,EACJA,EAAAhkG,QAAP,WACE,MAAO,CACLJ,SAAUqkG,EACVnkG,UAASrC,EAAA,CACP4B,EAAqBwjG,IACrB,CAAE/jG,QAASoiG,GAAY7iF,YAAa9f,GACpC,CAAEO,QAASonF,GAAoB51D,SAAUwyE,IACzCpC,IACGiC,MATEqB,EAAUC,EAAAjqG,EAAA,CAJtBkG,EAAAA,SAAS,CACRG,aAAc,CAACy/F,GAAeP,IAC9B/gD,QAAS,CAACshD,GAAeP,OAEdyE,eCfGE,GAAc/pG,EAAa+1B,QAAA,IAAAA,IAAAA,EAAA,IACzC,IAAMi0E,EAAgBzrG,OAAOuN,KAAKiqB,GAC/BqK,OACAvtB,KAAI,SAACo3F,GAAe,OAAGA,EAAU,IAAIl0E,EAAQk0E,MAC7C1iE,KAAK,KACR,OAAOyiE,EAAmBhqG,EAAG,IAAIgqG,EAAkBhqG,oBCArD,SAAAkqG,KAYA,OAXEA,EAAAjrG,UAAA+Y,UAAA,SAAU0mB,EAA8B3I,GACtC,QADsC,IAAAA,IAAAA,EAAA,IACjC2I,EAAuBolC,IAC1B,OAAQplC,EAAuBolC,IAGjC,IAAM9jE,EAAuB,iBAAV0+B,EAAqBA,EAAQA,EAAM1+B,IAItD,MAHqB,iBAAV0+B,IACT3I,EAAO52B,EAAAA,EAAA,GAAQ42B,GAAY2I,EAAM7lB,SAE5BkxF,GAAc/pG,EAAK+1B,IAVjBm0E,EAAiBrqG,EAAA,CAD7B46F,EAAAA,KAAK,CAAE9xE,KAAM,iBACDuhF,oBCCb,SAAAC,KAgBA,OAfEA,EAAAlrG,UAAA4sF,UAAA,SACE7rF,EACA+1B,EACAq0E,GAEA,YAHA,IAAAr0E,IAAAA,EAAA,SACA,IAAAq0E,IAAAA,GAAA,GAEO,IAAIjB,EAAAA,YAAmB,SAACC,GAC7B,IAAMhoG,EAAQ2oG,GAAc/pG,EAAK+1B,GACjCqzE,EAAW9nG,KAAKF,GAChBgoG,EAAWiB,eAIfF,EAAAlrG,UAAA0qG,WAAA,SAAWW,GACT,OAAOtpG,QAAQC,WAdNkpG,EAAsBtqG,EAAA,CADlCyU,EAAAA,cACY61F,qBCFb,SAAAI,mDAIA,OAJkC1rG,EAAA0rG,EAAAnkG,GAChCmkG,EAAAtrG,UAAA+Y,UAAA,SAAU5W,EAAYuiC,EAAiB0hE,GACrC,OAAOj/F,EAAAnH,UAAM+Y,UAASrY,KAAAZ,KAACqC,EAAOuiC,EAAQ0hE,EAAU,OAFvCkF,EAAY1qG,EAAA,CADxB46F,EAAAA,KAAK,CAAE9xE,KAAM,YACD4hF,IAAqB7E,EAAAA,wBCSlC,SAAA8E,KAAgC,OAAnBA,EAAiB3qG,EAAA,CAP7BkG,EAAAA,SAAS,CACRG,aAAc,CAACgkG,GAAmBK,IAClClmD,QAAS,CAAC6lD,GAAmBK,IAC7B5kG,UAAW,CACT,CAAEhB,QAASonF,GAAoB51D,SAAUg0E,QAGhCK,qBCXb,SAAAC,mDASA,OATyC5rG,EAAA4rG,EAAArkG,GASzCqkG,GATyCtkG,GCE5BukG,GAAqB,iCCIlCC,GAAA,SAAAvkG,GAEE,SAAAukG,EAAmBjgG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM2rG,KAAmB3rG,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KALuB,8BASlC,OALqCjK,EAAA8rG,EAAAvkG,GAKrCukG,EALA,CAAqCv6F,GAOrCw6F,GAAA,SAAAxkG,GAEE,SAAAwkG,EAAmBlgG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM2rG,GAAoBhgG,IAAQ3L,YADjBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAX4B,mCAevC,OALyCjK,EAAA+rG,EAAAxkG,GAKzCwkG,EALA,CAAyCt6F,GAOzCu6F,GAAA,SAAAzkG,GAEE,SAAAykG,EAAmBngG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM2rG,KAAmB3rG,YADRoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjB+B,sCAqB1C,OAL4CjK,EAAAgsG,EAAAzkG,GAK5CykG,EALA,CAA4Cr6F,wDAlBV,oDACK,4DACG,0GCH7Bs6F,GAGTr5F,EAAAA,sBFHwB,WGOK,SAACxG,GAAU,OAAAA,EAAM8/F,aAHrCC,GAGTp5F,EAAAA,eAAek5F,GAAYG,IAElBC,GAGTt5F,EAAAA,eACFo5F,GACAv7E,IAGW07E,GAGTv5F,EAAAA,eACFo5F,GACAr7E,IAGWy7E,GAGTx5F,EAAAA,eACFo5F,GACAn7E,IAGWw7E,GAGTz5F,EAAAA,eACFo5F,GACAj7E,oMC7BA,SAAAu7E,EAAsBj5F,GAAAtT,KAAAsT,MAAAA,SAQtBi5F,EAAArsG,UAAAssG,gBAAA,SAAgB5sB,EAAkBnsE,GAChCzT,KAAKsT,MAAMI,SACT,IAAI+4F,GAA4B,CAAE7sB,SAAQA,EAAEnsE,SAAQA,MAOxD84F,EAAArsG,UAAAwsG,eAAA,WACE,OAAO1sG,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOw4F,+CAlBHr3F,EAAAA,+HADlBi3F,EAAWzrG,EAAA,CAHvByU,EAAAA,WAAW,CACVC,WAAY,UAED+2F,MCTAK,GAAgC,CAC3C1kG,eAAgB,CACd2kG,cAAc,EACdC,eAAgB,cAChBC,mBAAoB,WCIxBC,GAAA,WACE,SAAAA,EAAoBtnG,EAA4B2f,GAA5BrlB,KAAA0F,OAAAA,EAA4B1F,KAAAqlB,KAAAA,EAgClD,OA9BE2nF,EAAA9sG,UAAA+sG,8BAAA,SACErtB,EACAnsE,GAEA,IAAM0D,EAAMnX,KAAKktG,mBACXpzF,GAAS,IAAIuK,EAAAA,YAChBjb,IACC,YACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAe4kG,iBAE/C1jG,IACC,gBACAwZ,mBAAmB5iB,KAAK0F,OAAOwC,eAAe6kG,qBAE/C3jG,IAAI,aAAc,YAClBA,IAAI,WAAYw2E,GAChBx2E,IAAI,WAAYqK,GAChBrK,IAAI,QAAS,UACVL,EAAU,IAAII,EAAAA,YAAY,CAC9Bqc,eAAgB,sCAGlB,OAAOxlB,KAAKqlB,KACTI,KAAkBtO,EAAK2C,EAAQ,CAAE/Q,QAAOA,IACxC8K,KAAK4J,EAAAA,YAAW,SAACnZ,GAAU,OAAAwZ,EAAAA,WAAWxZ,QAGnC0oG,EAAA9sG,UAAAgtG,iBAAR,WACE,OAAQltG,KAAK0F,OAAO2C,QAAQC,IAAIgb,SAAW,IAlCxB,6EAIOooF,UAA0BhmF,EAAAA,cAD3CsnF,EAAgClsG,EAAA,CAD5CyU,EAAAA,cACYy3F,GAAb,GCRaG,GAAsB,CAACH,kBCuDlC,SAAAI,EACUljF,EACAmjF,EACA3nG,GAHV,IAAA0L,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAqtG,mBAAAA,EACArtG,KAAA0F,OAAAA,EA/CV1F,KAAAstG,2BAAsEr7E,EAAAA,KAIpE,WAAM,OAAA7gB,EAAK1L,OAAOwC,gBAAkBkJ,EAAK1L,OAAOwC,eAAe2kG,eAC/D7sG,KAAKkqB,SAASrW,KACZwW,EAAAA,OACEmB,IAEF2G,EAAAA,eACEnyB,KAAKkqB,SAASrW,KACZwW,EAAAA,OAAkCS,MAGtChX,EAAAA,KACE,SAAC5O,OAAGqoG,EAAHnpG,EAAAc,EAAA,GAAG,GACF,OAAA,IAAIunG,GAA4B,CAC9B7sB,SAAU2tB,EAAY5hG,QAAQ6H,OAC9BC,SAAU85F,EAAY5hG,QAAQ8H,gBAOxCzT,KAAAwtG,iBAEIxtG,KAAKkqB,SAASrW,KAChBwW,EAAAA,OPrC8B,6BOsC9BvW,EAAAA,KAAI,SAAC3H,GAAwC,OAAAA,EAAOR,WACpD2e,EAAAA,YAAW,SAAC3e,GACV,OAAAyF,EAAKi8F,mBACFJ,8BAA8BthG,EAAQi0E,SAAUj0E,EAAQ8H,UACxDI,KACCC,EAAAA,KAAI,SAACd,GAAU,OAAA,IAAIy6F,GAAmCz6F,MACtDyK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI82F,GAAgCjkF,GAAsBnlB,aAYxE,gDAJsBmmB,EAAAA,eACUuiF,UACZtB,MA/ClB5qG,EAAA,CADC4pB,EAAAA,2DA0BD5pB,EAAA,CADC4pB,EAAAA,iDA1BU0iF,EAAiBtsG,EAAA,CAD7ByU,EAAAA,cACY63F,MCTAphF,GAAiB,CAACohF,aCUflhF,KACd,MAAO,CACL8/E,YAAahgG,GAA2B2/F,KAI5C,IAAat/E,GAER,IAAI/mB,EAAAA,eAA4C,gBAExCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgByhF,GACd1hG,GAEA,OAAO,SAAUC,EAAOC,GAOtB,OANIA,EAAOpC,OAASyiB,KAClBtgB,EAAK9L,EAAAA,EAAA,GACA8L,GAAK,CACR8/F,iBAAajgG,KAGVE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAACkhF,aC7BjCC,KAWd,MAT4B,CAC1B1hG,MAAO,CACLga,YAAa,CACXnZ,KAAM,CACJ8gG,yBAA0BhvF,EAAAA,gBAAgBkI,kBAqBpD,IAAA+mF,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAehtG,EAAA,CAb3BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACA3E,GACA4E,EAAAA,YAAYC,WX5BY,OW4BaxB,GAAc,CAAEI,aAAYshF,KACjEjgF,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4BwnG,IAC5BthF,OAGSwhF,GAAb,iBCtBA,SAAAE,KAAyB,OAAZA,EAAUltG,EAAA,CARtBkG,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcymB,EAAAA,iBAAkBmgF,IAC1ClnG,UAASrC,EAAA,CACP4B,EAAqBymG,KAClBO,GAAY,CACf,CAAEvnG,QAAS8lG,GAAYvmF,YAAa9f,QAG3B2oG,SCjBb,aCEaC,GAAsD,CACjEC,gBAAiB,CACfx5C,SAAS,EACTy5C,eAAgB,CACdnkG,GAAI,yBACJokG,UAAW,4BAEbpzF,QAAS,CACPqzF,aAAc,yBACdhY,YAAa,oCCQnBiY,GAAA,WAKE,SAAAA,EACU5oG,EACAgf,EACAjJ,EACqBu/B,GAHrBh7C,KAAA0F,OAAAA,EACA1F,KAAA0kB,aAAAA,EACA1kB,KAAAyb,OAAAA,EACqBzb,KAAAg7C,SAAAA,EANvBh7C,KAAA00D,SAAU,EAQZ3sC,EAAAA,kBAAkB/nB,KAAKg7C,YACzBh7C,KAAK00D,QACF10D,KAAKyb,OAAOlF,cAAgBvW,KAAK0F,OAAOwoG,gBAAgBx5C,UACzD,EAEE10D,KAAK00D,SACP10D,KAAKuuG,cAAgBvuG,KAAK0F,OAAOwoG,gBAAgBC,eAAenkG,GAAGo5F,cACnEpjG,KAAKwuG,kBAAoBxuG,KAAKyb,OAAOlF,aAAaiR,QArB3B,uBAwBdxnB,KAAKyb,OAAOlF,aAAaiR,QAxBX,uBAyBvBxnB,KAAKyb,OAAOlF,aAAak4F,WAzBF,8BA8B7BH,EAAApuG,UAAAqd,UAAA,SACEjU,EACA/G,SAFF6O,EAAApR,KAIE,OAAKA,KAAK00D,SAKR10D,KAAKwuG,mBACLllG,EAAQ6N,IAAIhK,SAASnN,KAAK0kB,aAAanB,qBAEvCja,EAAUA,EAAQG,MAAM,CACtBsM,YAAU7Q,EAAA,GACRA,EAAClF,KAAKuuG,eAAgBvuG,KAAKwuG,wBAK1BjsG,EAAKsT,OAAOvM,GAASuK,KAC1BsJ,EAAAA,KAAI,SAACwlC,GACH,GAAIA,aAAiBC,EAAAA,cACfD,EAAM55C,QAAQgE,OAAOI,SAASiE,EAAKm9F,eAAgB,CACrD,IAAMG,EAAa/rD,EAAM55C,QAAQa,IAAIwH,EAAKm9F,eACtCn9F,EAAKo9F,oBAAsBE,IAC7Bt9F,EAAKo9F,kBAAoBE,EACzBt9F,EAAKqK,OAAOlF,aAAa+Q,QAxDR,qBA0DflW,EAAKo9F,0BAvBRjsG,EAAKsT,OAAOvM,6CA1BLqlG,UACM1rF,UACN/M,mCACfW,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,oMATCylF,EAA+BxtG,EAAA,CAD3CyU,EAAAA,WAAW,CAAEC,WAAY,SAUrB/T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,eATCylF,GAAb,GCAAM,GAAA,WAKE,SAAAA,EACUlpG,EACAgf,EACAjJ,EACqBu/B,GAHrBh7C,KAAA0F,OAAAA,EACA1F,KAAA0kB,aAAAA,EACA1kB,KAAAyb,OAAAA,EACqBzb,KAAAg7C,SAAAA,EANvBh7C,KAAA00D,SAAU,EAQZ3sC,EAAAA,kBAAkB/nB,KAAKg7C,YACzBh7C,KAAK00D,QACF10D,KAAKyb,OAAOlF,cAAgBvW,KAAK0F,OAAOwoG,gBAAgBx5C,UACzD,EAEE10D,KAAK00D,SACP10D,KAAKuuG,cAAgBvuG,KAAK0F,OAAOwoG,gBAAgBC,eAAeC,UAAUhL,cAC1EpjG,KAAKouG,UAAYpuG,KAAKyb,OAAOlF,aAAaiR,QArBjB,yBAwBhBxnB,KAAKyb,OAAOlF,aAAaiR,QAxBT,yBAyBzBxnB,KAAKyb,OAAOlF,aAAak4F,WAzBA,gCA8B/BG,EAAA1uG,UAAAqd,UAAA,SACEjU,EACA/G,SAFF6O,EAAApR,KAIE,OAAKA,KAAK00D,SAKR10D,KAAKouG,WACL9kG,EAAQ6N,IAAIhK,SAASnN,KAAK0kB,aAAanB,qBAEvCja,EAAUA,EAAQG,MAAM,CACtBsM,YAAU7Q,EAAA,GACRA,EAAClF,KAAKuuG,eAAgBvuG,KAAKouG,gBAK1B7rG,EAAKsT,OAAOvM,GAASuK,KAC1BsJ,EAAAA,KAAI,SAACwlC,GACH,GAAIA,aAAiBC,EAAAA,cACfD,EAAM55C,QAAQgE,OAAOI,SAASiE,EAAKm9F,eAAgB,CACrD,IAAMM,EAAoBlsD,EAAM55C,QAAQa,IAAIwH,EAAKm9F,eAC7Cn9F,EAAKg9F,YAAcS,IACrBz9F,EAAKg9F,UAAYS,EACjBz9F,EAAKqK,OAAOlF,aAAa+Q,QAxDN,uBA0DjBlW,EAAKg9F,kBAvBR7rG,EAAKsT,OAAOvM,6CA1BLqlG,UACM1rF,UACN/M,mCACfW,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,oMATC+lF,EAAiC9tG,EAAA,CAD7CyU,EAAAA,WAAW,CAAEC,WAAY,SAUrB/T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,eATC+lF,GAAb,GCba3pF,GAA2B,CACtC,CACErf,QAASsf,EAAAA,kBACTC,YAAampF,GACbxoG,OAAO,GAET,CACEF,QAASsf,EAAAA,kBACTC,YAAaypF,GACb9oG,OAAO,kBCLX,SAAAgpG,WAUA,SAVaA,EACJA,EAAAhoG,QAAP,WACE,MAAO,CACLJ,SAAUqoG,EACVnoG,UAASrC,EAAA,CACP4B,EAAqB8nG,KAClBhpF,MANE6pF,EAAqBC,EAAAjuG,EAAA,CAHjCkG,EAAAA,SAAS,CACRJ,UAAW,CAAC,CAAEhB,QAAS+oG,GAAuBxpF,YAAa9f,OAEhDypG,oBCIX,SAAAE,EACYtpG,EACAupG,GADAjvG,KAAA0F,OAAAA,EACA1F,KAAAivG,WAAAA,SAGZD,EAAA9uG,UAAAgvG,0BAAA,WAAA,IAAA99F,EAAApR,KACE,OAAOA,KAAKivG,WAAWxpB,iBAAiB5xE,KACtC/C,EAAAA,OAAO+D,SACPf,EAAAA,KACE,SAACyuB,GACC,OAAAA,EAAKO,MAAM1xB,EAAK1L,OAAOwoG,gBAAgBlzF,QAAQqzF,iBAEnDv9F,EAAAA,OAAO+D,SACPf,EAAAA,KAAI,SAACovB,GACH,OAAAA,EAAKE,WAAW/oB,MACd,SAAC7Z,GAAM,OAAAA,EAAEqiC,MAAQzxB,EAAK1L,OAAOwoG,gBAAgBlzF,QAAQq7E,kBAGzDvlF,EAAAA,OAAO+D,SACPf,EAAAA,KAAI,SAACwvB,GACH,OAAAlyB,EAAK+9F,4BAA4B7rE,EAAUP,WAAWqsE,OAAOlyE,WAK3D8xE,EAAA9uG,UAAAivG,4BAAR,SAAoCjyE,GAClC,IAAMliB,EAAU/R,KAAKY,MAAMwlG,KAAKnyE,IAChCliB,EAAQ68C,QAAQ9zC,SAAQ,SAAC5X,GACvB3M,OAAOuN,KAAKZ,GAAQ4X,SAAQ,SAAC9iB,GAC3BkL,EAAOlL,GAAOouG,KAAKljG,EAAOlL,UAG9B,IAAK,IAAIT,EAAI,EAAGA,EAAIwa,EAAQvD,SAAS9W,OAAQH,IAC3Cwa,EAAQvD,SAASjX,GAAK6uG,KAAKr0F,EAAQvD,SAASjX,IAE9C,OAAOwa,4CAlCW2zF,UACIrpB,yIAHb0pB,EAA6BluG,EAAA,CAHzCyU,EAAAA,WAAW,CACVC,WAAY,UAEDw5F,eCPG9iF,KACd,OAAO3e,GtRLsB,WsRQ/B,ICGiB+hG,GDHJjjF,GAER,IAAI/mB,EAAAA,eACP,mBAGWgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,kBERd,SAAAqjF,KAAiC,OAApBA,EAAkBzuG,EAAA,CAJ9BkG,EAAAA,SAAS,CACRC,QAAS,CAAC+hB,GAAa4E,EAAAA,YAAYC,WxRLN,UwRKkCxB,KAC/DzlB,UAAW,CAAC0lB,OAEDijF,oBCJb,SAAAC,WAOA,SAPaA,EACJA,EAAA1oG,QAAP,WACE,MAAO,CACLJ,SAAU+oG,EACV7oG,UAAW,KAJJ4oG,EAAaC,EAAA3uG,EAAA,CAHzBkG,EAAAA,SAAS,CACRC,QAAS,CAACsoG,OAECC,oBCIX,SAAAE,EAAsBrgE,GAAArvC,KAAAqvC,QAAAA,SAEtBqgE,EAAAxvG,UAAA0J,IAAA,SAAIuvB,EAAqBtV,GACvB,YADuB,IAAAA,IAAAA,EAAA,IAChB7jB,KAAKqvC,QAAQ1kC,KAAKwuB,EAAatV,IAGxC6rF,EAAAxvG,UAAAyvG,QAAA,SAAQpqE,GAAR,IAAAn0B,EAAApR,KACE,OAAKA,KAAKqvC,QAAQrE,SAOXhrC,KAAKqvC,QAAQrE,SAASzF,GANpBA,EAASzxB,KAAI,SAAC4jB,GAAY,OAAAt3B,EAAAA,EAAA,GAC5Bs3B,GAAO,CACVgT,MAAOt5B,EAAKi+B,QAAQ1kC,KAAK+sB,EAAQ4B,KAAM5B,EAAQ7T,sDAVtBkoB,uHADpB2jE,EAAgB5uG,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDk6F,oBCAX,SAAAE,EAAsBvgE,GAAArvC,KAAAqvC,QAAAA,SAEtBugE,EAAA1vG,UAAA0J,IAAA,SACEuvB,EACAgM,EACAlO,GAEA,OAAOj3B,KAAKqvC,QAAQ1kC,KAAKwuB,EAAagM,EAAelO,6CAPxB+U,uHADpB4jE,EAA0B9uG,EAAA,CAHtCyU,EAAAA,WAAW,CACVC,WAAY,UAEDo6F,oBCCX,SAAAC,EAAsBxgE,GAAArvC,KAAAqvC,QAAAA,SAEtBwgE,EAAA3vG,UAAA0J,IAAA,SAAIuvB,EAAqB6N,GACvB,OAAOhnC,KAAKqvC,QAAQ1kC,KAAKwuB,EAAa6N,IAGxC6oE,EAAA3vG,UAAAspB,IAAA,SAAI2P,EAAqB8N,GACvB,OAAOjnC,KAAKqvC,QAAQ5pB,KAAK0T,EAAa8N,6CAPTiF,uHADpB2jE,EAAuB/uG,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAEDq6F,oBCKX,SAAAC,EAAsBzgE,GAAArvC,KAAAqvC,QAAAA,SAEtBygE,EAAA5vG,UAAAynC,OAAA,SACE3rB,EACA4rB,GAEA,OAAO5nC,KAAKqvC,QAAQ1H,OAAO3rB,EAAO4rB,IAGpCkoE,EAAA5vG,UAAA6vG,eAAA,SAAehoE,EAAc9Q,GAC3B,OAAOj3B,KAAKqvC,QAAQvH,gBAAgBC,EAAM9Q,6CAVbgV,uHADpB6jE,EAAsBhvG,EAAA,CAHlCyU,EAAAA,WAAW,CACVC,WAAY,UAEDs6F,MCDbE,GAEE,SACSrkG,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KAR4B,0CAkBvCkmG,GAEE,SAAmBtkG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAjBT,+CAqBFmmG,GAEE,SACSvkG,GAAA3L,KAAA2L,QAAAA,EAFA3L,KAAA+J,KApBT,kDA6BFomG,GAAA,WACWnwG,KAAA+J,KA7B6B,sCCKxCqmG,GAEE,SAAmBzkG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAXyB,uCAepCsmG,GAEE,SAAmB1kG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAdT,4CAkBFumG,GAEE,SAAmB3kG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAjBT,+CAqBFwmG,GAEE,SAAmB5kG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KArBwB,iCAyBnCymG,GAEE,SAAmB7kG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAzB6B,sCA6BxC0mG,GAEE,SAAmB9kG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA5BT,yCCQF2mG,GAEE,SACS/kG,EACAglG,GADA3wG,KAAA2L,QAAAA,EACA3L,KAAA2wG,UAAAA,EAHA3wG,KAAA+J,KAZoB,6BAmB/B6mG,GAEE,SAAmBjlG,EAA4BglG,GAA5B3wG,KAAA2L,QAAAA,EAA4B3L,KAAA2wG,UAAAA,EADtC3wG,KAAA+J,KAnByB,kCAuBpC8mG,GAEE,SAAmBllG,EAAmCglG,GAAnC3wG,KAAA2L,QAAAA,EAAmC3L,KAAA2wG,UAAAA,EAD7C3wG,KAAA+J,KAvB4B,qCA2BvC+mG,GAEE,SAAmBnlG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA3B4B,qCA+BvCgnG,GAEE,SAAmBplG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KA9BT,6CAkCFinG,GAEE,SAAmBrlG,GAAA3L,KAAA2L,QAAAA,EADV3L,KAAA+J,KAjCT,0CAqCFknG,GAEE,SACStlG,QAAA,IAAAA,IAAAA,EAAA,CACLulG,kBAAkB,EAClBC,uBAAuB,IAFlBnxG,KAAA2L,QAAAA,EAFA3L,KAAA+J,KApCT,0CTLF,SAAiBulG,GAUf,SAAgB8B,EACdnnG,EACAD,EACA6Z,GAEA,OAAAzjB,EAAAA,EAAA,GACKgL,GAAenB,EAAYD,IAAG,CACjC6Z,MAAKA,IAIT,SAAgBwtF,EACdpnG,EACAD,EACA6Z,EACAvf,GAEA,OAAAlE,EAAAA,EAAA,GACKiL,GAAepB,EAAYD,EAAI1F,IAAM,CACxCuf,MAAKA,IAIT,SAAgBytF,EACdrnG,EACAD,EACA6Z,GAEA,OAAAzjB,EAAAA,EAAA,GACKkL,GAAkBrB,EAAYD,IAAG,CACpC6Z,MAAKA,IAIT,SAAgB0tF,EACdtnG,EACAD,EACA6Z,GAEA,OAAAzjB,EAAAA,EAAA,GACKmL,GAAgBtB,EAAYD,IAAG,CAClC6Z,MAAKA,IAzCOyrF,EAAA8B,qBAAoBA,EAWpB9B,EAAA+B,qBAAoBA,EAYpB/B,EAAAgC,wBAAuBA,EAWvBhC,EAAAiC,sBAAqBA,EAWrC,IAAAC,EAGE,SAAYvnG,EAAoBD,EAAuB6Z,GAFvD7jB,KAAA+J,Knf3D8B,gBmf8D5B/J,KAAKuK,KAAO6mG,EAAqBnnG,EAAYD,EAAI6Z,IAJxCyrF,EAAAkC,uBAAsBA,EAQnC,IAAAC,EAGE,SACExnG,EACAD,EACA6Z,EACAvf,GANFtE,KAAA+J,KnflE8B,qBmf0E5B/J,KAAKuK,KAAO8mG,EAAqBpnG,EAAYD,EAAI6Z,EAAOvf,IAT/CgrG,EAAAmC,uBAAsBA,EAanC,IAAAC,EAGE,SACEznG,EACAD,EACA6Z,EACOlY,GAAA3L,KAAA2L,QAAAA,EANT3L,KAAA+J,Knf9EiC,wBmfsF/B/J,KAAKuK,KAAO+mG,EAAwBrnG,EAAYD,EAAI6Z,IAT3CyrF,EAAAoC,0BAAyBA,EAatC,IAAAC,EAGE,SAAY1nG,EAAoBD,EAAuB6Z,GAFvD7jB,KAAA+J,Knf1F+B,iBmf6F7B/J,KAAKuK,KAAOgnG,EAAsBtnG,EAAYD,EAAI6Z,IAJzCyrF,EAAAqC,wBAAuBA,EAzFtC,CAAiBrC,KAAAA,GAAyB,KUPnC,IAAMsC,GAAe,8BAa5BC,GAAA,SAAAxqG,GAEE,SAAAwqG,EAAmBlmG,EAAiBkY,QAAA,IAAAA,IAAAA,EAAA,IAApC,IAAAzS,EACE/J,EAAAzG,KAAAZ,KCdiC,0BDcJ2L,EAASkY,IAAM7jB,YAD3BoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAAO6nG,KAIlB,OALiC9xG,EAAA+xG,EAAAxqG,GAKjCwqG,EALA,CAAiCvC,GAA0BkC,wBAO3DM,GAAA,SAAAzqG,GAEE,SAAAyqG,EAAY34E,EAA4BxtB,EAAckY,QAAA,IAAAA,IAAAA,EAAA,IAAtD,IAAAzS,EACE/J,EAAAzG,KAAAZ,KCrBiC,0BDqBJm5B,EAAatV,EAAOlY,IAAQ3L,YADnBoR,EAAAzF,QAAAA,EAD/ByF,EAAArH,KApBsB,qCAwBjC,OALqCjK,EAAAgyG,EAAAzqG,GAKrCyqG,EALA,CAAqCxC,GAA0BmC,wBAO/DM,GAAA,SAAA1qG,GAEE,SAAA0qG,EAAmBpmG,EAAkBkY,QAAA,IAAAA,IAAAA,EAAA,IAArC,IAAAzS,EACE/J,EAAAzG,KAAAZ,KC5BiC,0BD4BJ2L,EAAQ2tB,KAAMzV,IAAM7jB,YADhCoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA1ByB,wCA8BpC,OALwCjK,EAAAiyG,EAAA1qG,GAKxC0qG,EALA,CAAwCzC,GAA0BoC,oFH7B3B,sEAErC,8EAEA,0EACsC,0KCLJ,gEAElC,wEAEA,kEACiC,yDACK,iEAEtC,+MCH6B,iDACK,yDACG,4DACA,oEAErC,yEAEA,qEAEA,6PCX+B,wDACG,gGEDvBM,GAGTt/F,EAAAA,sBDH2B,cEO7B,SAACxG,GAAyB,OAAAA,EAAM+4B,YALrBgtE,GAGTp/F,EAAAA,eACFm/F,GAAgBE,IAILC,GAAsC,SACjDh5E,EACAgM,GAEA,OAAOtyB,EAAAA,eAAeo/F,IAA2B,SAACG,GAChD,GAAIA,EAAkBj5E,cAAgBA,EACpC,OAAMi5E,EAAkBhnE,KAClBjG,EACKitE,EAAkBhnE,KAAKt6B,QAC5B,SAACpM,GAAS,OAAAA,EAAKygC,gBAAkBA,KAI9BitE,EAAkBhnE,KAElB,OCvBFinE,GAGTx/F,EAAAA,eAAem/F,IAAkB,SAAC9lG,GAAyB,OAAAA,EAAMomG,WAExDC,GAAmC,SAC9Cp5E,GAEA,OAAOtmB,EAAAA,eAAew/F,IAAwB,SAACG,GAC7C,GAAIA,EAAWr5E,cAAgBA,EAC7B,OAAOq5E,EAAWpnE,SCZXnf,GAAoC,CAC/CurB,QAAS,GACTi7D,YAAa,GACbC,WAAY,IAGd,SAAgBzmG,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAymG,IAGQxmG,EAAOpC,MACb,INPmC,oCMQjC,IAAMytC,EAAUrrC,EAAOR,QACjBinG,EAAMzmG,EAAOwkG,UAAY,CAAE+B,WAAYl7D,GAAY,CAAEA,QAAOA,GAClE,OAAAp3C,EAAAA,EAAA,GACK8L,GACA0mG,GAIP,INbF,4CMcI,IAAMH,EAA4BtmG,EAAOR,QAEzC,OAAAvL,EAAAA,EAAA,GACK8L,GAAK,CACRumG,YAAWA,IAIf,INlBF,wCMmBI,OAAAryG,EAAAA,EAAA,GACK8L,GAAK,CACRsrC,QAASrrC,EAAOR,QAAQulG,iBAAmB,GAAKhlG,EAAMsrC,QACtDi7D,YAAatmG,EAAOR,QAAQwlG,sBACxB,GACAjlG,EAAMumG,YACVC,WAAYvmG,EAAOR,QAAQwlG,sBACvB,GACAjlG,EAAMwmG,aAIhB,OAAOxmG,EAGT,ICvCa2mG,GAGThgG,EAAAA,eAAem/F,IAAkB,SAAC9lG,GAAyB,OAAAA,EAAMy7B,UAExDmrE,GAGTjgG,EAAAA,eAAeggG,ID+Ba,SAC9B3mG,GACsB,OAAAA,EAAMsrC,WC/BjBu7D,GAGTlgG,EAAAA,eACFggG,ID4BiC,SACjC3mG,GACsB,OAAAA,EAAMwmG,cC1BjBM,GAGTngG,EAAAA,eACFggG,IDuBmC,SACnC3mG,GACiB,OAAAA,EAAMumG,eEhDZQ,GAGTpgG,EAAAA,eAAem/F,IAAkB,SAAC9lG,GAAyB,OAAAA,EAAMuU,WAExDyyF,GAAiC,SAC5C55E,EACAzV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOhR,EAAAA,eACLogG,IACA,SAACxyF,GACC,OAAAulC,GAA+CvlC,EAAS6Y,GAAMzV,IAC9DhY,OAIOsnG,GAA4B,SACvC75E,EACAzV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOhR,EAAAA,eACLqgG,GAA+B55E,EAAMzV,IACrC,SAACuvF,GAAiB,OAAA1iF,GAAyC0iF,OAIlDC,GAAmC,SAC9C/5E,EACAzV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOhR,EAAAA,eACLqgG,GAA+B55E,EAAMzV,IACrC,SAACuvF,GAAiB,OAAAxiF,GAA2CwiF,OAIpDE,GAAmC,SAC9Ch6E,EACAzV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOhR,EAAAA,eACLqgG,GAA+B55E,EAAMzV,IACrC,SAACuvF,GAAiB,OAAAtiF,GAA2CsiF,OAIpDG,GAAiC,SAC5Cj6E,EACAzV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOhR,EAAAA,eACLqgG,GAA+B55E,EAAMzV,IACrC,SAACuvF,GAAiB,OAAApiF,GAAyCoiF,UAO3B,SAAC3yF,GACnC,OAAOjhB,OAAOuN,KAAK0T,EAAQlU,WAJhBinG,GAGT3gG,EAAAA,eAAeogG,GAAeQ,2gBC7DhC,SAAAC,EAAsBpgG,GAAAtT,KAAAsT,MAAAA,EA+BxB,OA7BEogG,EAAAxzG,UAAA0J,IAAA,SACEuvB,EACAgM,EACAlO,GAHF,IAAA7lB,EAAApR,KAKE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OACEw/F,GACEx6E,EACAgM,IAGJhoB,EAAAA,KAAI,SAAC8nB,QACgBl5B,IAAfk5B,QAA4Cl5B,IAAhBotB,GAC9B/nB,EAAKkC,MAAMI,SACT,IAAIkgG,GAAqC,CACvCz6E,YAAWA,EACXgM,cAAaA,EACblO,SAAQA,UAQpBy8E,EAAAxzG,UAAA2zG,gBAAA,WACE7zG,KAAKsT,MAAMI,SAAS,IAAIogG,8CA7BGx+F,EAAAA,SADlBo+F,EAAuB5yG,EAAA,CADnCyU,EAAAA,cACYm+F,oBCCX,SAAAK,EAAsBzgG,GAAAtT,KAAAsT,MAAAA,EAuBxB,OArBEygG,EAAA7zG,UAAA8zG,iBAAA,SAAiB76E,GAAjB,IAAA/nB,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8/F,GAAkD96E,IACzDhc,EAAAA,KAAI,SAACm1F,QACavmG,IAAZumG,QAAyCvmG,IAAhBotB,GAC3B/nB,EAAKkC,MAAMI,SACT,IAAIwgG,GAAkC/6E,SAOhD46E,EAAA7zG,UAAAspB,IAAA,SAAI2P,EAAqB8N,GACvBjnC,KAAKsT,MAAMI,SACT,IAAIygG,GAAiC,CACnCh7E,YAAaA,EACb8N,OAAMA,+CAnBiB3xB,EAAAA,SADlBy+F,EAAoBjzG,EAAA,CADhCyU,EAAAA,cACYw+F,oBCCX,SAAAK,EAAsB9gG,GAAAtT,KAAAsT,MAAAA,EAsBxB,OApBE8gG,EAAAl0G,UAAAynC,OAAA,SAAO3rB,EAAe4rB,GACpB5nC,KAAKsT,MAAMI,SACT,IAAI2gG,GAA8B,CAChCC,UAAWt4F,EACX4rB,aAAcA,MAKpBwsE,EAAAl0G,UAAAq0G,WAAA,WACE,OAAOv0G,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOqgG,MAGhCJ,EAAAl0G,UAAAu0G,aAAA,WACEz0G,KAAKsT,MAAMI,SACT,IAAIghG,GAAwC,CAC1CxD,kBAAkB,+CAlBK57F,EAAAA,SADlB8+F,EAAoBtzG,EAAA,CADhCyU,EAAAA,cACY6+F,oBC+BX,SAAAO,EACYrhG,EACAo4B,EACAxhB,EACqBtC,GAHrB5nB,KAAAsT,MAAAA,EACAtT,KAAA0rC,cAAAA,EACA1rC,KAAAkqB,SAAAA,EACqBlqB,KAAA4nB,WAAAA,EARvB5nB,KAAAulC,SAEN,UASJovE,EAAAz0G,UAAA0J,IAAA,SAAIuvB,EAAqB4iB,GAIvB,OAHAA,EAAS/7C,KAAK0rC,cAAcmW,OAAO,UAAW9F,GAE9C/7C,KAAK40G,kBAAkBz7E,EAAa4iB,GAC7B/7C,KAAKulC,SAASpM,GAAan5B,KAAK60G,eAAe94D,KAG9C44D,EAAAz0G,UAAA00G,kBAAV,SAA4Bz7E,EAAqB4iB,WAAjD3qC,EAAApR,KACOA,KAAKulC,SAASpM,KACjBn5B,KAAKulC,SAASpM,GAAe,QAG/B,IAAoB,IAAAygC,EAAA31D,EAAA83C,GAAM8d,EAAAD,EAAAr3D,QAAAs3D,EAAAl3D,KAAAk3D,EAAAD,EAAAr3D,OAAE,CAAvB,IAAMshB,EAAKg2C,EAAAx3D,MACTrC,KAAKulC,SAASpM,GAAatV,KAC9B7jB,KAAKulC,SAASpM,GAAatV,GAAS7jB,KAAK80G,mBACvC37E,EACAtV,sGAKFk4B,EAAOp7C,OAAS,IAClBX,KAAKulC,SAASpM,GAAan5B,KAAK60G,eAAe94D,IAAWrnB,EAAAA,cACxDqnB,EAAOjoC,KAAI,SAAC+P,GAAU,OAAAzS,EAAKm0B,SAASpM,GAAatV,OACjDhQ,KACAkhG,EAAAA,UAAU,GACVjhG,EAAAA,KAAI,SAACkhG,GACH,OAAAA,EAAaz6F,MAAM1F,SACfjQ,EAAS/D,WAAA,EAAA0D,EAAA,CAAC,IAAOywG,SACjBjpG,KAEN4K,EAAAA,0BAKIg+F,EAAAz0G,UAAA20G,eAAV,SAAyB94D,GACvB,OAAOA,EAAOvT,KAAK,MASXmsE,EAAAz0G,UAAA40G,mBAAV,SACE37E,EACAtV,GAFF,IAAAzS,EAAApR,KAIQi1G,EAAcj1G,KAAKsT,MAAMO,KAC7BM,EAAAA,OACE+gG,GAAgD/7E,EAAatV,IAE/D/P,EAAAA,KACE,SAACs/F,GACC,OAACA,EAAatnG,UAAYsnG,EAAatoG,UAAYsoG,EAAa9uG,SAEpEqS,EAAAA,uBACA7F,EAAAA,QAAO,SAAC+tF,GAAM,OAAAA,MAGVsW,EAAan1G,KAAKsT,MAAMO,KAC5BM,EAAAA,OACEihG,GAAkDj8E,EAAatV,KAI7DwxF,EAAoBjxD,EAAAA,MAAKvjD,WAAA,EAAA0D,EAAA,CAC7B0wG,GACGj1G,KAAKs1G,yBAAyBn8E,EAAatV,KAC9ChQ,KACA4C,EAAAA,aAAa,GACb0b,EAAAA,eAAegjF,GACfh4F,EAAAA,KAAI,SAACjY,GAAAd,EAAAc,EAAA,GAAG,IAEJkM,EAAKkC,MAAMI,SACT,IAAI6hG,GAA2Bp8E,EAAatV,QAM9C2xF,EAAex1G,KAAKsT,MAAMO,KAC9BM,EAAAA,OAAOshG,GAA2Ct8E,EAAatV,KAGjE,OAAO4iE,EAAAA,OACL,WAAM,OAAA4uB,EAAkBnhG,eACxB,WAAM,OAAAshG,KACN3hG,KAAK+2B,EAAAA,YAAY,CAAEwoC,WAAY,EAAGC,UAAU,MAStCshC,EAAAz0G,UAAAo1G,yBAAV,SACEn8E,EACAtV,GAEA,IAAM6xF,EAAW,GAGXpzD,EAAStiD,KAAK0rC,cAAc2W,UAAU,UAAWx+B,GACvD,GAAIy+B,GAAUv6B,EAAAA,kBAAkB/nB,KAAK4nB,YAAa,CAEhD,IAAM+tF,EAAc31G,KAAKkqB,SAASrW,KAChC/C,EAAAA,QACE,SACE3E,GAIA,OX5JwB,wCW4JvBA,EAAOpC,MX7Ja,qCW8JnBoC,EAAOpC,OACToC,EAAO5B,KAAKL,WAAaivB,GACzBhtB,EAAO5B,KAAKsZ,QAAUA,MAItB+xF,EAAa51G,KAAKkqB,SAASrW,KAC/BwW,EAAAA,OAAOwrF,IACP/kG,EAAAA,QACE,SAAC3E,GACC,OAAAA,EAAOR,UAAYwtB,GAAehtB,EAAO5B,KAAKsZ,QAAUA,MAI9D6xF,EAAS1xG,KAAKhE,KAAK81G,iBAAiBF,EAAYD,EAAarzD,IAG/D,OAAOozD,GAaDf,EAAAz0G,UAAA41G,iBAAR,SACEF,EACAD,EACArzD,EACAmzC,GAEA,IAAI2Y,EAAY,EAEV3rE,EAAM,WAAM,OAACgzD,EAAYA,EAAUhzD,MAAQx9B,KAAKw9B,OAEhDszE,EAAaJ,EAAY9hG,KAAKsJ,EAAAA,KAAI,WAAM,OAACixF,EAAY3rE,QA2B3D,OAzB2CuzE,EAAAA,OAAM,WAC/C,IAAMC,EAAMxzE,IAAQ2rE,EAEd8H,EAAoBH,EAAWliG,KACnCq1D,EAAAA,MAAM5mB,EAAQmzC,GACdh8B,EAAAA,OAAM,GACN0a,GAAWyhC,IAGb,OAAIK,EAAM3zD,EAED8B,EAAAA,MAAMxtC,EAAAA,IAAG,GAAOs/F,GACN,IAARD,EAGFC,EAGA9xD,EAAAA,MACLxtC,EAAAA,IAAG,GAAM/C,KAAKq1D,EAAAA,MAAM5mB,EAAS2zD,EAAKxgB,IAClCygB,gDAzLW5gG,EAAAA,aACQssC,UACLn3B,EAAAA,wCACnB5T,EAAAA,OAAMC,KAAA,CAAC+R,EAAAA,gNATC8rF,EAAqB7zG,EAAA,CAHjCyU,EAAAA,WAAW,CACVC,WAAY,SAWT/T,EAAA,EAAAoV,EAAAA,OAAOgS,EAAAA,eATC8rF,oBCxBX,SAAAwB,EACY7iG,EACA8iG,GADAp2G,KAAAsT,MAAAA,EACAtT,KAAAo2G,eAAAA,EA2Ed,OA3DED,EAAAj2G,UAAA0J,IAAA,SACEuvB,EACA4iB,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO5iB,EACHn5B,KAAKo2G,eAAexsG,IAAIuvB,EAAa,GAAG30B,OAAOu3C,IAC/CnlC,EAAAA,QAAG7K,IAMToqG,EAAAj2G,UAAAm2G,UAAA,SACEl9E,EACAtV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO7jB,KAAKsT,MAAMO,KAChBM,EAAAA,OACEihG,GAAkDj8E,EAAatV,MAQrEsyF,EAAAj2G,UAAAo2G,UAAA,SACEn9E,EACAtV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO7jB,KAAKsT,MAAMO,KAChBM,EAAAA,OACEoiG,GAAkDp9E,EAAatV,MAQrEsyF,EAAAj2G,UAAAs2G,SAAA,SACEr9E,EACAtV,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEO7jB,KAAKsT,MAAMO,KAChBM,EAAAA,OACEsiG,GAAgDt9E,EAAatV,MAUnEsyF,EAAAj2G,UAAAw2G,OAAA,SAAOv9E,EAAqBtV,QAAA,IAAAA,IAAAA,EAAA,IAC1B7jB,KAAKsT,MAAMI,SAAS,IAAI6hG,GAA2Bp8E,EAAatV,8CA1E/CvO,EAAAA,aACSq/F,MAHjBwB,EAAcr1G,EAAA,CAD1ByU,EAAAA,cACY4gG,qBCCb,SAAAQ,0DAAsC72G,EAAA62G,EAAAtvG,GAIpCsvG,EAAAz2G,UAAAynC,OAAA,SAAO3rB,EAAe4rB,GACpB5nC,KAAKsT,MAAMI,SACT,IAAI2gG,GACF,CACEC,UAAWt4F,EACX4rB,aAAcA,IAEhB,KAKN+uE,EAAAz2G,UAAAq0G,WAAA,WACE,OAAOv0G,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOyiG,MAMhCD,EAAAz2G,UAAAu0G,aAAA,WACEz0G,KAAKsT,MAAMI,SACT,IAAIghG,GAAwC,CAC1CvD,uBAAuB,MAK7BwF,EAAAz2G,UAAA22G,qBAAA,WACE,OAAO72G,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO2iG,MAGhCH,EAAAz2G,UAAA62G,kBAAA,SAAkB/6F,EAAe4rB,GAC/B5nC,KAAKsT,MAAMI,SACT,IAAIsjG,GAAqC,CACvCjvE,KAAM/rB,EACN4rB,aAAcA,4HAvCT+uE,EAAgB71G,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDmhG,IAAyBvC,ICWtC6C,GAAA,SAAA5vG,GAgBE,SAAA4vG,EACYC,EACAjvB,EACA2E,GAHZ,IAAAx7E,EAKE/J,EAAAzG,KAAAZ,OAAOA,YAJGoR,EAAA8lG,qBAAAA,EACA9lG,EAAA62E,IAAAA,EACA72E,EAAAw7E,YAAAA,EAhBFx7E,EAAA+lG,YAEN/lG,EAAK62E,IAAIxC,iBAAiB5xE,KAC5B/C,EAAAA,OAAO+D,SACPe,EAAAA,WAAU,SAAC2sB,GAGT,OAAAnxB,EAAKgmG,wBAAwB70E,GACzBnxB,EAAK8lG,qBAAqB3C,aAAa1gG,KAAK/C,EAAAA,OAAO+D,UACnD+B,EAAAA,GAAG2rB,OAUTnxB,EAAK0vB,SAAW3T,EAAAA,SAAS0U,uBAtBiB/hC,EAAAm3G,EAAA5vG,GAyB5C4vG,EAAA/2G,UAAAioF,aAAA,WAAA,IAAA/2E,EAAApR,KACE,OAAOA,KAAKm3G,YAAYtjG,KACtB/C,EAAAA,QAAO,SAACyxB,GAA4B,QAAEA,EAAKqD,cAC3ChwB,EAAAA,WAAU,SAAChW,SACT,OAAAwR,EAAKw7E,YAAYE,UAAU,kCAAmC,CAC5D9mD,MAAOpmC,EAAEgmC,WAAWC,aACpB7pB,OAAoB,QAAb9W,EAAAtF,EAAEsiG,mBAAW,IAAAh9F,OAAA,EAAAA,EAAEvE,QAClBf,EAAEsiG,YAAY,GAAGmV,oBACjBtrG,SAMZkrG,EAAA/2G,UAAAk1F,mBAAA,WAAA,IAAAhkF,EAAApR,KACE,OAAO00B,EAAAA,cAAc,CACnB10B,KAAKm3G,YAAYtjG,OACjB7T,KAAK4sF,YAAYE,UAAU,iBAC1Bj5E,KACDC,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAACtF,EAAAuF,EAAA,GAAGhC,EAAAgC,EAAA,GACP,OAAAvF,EAAEsiG,YACE9wF,EAAKkmG,sBAAyC13G,EAAGuD,GACjD,UAKA8zG,EAAA/2G,UAAAo3G,sBAAV,SACE/0E,EACAp/B,WAEM++F,EAAgC,GACtCA,EAAYl+F,KAAK,CAAEb,MAAOA,EAAOkyF,KAAM,UAEvC,IAAiB,IAAAlwF,EAAAlB,EAAAs+B,EAAK2/D,aAAW98F,EAAAD,EAAA5C,QAAA6C,EAAAzC,KAAAyC,EAAAD,EAAA5C,OAAE,CAA9B,IAAMg1G,EAAEnyG,EAAA/C,MACU,aAAjBk1G,EAAGC,WAA6C,kBAAjBD,EAAGC,WACpCtV,EAAYl+F,KAAK,CACfb,MAAOo0G,EAAGF,eACVhiB,KAAM,MAAMkiB,EAAGE,iBAGE,UAAjBF,EAAGC,WACLtV,EAAYl+F,KAAK,CACfb,MAAOo0G,EAAGF,eACVhiB,KAAM,WAAWkiB,EAAGF,eAAc,MAAME,EAAGE,mHAIjD,OAAOvV,GAGC+U,EAAA/2G,UAAAk3G,wBAAV,SAAkC70E,GAChC,QAAS/iC,OAAOuN,KAAKw1B,EAAKO,OAAOzoB,MAC/B,SAACpZ,GACC,QAAEshC,EAAKO,MAAM7hC,GAAKmiC,WAAW/oB,MAC3B,SAACqpB,GACC,MAAkB,4BAAlBA,EAAKhB,UACa,yBAAlBgB,EAAKhB,yDAjEmB0xE,UACjB9uB,UACQ0H,2JAnBdiqB,EAAwBn2G,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDyhG,GAAb,CAA8C/qC,ICG9CwrC,GAAA,SAAArwG,GASE,SAAAqwG,EACYR,EACAtqB,EACAl3E,EACAikF,EACAj+E,GALZ,IAAAtK,EAOE/J,EAAAzG,KAAAZ,OAAOA,YANGoR,EAAA8lG,qBAAAA,EACA9lG,EAAAw7E,YAAAA,EACAx7E,EAAAsE,YAAAA,EACAtE,EAAAuoF,MAAAA,EACAvoF,EAAAsK,oBAAAA,EAZFtK,EAAAumG,OAENvmG,EAAK8lG,qBAAqB3C,aAAa1gG,KACzC/C,EAAAA,QAAO,SAACosB,GAAS,SAAEA,MAAAA,OAAI,EAAJA,EAAM0I,eACzB9xB,EAAAA,KAAI,SAAC0jC,GAAY,OAAAA,EAAQ5R,WAAWC,iBAWpCz0B,EAAK0vB,SAAW3T,EAAAA,SAAS4T,aACzB3vB,EAAKi7D,aAAe,yCAlBsBvsE,EAAA43G,EAAArwG,GAqB5CqwG,EAAAx3G,UAAAk1F,mBAAA,WAAA,IAAAhkF,EAAApR,KACE,OAAO00B,EAAAA,cAAc,CACnB10B,KAAK4sF,YAAYE,UAAU,eAC3B9sF,KAAK4sF,YAAYE,UAAU,uBAC3B9sF,KAAK0V,YAAYN,mBAChBvB,KACDC,EAAAA,KAAI,SAAC5O,OAAAC,EAAAf,EAAAc,EAAA,GAAC0yG,EAAAzyG,EAAA,GAAW0yG,EAAA1yG,EAAA,GAAak8E,EAAAl8E,EAAA,GACtB+8F,EAAc,GAUpB,OATAA,EAAYl+F,KAAK,CAAEb,MAAOy0G,EAAWviB,KAAM,MACvChU,GACF6gB,EAAYl+F,KAAK,CACfb,MAAO00G,EACPxiB,KAAMjkF,EAAKsK,oBAAoBzC,UAAU,CACvCU,QAAS,cAIRuoF,OAKbwV,EAAAx3G,UAAAioF,aAAA,WAAA,IAAA/2E,EAAApR,KACE,OAAOA,KAAK23G,OAAO9jG,KACjB+B,EAAAA,WAAU,SAACkiG,GACT,OAAA1mG,EAAKw7E,YAAYE,UAAU,2CAA4C,CACrE9mD,MAAO8xE,EACPC,OAAQ3mG,EAAKglC,kBAMrBshE,EAAAx3G,UAAAisE,SAAA,SAAS5pC,GACP,OAAOl7B,EAAAnH,UAAMisE,SAAQvrE,KAAAZ,KAACuiC,IAASviC,KAAKo2C,WAAa,GAAK,IAGxD52C,OAAAgC,eAAck2G,EAAAx3G,UAAA,aAAU,KAAxB,mBACE,OAAuC,QAAvCiF,EAA0B,QAA1BD,EAAOlF,KAAK25F,MAAMqe,gBAAQ,IAAA9yG,OAAA,EAAAA,EAAE0e,mBAAW,IAAAze,OAAA,EAAAA,EAAE8yG,qFAjDT7D,UACTpnB,UACA35E,UACN6kG,EAAAA,sBACct/F,6MAdtB8+F,EAAwB52G,EAAA,CAHpCyU,EAAAA,WAAW,CACVC,WAAY,UAEDkiG,GAAb,CAA8CxrC,ICI9CisC,GAAA,SAAA9wG,GAgBE,SAAA8wG,EACYr7F,EACAs7F,EACAxrB,GAHZ,IAAAx7E,EAKE/J,EAAAzG,KAAAZ,OAAOA,YAJGoR,EAAA0L,eAAAA,EACA1L,EAAAgnG,eAAAA,EACAhnG,EAAAw7E,YAAAA,EAVFx7E,EAAAinG,SAAWjnG,EAAK0L,eAAejC,iBAAiBhH,KACxDC,EAAAA,KAAI,SAAC5H,GAAU,OAAAA,EAAMA,MAAM4N,OAAoB,eAC/ChJ,EAAAA,QAAO,SAACwoB,GAAS,QAAEA,KACnB1jB,EAAAA,WAAU,SAAC0jB,GAAS,OAAAloB,EAAKgnG,eAAexuG,IAAI0vB,EAAMwP,EAAAA,aAAawvE,YAC/DxnG,EAAAA,OAAO+D,UASPzD,EAAK0vB,SAAW3T,EAAAA,SAASyU,sBAtBgB9hC,EAAAq4G,EAAA9wG,GA8B3C8wG,EAAAj4G,UAAAq4G,eAAA,WAAA,IAAAnnG,EAAApR,KACE,OAAOA,KAAKq4G,SAASxkG,KACnB+B,EAAAA,WAAU,SAAChW,GACT,OAAAwR,EAAKw7E,YAAYE,UAAU,mCAAoC,CAC7DmV,QAASriG,EAAEgqB,YAWnBuuF,EAAAj4G,UAAAioF,aAAA,WAAA,IAAA/2E,EAAApR,KACE,OAAOA,KAAKq4G,SAASxkG,KACnB+B,EAAAA,WAAU,SAAChW,GACT,IAAI+iC,EAAQ/iC,EAAEgqB,KAGd,OAFA+Y,GAASvxB,EAAKonG,qBAAqB54G,GACnC+iC,GAASvxB,EAAKqnG,oBAAoB74G,GAC3BwR,EAAKw7E,YAAYE,UAAU,iCAAkC,CAClEnqD,MAAOA,SAUfw1E,EAAAj4G,UAAAw4G,mBAAA,WAAA,IAAAtnG,EAAApR,KACE,OAAOA,KAAKq4G,SAASxkG,KACnB+B,EAAAA,WAAU,SAAChW,GACT,OAAAwR,EAAKw7E,YAAYE,UAAU,uCAAwC,CACjExR,YAAa17E,EAAE+4G,eAUvBR,EAAAj4G,UAAAk1F,mBAAA,WACE,OAAO1gE,EAAAA,cAAc,CACnB10B,KAAKq4G,SAASxkG,OACd7T,KAAK4sF,YAAYE,UAAU,iBAC1Bj5E,KACDC,EAAAA,KAAI,SAAC5O,WAAAE,EAAAhB,EAAAc,EAAA,GAACtF,EAAAwF,EAAA,GAAGjC,EAAAiC,EAAA,GACD88F,EAAc,GACpBA,EAAYl+F,KAAK,CAAEb,MAAOA,EAAOkyF,KAAM,UACvC,IAAkC,IAAAhyD,EAAAp/B,EAAArE,EAAEg5G,YAAc,IAAEr1E,EAAAF,EAAA9gC,QAAAghC,EAAA5gC,KAAA4gC,EAAAF,EAAA9gC,OAAE,CAA3C,IAAAkhC,EAAAF,EAAAlhC,MAAEw2G,EAAAp1E,EAAA7Z,KAAM0P,EAAAmK,EAAAnK,KAAMniB,EAAAssB,EAAAtsB,IACvB+qF,EAAYl+F,KAAK,CACfb,MAAO01G,GAAQv/E,EACf+7D,KAAMl+E,sGAGV,OAAO+qF,OASbiW,EAAAj4G,UAAA44G,aAAA,WACE,OAAO94G,KAAKq4G,SAASxkG,KACnBC,EAAAA,KAAI,SAAClU,WACH,OAA6B,QAA7BuF,GAAc,QAAbD,EAAKtF,EAAEqkC,cAAM,IAAA/+B,OAAA,EAAAA,EAAE6zG,SAASC,YAAI,IAAA7zG,OAAA,EAAAA,EAAEgS,KACrBvX,EAAEqkC,OAAO80E,QAASC,KAAK7hG,IAC7B,UAKAghG,EAAAj4G,UAAAs4G,qBAAV,SAA+B9gF,SACzBuhF,EAIJ,OAHsB,QAAlB/zG,EAAAwyB,EAAQkhF,kBAAU,IAAA1zG,OAAA,EAAAA,EAAEvE,QAAS,IAC/Bs4G,EAAgBvhF,EAAQkhF,WAAW,IAE9BK,EACH,OAAMA,EAAcrvF,MAAQqvF,EAAc3/E,MAC1C,IAGI6+E,EAAAj4G,UAAAu4G,oBAAV,SAA8B/gF,GAC5B,OAAOA,EAAQwhF,aAAe,MAAMxhF,EAAQwhF,aAAiB,IAQ/Df,EAAAj4G,UAAAkoF,cAAA,WACE,OAAOxxE,EAAAA,GAAG,CAACyuE,EAAAA,eAAe8zB,OAAQ9zB,EAAAA,eAAe+zB,kDAhHvB59F,UACA26F,UACHnpB,2JAnBdmrB,EAAuBr3G,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAED2iG,GAAb,CAA6CjsC,ICZ7CmtC,GAAA,SAAAhyG,GAeE,SAAAgyG,EACYv8F,EACAo6F,EACAtqB,GAHZ,IAAAx7E,EAKE/J,EAAAzG,KAAAZ,OAAOA,YAJGoR,EAAA0L,eAAAA,EACA1L,EAAA8lG,qBAAAA,EACA9lG,EAAAw7E,YAAAA,EAhBFx7E,EAAAumG,OAENvmG,EAAK8lG,qBAAqB3C,aAAa1gG,KACzC/C,EAAAA,QAAO,SAACosB,GAAS,SAAEA,MAAAA,OAAI,EAAJA,EAAM0I,eACzB9xB,EAAAA,KAAI,SAAC0jC,GAAY,OAAAA,EAAQ5R,WAAWC,iBAG5Bz0B,EAAAkoG,OAENloG,EAAK0L,eACNjC,iBACAhH,KAAKC,EAAAA,KAAI,SAAC5H,GAAU,OAAAA,EAAMA,MAAM4N,OAAc,UAQ/C1I,EAAK0vB,SAAW3T,EAAAA,SAAS4T,aACzB3vB,EAAKi7D,aAAe,yCAtBoBvsE,EAAAu5G,EAAAhyG,GAyB1CgyG,EAAAn5G,UAAAioF,aAAA,WAAA,IAAA/2E,EAAApR,KACQ6E,EAAU,CAAC7E,KAAK23G,OAAQ33G,KAAKs5G,QACnC,OAAO5kF,EAAAA,cAAc7vB,GAASgP,KAC5B+B,EAAAA,WAAU,SAAC1Q,OAAAC,EAAAf,EAAAc,EAAA,GAAC5E,EAAA6E,EAAA,GAAGo0G,EAAAp0G,EAAA,GACb,OAAAiM,EAAKw7E,YAAYE,UAAU,gCAAiC,CAC1D9mD,MAAO1lC,EACP0b,MAAOu9F,kDAfa/9F,UACM44F,UACTpnB,2JAlBdqsB,EAAsBv4G,EAAA,CAHlCyU,EAAAA,WAAW,CACVC,WAAY,UAED6jG,GAAb,CAA4CntC,kBCoB1C,SAAAstC,EACUtvF,EACAuvF,GAFV,IAAAroG,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAy5G,2BAAAA,EA7BVz5G,KAAA05G,uBAGI15G,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrBXmC,0CqBYnCvW,EAAAA,KAAI,SAAC3H,GAAiD,OAAAA,EAAOR,WAC7Dof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKqoG,2BACT7vG,IAAI+B,EAAQwtB,YAAaxtB,EAAQw5B,cAAex5B,EAAQsrB,UACxDpjB,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIy8E,GAA4C,CACrDxgF,YAAaxtB,EAAQwtB,YACrBiS,KAAMlO,OAGVzf,EAAAA,YAAW,SAACm8F,GACV,OAAAhjG,EAAAA,GACE,IAAIijG,GAAyC,CAC3ClwF,QAAShe,EAAQwtB,uBAYjC,gDAHsB1O,EAAAA,eACkBmlF,MA7BtC9uG,EAAA,CADC4pB,EAAAA,uDADU8uF,EAAwB14G,EAAA,CADpCyU,EAAAA,cACYikG,oBC+DX,SAAAM,EACU5vF,EACA6vF,EACA50C,GAHV,IAAA/zD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA+5G,wBAAAA,EACA/5G,KAAAmlE,qBAAAA,EA5DVnlE,KAAAg6G,oBAGIh6G,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrBfgC,uCqBgBhCvW,EAAAA,KAAI,SAAC3H,GAA8C,OAAAA,EAAOR,WAC1Dof,EAAAA,UAAS,SAACoO,GACR,OAAO/nB,EAAK2oG,wBAAwBnwG,IAAIuvB,GAAatlB,KACnDC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAI+8E,GAAyC,CAClD9gF,YAAWA,EACXiS,KAAMlO,OAGVzf,EAAAA,YAAW,SAACm8F,GACV,OAAAhjG,EAAAA,GACE,IAAIsjG,GAAsC,CACxCvwF,QAASwP,aASrBn5B,KAAAm6G,kBAGIn6G,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrBpC+B,iCqBqC/BvW,EAAAA,KAAI,SAAC3H,GAA6C,OAAAA,EAAOR,WACzDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK2oG,wBACTvwF,IAAI7d,EAAQwtB,YAAaxtB,EAAQs7B,QACjCpzB,KACCC,EAAAA,KAAI,SAACsmG,GACH,OAAO,IAAIC,GAAwCD,MAErD38F,EAAAA,YAAW,SAACm8F,GACV,OAAAhjG,EAAAA,GAAG,IAAI0jG,GAAqC3uG,EAAQwtB,sBAO9Dn5B,KAAAu6G,6CAA+Cv6G,KAAKkqB,SAASrW,KAC3DwW,EAAAA,OrBnDF,yCqBoDElN,EAAAA,KAAI,WACF/L,EAAK+zD,qBAAqB37C,IACxB,CAAEvoB,IAAK,mCACP2iE,EAAAA,kBAAkBqC,2BAU1B,gDAJsBx7C,EAAAA,eACeolF,UACHnrC,MA5DhC5jE,EAAA,CADC4pB,EAAAA,oDA2BD5pB,EAAA,CADC4pB,EAAAA,kDAsBD5pB,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,wEAhDTomG,EAAqBh5G,EAAA,CADjCyU,EAAAA,cACYukG,oBCyDX,SAAAU,EACUtwF,EACAuwF,GAFV,IAAArpG,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAy6G,uBAAAA,EA7DVz6G,KAAA06G,gBAEI16G,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrBL2B,6BqBM3BqvD,EAAAA,SAAQ,SAACvtE,GAA0C,OAAAA,EAAOwkG,aAC1D5lF,EAAAA,UAAS,SAAC2e,GACR,OAAAA,EAAM71B,KACJ+B,EAAAA,WAAU,SAACzJ,GACT,OAAOiF,EAAKqpG,uBACT9yE,OAAOx7B,EAAOR,QAAQ2oG,UAAWnoG,EAAOR,QAAQi8B,cAChD/zB,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIy9E,GACTz9E,EACA/wB,EAAOwkG,cAGXlzF,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIgkG,GACFnxF,GAAsBnlB,GACtB6H,EAAOwkG,wBAWzB3wG,KAAA66G,uBAGI76G,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrBnCmC,qCqBoCnCvW,EAAAA,KAAI,SAAC3H,GAAiD,OAAAA,EAAOR,WAC7DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKqpG,uBACT1K,eAAepkG,EAAQo8B,KAAMp8B,EAAQi8B,aAAa3Q,UAClDpjB,KACCC,EAAAA,KAAI,SAAC2+F,GACH,OACS,IAAIqI,QADO/uG,IAAhB0mG,EACqD,GAEFA,MAEzDh1F,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAImkG,GACFtxF,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACcqlF,MA7DlChvG,EAAA,CADC4pB,EAAAA,gDAiCD5pB,EAAA,CADC4pB,EAAAA,uDAjCU8vF,EAAqB15G,EAAA,CADjCyU,EAAAA,cACYilG,oBC+DX,SAAAQ,EACU9wF,EACA+wF,GAFV,IAAA7pG,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAi7G,iBAAAA,EA1DFj7G,KAAAy0E,eAAqCz0E,KAAKkqB,SAASrW,KACzDwW,EAAAA,OACEqqD,GACA9T,KAIJ5gE,KAAAk7G,aAAe7jB,EAAAA,cACb,WAAM,OAAA,SAACnyF,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAEuwF,EAAAtwF,EAAAswF,UAAWrwF,EAAAD,EAAA0rE,SAAAA,OAAA,IAAAzrE,EAAA,EAAAA,EAGlB,OAAAgM,EAAK8Y,SAASrW,KACZwW,EAAAA,OAAOwrF,IACP/hG,EAAAA,KAAI,SAAC3H,GAAuC,MAAA,CAC1CmtB,KAAMntB,EAAOR,QACbkY,MAAO1X,EAAO5B,KAAKsZ,UAIrB0xE,GAAmB1kB,EAAU4kB,GAC7B1qE,EAAAA,UAAS,SAACwa,GACR,OAAA6e,EAAAA,MAAKvjD,WAAA,EAAA0D,EACA6M,EAAK6pG,iBACLtL,QAAQpqE,GACRzxB,IAAI1C,EAAK+pG,wBAGhBhnC,GAAW/iE,EAAKqjE,qBAiCxB,OA7BUumC,EAAA96G,UAAAi7G,kBAAR,SACEC,GAIA,OAAOA,EAAY1wE,MAAM72B,KACvBC,EAAAA,KACE,SAACopB,GACC,OAAA,IAAIm+E,GAAiCj7G,EAAA,CACjCk5B,KAAM8hF,EAAY9hF,MAAS4D,GAC7Bk+E,EAAYv3F,UAGlBpG,EAAAA,YAAW,SAACnZ,GACV,OAAOsS,EAAAA,GACL,IAAI0kG,GACFF,EAAY9hF,KACZ7P,GAAsBnlB,GACtB82G,EAAYv3F,sDAQF4G,EAAAA,eACQilF,MA5DjBsL,EAAcl6G,EAAA,CAD1ByU,EAAAA,cACYylG,MCTAhvF,GAAiB,CAC5BwuF,GACAQ,GACAlB,GACAN,ICLWvtF,GAAuC,CAClDkN,YAAa,GACbiS,KAAM,IAGR,SAAgBn/B,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAqvG,IAGQpvG,EAAOpC,MACb,I1BNF,iD0BOI,IAAMovB,EAAchtB,EAAOR,QAAQwtB,YAC7BiS,EAAOj/B,EAAOR,QAAQy/B,KAE5B,OAAAhrC,EAAAA,EAAA,GACK8L,GAAK,CACRk/B,KAAM7mC,EAAI2H,EAAMk/B,KAAUA,GAAc,IAAKp+B,QAC3C,SACEg4B,EACAw2E,GAWA,OARGx2E,EAAkBg0D,MACjB,SAACtwB,GACC,OAAAA,EAAIvjC,gBAAkBq2E,EAAiBr2E,eACvCujC,EAAI1nE,OAAOs4B,OAASkiF,EAAiBx6G,OAAOs4B,SAGhD0L,EAAkBhhC,KAAKw3G,GAElBx2E,IAET,IAEF7L,YAAWA,IAIf,I1BjCoC,qC0BkClC,OAAOlN,GAIX,OAAO/f,EAGT,IC9Ca+f,GAAoC,CAC/CkN,YAAa,GACbiS,KAAM,IAGR,SAAgBn/B,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAuvG,IAGQtvG,EAAOpC,MACb,I1BNF,8C0BOI,IAAMovB,EAAchtB,EAAOR,QAAQwtB,YAC7BiS,EAAOj/B,EAAOR,QAAQy/B,KAE5B,OAAAhrC,EAAAA,EAAA,GACK8L,GAAK,CACRitB,YAAWA,EACXiS,KAAIA,IAKV,OAAOl/B,EAGF,ICxBMwvG,GAAmD,GAQhE,SAAgBC,GACd1xG,EACAgC,GAKA,IAAMvB,EAASsB,GAAiB/B,EAAYgC,GAE5C,OAAO,SACLC,EACAC,WAEA,YAHA,IAAAD,IAAAA,EAAAwvG,IAGIvvG,GAAUA,EAAO5B,MAAQ4B,EAAO5B,KAAKN,aAAeA,EACtD7J,EAAAA,EAAA,GACK8L,KAAKhH,EAAA,IACU,QADVC,EACPgH,EAAO5B,KAAKsZ,aAAK,IAAA1e,EAAAA,EAAI,IAAKuF,EAAOwB,EAAMC,EAAO5B,KAAKsZ,OAAQ1X,GAAOjH,IAGhEgH,GClBX,SAAgB0vG,GACd3xG,EACAgC,GAKA,OAAOS,GACLzC,EACA0xG,GAAuB1xG,EAAYgC,aCbvBigB,KACd,MAAO,CACLyb,OAAQk0E,GACRp7F,QAASm7F,G1BLwB,2B0BMjCtJ,QAASwJ,GACT72E,WAAY82E,IAIhB,IAAa1vF,GAER,IAAI/mB,EAAAA,eAAgD,mBAE5CgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgB8vF,GACd/vG,GAEA,OAAO,SAAUC,EAAOC,GAOtB,OALEA,EAAOpC,OAAS2qE,IAChBvoE,EAAOpC,OAAS62D,KAEhB10D,OAAQH,GAEHE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAACuvF,aC5BjCC,WASd,MAP4B,CAC1B/vG,MAAO,CACL4b,YAAa,CACX/a,MAAI7H,EAAA,GAAIA,EAAgB,QAAG6gB,EAAAA,kBAAkBkC,eAAc/iB,MAmBnE,IAAAg3G,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkBp7G,EAAA,CAZ9BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACAC,EAAAA,YAAYC,W3BvBe,U2BuBaxB,GAAc,CAAEI,aAAY0vF,KACpEruF,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CACTR,EAA4B61G,IAC5B3vF,OAGS4vF,GAAb,GC1BME,GAAqB,CACzB,CACEx2G,QAASsmE,GACT/mD,YAAagzF,GACbryG,OAAO,GAET,CACEF,QAASsmE,GACT/mD,YAAa8xF,GACbnxG,OAAO,GAET,CACEF,QAASsmE,GACT/mD,YAAak0F,GACbvzG,OAAO,GAET,CACEF,QAASsmE,GACT/mD,YAAauyF,GACb5xG,OAAO,IAOXu2G,GAAA,WAAA,SAAAA,WAaA,SAbaA,EACJA,EAAAv1G,QAAP,WACE,MAAO,CACLJ,SAAU41G,EACV11G,UAASrC,EAAA,CACP4xG,GACA/B,GACAL,GACAL,IACG0I,MATEC,EAAaC,EAAAx7G,EAAA,CAHzBkG,EAAAA,SAAS,CACRC,QAAS,CAACi1G,OAECG,GAAb,iBCjBE,SAAAE,EACYtN,EACAnyF,EACAoG,EACAs5F,EACA/gG,GALZ,IAAArK,EAAApR,KASE,GARUA,KAAAivG,WAAAA,EACAjvG,KAAA8c,eAAAA,EACA9c,KAAAkjB,gBAAAA,EACAljB,KAAAw8G,KAAAA,EACAx8G,KAAAyb,OAAAA,EAXJzb,KAAAy8G,eAAgB,EAatBz8G,KAAK08G,eAEDjhG,EAAOpF,aAAc,CACvB,IAAMsmG,EAASlhG,EAAOpF,aAEtBsmG,EAAOC,UAAYD,EAAOC,WAAa,GACvCD,EAAOC,UAAUC,gBAAkB,SACjCxmB,EACAymB,EACAC,GAEA,OAAO3rG,EAAKyrG,gBAAgBxmB,EAAaymB,EAAeC,IAI1DJ,EAAOC,UAAUI,cAAgBh9G,KAAKg9G,sBAI1Cx9G,OAAAgC,eAAI+6G,EAAAr8G,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKi9G,8CAGJV,EAAAr8G,UAAAw8G,aAAV,WAAA,IAAAtrG,EAAApR,KACE00B,EAAAA,cAAc,CACZ10B,KAAKivG,WAAWxpB,iBAChBzlF,KAAK8c,eAAejC,mBAEnBhH,KACCqpG,EAAAA,WAAU,SAACh4G,GAAc,YAAY6G,IAA1B3H,EAAAc,EAAA,GAAC,MACZ4L,EAAAA,QAAO,SAAC5L,OAAGq5F,EAAHn6F,EAAAc,EAAA,GAAG,GACT,SAAIq5F,EAAYpjF,WAAc/J,EAAK6rG,eACjC7rG,EAAK6rG,aACH1e,EAAYpjF,UAAUyI,YAAyB,aAC7CxS,EAAK6rG,kBAMbhpG,EAAAA,KAAK,IAENC,WAAU,WACT9C,EAAK69F,WAAWkO,mBAAoB,EACpC/rG,EAAKgsG,4BAIDb,EAAAr8G,UAAAk9G,sBAAV,WAAA,IAAAhsG,EAAApR,KACEA,KAAKkjB,gBACFxC,kBACA7M,KACC/C,EAAAA,QAAO,SAAC08B,GAAS,OAA6B,IAA7BhuC,OAAOuN,KAAKygC,GAAM7sC,UACnCsT,EAAAA,KAAK,IAENC,WAAU,SAACs5B,GACVp8B,EAAKisG,2BAA6B7vE,EAAK6vE,2BACvCjsG,EAAKksG,0BAA4B9vE,EAAK8vE,0BAEtClsG,EAAKmsG,sBAIDhB,EAAAr8G,UAAAq9G,gBAAV,WAAA,IAAAnsG,EAAApR,KACEA,KAAKivG,WAAWxpB,iBAAiBvxE,WAAU,SAACspG,GAC1C,GAAIA,GAAWpsG,EAAK6rG,aAAc,CAChC7rG,EAAKqsG,eAAiBD,EAAQ56E,OAG9BxxB,EAAKssG,gBAAgBF,GAGrB,IAAMG,EAAmB,GASzB,GARAh+G,MAAMm1E,KAAK1jE,EAAKqK,OAAOtF,SAASrT,KAAKogG,WAAWn/E,SAAQ,SAAC65F,GACvD,OAAAD,EAAiB35G,KAAK45G,MAExBD,EAAiB55F,SAAQ,SAAC65F,GACxB,OAAAxsG,EAAKqK,OAAOtF,SAASrT,KAAKogG,UAAUtpE,OAAOgkF,MAIzCJ,EAAQz6E,YAAcy6E,EAAQz6E,WAAW65E,UACzBY,EAAQz6E,WAAW65E,UAAUiB,QAAQxuG,MAAM,KACnD0U,SAAQ,SAACk/E,GACjB7xF,EAAKqK,OAAOtF,SAASrT,KAAKogG,UAAU15E,IAAIy5E,WAOxCsZ,EAAAr8G,UAAAw9G,gBAAV,SAA0BF,GAEnBx9G,KAAKy8G,gBACRz8G,KAAKy8G,eAAgB,EAEnBe,EAAQzzG,OAASojB,EAAAA,SAASyU,cAC1B5hC,KAAKs9G,0BAELt9G,KAAK8c,eAAef,GAAG,CACrBpC,QAAS,UACTG,OAAQ,CAAEwf,KAAMt5B,KAAKs9G,0BAA2B1zF,KAAM,MAGxD4zF,EAAQzzG,OAASojB,EAAAA,SAAS0U,eAC1B7hC,KAAKq9G,4BAELr9G,KAAK8c,eAAef,GAAG,CACrBpC,QAAS,WACTG,OAAQ,CAAEwf,KAAMt5B,KAAKq9G,gCAMnBd,EAAAr8G,UAAA28G,gBAAV,SACExmB,EACAymB,EACAC,GAHF,IAAA3rG,EAAApR,KAoBE,OAfIq2F,GACFr2F,KAAKw8G,KAAKsB,KAAI,WAEPf,EAMMD,GACT1rG,EAAK69F,WAAW5nB,iBAAiBgP,GAN7BjlF,EAAKqsG,eACPrsG,EAAK69F,WAAW7nB,gBAAgBh2E,EAAKqsG,gBAErCrsG,EAAK69F,WAAW/nB,wBAQjB,GAGCq1B,EAAAr8G,UAAA88G,cAAV,sDAhJwB13B,UACI9pE,UACCuG,UACXg8F,EAAAA,cACE7nG,qMAbTqmG,EAAgBz7G,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAED+mG,oBCAX,SAAAyB,EAAoBziD,GAAAv7D,KAAAu7D,QAAAA,SAEpByiD,EAAA99G,UAAAqd,UAAA,SACEjU,EACA/G,GAUA,OARI+G,EAAQ6N,IAAIhK,SAAS,UAAYnN,KAAKu7D,QAAQ0iD,cAChD30G,EAAUA,EAAQG,MAAM,CACtBmlC,UAAW,CACTqvE,YAAaj+G,KAAKu7D,QAAQ0iD,gBAKzB17G,EAAKsT,OAAOvM,6CAdQizG,uHADlByB,EAAoBl9G,EAAA,CADhCyU,EAAAA,WAAW,CAAEC,WAAY,UACbwoG,MCPA/4F,GAA2B,CACtC,CACErf,QAASsf,EAAAA,kBACTC,YAAa64F,GACbl4G,OAAO,kBCJX,SAAAo4G,WAOA,SAPaA,EACJA,EAAAp3G,QAAP,WACE,MAAO,CACLJ,SAAUy3G,EACVv3G,UAASrC,EAAM0gB,MAJRi5F,EAAeC,EAAAr9G,EAAA,CAD3BkG,EAAAA,SAAS,KACGk3G,MCkCbE,GAAA,WAAA,SAAAA,KAuBA,OAjBSA,EAAAx0G,IAAP,SAAWy0G,GAeT,OAde,SACbC,GAEA,OAAO,SAACC,EAAUvnF,EAASuyE,GAQzB,OAPuB8U,EAAej+G,EAAAA,EAAA,GACjCk+G,GAAY,CACf13G,UAASrC,EACJi6G,GAA0BxnF,GACzBsnF,EAAa13G,WAAa,MAG3B63G,CAAeF,EAAUvnF,EAASuyE,MAKjD6U,EAvBA,GA8BA,SAAgBI,GACdxnF,GAEA,MAAO,CACL,CACEpxB,QAASkzC,GACTjzC,UASiB64G,EATO1nF,EAAQ0nF,IAU7BC,GAAiBD,GAAOA,EAAIE,cARjC,CACEh5G,QAASmzC,GACTlzC,SAAU84G,GAAiB3nF,EAAQ0nF,OAKzC,IAAuBA,EAIvB,SAASC,GAAiBD,GACxB,OAAOA,EAAIG,SAAW,MAAQH,EAAI90G,IAAI,eCzFxC,aCIak1G,GAAoB,kCCEpBC,GAAc,4BAIdC,GAAmB,mCAKhCC,GAAA,SAAA53G,GAEE,SAAA43G,IAAA,IAAA7tG,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YAFjBoR,EAAArH,KAXwB,0BAenC,OALsCjK,EAAAm/G,EAAA53G,GAKtC43G,EALA,CAAsC5tG,GAOtC6tG,GAAA,SAAA73G,GAEE,SAAA63G,EACSvzG,GADT,IAAAyF,EASE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YARjBoR,EAAAzF,QAAAA,EAFAyF,EAAArH,KAAOg1G,KAYlB,OAbgCj/G,EAAAo/G,EAAA73G,GAahC63G,EAbA,CAAgC7tG,GAehC8tG,GAAA,SAAA93G,GAEE,SAAA83G,EAAmBxzG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,GAAmBnzG,IAAQ3L,YADhBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KA/BqB,mCAmChC,OALoCjK,EAAAq/G,EAAA93G,GAKpC83G,EALA,CAAoC5tG,GAOpC6tG,GAAA,SAAA/3G,GAEE,SAAA+3G,EAAmBzzG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KArCwB,sCAyCnC,OALuCjK,EAAAs/G,EAAA/3G,GAKvC+3G,EALA,CAAuC3tG,IAOvC4tG,GAAA,SAAAh4G,GAEE,SAAAg4G,EAAmB1zG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAAOi1G,KAIlB,OALmCl/G,EAAAu/G,EAAAh4G,GAKnCg4G,EALA,CAAmChuG,GAOnCiuG,GAAA,SAAAj4G,GAEE,SAAAi4G,EAAmB3zG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,GAAmBnzG,IAAQ3L,YADhBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAhD0B,0CAoDrC,OALuCjK,EAAAw/G,EAAAj4G,GAKvCi4G,EALA,CAAuC/tG,GAOvCguG,GAAA,SAAAl4G,GAEE,SAAAk4G,EAAmB5zG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KArDT,6CAyDF,OAL0CjK,EAAAy/G,EAAAl4G,GAK1Ck4G,EALA,CAA0C9tG,IC1D1C+tG,GAAA,SAAAn4G,GAEE,SAAAm4G,IAAA,IAAApuG,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YAFjBoR,EAAArH,KALoB,kCAS/B,OALmCjK,EAAA0/G,EAAAn4G,GAKnCm4G,EALA,CAAmCnuG,GAOnCouG,GAAA,SAAAp4G,GAEE,SAAAo4G,EAAmB9zG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,GAAmBnzG,IAAQ3L,YADhBoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAXyB,uCAepC,OALuCjK,EAAA2/G,EAAAp4G,GAKvCo4G,EALA,CAAuCluG,GAOvCmuG,GAAA,SAAAr4G,GAEE,SAAAq4G,EAAmB/zG,GAAnB,IAAAyF,EACE/J,EAAAzG,KAAAZ,KAAM8+G,KAAkB9+G,YADPoR,EAAAzF,QAAAA,EADVyF,EAAArH,KAjB4B,0CAqBvC,OAL0CjK,EAAA4/G,EAAAr4G,GAK1Cq4G,EALA,CAA0CjuG,yDDhBP,wDAEH,qDACG,8EAGE,iEAEnC,kMCV6B,qDACK,6DACG,wGCE1BkuG,GAGTjtG,EAAAA,sBHPgC,aIYlC,SAACktG,GAA6B,OAAAA,EAAYC,YAL/BC,GAGTjtG,EAAAA,eACF8sG,GAAmBI,OAOkB,SAAC7zG,GACtC,OAAAwkB,GAAyCxkB,IAJ9B8zG,GAGTntG,EAAAA,eAAeitG,GAAkBG,OAOE,SAAC/zG,GACtC,OAAA0kB,GAA2C1kB,IAJhCg0G,GAGTrtG,EAAAA,eAAeitG,GAAkBK,IClBxBC,GAGTvtG,EAAAA,eACF8sG,IACA,SAACC,GAA6B,OAAAA,EAAYS,iBAG/BC,GAGTztG,EAAAA,eAAeutG,IAAuB,SAACl0G,GACzC,OAAAwkB,GAAyCxkB,MAG9Bq0G,GAGT1tG,EAAAA,eAAeutG,IAAuB,SAACl0G,GACzC,OAAA0kB,GAA2C1kB,kOCN3C,SAAAs0G,EACYltG,EACAmI,EACA0pD,EACAroD,GAHA9c,KAAAsT,MAAAA,EACAtT,KAAAyb,OAAAA,EACAzb,KAAAmlE,qBAAAA,EACAnlE,KAAA8c,eAAAA,EANJ9c,KAAAygH,mBAA6B,KAwHvC,OA5GED,EAAAtgH,UAAAggH,iBAAA,WACE,OAAOlgH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOusG,MAMhCF,EAAAtgH,UAAA8/G,sBAAA,WACE,OAAOhgH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOwsG,MAMhCH,EAAAtgH,UAAAqgH,wBAAA,WACE,OAAOvgH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOysG,MAOXJ,EAAAtgH,UAAAogH,yBAAA,WACE,OAAOtgH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO0sG,MAYXL,EAAAtgH,UAAA4gH,iBAAA,SACExM,EACA1sE,EACA0H,EACAtC,EACA+zE,GALF,IAAA3vG,EAAApR,KAOM+gH,GAAiB/gH,KAAKyb,OAAOpF,cAC/BrW,KAAKghH,sBAAsB,IAAIC,IAC/BjhH,KAAKygH,mBAAqBzgH,KAAKyb,OAAOpF,aAAa6qG,UAAUC,YAAYC,eACvE,SAACC,GACC,IAAMl+E,EAAqB,CACzB+M,UAAWmxE,EAAIC,OAAOpxE,UACtBC,SAAUkxE,EAAIC,OAAOnxE,UAGvB/+B,EAAK4vG,sBACH,IAAIO,GAA8B,CAChCjN,UAAWA,EACX1sE,aAAcA,EACd0H,kBAAmBnM,EACnB6J,eAAgBA,QAItB,WACE57B,EAAK+zD,qBAAqB37C,IACxB,CAAEvoB,IAAK,qCACP2iE,EAAAA,kBAAkB4B,gBAEpBp0D,EAAK0L,eAAef,GAAG,CAAC,sBAI5B/b,KAAKghH,sBACH,IAAIO,GAA8B,CAChCjN,UAAWA,EACX1sE,aAAcA,EACd0H,kBAAmBA,EACnBtC,eAAgBA,MASxBwzE,EAAAtgH,UAAAmgH,cAAA,WACErgH,KAAKghH,sBAAsB,IAAIQ,KAOjChB,EAAAtgH,UAAAuhH,cAAA,SAAchyE,GACZzvC,KAAKghH,sBACH,IAAIU,GAAiC,CAAEjyE,QAAOA,MAI1C+wE,EAAAtgH,UAAA8gH,sBAAR,SAA8BW,GACI,OAA5B3hH,KAAKygH,qBACPzgH,KAAKyb,OAAOpF,aAAa6qG,UAAUC,YAAYS,WAC7C5hH,KAAKygH,oBAEPzgH,KAAKygH,mBAAqB,MAE5BzgH,KAAKsT,MAAMI,SAASiuG,6CAnHHrsG,EAAAA,aACCY,UACcwuD,UACNlpD,MAPjBglG,EAAkB1/G,EAAA,CAD9ByU,EAAAA,cACYirG,oBChBb,SAAAqB,IAEW7hH,KAAA8hH,SAAW,CAClBC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,OAsEP,OA/DER,EAAA3hH,UAAAoiH,iBAAA,SAAiB/lG,GACf,OAAOA,EAASgmG,SAASpyE,UAO3B0xE,EAAA3hH,UAAAsiH,kBAAA,SAAkBjmG,GAChB,OAAOA,EAASgmG,SAASryE,WAQ3B2xE,EAAA3hH,UAAAuiH,oBAAA,SAAoBlmG,EAA0ByO,GAC5C,IAAM03F,EAAuB1iH,KAAK2iH,YAAYpmG,EAAUyO,GAExD,GAAI03F,EAAsB,CACxB,GAAIA,EAAqBE,SAA0C,IAAhCF,EAAqBE,OACtD,MAAO,SAGT,GAAIF,EAAqBG,YACvB,OAAOH,EAAqBG,YAAYC,gBAU9CjB,EAAA3hH,UAAA6iH,oBAAA,SAAoBxmG,EAA0ByO,GAC5C,IAAM03F,EAAuB1iH,KAAK2iH,YAAYpmG,EAAUyO,GAExD,GAAI03F,EAAsB,CACxB,GAAIA,EAAqBE,SAA0C,IAAhCF,EAAqBE,OACtD,MAAO,SAGT,GAAIF,EAAqBM,YACvB,OAAON,EAAqBM,YAAYF,gBAYpCjB,EAAA3hH,UAAAyiH,YAAV,SAAsBpmG,EAA0ByO,GAC9C,IAAMi4F,EAAUjjH,KAAK8hH,SAAS92F,EAAKk4F,UACnC,OAAO3mG,EAAS4mG,aAAaC,mBAAmB/oG,MAC9C,SAACgpG,GAA2B,OAAAA,EAAuBC,UAAYL,MA5ExDpB,EAAgB/gH,EAAA,CAD5ByU,EAAAA,cACYssG,oBCCX,SAAA0B,EAAwCptG,GAAAnW,KAAAmW,SAAAA,EA0C1C,OAlCSotG,EAAArjH,UAAAyK,KAAP,SAAY64G,EAAa1pG,EAAiByvF,GACxC,IAAM6F,EAASpvG,KAAKmW,SAASstG,cAAc,UAC3CrU,EAAOrlG,KAAO,kBAEZqlG,EAAOoU,IADL1pG,EACW0pG,EAAMxjH,KAAK0jH,YAAY5pG,GAEvB0pG,EAGfpU,EAAOuU,OAAQ,EACfvU,EAAO4G,OAAQ,EACXzM,GACF6F,EAAOwU,iBAAiB,OAAQra,GAGlCpzF,SAAS0tG,KAAKC,YAAY1U,IAOpBmU,EAAArjH,UAAAwjH,YAAR,SAAoB5pG,GAClB,IAAIpX,EAAS,GACPqhH,EAAYvkH,OAAOuN,KAAK+M,GAQ9B,OAPIiqG,EAAUpjH,OAAS,IACrB+B,EACE,IACAqhH,EACGjwG,KAAI,SAAC7S,GAAQ,OAAA4kB,UAAU5kB,GAAO,IAAM4kB,UAAU/L,EAAO7Y,OACrDunC,KAAK,MAEL9lC,qEAxCImU,EAAAA,OAAMC,KAAA,CAACC,EAAAA,eADTwsG,EAAoBziH,EAAA,CADhCyU,EAAAA,aAEc9T,EAAA,EAAAoV,EAAAA,OAAOE,EAAAA,YADTwsG,oBCOX,SAAAS,EACYt+G,EACAu+G,EACAC,GAFAlkH,KAAA0F,OAAAA,EACA1F,KAAAikH,qBAAAA,EACAjkH,KAAAkkH,iBAAAA,EANJlkH,KAAAmkH,UAA6B,KA4HvC,OA5GEH,EAAA9jH,UAAAkkH,UAAA,SACEC,EACAC,EACAC,GAHF,IAAAnzG,EAAApR,KAKyB,OAAnBA,KAAKmkH,UACPnkH,KAAKikH,qBAAqBt5G,KACxB3K,KAAK0F,OAAO8+G,WAAWC,OACvB,CAAExjH,IAAKjB,KAAK0F,OAAO8+G,WAAWE,SAC9B,WACEtzG,EAAKuzG,QAAQN,EAAYC,EAAWC,MAIxCvkH,KAAK2kH,QAAQN,EAAYC,EAAWC,IASxCP,EAAA9jH,UAAA0kH,UAAA,SAAUC,EAAkB30E,GAC1BlwC,KAAKmkH,UAAUW,MAAM,CAAEC,IAAKF,EAAUG,IAAK90E,IAC3ClwC,KAAKmkH,UAAUc,QAAQjlH,KAAK0F,OAAO8+G,WAAWU,sBAOxClB,EAAA9jH,UAAAilH,gBAAR,SAAwBb,GACtB,OAAO,IAAIc,OAAOC,KAAKC,OACrBtlH,KAAKkkH,iBAAiB5B,iBAAiBgC,EAAU,IACjDtkH,KAAKkkH,iBAAiB1B,kBAAkB8B,EAAU,MAS9CN,EAAA9jH,UAAAqlH,QAAR,SACElB,EACAmB,GAGA,IAEMC,EAAU,CACdC,OAAQF,EACRxM,KAAMh5G,KAAK0F,OAAO8+G,WAAWmB,MAC7BC,UAAWR,OAAOC,KAAKQ,UAAUC,QACjCC,gBAN4C,UAQ9C/lH,KAAKmkH,UAAY,IAAIiB,OAAOC,KAAKrvF,IAAIquF,EAAYoB,IAQ3CzB,EAAA9jH,UAAA8lH,cAAR,SACE1B,EACAC,GAFF,IAAAnzG,EAAApR,KAIEA,KAAKimH,QAAU,GACf3B,EAAUvgG,SAAQ,SAAC6+E,EAASloD,GAC1B,IAAMwrE,EAAS,IAAId,OAAOC,KAAKc,OAAO,CACpChjF,SAAU,IAAIiiF,OAAOC,KAAKC,OACxBl0G,EAAK8yG,iBAAiB5B,iBAAiB1f,GACvCxxF,EAAK8yG,iBAAiB1B,kBAAkB5f,IAE1Cz/F,MAAOu3C,EAAQ,EAAI,KAErBtpC,EAAK60G,QAAQjiH,KAAKkiH,GAClBA,EAAOE,OAAOh1G,EAAK+yG,WACnB+B,EAAOG,YAAY,aAAa,WAC9BH,EAAOI,aAAalB,OAAOC,KAAKkB,UAAUC,WAE5CN,EAAOG,YAAY,YAAY,WAC7BH,EAAOI,aAAa,SAElB/B,GACF2B,EAAOG,YAAY,SAAS,WAC1B9B,EAAoB7pE,UAYpBspE,EAAA9jH,UAAAykH,QAAR,SACEN,EACAC,EACAC,GAEAvkH,KAAKulH,QAAQlB,EAAYrkH,KAAKmlH,gBAAgBb,IAC9CtkH,KAAKgmH,cAAc1B,EAAWC,6CAtHZkC,UACclD,UACJ1B,MAPnBmC,EAAwBljH,EAAA,CADpCyU,EAAAA,cACYyuG,MCLA0C,GAA8C,CACzDlC,WAAY,CACVC,OAAQ,0CACRC,OAAQ,GACRiB,MAAO,EACPT,oBAAqB,cCDTh5F,KACd,MAAO,CACL2zF,WAAY7zG,GAAc8yG,IAC1BuB,cAAer0G,GAAc8yG,KAIjC,IAAazyF,GAER,IAAI/mB,EAAAA,eAA8C,uBAE1CgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,kBCTZ,SAAAy6F,EACUz8F,EACA08F,GAFV,IAAAx1G,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4mH,qBAAAA,EAIV5mH,KAAA6mH,YAEI7mH,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOy8F,IACPhzG,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtDof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKw1G,qBACFj/E,OACCh8B,EAAQ2oG,UACR3oG,EAAQi8B,aACRj8B,EAAQ2jC,mBAETz7B,KACCC,EAAAA,KAAI,SAACopB,GAWH,OAVIvxB,EAAQqhC,iBACV9P,EAAKgS,OAAShS,EAAKgS,OAAOp+B,QACxB,SAACwC,GACC,OAAAA,EAAM6oB,QAAQ0C,QAAQzd,UAAYzV,EAAQqhC,kBAE9C9P,EAAKgS,OAAO7N,MAAK,SAACnJ,EAAG34B,GACnB,OAAA24B,EAAEtO,KAAOrqB,EAAEqqB,MAAQ,EAAIsO,EAAEtO,KAAOrqB,EAAEqqB,KAAO,EAAI,MAI1C,IAAIm9F,GAAqC7pF,MAElDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIowG,GACFv9F,GAAsBnlB,aASpCtE,KAAAinH,eAGIjnH,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAO68F,IACPpzG,EAAAA,KAAI,SAAC3H,GAA6C,OAAAA,EAAOR,WACzDiK,EAAAA,WAAU,SAACjK,GACT,OAAAyF,EAAKw1G,qBAAqBh9G,IAAI+B,EAAQ8jC,SAAS57B,KAC7CC,EAAAA,KAAI,SAACopB,GAAS,OAAA,IAAIiqF,GAAwCjqF,MAC1Dzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIwwG,GACF39F,GAAsBnlB,aAOpC,gDA9DsBmmB,EAAAA,eACY2kB,MAIhCtuC,EAAA,CADC4pB,EAAAA,4CAuCD5pB,EAAA,CADC4pB,EAAAA,+CA5CUi8F,EAAgB7lH,EAAA,CAD5ByU,EAAAA,cACYoxG,oBCCX,SAAAU,EACUn9F,EACA08F,GAFV,IAAAx1G,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4mH,qBAAAA,EAIV5mH,KAAAsnH,eAGItnH,KAAKkqB,SAASrW,KAChBwW,EAAAA,OXjB2B,iCWkB3BzU,EAAAA,WAAU,WACR,OAAOxE,EAAKw1G,qBAAqBr3E,YAAY17B,KAC3CC,EAAAA,KAAI,SAACopB,GAEH,OADAA,EAAKmE,MAAK,SAACnJ,EAAG34B,GAAM,OAAC24B,EAAEtO,KAAOrqB,EAAEqqB,MAAQ,EAAIsO,EAAEtO,KAAOrqB,EAAEqqB,KAAO,EAAI,KAC3D,IAAI29F,GAAwCrqF,MAErDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI4wG,GACF/9F,GAAsBnlB,aAOpC,gDA1BsBmmB,EAAAA,eACY2kB,MAIhCtuC,EAAA,CADC4pB,EAAAA,+CANU28F,EAAmBvmH,EAAA,CAD/ByU,EAAAA,cACY8xG,MCNAr7F,GAAiB,CAAC26F,GAAkBU,kBCiBjD,SAAAI,KAAqC,OAAxBA,EAAsB3mH,EAAA,CATlCkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAymB,EAAAA,iBACAC,EAAAA,YAAYC,WfZoB,SeYaxB,IAC7CyB,EAAAA,cAAcD,WAAW7B,KAE3BplB,UAAW,CAAC0lB,OAEDm7F,oBCGb,SAAAC,KAAoC,OAAvBA,EAAqB5mH,EAAA,CAXjCkG,EAAAA,SAAS,CACRC,QAAS,CAACwgH,IACV7gH,UAAW,CACTT,EAAqBugH,IACrBlG,GACAqB,GACAmC,GACAT,GACA,CAAE39G,QAAS6gH,GAAmBthG,YAAa9f,OAGlCqiH,oBCdX,SAAAC,EAAsBt4E,GAAArvC,KAAAqvC,QAAAA,SAEtBs4E,EAAAznH,UAAA0J,IAAA,SAAI4J,GACF,OAAOxT,KAAKqvC,QAAQ1kC,KAAK6I,IAG3Bm0G,EAAAznH,UAAAs5B,OAAA,SAAOomD,EAAkBvsC,GACvB,OAAOrzC,KAAKqvC,QAAQ7V,OAAOomD,EAAUvsC,IAGvCs0E,EAAAznH,UAAAozC,SAAA,SAASD,GACP,OAAOrzC,KAAKqvC,QAAQiE,SAASD,IAG/Bs0E,EAAAznH,UAAAqzC,cAAA,SAAcC,EAAc//B,GAC1B,OAAOzT,KAAKqvC,QAAQkE,cAAcC,EAAM//B,IAG1Ck0G,EAAAznH,UAAAuzC,2BAAA,SAA2BC,GACzB,OAAO1zC,KAAKqvC,QAAQoE,2BAA2BC,IAGjDi0E,EAAAznH,UAAAyzC,cAAA,SAAc3gC,EAAe4gC,GAC3B,OAAO5zC,KAAKqvC,QAAQsE,cAAc3gC,EAAO4gC,IAG3C+zE,EAAAznH,UAAA2zC,YAAA,SACErgC,EACAsgC,EACAC,GAEA,OAAO/zC,KAAKqvC,QAAQwE,YAAYrgC,EAAQsgC,EAAiBC,IAG3D4zE,EAAAznH,UAAA8zC,eAAA,SACExgC,EACAygC,EACAL,GAEA,OAAO5zC,KAAKqvC,QAAQ2E,eAAexgC,EAAQygC,EAAaL,IAG1D+zE,EAAAznH,UAAA05B,OAAA,SAAOpmB,GACL,OAAOxT,KAAKqvC,QAAQzV,OAAOpmB,IAG7Bm0G,EAAAznH,UAAAk/E,UAAA,WACE,OAAOp/E,KAAKqvC,QAAQ6E,uDA/CS0D,uHADpB+vE,EAAa7mH,EAAA,CAHzByU,EAAAA,WAAW,CACVC,WAAY,UAEDmyG,oBCCX,SAAAC,EAAsBv4E,GAAArvC,KAAAqvC,QAAAA,SAEtBu4E,EAAA1nH,UAAA6wC,aAAA,SAAav9B,GACX,OAAOxT,KAAKqvC,QAAQ0B,aAAav9B,IAGnCo0G,EAAA1nH,UAAAozB,YAAA,SACE9f,EACAy9B,EACAC,GAEA,OAAOlxC,KAAKqvC,QAAQ/b,YAClB9f,EACAy9B,EACAC,IAIJ02E,EAAA1nH,UAAA0zB,gBAAA,SAAgBpgB,EAAgB29B,GAC9B,OAAOnxC,KAAKqvC,QAAQzb,gBAAgBpgB,EAAQ29B,6CAnBf2G,uHADpB8vE,EAAoB9mH,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDoyG,oBCCX,SAAAC,EAAsBx4E,GAAArvC,KAAAqvC,QAAAA,SAEtBw4E,EAAA3nH,UAAAiiB,OAAA,SAAO3O,GACL,OAAOxT,KAAKqvC,QAAQlV,QAAQ3mB,IAG9Bq0G,EAAA3nH,UAAAsJ,OAAA,SAAOgK,EAAgBo/B,GACrB,OAAO5yC,KAAKqvC,QAAQ7lC,OAAOgK,EAAQo/B,IAGrCi1E,EAAA3nH,UAAA4yC,WAAA,SAAWt/B,EAAgBo/B,GACzB,OAAO5yC,KAAKqvC,QAAQyD,WAAWt/B,EAAQo/B,6CAXVoF,uHADpB6vE,EAAoB/mH,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDqyG,oBCUX,SAAAC,EAAsBz4E,GAAArvC,KAAAqvC,QAAAA,SAEfy4E,EAAA5nH,UAAA0J,IAAP,SAAW4J,EAAgBm+B,GACzB,OAAO3xC,KAAKqvC,QAAQ1kC,KAAK6I,EAAQm+B,IAG5Bm2E,EAAA5nH,UAAA6nH,WAAP,SACEv0G,EACAyjB,EACAmK,EACAC,GAEA,OAAOrhC,KAAKqvC,QAAQwC,YAAYr+B,EAAQyjB,EAAUmK,EAAaC,IAG1DymF,EAAA5nH,UAAA4xC,uBAAP,SACEH,EACAI,EACAv+B,GAEA,OAAOxT,KAAKqvC,QAAQyC,uBAClBH,EACAI,EACAv+B,IAIGs0G,EAAA5nH,UAAA8xC,OAAP,SACEx+B,EACAm+B,EACAM,GAEA,OAAOjyC,KAAKqvC,QAAQ2C,OAAOx+B,EAAQm+B,EAAWM,IAGzC61E,EAAA5nH,UAAAuD,OAAP,SACE+P,EACA2+B,GAEA,OAAOnyC,KAAKqvC,QAAQ6C,oBAAoB1+B,EAAQ2+B,IAG3C21E,EAAA5nH,UAAA8nH,uBAAP,SACEx0G,EACA8+B,GAEA,OAAOtyC,KAAKqvC,QAAQgD,wBAAwB7+B,EAAQ8+B,IAG/Cw1E,EAAA5nH,UAAA+nH,qBAAP,SACEz0G,EACAyjB,EACAmK,EACAC,GAEA,OAAOrhC,KAAKqvC,QAAQ+C,sBAClB5+B,EACAyjB,EACAmK,EACAC,IAIGymF,EAAA5nH,UAAAqyC,oBAAP,SACE/+B,EACA8+B,EACAE,GAEA,OAAOxyC,KAAKqvC,QAAQkD,oBAClB/+B,EACA8+B,EACAE,6CAvE2ByF,uHADpB6vE,EAAkBhnH,EAAA,CAH9ByU,EAAAA,WAAW,CACVC,WAAY,UAEDsyG,oBCJX,SAAAI,EAAsB74E,GAAArvC,KAAAqvC,QAAAA,SAEtB64E,EAAAhoH,UAAA+1C,mBAAA,SACEziC,EACAyjB,EACAmK,EACAC,GAEA,OAAOrhC,KAAKqvC,QAAQ4G,mBAAmBziC,EAAQyjB,EAAUmK,EAAaC,IAGxE6mF,EAAAhoH,UAAAm2C,mBAAA,SACE7iC,EACA4iC,GAEA,OAAOp2C,KAAKqvC,QAAQgH,mBAAmB7iC,EAAQ4iC,IAGjD8xE,EAAAhoH,UAAAi2C,oBAAA,SAAoB3iC,EAAgB4iC,GAClC,OAAOp2C,KAAKqvC,QAAQ8G,oBAAoB3iC,EAAQ4iC,IAGlD8xE,EAAAhoH,UAAAo2C,oBAAA,SACE9iC,EACA4iC,GAEA,OAAOp2C,KAAKqvC,QAAQiH,oBAAoB9iC,EAAQ4iC,6CA1BnB8B,uHADpBgwE,EAAuBpnH,EAAA,CAHnCyU,EAAAA,WAAW,CACVC,WAAY,UAED0yG,oBCCX,SAAAC,EAAsB94E,GAAArvC,KAAAqvC,QAAAA,SACtB84E,EAAAjoH,UAAA62C,aAAA,SACEvjC,EACAyjB,EACAmK,EACAC,EACAlI,EACA6d,GAEA,OAAOh3C,KAAKqvC,QAAQ0H,aAClBvjC,EACAyjB,EACAmK,EACAC,EACAlI,EACA6d,IAIJmxE,EAAAjoH,UAAAg3C,eAAA,SACE1jC,EACA9O,GAEA,OAAO1E,KAAKqvC,QAAQ6H,eAAe1jC,EAAQ9O,IAG7CyjH,EAAAjoH,UAAAo3C,YAAA,SACE9jC,EACA2lB,EACA6d,GAEA,OAAOh3C,KAAKqvC,QAAQiI,YAAY9jC,EAAQ2lB,EAAa6d,6CA/BxBmB,uHADpBgwE,EAAsBrnH,EAAA,CAHlCyU,EAAAA,WAAW,CACVC,WAAY,UAED2yG,MCDbC,GAAA,WACE,SAAAA,EACY5lE,EACA4U,GADAp3D,KAAAwiD,yBAAAA,EACAxiD,KAAAo3D,mBAAAA,SAOZgxD,EAAAloH,UAAAgzB,WAAA,SAAWrD,GACT,OAAOu0B,EAAAA,MACLpkD,KAAKo3D,mBAAmBlkC,WAAWrD,GACnC7vB,KAAKwiD,yBAAyBtvB,WAAWrD,KAU7Cu4F,EAAAloH,UAAAmoH,8BAAA,SAA8Bl1F,GAA9B,IAAA/hB,EAAApR,KACE,OAAOA,KAAKkzB,WAAWC,GAAYtf,KACjCC,EAAAA,KAAI,SAAC6d,GACH,QAAKA,IAIEvgB,EAAKk3G,uBAAuB32F,GAC/BvgB,EAAKoxC,yBAAyB/uB,eAAe9B,GAC7CvgB,EAAKgmD,mBAAmB3jC,eAAe9B,OAE7Chb,EAAAA,yBAUJyxG,EAAAloH,UAAAqoH,kCAAA,SAAkCp1F,GAAlC,IAAA/hB,EAAApR,KACE,OAAOA,KAAKkzB,WAAWC,GAAYtf,KACjCC,EAAAA,KAAI,SAAC6d,GACH,OAAKA,IAIEvgB,EAAKk3G,uBAAuB32F,GAC/BvgB,EAAKoxC,yBAAyBzuB,mBAAmBpC,GACjDvgB,EAAKgmD,mBAAmBrjC,mBAAmBpC,OAEjDhb,EAAAA,yBAUJyxG,EAAAloH,UAAAuzB,eAAA,SAAe9B,GACb,OAAO3xB,KAAKsoH,uBAAuB32F,GAC/B3xB,KAAKwiD,yBAAyB/uB,eAAe9B,GAC7C3xB,KAAKo3D,mBAAmB3jC,eAAe9B,IAS7Cy2F,EAAAloH,UAAA6zB,mBAAA,SAAmBpC,GACjB,OAAO3xB,KAAKsoH,uBAAuB32F,GAC/B3xB,KAAKwiD,yBAAyBzuB,mBAAmBpC,GACjD3xB,KAAKo3D,mBAAmBrjC,mBAAmBpC,IAMjDy2F,EAAAloH,UAAAooH,uBAAA,SACE32F,GAEA,QAAKA,QAIiD5lB,IAA9C4lB,EAA6B9B,cAMvCu4F,EAAAloH,UAAAsoH,cAAA,SAAc72F,GACZ,QAAKA,QAIgC5lB,IAA7B4lB,EAAoB2H,+CAtGQ1H,UACNkjC,yIAHrBszD,EAActnH,EAAA,CAD1ByU,EAAAA,WAAW,CAAEC,WAAY,UACb4yG,GAAb,iBCIE,SAAAK,EACYn1G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZ+yG,EAAAvoH,UAAAwoH,cAAA,WAAA,IAAAt3G,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SAAS,IAAIo7E,GAA8Bt7E,QAQ1Di1G,EAAAvoH,UAAAyoH,eAAA,SAAexsF,GAAf,IAAA/qB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIk1G,GAA2B,CAC7Bp1G,OAAMA,EACN2oB,QAAOA,SAUfssF,EAAAvoH,UAAA2oH,oBAAA,SAAoBxsF,GAApB,IAAAjrB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIo1G,GAA8B,CAChCt1G,OAAMA,EACN6oB,UAASA,EACTF,QAAS,CAAE4sF,gBAAgB,UAWnCN,EAAAvoH,UAAA8oH,kBAAA,SAAkB3sF,EAAmBF,GAArC,IAAA/qB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIo1G,GAA8B,CAChCt1G,OAAMA,EACN6oB,UAASA,EACTF,QAAOA,SAUfssF,EAAAvoH,UAAA+oH,kBAAA,SAAkB5sF,GAAlB,IAAAjrB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIw1G,GAA8B,CAChC11G,OAAMA,EACN6oB,UAASA,SASjBosF,EAAAvoH,UAAAizD,aAAA,WACE,OAAOnzD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOg1G,MAMhCV,EAAAvoH,UAAAkzD,oBAAA,WACE,OAAOpzD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOi1G,MAGhCX,EAAAvoH,UAAAmzD,0BAAA,WACE,OAAOrzD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOk1G,MAKhCZ,EAAAvoH,UAAAopH,sBAAA,WACEtpH,KAAKsT,MAAMI,SAAS,IAAI61G,KAM1Bd,EAAAvoH,UAAAspH,qBAAA,WACE,OAAOxpH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOs1G,MAOhChB,EAAAvoH,UAAAwpH,WAAA,SAAWtoG,GACT,OAAOphB,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOw1G,GAAsCvoG,MAQjDqnG,EAAAvoH,UAAA6sC,YAAA,SAAYC,GACVhtC,KAAKsT,MAAMI,SAAS,IAAIk2G,GAAwB58E,KAMlDy7E,EAAAvoH,UAAA2pH,aAAA,WACE7pH,KAAKsT,MAAMI,SAAS,IAAIo2G,KAM1BrB,EAAAvoH,UAAAy4D,WAAA,SAAW3rB,GAAX,IAAA57B,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO41G,IACPj2G,EAAAA,KAAI,SAAC5O,OAAEioC,EAAAjoC,EAAAioC,QAAStO,EAAA35B,EAAA25B,QAAS/yB,EAAA5G,EAAA4G,QAAS4mD,EAAAxtD,EAAAwtD,OAChC,OAAK1lB,IAAmBlhC,IAAW4mD,EAGxB5mD,IAAY4mD,EAEd,IACG5mD,GAAWkhC,IAAmBnO,GAAWmO,GAE/CnO,GACFztB,EAAKy4G,eAEPz4G,EAAK27B,YAAYC,GACV,IAEFG,GAbL/7B,EAAKy4G,eACE,kDA7IIv0G,EAAAA,aACMjC,8IAHdo1G,EAAkB3nH,EAAA,CAH9ByU,EAAAA,WAAW,CACVC,WAAY,UAEDizG,oBCUX,SAAAuB,EACY12G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZs0G,EAAA9pH,UAAAqxD,gBAAA,WACE,OAAOvxD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO81G,MAQhCD,EAAA9pH,UAAAgqH,iBAAA,SAAiBv4E,GAAjB,IAAAvgC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIy2G,GAA6B,CAC/B32G,OAAMA,EACNm+B,UAASA,SASjBq4E,EAAA9pH,UAAAkqH,kBAAA,WACEpqH,KAAKsT,MAAMI,SAAS,IAAI22G,KAM1BL,EAAA9pH,UAAAoqH,oBAAA,SAAoBrzF,GAApB,IAAA7lB,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOo2G,IACPptG,EAAAA,KAAI,SAACqtG,GAEDA,EAAe1+G,SACf0+G,EAAe1/G,SACf0/G,EAAelmH,OAEf8M,EAAKq5G,cAAcxzF,MAGvBnjB,EAAAA,KAAI,SAAC02G,GAAmB,OAAAA,EAAenoH,WAO3C2nH,EAAA9pH,UAAAwqH,0BAAA,WACE,OAAO1qH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOw2G,MAShCX,EAAA9pH,UAAAuqH,cAAA,SAAcxzF,EAAkBmK,EAAsBC,GAAtD,IAAAjwB,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIk3G,GAA2B,CAC7Bp3G,OAAMA,EACNyjB,SAAQA,EACRmK,YAAWA,EACXC,KAAIA,SASZ2oF,EAAA9pH,UAAA2qH,eAAA,WACE7qH,KAAKsT,MAAMI,SAAS,IAAIo3G,KAM1Bd,EAAA9pH,UAAA4xC,uBAAA,WACE,OAAO9xC,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO42G,MAQhCf,EAAA9pH,UAAA8qH,wBAAA,SAAwBr5E,EAAmBI,GAA3C,IAAA3gC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIu3G,GAAoC,CACtCz3G,OAAMA,EACNm+B,UAASA,EACTI,gBAAeA,SASvBi4E,EAAA9pH,UAAAgrH,yBAAA,WACElrH,KAAKsT,MAAMI,SAAS,IAAIy3G,KAM1BnB,EAAA9pH,UAAAw1C,YAAA,SACE/D,EACAM,GAFF,IAAA7gC,EAAApR,KAIEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAI03G,GAAwB,CAC1B53G,OAAMA,EACNm+B,UAASA,EACTM,mBAAkBA,SAS1B+3E,EAAA9pH,UAAAmrH,sBAAA,WACE,OAAOrrH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,GzVzI0B,kByVgJrC+jE,EAAA9pH,UAAAorH,sBAAA,WACE,OAAOtrH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,GzVlJ0B,kByVyJrC8jE,EAAA9pH,UAAAqrH,6BAAA,WACE,OAAOvrH,KAAKsT,MAAMI,SAAS,IAAI83G,8CA7Jdl2G,EAAAA,aACMjC,8IAHd22G,EAAgBlpH,EAAA,CAH5ByU,EAAAA,WAAW,CACVC,WAAY,UAEDw0G,oBCEX,SAAAyB,EACYn4G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SASZ+1G,EAAAvrH,UAAAwrH,oBAAA,SACEz0F,EACAmK,EACAC,GAHF,IAAAjwB,EAAApR,KAKEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIi4G,GAAgC,CAClCn4G,OAAMA,EACNyjB,SAAUA,EACVmK,YAAaA,EACbC,KAAMA,SAUdoqF,EAAAvrH,UAAA+1C,mBAAA,SAAmBhf,GAAnB,IAAA7lB,EAAApR,KACE,OAAO00B,EAAAA,cAAc,CACnB10B,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOy3G,KACvB5rH,KAAK6rH,wCACJh4G,KACD/C,EAAAA,QAAO,SAAC5L,GAAgB,OAAhBd,EAAAc,EAAA,GAAG,MACXiY,EAAAA,KAAI,SAACjY,OAAC4mH,EAAD1nH,EAAAc,EAAA,GAAC,GAEF4mH,EAAqBhgH,SACrBggH,EAAqBhhH,SACrBghH,EAAqBxnH,OAErB8M,EAAKs6G,oBAAoBz0F,MAG7BnjB,EAAAA,KAAI,SAAC5O,GAA2B,OAA3Bd,EAAAc,EAAA,GAAC,GAA+C7C,WAOzDopH,EAAAvrH,UAAAk0D,yBAAA,WACE,OAAOp0D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO43G,MAMhCN,EAAAvrH,UAAAm0D,0BAAA,WACE,OAAOr0D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO63G,MAOhCP,EAAAvrH,UAAA+rH,wBAAA,SAAwB71E,GAAxB,IAAAhlC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIw4G,GAAoC,CACtC14G,OAAMA,EACN4iC,WAAYA,SASpBq1E,EAAAvrH,UAAAisH,wCAAA,WACE,OAAOnsH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G1VrEuC,8B0V4ElDwlE,EAAAvrH,UAAAksH,wCAAA,WACE,OAAOpsH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G1V9EuC,8B0VqFlDulE,EAAAvrH,UAAAmsH,sCAAA,WACE,OAAOrsH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,G1VvFuC,8B0V+FlDslE,EAAAvrH,UAAAosH,0BAAA,SAA0Bl2E,GAA1B,IAAAhlC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAI64G,GAAsC,CACxC/4G,OAAMA,EACN4iC,WAAYA,SASpBq1E,EAAAvrH,UAAAssH,0CAAA,WACE,OAAOxsH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G1V7GX,gC0VoHAwlE,EAAAvrH,UAAAusH,0CAAA,WACE,OAAOzsH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G1VtHX,gC0V6HAulE,EAAAvrH,UAAAwsH,wCAAA,WACE,OAAO1sH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,G1V/HX,gC0VuIAslE,EAAAvrH,UAAAo2C,oBAAA,SAAoBF,GAApB,IAAAhlC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIi5G,GAAgC,CAClCn5G,OAAMA,EACN4iC,WAAUA,SASlBq1E,EAAAvrH,UAAA0sH,oCAAA,WACE,OAAO5sH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G1VtJmC,0B0V6J9CulE,EAAAvrH,UAAA2rH,oCAAA,WACE,OAAO7rH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G1V/JmC,mE0VlB3B3wC,EAAAA,aACMjC,8IAHdo4G,EAAqB3qH,EAAA,CAHjCyU,EAAAA,WAAW,CACVC,WAAY,UAEDi2G,oBCTX,SAAAoB,EACYv5G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZm3G,EAAA3sH,UAAA4sH,mBAAA,WAAA,IAAA17G,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SAAS,IAAI48E,GAAmC98E,QAO/Dq5G,EAAA3sH,UAAAkyD,kBAAA,WACE,OAAOpyD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO44G,MAMhCF,EAAA3sH,UAAAmyD,yBAAA,WACE,OAAOryD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO64G,MAGhCH,EAAA3sH,UAAAoyD,+BAAA,WACE,OAAOtyD,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO84G,MAOXJ,EAAA3sH,UAAAgtH,0BAAA,SAA0BC,GAA1B,IAAA/7G,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAI05G,GAAwC,CAC1C55G,OAAMA,EACN25G,gBAAeA,SAWvBN,EAAA3sH,UAAAmtH,oBAAA,SAAoBF,GAApB,IAAA/7G,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAI45G,GAAoC,CACtC95G,OAAMA,EACN25G,gBAAeA,SASvBN,EAAA3sH,UAAA2wD,uBAAA,WACE,OAAO7wD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOo5G,MAMhCV,EAAA3sH,UAAAstH,qBAAA,WACExtH,KAAKsT,MAAMI,SAAS,IAAI+5G,8CA1EPn4G,EAAAA,aACMjC,8IAHdw5G,EAAkB/rH,EAAA,CAH9ByU,EAAAA,WAAW,CACVC,WAAY,UAEDq3G,oBCUX,SAAAa,EACYp6G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAQZg4G,EAAAxtH,UAAAytH,yBAAA,SACEx7E,GADF,IAAA/gC,EAAApR,KAGEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIk6G,GAAqC,CACvCp6G,OAAMA,EACN2+B,mBAAkBA,SAS1Bu7E,EAAAxtH,UAAAwxD,sBAAA,WACE,OAAO1xD,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO05G,MAMhCH,EAAAxtH,UAAA+xD,0BAAA,SAA0Bh7B,GAA1B,IAAA7lB,EAAApR,KACE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO25G,IACP3wG,EAAAA,KAAI,SAAC4wG,GAEDA,EAAgBjiH,SAChBiiH,EAAgBjjH,SAChBijH,EAAgBzpH,OAEhB8M,EAAK48G,2BAA2B/2F,MAGpCnjB,EAAAA,KAAI,SAACi6G,GAAoB,OAAAA,EAAgB1rH,WAQ7CqrH,EAAAxtH,UAAA+tH,6BAAA,SAA6B37E,GAA7B,IAAAlhC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIw6G,GAAmC,CACrC16G,OAAMA,EACN8+B,kBAAiBA,SAYzBo7E,EAAAxtH,UAAA8tH,2BAAA,SACE/2F,EACAmK,EACAC,GAHF,IAAAjwB,EAAApR,KAKEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIy6G,GAAuC,CACzC36G,OAAMA,EACNyjB,SAAQA,EACRmK,YAAWA,EACXC,KAAIA,SASZqsF,EAAAxtH,UAAAkuH,4BAAA,WACEpuH,KAAKsT,MAAMI,SAAS,IAAI26G,KAM1BX,EAAAxtH,UAAAouH,wBAAA,WACE,OAAOtuH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOo6G,MAMhCb,EAAAxtH,UAAAsuH,wBAAA,WACE,OAAOxuH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOs6G,MAMhCf,EAAAxtH,UAAAwuH,8BAAA,WACE1uH,KAAKsT,MAAMI,SAAS,IAAIi7G,KAM1BjB,EAAAxtH,UAAA0uH,yBAAA,SACEt8E,EACAE,GAFF,IAAAphC,EAAApR,KAIEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIm7G,GAAqC,CACvCr7G,OAAMA,EACN8+B,kBAAiBA,EACjBE,0BAAyBA,SASjCk7E,EAAAxtH,UAAA4uH,8BAAA,WACE,OAAO9uH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G5VrI2B,mB4V4ItCynE,EAAAxtH,UAAA6uH,8BAAA,WACE,OAAO/uH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G5V9I2B,mB4VqJtCwnE,EAAAxtH,UAAA8uH,qCAAA,WACE,OAAOhvH,KAAKsT,MAAMI,SAAS,IAAIu7G,8CA1Jd35G,EAAAA,aACMjC,8IAHdq6G,EAAyB5sH,EAAA,CAHrCyU,EAAAA,WAAW,CACVC,WAAY,UAEDk4G,oBCLX,SAAAwB,EACY57G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SAMZw5G,EAAAhvH,UAAAs0D,eAAA,WACE,OAAOx0D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOg7G,MAMhCD,EAAAhvH,UAAAu0D,sBAAA,WACE,OAAOz0D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOi7G,MAMhCF,EAAAhvH,UAAAmvH,gBAAA,WAAA,IAAAj+G,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SAAS,IAAI47G,GAAwC97G,QAOpE07G,EAAAhvH,UAAAqvH,iBAAA,WACEvvH,KAAKsT,MAAMI,SAAS,IAAI87G,KAM1BN,EAAAhvH,UAAAy0D,sBAAA,WACE,OAAO30D,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOs7G,MAOhCP,EAAAhvH,UAAAwvH,kBAAA,SAAkBh5E,GAAlB,IAAAtlC,EAAApR,KACEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIi8G,GAA0C,CAC5Cn8G,OAAMA,EACNkjC,YAAaA,SASrBw4E,EAAAhvH,UAAA0vH,kCAAA,WACE,OAAO5vH,KAAKsT,MAAMa,OAChB8xC,G7VvDJ,mC6V+DAipE,EAAAhvH,UAAA2vH,6BAAA,WACE7vH,KAAKsT,MAAMI,SAAS,IAAIo8G,8CAtEPx6G,EAAAA,aACMjC,8IAHd67G,EAAiCpuH,EAAA,CAH7CyU,EAAAA,WAAW,CACVC,WAAY,UAED05G,oBCWX,SAAAa,EACYz8G,EACAoC,GADA1V,KAAAsT,MAAAA,EACAtT,KAAA0V,YAAAA,SASZq6G,EAAA7vH,UAAA8vH,qBAAA,SACE/4F,EACAmK,EACAC,EACAlI,EACA6d,GALF,IAAA5lC,EAAApR,KAOEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIu8G,GAAiC,CACnCz8G,OAAMA,EACNyjB,SAAUA,EACVmK,YAAaA,EACbC,KAAMA,EACNlI,YAAaA,EACb6d,iBAAkBA,SAS1B+4E,EAAA7vH,UAAAu1C,oBAAA,WACE,OAAOz1C,KAAKsT,MAAMO,KAAKM,EAAAA,OAAO+7G,MAOhCH,EAAA7vH,UAAAiwH,2BAAA,SACEl5F,GADF,IAAA7lB,EAAApR,KAGE,OAAOA,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOi8G,IACPjzG,EAAAA,KAAI,SAACkzG,GAEDA,EAAkBvkH,SAClBukH,EAAkBvlH,SAClBulH,EAAkB/rH,OAElB8M,EAAK4+G,qBAAqB/4F,MAG9BnjB,EAAAA,KAAI,SAACu8G,GAAsB,OAAAA,EAAkBhuH,WAOjD0tH,EAAA7vH,UAAAowH,0BAAA,WACE,OAAOtwH,KAAKsT,MAAMO,KAAKM,EAAAA,OAAOo8G,MAQhCR,EAAA7vH,UAAAswH,qBAAA,SACE9rH,EACA+rH,GAFF,IAAAr/G,EAAApR,KAIEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIg9G,GAAkC,CACpCl9G,OAAMA,EACN9O,KAAMA,EACN+rH,aAAcA,SAStBV,EAAA7vH,UAAAywH,+BAAA,WACE,OAAO3wH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO8xC,G9V9FsC,6B8VqGjD8pE,EAAA7vH,UAAA0wH,+BAAA,WACE,OAAO5wH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G9VvGsC,6B8ViHjD6pE,EAAA7vH,UAAA2wH,mBAAA,SACE13F,EACA6d,GAFF,IAAA5lC,EAAApR,KAIEA,KAAK0V,YAAY3B,kBAAiB,SAACP,GACjCpC,EAAKkC,MAAMI,SACT,IAAIo9G,GAA+B,CACjCt9G,OAAMA,EACN2lB,YAAaA,EACb6d,iBAAkBA,SAS1B+4E,EAAA7vH,UAAA6wH,6BAAA,WACE,OAAO/wH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAO+xC,G9VtIkC,0B8V6I7C6pE,EAAA7vH,UAAA8wH,2BAAA,WACE,OAAOhxH,KAAKsT,MAAMO,KAChBM,EAAAA,OAAOgyC,G9V/IkC,0B8VsJ7C4pE,EAAA7vH,UAAA+wH,sBAAA,WACEjxH,KAAKsT,MAAMI,SAAS,IAAIw9G,KAM1BnB,EAAA7vH,UAAAixH,yBAAA,WACEnxH,KAAKsT,MAAMI,SAAS,IAAI09G,KAM1BrB,EAAA7vH,UAAAmxH,sBAAA,WACErxH,KAAKsT,MAAMI,SAAS,IAAI49G,8CAlKPh8G,EAAAA,aACMjC,8IAHd08G,EAAoBjvH,EAAA,CAHhCyU,EAAAA,WAAW,CACVC,WAAY,UAEDu6G,MCxBA9jG,GAAsC,CACjD1f,SAAU,IAGZ,SAAgBN,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAqlH,IAGQplH,EAAOpC,MACb,InWPF,wCmWQI,IACMwC,EADmBJ,EAAOR,QACEqB,QAChC,SAACwkH,EAA6C5nG,SAC5C,OAAAxpB,EAAAA,EAAA,GACKoxH,KAAetsH,EAAA,IACjB0kB,EAAKxI,SAAUwI,EAAI1kB,MAEvB9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,IpV/BiC,8BoVgC/B,OAAO0f,GAIX,OAAO/f,ECjCF,IAAM+f,GAAyC,GAEtD,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAulH,IAGQtlH,EAAOpC,MACb,InWJF,2CmWMI,MAAO,CACLinD,SAFoC7kD,EAAOR,SAK/C,InWTsC,oCmWUpC,OAAOsgB,GAGX,OAAO/f,ECjBF,IAAM+f,GAAuC,CAClD1f,SAAU,IAGZ,SAAgBN,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAwlH,IAGQvlH,EAAOpC,MACb,InWNF,yCmWOI,IACMwC,EADoBJ,EAAOR,QACEqB,QACjC,SAACwkH,EAAiD3yF,SAChD,OAAAz+B,EAAAA,EAAA,GACKoxH,KAAetsH,EAAA,IACjB25B,EAAQzd,SAAUyd,EAAO35B,MAE7B9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,ItVhCiC,8BsViC/B,OAAO0f,GAIX,OAAO/f,ECnCF,IAAM+f,GAAyC,GAEtD,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAylH,IAGQxlH,EAAOpC,MACb,InVOF,4CmVNI,OAAOkiB,GAGT,InVKF,+CmVJE,InVUF,iDmVTI,OAAO9f,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAI7C,OAAO/f,ECjBF,IAAM+f,GAAsB,GAEnC,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA0lH,IAGQzlH,EAAOpC,MACb,IlWMsC,oCkWJpC,OADqBoC,EAAOR,QAIhC,OAAOO,ECZF,IAAM+f,GAAiC,GAE9C,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA2lH,IAGQ1lH,EAAOpC,MACb,IlWFF,2CkWGI,OAAOoC,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAG3C,IlWRF,wCkWSI,OAAOA,GAGX,OAAO/f,ECdF,IAAM+f,GAA6B,CACxC1f,SAAU,GACVsyB,QAAS,MAGX,SAAgB5yB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA4lH,IAGQ3lH,EAAOpC,MACb,IlWRgC,8BkWS9B,IAAMwC,EAAqBJ,EAAOR,QAAQY,SACpCsyB,EAAkB1yB,EAAOR,QAAQkzB,QACvC,OAAItyB,GAAYsyB,EACdz+B,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,EACRsyB,QAAOA,IAGJ5S,GAIX,OAAO/f,ECxBT,SAAgBD,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAH0B,GAMlBC,EAAOpC,MACb,IlWNkC,gCkWOhC,OAAO,EAGX,OAAOmC,ECTF,IAAM+f,GAA4B,CACvC1f,SAAU,IAGZ,SAAgBN,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA6lH,IAGQ5lH,EAAOpC,MACb,IlWR+B,6BkWS7B,IACMwC,EADSJ,EAAOR,QACEqB,QACtB,SAACglH,EAA0CpoG,SACzC,OAAAxpB,EAAAA,EAAA,GACK4xH,KAAa9sH,EAAA,IACf0kB,EAAK0P,MAAO1P,EAAI1kB,MAEpB9E,EAAA,GAEI8L,EAAMK,WAIb,OAAAnM,EAAAA,EAAA,GACK8L,GAAK,CACRK,SAAQA,IAIZ,I5VhCiC,8B4ViC/B,OAAO0f,GAIX,OAAO/f,ECnCF,IAAM+f,GAA0B,GAEvC,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA+lH,IAGQ9lH,EAAOpC,MACb,IhWLoC,kCgWMlC,OAAOkiB,GAGT,IhWRuC,qCgWSrC,OAAO9f,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAG7C,OAAO/f,ECfF,IAAM+f,GAAkC,GAE/C,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAgmH,IAGQ/lH,EAAOpC,MACb,IhWGsC,oCgWFpC,IAAM0nB,EAAWtlB,EAAOR,QACxB,OAAO8lB,GAAsBxF,GAG/B,IhWIqC,mCgWHnC,IAAMkmG,EAAyBhmH,EAAOk/C,gBACtC,OAAOn/C,EAAM4H,KAAI,SAACu3C,GAChB,OAAAA,EAAgBrhD,KAAOmoH,EAAuBnoH,GAC1CmoH,EACA9mE,KAKV,OAAOn/C,ECtBF,IAAM+f,GAA2B,GAExC,SAAgBhgB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAkmH,IAGQjmH,EAAOpC,MACb,IhWFqC,mCgWGnC,OAAOoC,EAAOR,QAGhB,IhWFuC,qCgWGrC,IAAM0mH,EAAcjyH,EAAAA,EAAA,GACf8L,GACAC,EAAO+/C,aAEZ,OAAA9rD,EAAAA,EAAA,GACKiyH,GAAc,CACjBzoG,KAASyoG,EAAevzF,UAAS,IAAIuzF,EAAetzF,WAK1D,OAAO7yB,ECvBF,IAAM+f,GAAiC,CAC5C+nC,OAAQ,GACRpuB,WAAY,GACZ0sF,MAAO,IAGT,SAAgBrmH,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAqmH,IAGQpmH,EAAOpC,MACb,I/VRoC,kC+VSlC,OAAOoC,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAE3C,I/VZiC,+B+Va/B,OAAOA,GAIX,OAAO/f,EChBF,IAAM+f,GAA2C,CACtDumG,QAAS,GACTF,MAAO,GACP1sF,WAAY,IAEd,SAAgB35B,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAumH,IAGQtmH,EAAOpC,MACb,I9VYF,uC8VXI,OAAOoC,EAAOR,QAGhB,I9VgBF,wD8VfI,IAAM+mH,EAAwBvmH,EAAOR,QAAQosG,OACvC4a,EAAkB,IAAIhzH,MAAsBuM,EAAMsmH,QAAQ7xH,QAMhE,OALAuL,EAAMsmH,QAAQzuG,SAAQ,SAAC6uG,EAAgCl4E,GACrD,OAAAk4E,EAAeC,WAAaH,EAAsBG,SAC7CF,EAAgBj4E,GAASg4E,EACzBC,EAAgBj4E,GAASk4E,KAEhCxyH,EAAAA,EAAA,GAAY8L,GAAK,CAAEsmH,QAASG,IAG9B,I9VcF,0D8VbI,IAAMG,EAAoB3mH,EAAOR,QAC3BonH,EAAkB,IAAIpzH,MAAsBuM,EAAMsmH,QAAQ7xH,QAShE,OARAuL,EAAMsmH,QAAQzuG,SAAQ,SAAC6uG,EAAgCl4E,GACrD,OAAAk4E,EAAeC,WAAaC,EACvBC,EAAgBr4E,GAAMt6C,EAAAA,EAAA,GAClBwyH,GAAc,CACjBI,gBAAgB,IAEjBD,EAAgBr4E,GAASk4E,KAEhCxyH,EAAAA,EAAA,GAAY8L,GAAK,CAAEsmH,QAASO,IAGhC,OAAO7mH,EC1CF,IAAM+f,GAA4C,CACvDurB,QAAS,GACT5R,WAAY,GACZ0sF,MAAO,IAGT,SAAgBrmH,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA+mH,IAGQ9mH,EAAOpC,MACb,I7VY0C,iC6VXxC,OAAOoC,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAE3C,I7VQuC,8B6VPrC,OAAOA,GAGX,OAAO/f,EClBF,IAAM+f,GAAkC,CAC7CinG,eAAgB,GAChBttF,WAAY,GACZ0sF,MAAO,IAGT,SAAgBrmH,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAinH,IAGQhnH,EAAOpC,MACb,I7V8BF,qD6V7BI,OAAOoC,EAAOR,QAAUQ,EAAOR,QAAUsgB,GAI7C,OAAO/f,WCkCOggB,KACd,MAAO,CACL2nC,QAAS1nC,EAAAA,gBAAgB,CACvB1L,QAAS2yG,KAEXxiF,UAAW5kC,GACTo7C,GACAisE,IAEF9iE,iBAAkB+iE,GAClB7hG,SAAUzlB,GACRi7C,GACAssE,IAEF5gF,SAAU3mC,GACRk7C,GACAssE,IAEFx/D,OAAQhoD,GACNm7C,GACAssE,IAEFniE,MAAOtlD,GACLs7C,GACAosE,IAEFjiE,YAAazlD,G/W3C0B,iC+W4CvC8lD,gBAAiB9lD,GACfq7C,GACAssE,IAEF7mF,UAAW8mF,GACXx/E,OAAQy/E,GACR1mF,QAASnhC,GAA4Bu7C,GAASusE,IAC9CngF,cAAeogF,GACf5+E,oBAAqB6+E,GACrB5+E,gBAAiBppC,GACfw7C,GACAysE,IAEF1/D,wBAAyBvoD,G/WhDW,kC+WkDlCkoH,IAEF1+E,iBAAkBxpC,GAChBy7C,GACA0sE,KAKN,IAAa9nG,GAER,IAAI/mB,EAAAA,eAA4C,gBAExCgnB,GAA4B,CACvC1mB,QAASymB,GACTnmB,WAAYgmB,IAGd,SAAgBkoG,GACdnoH,GAEA,OAAO,SAAUC,EAAOC,GAKtB,OAJIA,EAAOpC,OAASyiB,KAClBtgB,OAAQH,GAGHE,EAAQC,EAAOC,IAI1B,IAAasgB,GAAmC,CAAC2nG,kBC7F/C,SAAAC,EACUnqG,EACAi0C,GAFV,IAAA/sD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EAtBVn+D,KAAAs0H,sBAEIt0H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OpXbkC,iCoXclCzU,EAAAA,WAAU,WACR,OAAOxE,EAAK+sD,cAAczF,aAAazrC,EAAAA,YAAYsnG,SAAS1gH,KAC1DC,EAAAA,KACE,SAACg5B,GAAc,OAAA,IAAI0nF,GAAwC1nF,MAE7DrvB,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI69G,GACFhrG,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACK8tC,MAtBzBz3D,EAAA,CADC4pB,EAAAA,sDADU2pG,EAAsBvzH,EAAA,CADlCyU,EAAAA,cACY8+G,oBCWX,SAAAK,EAAoBxqG,GAAAlqB,KAAAkqB,SAAAA,EAVpBlqB,KAAA20H,gBAAsC30H,KAAKkqB,SAASrW,KAClDwW,EAAAA,OACEu2C,GACA8T,IAEF5gE,EAAAA,KAAI,WACF,OAAO,IAAI8gH,OAKjB,gDADgCnqG,EAAAA,WAV9B3pB,EAAA,CADC4pB,EAAAA,gDADUgqG,EAAoB5zH,EAAA,CADhCyU,EAAAA,cACYm/G,oBC+BX,SAAAG,EACU3qG,EACA4qG,GAFV,IAAA1jH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA80H,mBAAAA,EA9BV90H,KAAA+0H,yBAEI/0H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXZqC,oCqXarCvW,EAAAA,KAAI,SAAC3H,GAAgD,OAAAA,EAAOR,WAC5DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAK0jH,mBACThjF,uBACCnmC,EAAQgmC,UACRhmC,EAAQomC,gBACRpmC,EAAQ6H,QAETK,KACCC,EAAAA,KACE,SAACk9C,GACC,OAAA,IAAIgkE,GAA2ChkE,MAEnDvzC,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIq+G,GACFxrG,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACUq9F,MA9B9BhnH,EAAA,CADC4pB,EAAAA,yDADUmqG,EAA0B/zH,EAAA,CADtCyU,EAAAA,cACYs/G,oBCsBX,SAAAK,EACUhrG,EACAi0C,GAFV,IAAA/sD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EAtBVn+D,KAAAm1H,uBAEIn1H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXZmC,kCqXanCzU,EAAAA,WAAU,WACR,OAAOxE,EAAK+sD,cAAczF,aAAazrC,EAAAA,YAAYmoG,UAAUvhH,KAC3DC,EAAAA,KACE,SAACg5B,GAAc,OAAA,IAAIuoF,GAAyCvoF,MAE9DrvB,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI0+G,GACF7rG,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACK8tC,MAtBzBz3D,EAAA,CADC4pB,EAAAA,uDADUwqG,EAAwBp0H,EAAA,CADpCyU,EAAAA,cACY2/G,oBCkCX,SAAAK,EACUrrG,EACAsrG,GAFV,IAAApkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1H,qBAAAA,EAjCVx1H,KAAAy1H,4BAIIz1H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXfF,wCqXgBEvW,EAAAA,KAAI,SAAC3H,GACH,OAAOA,EAAOR,WAEhB2rD,EAAAA,WAAU,SAAC5jB,GACT,OAAOtiC,EAAKokH,qBACT/hF,2BAA2BC,GAC3B7/B,KACC+B,EAAAA,WAAU,WAAM,MAAA,CACd,IAAI8/G,GACJ,IAAI5wD,GAAgC,CAClCF,KAAM,CAAE3jE,IAAK,4CACb8I,KAAM65D,EAAAA,kBAAkBqC,4BAG5BxoD,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI++G,GACFlsG,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACYk9F,MAjChC7mH,EAAA,CADC4pB,EAAAA,4DADU6qG,EAAqBz0H,EAAA,CADjCyU,EAAAA,cACYggH,oBC+CX,SAAAK,EACU1rG,EACA2rG,GAFV,IAAAzkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA61H,UAAAA,EAjDV71H,KAAA81H,iBAEI91H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWCF,wCsWAEvW,EAAAA,KAAI,SAAC3H,GAAoD,OAAAA,EAAOR,WAChEiK,EAAAA,WAAU,SAACjK,GACT,OAAAyF,EAAKykH,UAAU17F,QAAQxuB,GAASkI,KAC9BC,EAAAA,KACE,SAAC4iC,GACC,OAAA,IAAIq/E,GAA+Cr/E,MAEvDj5B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIo/G,GACFvsG,GAAsBnlB,aASlCtE,KAAAi2H,mBAEIj2H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWhBF,0CsWiBEvW,EAAAA,KAAI,SAAC3H,GAAsD,OAAAA,EAAOR,WAClEof,EAAAA,UAAS,SAACpf,GACR,OAAAyF,EAAKykH,UAAUr8F,OAAO7tB,EAAQ6H,OAAQ7H,EAAQ+qC,aAAa7iC,KACzDC,EAAAA,KACE,WACE,OAAA,IAAIoiH,GACFvqH,EAAQ+qC,gBAGdj5B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIu/G,GACF1sG,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACCgsB,MAjDrB31C,EAAA,CADC4pB,EAAAA,iDAwBD5pB,EAAA,CADC4pB,EAAAA,mDAxBUkrG,EAA6B90H,EAAA,CADzCyU,EAAAA,cACYqgH,oBCoCX,SAAAQ,EACUlsG,EACAmsG,GAFV,IAAAjlH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAq2H,eAAAA,EAnCVr2H,KAAAs2H,kBAEIt2H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXD8B,6BqXE9BvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrDiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eAAezsH,IAAI+B,EAAQ6H,OAAQ7H,EAAQgmC,WAAW99B,KAChEC,EAAAA,KAAI,SAACw9C,GACH,OAAO,IAAIilE,GAAoCjlE,MAEjD7zC,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI4/G,GAAiC/sG,GAAsBnlB,aAOtEtE,KAAAy2H,aAA2Dz2H,KAAKkqB,SAASrW,KACvEwW,EAAAA,OrXZwB,uBqXaxBvW,EAAAA,KAAI,SAAC3H,GAAoC,OAAAA,EAAOR,WAChDiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACTrkF,OAAOrmC,EAAQ6H,OAAQ7H,EAAQgmC,UAAWhmC,EAAQsmC,oBAClDp+B,KACCC,EAAAA,KAAI,WAAM,OAAA,IAAI4iH,MACdj5G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI+/G,GAA4BltG,GAAsBnlB,aAUrE,gDAHsBmmB,EAAAA,eACMq9F,MAnC1BhnH,EAAA,CADC4pB,EAAAA,kDAmBD5pB,EAAA,CADC4pB,EAAAA,6CAnBU0rG,EAAkBt1H,EAAA,CAD9ByU,EAAAA,cACY6gH,oBC6GX,SAAAQ,EACU1sG,EACAmsG,GAFV,IAAAjlH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAq2H,eAAAA,EA7GVr2H,KAAA62H,qBAEI72H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWKuC,sCsWJvCvW,EAAAA,KAAI,SAAC3H,GAAiD,OAAAA,EAAOR,WAC7DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACT5yH,OAAOkI,EAAQ6H,OAAQ7H,EAAQwmC,oBAC/Bt+B,KACCC,EAAAA,KACE,SAACgjH,GACC,OAAA,IAAIC,GAA4CD,MAEpDr5G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIogH,GACFvtG,GAAsBnlB,aASpCtE,KAAAi3H,mBAEIj3H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWbF,4CsWcEvW,EAAAA,KAAI,SAAC3H,GAA+C,OAAAA,EAAOR,WAC3DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACTrO,uBAAuBr8G,EAAQ6H,OAAQ7H,EAAQ2mC,mBAC/Cz+B,KACCC,EAAAA,KACE,SAACgjH,GACC,OAAA,IAAII,GAA0CJ,MAElDr5G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIugH,GACF1tG,GAAsBnlB,aASpCtE,KAAAo3H,qBAEIp3H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWhCuC,sCsWiCvCvW,EAAAA,KAAI,SAAC3H,GAAiD,OAAAA,EAAOR,WAC7DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACT9jF,oBACC5mC,EAAQ6H,OACR7H,EAAQ2mC,kBACR3mC,EAAQ6mC,2BAET3+B,KACCC,EAAAA,KAAI,WAAM,OAAA,IAAIujH,MACd55G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI0gH,GACF7tG,GAAsBnlB,aASpCtE,KAAAu3H,uBAEIv3H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtWnDF,8CsWoDEvW,EAAAA,KAAI,SAAC3H,GAAmD,OAAAA,EAAOR,WAC/DiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACTpO,qBACCt8G,EAAQ6H,OACR7H,EAAQsrB,SACRtrB,EAAQy1B,YACRz1B,EAAQ01B,MAETxtB,KACCC,EAAAA,KACE,SAAC0jH,GACC,OAAA,IAAIC,GACFD,MAGN/5G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI8gH,GACFjuG,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACMq9F,MA7G1BhnH,EAAA,CADC4pB,EAAAA,qDA0BD5pB,EAAA,CADC4pB,EAAAA,mDA0BD5pB,EAAA,CADC4pB,EAAAA,qDA2BD5pB,EAAA,CADC4pB,EAAAA,uDA7EUksG,EAAwB91H,EAAA,CADpCyU,EAAAA,cACYqhH,oBCmEX,SAAAe,EACUztG,EACA0tG,GAFV,IAAAxmH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA43H,2BAAAA,EAlEV53H,KAAA63H,wBAA8C73H,KAAKkqB,SAASrW,KAC1DwW,EAAAA,OtXVqC,oCsXWrCvW,EAAAA,KAAI,SAAC3H,GAA+C,OAAAA,EAAOR,WAC3Dof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKwmH,2BAA2Bz1G,OAAOxW,GAASkI,KACrDC,EAAAA,KAAI,SAAC6+B,GACH,OAAO,IAAImlF,GAA0CnlF,MAEvDl1B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAImhH,GACFtuG,GAAsBnlB,aASlCtE,KAAAg4H,6BAAmDh4H,KAAKkqB,SAASrW,KAC/DwW,EAAAA,OtXvBF,0CsXwBEvW,EAAAA,KAAI,SAAC3H,GAAoD,OAAAA,EAAOR,WAChEof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKwmH,2BACT9kF,WAAWnnC,EAAQ6H,OAAQ7H,EAAQwhH,iBACnCt5G,KACC+B,EAAAA,WAAU,SAACsnB,GAAS,MAAA,CAClB,IAAI+6F,GAA+C/6F,GACnD,IAAIozD,GAAmC3kF,EAAQ6H,YAEjDiK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIshH,GACFzuG,GAAsBnlB,aAQpCtE,KAAAm4H,yBAA+Cn4H,KAAKkqB,SAASrW,KAC3DwW,EAAAA,OtXvCsC,qCsXwCtCvW,EAAAA,KAAI,SAAC3H,GAAgD,OAAAA,EAAOR,WAC5Dof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKwmH,2BACTpuH,OAAOmC,EAAQ6H,OAAQ7H,EAAQwhH,iBAC/Bt5G,KACC+B,EAAAA,WAAU,SAACsnB,GAAS,MAAA,CAClB,IAAIk7F,GAA2Cl7F,GAC/C,IAAIozD,GAAmC3kF,EAAQ6H,YAEjDiK,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIyhH,GACF5uG,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACkBo9F,MAlEtC/mH,EAAA,CADC4pB,EAAAA,wDAqBD5pB,EAAA,CADC4pB,EAAAA,6DAuBD5pB,EAAA,CADC4pB,EAAAA,yDA3CUitG,EAAyB72H,EAAA,CADrCyU,EAAAA,cACYoiH,oBCgCX,SAAAW,EACUpuG,EACAi0C,GAFV,IAAA/sD,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAm+D,cAAAA,EA/BVn+D,KAAAu4H,aAAsDv4H,KAAKkqB,SAASrW,KAClEwW,EAAAA,OtXVwB,uBsXWxBvW,EAAAA,KAAI,SAAC3H,GACH,OAAOA,EAAOR,WAEhBiK,EAAAA,WAAU,SAAC4iH,GACT,OAAOpnH,EAAK+sD,cAAcxF,WAAW6/D,GAAa3kH,KAChDC,EAAAA,KACE,SAACq5B,GACC,OAAA,IAAIsrF,GAA+B,CACjClsH,SAAU4gC,EACVtO,QAAS25F,OAGf/6G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI8hH,GAA4BjvG,GAAsBnlB,aAOjEtE,KAAA24H,cAAoC34H,KAAKkqB,SAASrW,KAChDwW,EAAAA,O9WpCiC,8BROR,wBsX8BzBvW,EAAAA,KAAI,WACF,OAAO,IAAI4b,GAAqC63B,QAQtD,gDAHsB98B,EAAAA,eACK8tC,MA/BzBz3D,EAAA,CADC4pB,EAAAA,6CAuBD5pB,EAAA,CADC4pB,EAAAA,8CAvBU4tG,EAAcx3H,EAAA,CAD1ByU,EAAAA,cACY+iH,oBCuCX,SAAAM,EACU1uG,EACAsrG,GAFV,IAAApkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1H,qBAAAA,EAxCVx1H,KAAA64H,eAII74H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXhB0B,yBsXiB1BvW,EAAAA,KAAI,SAAC3H,GAAsC,OAAAA,EAAOR,WAClDiK,EAAAA,WAAU,SAAC1Q,OAAE8N,EAAA9N,EAAA8N,MAAOS,EAAAvO,EAAAuO,SAClB,OAAOrC,EAAKokH,qBAAqB7hF,cAAc3gC,EAAOS,GAAUI,KAC9D+B,EAAAA,WAAU,WAAM,MAAA,CACd,IAAIkjH,GACJ,IAAIh0D,GAAgC,CAClCF,KAAM,CAAE3jE,IAAK,0CACb8I,KAAM65D,EAAAA,kBAAkBqC,4BAG5BxoD,EAAAA,YAAW,SAACnZ,SACJuzD,EAEF,CAAC,IAAIkhE,GAA8BtvG,GAAsBnlB,KAa7D,OAZgB,QAAhBY,EAAIZ,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAY,OAAA,EAAAA,EAAE+Y,SAChB3Z,EAAMA,MAAM2Z,OAAO8F,SAAQ,SAAC+xD,GACtBA,EAAInsD,SACNkuC,EAAQ7zD,KACN,IAAI8gE,GAAgC,CAClCF,KAAM,CAAEG,IAAK+Q,EAAInsD,SACjB5f,KAAM65D,EAAAA,kBAAkB4B,qBAM3BsP,EAAAA,KAAKjd,WAUtB,gDAHsBptC,EAAAA,eACYk9F,MAxChC7mH,EAAA,CADC4pB,EAAAA,+CADUkuG,EAAoB93H,EAAA,CADhCyU,EAAAA,cACYqjH,oBCcX,SAAAI,EACU9uG,EACAsrG,GAFV,IAAApkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1H,qBAAAA,EAhBVx1H,KAAAi5H,YAAoDj5H,KAAKkqB,SAASrW,KAChEwW,EAAAA,OtXTuB,sBsXUvBzU,EAAAA,WAAU,WACR,OAAOxE,EAAKokH,qBAAqBp2C,YAAYvrE,KAC3CC,EAAAA,KAAI,SAACsgC,GACH,OAAO,IAAI8kF,GAA8B9kF,MAE3C32B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIuiH,GAA2B1vG,GAAsBnlB,aAUlE,gDAHsBmmB,EAAAA,eACYk9F,MAhBhC7mH,EAAA,CADC4pB,EAAAA,4CADUsuG,EAAal4H,EAAA,CADzByU,EAAAA,cACYyjH,oBCCX,SAAAI,EACUlvG,EACAsrG,GAFV,IAAApkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1H,qBAAAA,EAIVx1H,KAAAq5H,aAEIr5H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXfwB,uBsXgBxBvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAyF,EAAKokH,qBACF3hF,YAAYloC,EAAQk3B,IAAKl3B,EAAQ8H,SAAU9H,EAAQg+C,QACnD91C,KACCC,EAAAA,KAAI,WAAM,OAAA,IAAIwlH,GAAqC3tH,EAAQg+C,WAC3DlsC,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI2iH,GACF9vG,GAAsBnlB,aAOtC,gDAzBsBmmB,EAAAA,eACYk9F,MAIhC7mH,EAAA,CADC4pB,EAAAA,6CANU0uG,EAAkBt4H,EAAA,CAD9ByU,EAAAA,cACY6jH,oBCCX,SAAAI,EACUtvG,EACAsrG,GAFV,IAAApkH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAw1H,qBAAAA,EAIVx1H,KAAAy5H,gBAEIz5H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXf2B,0BsXgB3BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAyF,EAAKokH,qBACFxhF,eACCroC,EAAQ6H,OACR7H,EAAQsoC,YACRtoC,EAAQioC,aAET//B,KACCC,EAAAA,KAAI,WAAM,OAAA,IAAI4lH,MACdj8G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI+iH,GAA+BlwG,GAAsBnlB,aAKxE,gDAzBsBmmB,EAAAA,eACYk9F,MAIhC7mH,EAAA,CADC4pB,EAAAA,gDANU8uG,EAAqB14H,EAAA,CADjCyU,EAAAA,cACYikH,oBC4IX,SAAAI,EACU1vG,EACA0jE,EACAisC,EACApkD,GAJV,IAAArkE,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA4tF,qBAAAA,EACA5tF,KAAA65H,mBAAAA,EACA75H,KAAAy1E,eAAAA,EAxIVz1E,KAAA85H,mBAEI95H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXhB+B,8BsXiB/BvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKw8E,qBAAqBzrE,OAAOxW,GAASkI,KAC/CC,EAAAA,KAAI,SAAC88B,GACH,OAAO,IAAImpF,GAAqCnpF,MAElDnzB,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIojH,GAAkCvwG,GAAsBnlB,aAQtEtE,KAAAi6H,gBAEIj6H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXhC4B,2BsXiC5BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKw8E,qBACTpkE,IAAI7d,EAAQ6H,OAAQ7H,EAAQwwB,SAC5BtoB,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIg9F,GAAkCh9F,MAE/Czf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIujH,GAA+B1wG,GAAsBnlB,aAOtEtE,KAAAo6H,mBAEIp6H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXhD+B,8BsXiD/BvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKw8E,qBACTp0D,OAAO7tB,EAAQ6H,OAAQ7H,EAAQ0wB,UAAW1wB,EAAQwwB,SAClDtoB,KACCC,EAAAA,KAAI,SAACopB,GAEH,OACEvxB,EAAQwwB,SACgC,IAAxC38B,OAAOuN,KAAKpB,EAAQwwB,SAASx7B,QAC7BgL,EAAQwwB,QAAQ4sF,eAET,IAAIj6B,GAA8BnjF,EAAQ6H,QAE1C,IAAI6mH,GAAqCn9F,MAGpDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI0jH,GACF7wG,GAAsBnlB,aASpCtE,KAAAu6H,mBAEIv6H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtX7E+B,8BsX8E/BvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtDof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAKw8E,qBACTpkF,OAAOmC,EAAQ6H,OAAQ7H,EAAQ0wB,WAC/BxoB,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIs9F,GAAqCt9F,MAElDzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI6jH,GACFhxG,GAAsBnlB,aAYpCtE,KAAA06H,+BAAiC16H,KAAKkqB,SAASrW,KAC7CwW,EAAAA,OtX5GoC,mCsX6GpClN,EAAAA,KAAI,WACF/L,EAAKs3G,gBACLt3G,EAAKwkE,kBAAkB,yCAQ3B51E,KAAA26H,kCAAoC36H,KAAKkqB,SAASrW,KAChDwW,EAAAA,OtXpHuC,sCsXqHvClN,EAAAA,KAAI,WACF/L,EAAKs3G,gBACLt3G,EAAKwkE,kBAAkB,4CAQ3B51E,KAAA46H,kCAAoC56H,KAAKkqB,SAASrW,KAChDwW,EAAAA,OtX5HuC,sCsX6HvClN,EAAAA,KAAI,WACF/L,EAAKs3G,gBACLt3G,EAAKwkE,kBAAkB,4CAwB7B,OAVUgkD,EAAA15H,UAAA01E,kBAAR,SAA0BhR,GACxB5kE,KAAKy1E,eAAejsD,IAClB,CAAEvoB,IAAK2jE,GACPhB,EAAAA,kBAAkBqC,wBAId2zD,EAAA15H,UAAAwoH,cAAR,WACE1oH,KAAK65H,mBAAmBnR,0DAjBNj+F,EAAAA,eACYijE,UACF+6B,UACJ/jD,MAxI1B5jE,EAAA,CADC4pB,EAAAA,mDAqBD5pB,EAAA,CADC4pB,EAAAA,gDAqBD5pB,EAAA,CADC4pB,EAAAA,mDAkCD5pB,EAAA,CADC4pB,EAAAA,mDA4BD5pB,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,0DAapB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,6DAapB5S,EAAA,CADC4pB,EAAAA,OAAO,CAAEhX,UAAU,6DA7HTkmH,EAAoB94H,EAAA,CADhCyU,EAAAA,cACYqkH,oBCgFX,SAAAiB,EACU3wG,EACA4wG,GAFV,IAAA1pH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA86H,qBAAAA,EAnFV96H,KAAA+6H,eAEI/6H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOu2C,IACP9sD,EAAAA,KAAI,WAAM,OAAA,IAAI0hD,OAIhBx1D,KAAAg7H,aAA2Dh7H,KAAKkqB,SAASrW,KACvEwW,EAAAA,OtXX8B,6BsXY9BvW,EAAAA,KAAI,SAAC3H,GAAyC,OAAAA,EAAOR,WACrD2rD,EAAAA,WAAU,SAAC9jD,GACT,OAAApC,EAAK0pH,qBAAqB/pF,aAAav9B,GAAQK,KAC7CC,EAAAA,KAAI,SAAC2d,GAAa,OAAA,IAAIwpG,GAAoCxpG,MAC1DhU,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIskH,GAAiCzxG,GAAsBnlB,aAOtEtE,KAAAm7H,aAEIn7H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXtB6B,2BAKS,qCsXqBtCitC,EAAAA,WAAU,SAACnrD,GACT,OAAAiF,EAAK0pH,qBACFxnG,YACCnnB,EAAOR,QAAQ6H,OACfrH,EAAOR,QAAQslC,kBACf9kC,EAAOR,QAAQulC,wBAEhBr9B,KACCC,EAAAA,KAAI,SAAC6d,GAAY,OAAA,IAAIypG,GAAmCzpG,MACxDlU,EAAAA,YAAW,SAACnZ,GACV,IAAM2Z,EAGF,CACF,IAAIo9G,GAAgC5xG,GAAsBnlB,KAY5D,MtX/C8B,sCsXsC5B6H,EAAOpC,MACU,MAAjBzF,EAAMsZ,QAENK,EAAOja,KACL,IAAIihE,GACFrB,EAAAA,kBAAkB4B,iBAIjB5uD,EAAAA,GAAE/V,WAAA,EAAA0D,EAAI0Z,YAOvBje,KAAAs7H,iBAEIt7H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXvDiC,gCsXwDjCvW,EAAAA,KAAI,SAAC3H,GAA4C,OAAAA,EAAOR,WACxD2rD,EAAAA,WAAU,SAACpyD,OAAEsO,EAAAtO,EAAAsO,OAAQ29B,EAAAjsC,EAAAisC,YACnB,OAAA//B,EAAK0pH,qBAAqBlnG,gBAAgBpgB,EAAQ29B,GAAat9B,KAC7DC,EAAAA,KAAI,WAAM,OAAA,IAAIynH,MACd99G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI4kH,GACF/xG,GAAsBnlB,aAYpC,gDAHsBmmB,EAAAA,eACYm9F,MAnFhC9mH,EAAA,CADC4pB,EAAAA,+CASD5pB,EAAA,CADC4pB,EAAAA,6CAeD5pB,EAAA,CADC4pB,EAAAA,6CAyCD5pB,EAAA,CADC4pB,EAAAA,iDA/DUmwG,EAAkB/5H,EAAA,CAD9ByU,EAAAA,cACYslH,oBCqCX,SAAAY,EACUvxG,EACAwxG,GAFV,IAAAtqH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA07H,cAAAA,EAvCV17H,KAAA27H,iBAEI37H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXT6B,4BsXU7BvW,EAAAA,KAAI,SAAC3H,GAAwC,OAAAA,EAAOR,WACpDof,EAAAA,UAAS,SAACvX,GACR,OAAOpC,EAAKsqH,cAAc9xH,IAAI4J,GAAQK,KACpCC,EAAAA,KAAI,SAACu/B,GACH,OAAO,IAAIuoF,GAAmCvoF,MAEhD51B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIilH,GAAgCpyG,GAAsBnlB,aAOrEtE,KAAA87H,mBAEI97H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OtXvB+B,8BsXwB/BvW,EAAAA,KAAI,SAAC3H,GAA0C,OAAAA,EAAOR,WACtD2rD,EAAAA,WAAU,SAAC3rD,GACT,OAAAyF,EAAKsqH,cAAcliG,OAAO7tB,EAAQi0E,SAAUj0E,EAAQ+zE,aAAa7rE,KAC/DC,EAAAA,KACE,WAAM,OAAA,IAAIioH,GAAqCpwH,EAAQ+zE,gBAEzDjiE,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIolH,GAAkCvyG,GAAsBnlB,aAWxE,gDAHsBmmB,EAAAA,eACKk9F,MAvCzB7mH,EAAA,CADC4pB,EAAAA,iDAmBD5pB,EAAA,CADC4pB,EAAAA,mDAnBU+wG,EAAkB36H,EAAA,CAD9ByU,EAAAA,cACYkmH,oBCEX,SAAAQ,EACU/xG,EACAmsG,GAFV,IAAAjlH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAq2H,eAAAA,EAIVr2H,KAAAk8H,gBAEIl8H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXjB4B,2BqXkB5BvW,EAAAA,KAAI,SAAC3H,GAAuC,OAAAA,EAAOR,WACnDiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAKilH,eACTtO,WACCp8G,EAAQ6H,OACR7H,EAAQsrB,SACRtrB,EAAQy1B,YACRz1B,EAAQ01B,MAETxtB,KACCC,EAAAA,KAAI,SAACkgD,GACH,OAAO,IAAImoE,GAAkCnoE,MAE/Cv2C,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIwlH,GAA+B3yG,GAAsBnlB,aAOtEtE,KAAAq8H,iBAEIr8H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OAAOu2C,IACP9sD,EAAAA,KAAI,WACF,OAAO,IAAIg3G,OAGjB,gDAtCsBrgG,EAAAA,eACMq9F,MAI1BhnH,EAAA,CADC4pB,EAAAA,gDA0BD5pB,EAAA,CADC4pB,EAAAA,iDA/BUuxG,EAAgBn7H,EAAA,CAD5ByU,EAAAA,cACY0mH,oBC0DX,SAAAK,EACUpyG,EACAwxG,GAFV,IAAAtqH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA07H,cAAAA,EA1DV17H,KAAAu8H,cAEIv8H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXPyB,wBqXQzBvW,EAAAA,KAAI,SAAC3H,GAAqC,OAAAA,EAAOR,WACjDof,EAAAA,UAAS,SAACsoB,GACR,OAAAjiC,EAAKsqH,cAAcpoF,SAASD,GAAMx/B,KAChCC,EAAAA,KAAI,WAAM,OAAA,IAAI0oH,MACd/+G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAI6lH,GAA6BhzG,GAAsBnlB,aAOlEtE,KAAA08H,eAEI18H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXlB0B,yBqXmB1BvW,EAAAA,KAAI,SAAC3H,GAAsC,OAAAA,EAAOR,WAClDof,EAAAA,UAAS,SAAC7lB,OAAEsuC,EAAAtuC,EAAAsuC,KAAM//B,EAAAvO,EAAAuO,SAChB,OAAArC,EAAKsqH,cAAcnoF,cAAcC,EAAM//B,GAAUI,KAC/C+B,EAAAA,WAAU,SAACy9B,GAAS,MAAA,CAClB,IAAI1/B,GAA0B,CAC5BH,OAAQ6/B,EAAKxQ,IACbpvB,SAAUA,IAEZ,IAAIkpH,OAENl/G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAIgmH,GAA8BnzG,GAAsBnlB,aAOnEtE,KAAA68H,YAEI78H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXpCuB,sBqXqCvBvW,EAAAA,KAAI,SAAC3H,GAAmC,OAAAA,EAAOR,WAC/Cof,EAAAA,UAAS,SAACvX,GACR,OAAOpC,EAAKsqH,cAAc9hG,OAAOpmB,GAAQK,KACvC+B,EAAAA,WAAU,WAAM,MAAA,CACd,IAAIknH,GACJ,IAAIloH,OAEN6I,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GAAG,IAAImmH,GAA2BtzG,GAAsBnlB,aAUlE,gDAHsBmmB,EAAAA,eACKk9F,MA1DzB7mH,EAAA,CADC4pB,EAAAA,8CAiBD5pB,EAAA,CADC4pB,EAAAA,+CAuBD5pB,EAAA,CADC4pB,EAAAA,4CAvCU4xG,EAAmBx7H,EAAA,CAD/ByU,EAAAA,cACY+mH,oBCuHX,SAAAU,EACU9yG,EACA+yG,GAFV,IAAA7rH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAAi9H,wBAAAA,EAxHVj9H,KAAAk9H,qBAEIl9H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXUiC,gCqXTjCvW,EAAAA,KACE,SAAC3H,GAA0D,OAAAA,EAAOR,WAEpEof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK6rH,wBACThnF,mBACCtqC,EAAQ6H,OACR7H,EAAQsrB,SACRtrB,EAAQy1B,YACRz1B,EAAQ01B,MAETxtB,KACCC,EAAAA,KAAI,SAAC0+G,GACH,OAAO,IAAI2K,GACT3K,MAGJ/0G,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIwmH,GACF3zG,GAAsBnlB,aASpCtE,KAAAq9H,yBAEIr9H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXhBF,iDqXiBEvW,EAAAA,KACE,SAAC3H,GACC,OAAAA,EAAOR,WAEXof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK6rH,wBACT5mF,mBAAmB1qC,EAAQ6H,OAAQ7H,EAAQyqC,YAC3CviC,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAIogG,GACTpgG,MAGJzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI2mH,GACF9zG,GAAsBnlB,aASpCtE,KAAAw9H,2BAEIx9H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXpCF,mDqXqCEvW,EAAAA,KACE,SAAC3H,GACC,OAAAA,EAAOR,WAEXof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK6rH,wBACT9mF,oBAAoBxqC,EAAQ6H,OAAQ7H,EAAQyqC,YAC5CviC,KACCC,EAAAA,KAAI,WACF,OAAO,IAAI2pH,GACT9xH,EAAQyqC,eAGZ34B,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI8mH,GACFj0G,GAAsBnlB,aASpCtE,KAAA29H,qBAEI39H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OrXzDiC,yBqX0DjCvW,EAAAA,KACE,SAAC3H,GAA0D,OAAAA,EAAOR,WAEpEof,EAAAA,UAAS,SAACpf,GACR,OAAOyF,EAAK6rH,wBACT3mF,oBAAoB3qC,EAAQ6H,OAAQ7H,EAAQyqC,YAC5CviC,KACCC,EAAAA,KAAI,SAACopB,GACH,OAAO,IAAI0gG,GACT1gG,MAGJzf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIinH,GACFp0G,GAAsBnlB,aAYtC,gDAHsBmmB,EAAAA,eACey9F,MAxHnCpnH,EAAA,CADC4pB,EAAAA,qDAkCD5pB,EAAA,CADC4pB,EAAAA,yDA8BD5pB,EAAA,CADC4pB,EAAAA,2DA8BD5pB,EAAA,CADC4pB,EAAAA,qDA5FUsyG,EAAqBl8H,EAAA,CADjCyU,EAAAA,cACYynH,oBCGX,SAAAc,EACU5zG,EACA6zG,GAFV,IAAA3sH,EAAApR,KACUA,KAAAkqB,SAAAA,EACAlqB,KAAA+9H,uBAAAA,EAIV/9H,KAAAg+H,oBAEIh+H,KAAKkqB,SAASrW,KAChBwW,EAAAA,OpXEkC,0BoXDlCvW,EAAAA,KAAI,SAAC3H,GAA6C,OAAAA,EAAOR,WACzDiK,EAAAA,WAAU,SAACjK,GACT,OAAOyF,EAAK2sH,uBACThnF,aACCprC,EAAQ6H,OACR7H,EAAQsrB,SACRtrB,EAAQy1B,YACRz1B,EAAQ01B,KACR11B,EAAQwtB,YACRxtB,EAAQqrC,kBAETnjC,KACCC,EAAAA,KAAI,SAACmqH,GACH,OAAO,IAAIC,GAAwCD,MAErDxgH,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAIunH,GACF10G,GAAsBnlB,aASpCtE,KAAAo+H,uBAA6Cp+H,KAAKkqB,SAASrW,KACzDwW,EAAAA,OpXvBmC,2BoXwBnCvW,EAAAA,KAAI,SAAC3H,GAA8C,OAAAA,EAAOR,WAC1DiK,EAAAA,WAAU,SAACjK,GACT,OAAAyF,EAAK2sH,uBACF7mF,eAAevrC,EAAQ6H,OAAQ7H,EAAQjH,MACvCmP,KACC+B,EAAAA,WAAU,SAACsnB,GAAS,MAAA,CAClB,IAAI+yF,GACFtkH,EAAQ8kH,aACJ,CACEj9G,OAAQ7H,EAAQ6H,OAChB2lB,YAAaxtB,EAAQjH,KAAKgzB,QAAQ4B,KAClC0d,iBACErrC,EAAQjH,KAAKyyC,qBAAqB,GAAGC,cAEzC,CAAE5jC,OAAQ7H,EAAQ6H,SAExB,IAAI6qH,GAAyCnhG,OAE/Czf,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI0nH,GACF70G,GAAsBnlB,aASpCtE,KAAAu+H,oBAA0Cv+H,KAAKkqB,SAASrW,KACtDwW,EAAAA,OpXlDgC,wBoXmDhCvW,EAAAA,KAAI,SAAC3H,GAA2C,OAAAA,EAAOR,WACvDiK,EAAAA,WAAU,SAACjK,GACT,OAAAyF,EAAK2sH,uBACFzmF,YACC3rC,EAAQ6H,OACR7H,EAAQwtB,YACRxtB,EAAQqrC,kBAETnjC,KACC+B,EAAAA,WAAU,SAACg9F,GAAa,MAAA,CACtB,IAAIqd,GAAiC,CACnCz8G,OAAQ7H,EAAQ6H,OAChB2lB,YAAaxtB,EAAQwtB,YACrB6d,iBAAkBrrC,EAAQqrC,mBAE5B,IAAIwnF,GAAsC5rB,OAE5Cn1F,EAAAA,YAAW,SAACnZ,GACV,OAAAsS,EAAAA,GACE,IAAI6nH,GACFh1G,GAAsBnlB,aAOtC,gDAjGsBmmB,EAAAA,eACc09F,MAIlCrnH,EAAA,CADC4pB,EAAAA,oDAgCD5pB,EAAA,CADC4pB,EAAAA,uDAiCD5pB,EAAA,CADC4pB,EAAAA,oDArEUozG,EAAsBh9H,EAAA,CADlCyU,EAAAA,cACYuoH,MCUA9xG,GAAiB,CAC5B0oG,GACAQ,GACAoD,GACAU,GACAyC,GACA7B,GACAjC,GACA2E,GACAL,GACA7F,GACA/B,GACAuE,GACArD,GACA6D,GACAI,GACAqB,GACAhG,GACAmI,GACApH,GACAkI,GACAlH,kBCtBF,SAAA8H,KAA8B,OAAjBA,EAAe59H,EAAA,CAV3BkG,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA8hB,GACA4E,EAAAA,YAAYC,WtYCY,OsYDaxB,GAAc,CAAEI,aAAYkyG,KACjE7wG,EAAAA,cAAcD,WAAW7B,IACzB4yG,EAAAA,cAEFh4H,UAAW,CAAC0lB,OAEDoyG,oBCfb,SAAAG,WAMA,SANaA,EACJA,EAAA/3H,QAAP,WACE,MAAO,CACLJ,SAAUo4H,IAHHD,EAAUC,EAAAh+H,EAAA,CAHtBkG,EAAAA,SAAS,CACRC,QAAS,CAACy3H,OAECG,2HvYoBkC,+CqHfT,wEpQRU,mCiNCrB,qBpRDC,4iBiCDQ,wGiL0BG,yCACC,sKsIxBR,8CtIuCgB,0ClNxCf,uEuWEN,gCrS8BY,sOjCnCJ,+HmPIC,2gDzOHK,qDACE,qfuKmBJ,uCkFpBD,8ZlOiCQ,8D6YhClB,oI9aHO,kH4JOS,+DAE1C,yE0INgC,+JgCIM,qDrJsCA,oIrBxCE,2DACO,mDtLFd,kCAHE,kCADF,8BAEF,wzC+TCD,iLzHDD,kCkSMM,4CADN,umC7RaS,qDAOW,kDANb,+BjMjBP,2NuUIgB,oDACH,mDAGE,6DAD5C,kD5TVkC,wFsfEA,yFhUsCgB,4/BpOrCb,6JoOuCrC,sDA1BqC,2DAQrC,6DAPwC,kDACI,0EAHlB,uJAoBe,0IpOjCK,qrBoOoBL,8wBwYN3C,SACE50H,GAEA,OAAO6G,EAAAA,QACL,SAAC3E,GACC,OAAAA,EAAO5B,MACP4B,EAAO5B,KAAKG,QACZyB,EAAO5B,KAAKN,aAAeA,GAC3BkC,EAAO5B,KAAKG,OAAOpG,kCAnBvB2F,GAEA,OAAO6G,EAAAA,QACL,SAAC3E,GACC,OAAAA,EAAO5B,MACP4B,EAAO5B,KAAKG,QACZyB,EAAO5B,KAAKN,aAAeA,GAC3BkC,EAAO5B,KAAKG,OAAOC,2BAgBzB,SACEV,GAEA,OAAO6G,EAAAA,QACL,SAAC3E,GACC,OAAAA,EAAO5B,MACP4B,EAAO5B,KAAKG,QACZyB,EAAO5B,KAAKN,aAAeA,IAC1BkC,EAAO5B,KAAKG,OAAOC,OACnBwB,EAAO5B,KAAKG,OAAOpG,6G7ZR1B,WACE,MAAO,CACLyB,EAAqBm2C,GAAmC,CAAC6iF,EAAAA,OACzDh5H,EAAqBq2C,GAAqC,CAAC2iF,EAAAA,iI8ZjCtC","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\n\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig =\n      this.config && this.config.routing && this.config.routing.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  private readonly SCOPE_SUFFIX = '_scopes';\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope = ''\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope: string): string {\n    const endpointsConfig =\n      this.config.backend &&\n      this.config.backend.occ &&\n      this.config.backend.occ.endpoints;\n\n    if (scope) {\n      const endpointConfig = endpointsConfig[`${endpoint}${this.SCOPE_SUFFIX}`];\n      if (endpointConfig && endpointConfig[scope]) {\n        return endpointConfig[scope];\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return endpointsConfig[endpoint] || endpoint;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { StateConfig } from './config/state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n        { provide: StateConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        ...AuthServices,\n        { provide: AuthConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { LoaderState } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product:\n          'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n        product_scopes: {\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(\n      this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER)\n    );\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String('10000000');\n    } else {\n      params['query'] = query;\n    }\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/occ/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { OccConfig } from './config/occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        { provide: OccConfig, useExisting: Config },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (event instanceof HttpResponse) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { share, switchMap, tap } from 'rxjs/operators';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * Observable with array of sources of the event\n   */\n  sources$: BehaviorSubject<Observable<T>[]>;\n\n  /**\n   * Output observable with merged all event sources\n   */\n  output$: Observable<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const event = this.getEventMeta(eventType);\n    const sources: Observable<T>[] = event.sources$.value;\n    if (sources.includes(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      event.sources$.next([...sources, source$]);\n    }\n\n    return () => this.unregister(eventType, source$);\n  }\n\n  /**\n   * Unregisters an event source for the given event type\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   */\n  private unregister<T>(eventType: Type<T>, source$: Observable<T>): void {\n    const event = this.getEventMeta(eventType);\n    const newSources: Observable<T>[] = event.sources$.value.filter(\n      (s$) => s$ !== source$\n    );\n    event.sources$.next(newSources);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    return this.getEventMeta(eventType).output$;\n  }\n\n  /**\n   * Dispatches a single event.\n   *\n   * However, it's recommended to use method `register` instead, whenever the event can come from some stream.\n   *  It allows for lazy computations in the event source stream -\n   *  if no one subscribes to the event, the logic of the event source stream won't be evaluated.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    const sources$ = new BehaviorSubject<Observable<T>[]>([]);\n    let output$ = sources$.pipe(\n      switchMap((sources: Observable<T>[]) => merge(...sources)),\n      share() // share the result observable to avoid merging sources for each subscriber\n    );\n\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      sources$,\n      output$,\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateEntityLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateEntityLoaderSelectors.entityStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { LoaderState } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  consents: LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: LoaderState<Order>;\n  orderReturn: LoaderState<ReturnRequest>;\n  orderReturnList: LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: LoaderState<NotificationPreference[]>;\n  productInterests: LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateLoaderSelectors.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateLoaderSelectors.loaderSuccessSelector(state),\n    loading: StateLoaderSelectors.loaderLoadingSelector(state),\n    regions: StateLoaderSelectors.loaderValueSelector(state).entities,\n    country: StateLoaderSelectors.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(() =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      baseSiteService.initialize();\n      langService.initialize();\n      currService.initialize();\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.router.url);\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init();\n    });\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler, ConfigInitializerService],\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        { provide: SiteContextConfig, useExisting: Config },\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AnonymousConsentsConfig } from './config/anonymous-consents-config';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        { provide: AnonymousConsentsConfig, useExisting: Config },\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateLoaderActions.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  abstract responseStatus: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.subjectType === 'cart' && e.reason === 'notFound')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpResponseStatus } from '../models/response-status.model';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {\n    // We reverse the handlers to allow for custom handlers\n    // that replace standard handlers\n    this.handlers.reverse();\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    const status = response.status;\n    let handler = this.handlers.find((h) => h.responseStatus === status);\n    if (!handler) {\n      handler = this.handlers.find(\n        (h) => h.responseStatus === HttpResponseStatus.UNKNOWN\n      );\n    }\n    return handler;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { GlobalMessageConfig } from './config/global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),\n    GlobalMessageService,\n    { provide: GlobalMessageConfig, useExisting: Config },\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmConfig } from './config/asm-config';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [\n        { provide: AsmConfig, useExisting: Config },\n        ...interceptors,\n        provideDefaultConfig(defaultAsmConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi) {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart lifecycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) => {\n            if (error?.error?.errors) {\n              error.error.errors.forEach((err) => {\n                if (err.message) {\n                  this.messageService.add(\n                    err.message,\n                    GlobalMessageType.MSG_TYPE_ERROR\n                  );\n                }\n              });\n            }\n            return from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ]);\n          })\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) => err.reason === 'notFound' || 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend.\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable()\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\nimport { UserService } from '../../user/facade/user.service';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport { Cart } from '../../model/cart.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { map, filter, tap, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { OrderEntry } from '../../model/order.model';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\n\n@Injectable()\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsComponent } from '../../model';\nimport { EntityState, LoaderState } from '../../state/index';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: EntityLoaderState<string>;\n  product: EntityLoaderState<string>;\n  category: EntityLoaderState<string>;\n  catalog: EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport {\n  initialLoaderState,\n  LoaderState,\n  StateEntitySelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateEntitySelectors.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      initialLoaderState\n  );\n};\n\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) =>\n      StateLoaderSelectors.loaderValueSelector(loaderState) || false\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      if (componentState && exists) {\n        return componentState;\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateEntityLoaderSelectors.entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateLoaderSelectors.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateLoaderSelectors.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value: boolean) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      // TODO(issue:6431) - this `filter` should be removed.\n      // The reason for removal: with `filter` in place, when moving to a page that has restrictions, the component data will still emit the previous value.\n      // Removing it causes some components to fail, because they are not checking\n      // if the data is actually there. I noticed these that this component is failing, but there are possibly more:\n      // - `tab-paragraph-container.component.ts` when visiting any PDP page\n      filter((component) => !!component)\n    ) as Observable<T>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { ActiveCartService } from './facade/active-cart.service';\nimport {\n  CartVoucherService,\n  SelectiveCartService,\n  WishListService,\n} from './facade/index';\nimport { MultiCartService } from './facade/multi-cart.service';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartVoucherService,\n        MultiCartService,\n        WishListService,\n        ActiveCartService,\n        SelectiveCartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentLoader: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentLoader.getList(componentUids, pageContext).pipe(\n      switchMap((components) =>\n        from(\n          components.map(\n            (component) =>\n              new CmsActions.LoadCmsComponentSuccess({\n                component,\n                uid: component.uid,\n                pageContext,\n              })\n          )\n        )\n      ),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","export abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable()\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        ExternalRoutesService,\n        { provide: ExternalRoutesConfig, useExisting: Config },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { Config } from '../config/config.module';\nimport { RoutingConfig } from './configurable-routes/config/routing-config';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n        { provide: RoutingConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state = false,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { CmsConfig } from './config/cms-config';\nimport { CmsStructureConfig } from './config/cms-structure.config';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [\n        CmsService,\n        { provide: CmsConfig, useExisting: Config },\n        { provide: CmsStructureConfig, useExisting: Config },\n        provideDefaultConfig(defaultCmsModuleConfig),\n      ],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: any[] = Object.keys(this.resolverMethods)\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    const matchingResolvers = this.resolvers.filter(\n      (resolver) => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function (a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param properties: properties in each cms item response data\n   * @param element: slot or cms component element\n   * @param renderer\n   */\n  addDynamicAttributes(\n    properties: any,\n    element: Element,\n    renderer: Renderer2\n  ): void {\n    if (properties) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n        {\n          provide: FeaturesConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\n\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable()\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslatePipe } from './translate.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { I18nConfig } from './config/i18n-config';\nimport { TranslationService } from './translation.service';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { CxDatePipe } from './date.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: I18nConfig, useExisting: Config },\n        { provide: TranslationService, useClass: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    /**\n     * If set to `true`, the integration with kyma will be enabled, and Open ID token will be retrieved when registering/logging in,\n     */\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_enabled: false,\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { iif, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<KymaActions.LoadOpenIdToken> = iif<\n    KymaActions.LoadOpenIdToken,\n    KymaActions.LoadOpenIdToken\n  >(\n    () => this.config.authentication && this.config.authentication.kyma_enabled,\n    this.actions$.pipe(\n      ofType<KymaActions.LoadOpenIdTokenSuccess>(\n        AuthActions.LOAD_USER_TOKEN_SUCCESS\n      ),\n      withLatestFrom(\n        this.actions$.pipe(\n          ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n        )\n      ),\n      map(\n        ([, loginAction]) =>\n          new KymaActions.LoadOpenIdToken({\n            username: loginAction.payload.userId,\n            password: loginAction.payload.password,\n          })\n      )\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService,\n    private config: KymaConfig\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaConfig } from './config/kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [\n    provideDefaultConfig(defaultKymaConfig),\n    ...KymaServices,\n    { provide: KymaConfig, useExisting: Config },\n  ],\n})\nexport class KymaModule {}\n","export abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { PersonalizationConfig } from './config/personalization-config';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  providers: [{ provide: PersonalizationConfig, useExisting: Config }],\n})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  initialLoaderState,\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateEntityLoaderSelectors.entityStateSelector(details, code)[scope] ||\n      initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = ''\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY).zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this.cmsService.launchInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useExisting: Config },\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) =>\n            of(new UserActions.CancelOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","export const testestsd = 'sare';\n"]}