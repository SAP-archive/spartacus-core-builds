{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/anonymous-consents/connectors/converters.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/util/normalize-http-error.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","configurationFactoryProvidedInRoot","configurationFactory","inject","ConfigChunk","InjectFlags","Optional","DefaultConfigChunk","Config","InjectionToken","providedIn","factory","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","semanticRoute","getSemanticRoute","ɵ1$1","context","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","_activeBaseSite","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","ImageType","VariantType","PriceType","VariantQualifier","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","AnonymousConsentCheckUpdatedVersions","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","checkConsentVersions","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsOccModule","CmsPageAdapter","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","ANONYMOUS_CONSENT_NORMALIZER","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","loadAnonymousConsents","head","observe","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","PRODUCT_INTERESTS_NORMALIZER","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","AnonymousConsentNormalizer","anonymousConsentsService","OccReturnRequestNormalizer","returnEntries","OccUserInterestsNormalizer","results","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","OccUserInterestsAdapter","getInterests","notificationType","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","headers$1","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4$1","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","checkConsentVersions$","concatMap","currentConsents","currentConsentVersions","templateVersion","newConsentVersions","detectUpdatedVersion","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","loadAnonymousConsentTemplates$","currentConsentTemplates","newConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","currentVersions","newVersions","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$3","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$4","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","configInitializerFactory","configInitializer","ConfigInitializerModule","ConfigInitializerModule_1","configValidatorFactory","validators","ConfigValidatorModule","ConfigValidatorModule_1","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","normalizedError","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  inject,\n  InjectFlags,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n// separate function needed for production build:\nexport function configurationFactoryProvidedInRoot() {\n  return configurationFactory(\n    inject(ConfigChunk, InjectFlags.Optional),\n    inject(DefaultConfigChunk, InjectFlags.Optional)\n  );\n}\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration', {\n  providedIn: 'root',\n  factory: configurationFactoryProvidedInRoot,\n});\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken<object[]>('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken<object[]>(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  // TODO{#8158} - make this method required by removing the the `?` after the method name\n  abstract loadAnonymousConsents?(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> | null {\n    // TODO{#8158} - remove the conditional check, and just `return this.adapter.loadAnonymousConsents()`\n    return this.adapter.loadAnonymousConsents\n      ? this.adapter.loadAnonymousConsents()\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      // TODO{#8158} - remove this if block\n      if (!this.anonymousConsentTemplatesConnector.loadAnonymousConsents()) {\n        return of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates());\n      }\n\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[] = [],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = applicables.filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: '',\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      if (state.data.routeName) {\n        semanticRoute = state.data.routeName;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n        semanticRoute = 'product';\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'category';\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'brand';\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url,\n      queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorModel } from '../model/misc.model';\nimport { isDevMode } from '@angular/core';\n\n/**\n * Normalizes HttpErrorResponse to HttpErrorModel.\n *\n * Can be used as a safe and generic way for embodying http errors into\n * NgRx Action payload, as it will strip potentially unserializable parts from\n * it and warn in debug mode if passed error is not instance of HttpErrorModel\n * (which usually happens when logic in NgRx Effect is not sealed correctly)\n */\nexport function normalizeHttpError(\n  error: HttpErrorResponse | any\n): HttpErrorModel | undefined {\n  if (error instanceof HttpErrorResponse) {\n    const normalizedError: HttpErrorModel = {\n      message: error.message,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    };\n\n    // include backend's error details\n    if (Array.isArray(error.error.errors)) {\n      normalizedError.details = error.error.errors;\n    } else if (typeof error.error.error === 'string') {\n      normalizedError.details = [\n        {\n          type: error.error.error,\n          message: error.error.error_description,\n        },\n      ];\n    }\n\n    return normalizedError;\n  }\n\n  if (isDevMode()) {\n    console.error(\n      'Error passed to normalizeHttpError is not HttpErrorResponse instance',\n      error\n    );\n  }\n\n  return undefined;\n}\n","export const testestsd = 'sare';\n"]}