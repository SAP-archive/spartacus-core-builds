import { __extends } from "tslib";
import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';
export var LOAD_ORDER_DETAILS = '[User] Load Order Details';
export var LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
export var LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
export var CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
export var CANCEL_ORDER = '[User] Cancel Order';
export var CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
export var CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
export var RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
var LoadOrderDetails = /** @class */ (function (_super) {
    __extends(LoadOrderDetails, _super);
    function LoadOrderDetails(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS;
        return _this;
    }
    return LoadOrderDetails;
}(LoaderLoadAction));
export { LoadOrderDetails };
var LoadOrderDetailsFail = /** @class */ (function (_super) {
    __extends(LoadOrderDetailsFail, _super);
    function LoadOrderDetailsFail(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS_FAIL;
        return _this;
    }
    return LoadOrderDetailsFail;
}(LoaderFailAction));
export { LoadOrderDetailsFail };
var LoadOrderDetailsSuccess = /** @class */ (function (_super) {
    __extends(LoadOrderDetailsSuccess, _super);
    function LoadOrderDetailsSuccess(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS_SUCCESS;
        return _this;
    }
    return LoadOrderDetailsSuccess;
}(LoaderSuccessAction));
export { LoadOrderDetailsSuccess };
var ClearOrderDetails = /** @class */ (function (_super) {
    __extends(ClearOrderDetails, _super);
    function ClearOrderDetails() {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.type = CLEAR_ORDER_DETAILS;
        return _this;
    }
    return ClearOrderDetails;
}(LoaderResetAction));
export { ClearOrderDetails };
var CancelOrder = /** @class */ (function (_super) {
    __extends(CancelOrder, _super);
    function CancelOrder(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = CANCEL_ORDER;
        return _this;
    }
    return CancelOrder;
}(StateEntityLoaderActions.EntityLoadAction));
export { CancelOrder };
var CancelOrderFail = /** @class */ (function (_super) {
    __extends(CancelOrderFail, _super);
    function CancelOrderFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload) || this;
        _this.payload = payload;
        _this.type = CANCEL_ORDER_FAIL;
        return _this;
    }
    return CancelOrderFail;
}(StateEntityLoaderActions.EntityFailAction));
export { CancelOrderFail };
var CancelOrderSuccess = /** @class */ (function (_super) {
    __extends(CancelOrderSuccess, _super);
    function CancelOrderSuccess() {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.type = CANCEL_ORDER_SUCCESS;
        return _this;
    }
    return CancelOrderSuccess;
}(StateEntityLoaderActions.EntitySuccessAction));
export { CancelOrderSuccess };
var ResetCancelOrderProcess = /** @class */ (function (_super) {
    __extends(ResetCancelOrderProcess, _super);
    function ResetCancelOrderProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.type = RESET_CANCEL_ORDER_PROCESS;
        return _this;
    }
    return ResetCancelOrderProcess;
}(StateEntityLoaderActions.EntityResetAction));
export { ResetCancelOrderProcess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlscy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL29yZGVyLWRldGFpbHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsaUJBQWlCLEdBQ2xCLE1BQU0sMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RSxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztBQUM5RCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM5RSxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyw0QkFBNEIsQ0FBQztBQUVoRSxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUM7QUFDbEQsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQUcsMEJBQTBCLENBQUM7QUFDNUQsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQUcsNkJBQTZCLENBQUM7QUFDbEUsTUFBTSxDQUFDLElBQU0sMEJBQTBCLEdBQUcsbUNBQW1DLENBQUM7QUFFOUU7SUFBc0Msb0NBQWdCO0lBRXBELDBCQUNTLE9BR047UUFKSCxZQU1FLGtCQUFNLGtCQUFrQixDQUFDLFNBQzFCO1FBTlEsYUFBTyxHQUFQLE9BQU8sQ0FHYjtRQUxNLFVBQUksR0FBRyxrQkFBa0IsQ0FBQzs7SUFRbkMsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQVZELENBQXNDLGdCQUFnQixHQVVyRDs7QUFFRDtJQUEwQyx3Q0FBZ0I7SUFFeEQsOEJBQW1CLE9BQVk7UUFBL0IsWUFDRSxrQkFBTSxrQkFBa0IsRUFBRSxPQUFPLENBQUMsU0FDbkM7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixVQUFJLEdBQUcsdUJBQXVCLENBQUM7O0lBR3hDLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUFMRCxDQUEwQyxnQkFBZ0IsR0FLekQ7O0FBRUQ7SUFBNkMsMkNBQW1CO0lBRTlELGlDQUFtQixPQUFjO1FBQWpDLFlBQ0Usa0JBQU0sa0JBQWtCLENBQUMsU0FDMUI7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBTztRQUR4QixVQUFJLEdBQUcsMEJBQTBCLENBQUM7O0lBRzNDLENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFMRCxDQUE2QyxtQkFBbUIsR0FLL0Q7O0FBRUQ7SUFBdUMscUNBQWlCO0lBRXREO1FBQUEsWUFDRSxrQkFBTSxrQkFBa0IsQ0FBQyxTQUMxQjtRQUhRLFVBQUksR0FBRyxtQkFBbUIsQ0FBQzs7SUFHcEMsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXVDLGlCQUFpQixHQUt2RDs7QUFFRDtJQUFpQywrQkFBeUM7SUFFeEUscUJBQ1MsT0FJTjtRQUxILFlBT0Usa0JBQU0sZUFBZSxFQUFFLHVCQUF1QixDQUFDLFNBQ2hEO1FBUFEsYUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFVBQUksR0FBRyxZQUFZLENBQUM7O0lBUzdCLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFYRCxDQUFpQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsR0FXekU7O0FBRUQ7SUFBcUMsbUNBQXlDO0lBRTVFLHlCQUFtQixPQUFZO1FBQS9CLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxTQUN6RDtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFVBQUksR0FBRyxpQkFBaUIsQ0FBQzs7SUFHbEMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXFDLHdCQUF3QixDQUFDLGdCQUFnQixHQUs3RTs7QUFFRDtJQUF3QyxzQ0FBNEM7SUFFbEY7UUFBQSxZQUNFLGtCQUFNLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxTQUNoRDtRQUhRLFVBQUksR0FBRyxvQkFBb0IsQ0FBQzs7SUFHckMsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXdDLHdCQUF3QixDQUFDLG1CQUFtQixHQUtuRjs7QUFFRDtJQUE2QywyQ0FBMEM7SUFFckY7UUFBQSxZQUNFLGtCQUFNLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxTQUNoRDtRQUhRLFVBQUksR0FBRywwQkFBMEIsQ0FBQzs7SUFHM0MsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQUxELENBQTZDLHdCQUF3QixDQUFDLGlCQUFpQixHQUt0RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE9yZGVyLFxuICBDYW5jZWxsYXRpb25SZXF1ZXN0RW50cnlJbnB1dExpc3QsXG59IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCB7XG4gIExvYWRlckZhaWxBY3Rpb24sXG4gIExvYWRlckxvYWRBY3Rpb24sXG4gIExvYWRlclN1Y2Nlc3NBY3Rpb24sXG4gIExvYWRlclJlc2V0QWN0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLmFjdGlvbic7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHsgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgVVNFUl9PUkRFUl9ERVRBSUxTLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9PUkRFUl9ERVRBSUxTID0gJ1tVc2VyXSBMb2FkIE9yZGVyIERldGFpbHMnO1xuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMU19GQUlMID0gJ1tVc2VyXSBMb2FkIE9yZGVyIERldGFpbHMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9PUkRFUl9ERVRBSUxTX1NVQ0NFU1MgPSAnW1VzZXJdIExvYWQgT3JkZXIgRGV0YWlscyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDTEVBUl9PUkRFUl9ERVRBSUxTID0gJ1tVc2VyXSBDbGVhciBPcmRlciBEZXRhaWxzJztcblxuZXhwb3J0IGNvbnN0IENBTkNFTF9PUkRFUiA9ICdbVXNlcl0gQ2FuY2VsIE9yZGVyJztcbmV4cG9ydCBjb25zdCBDQU5DRUxfT1JERVJfRkFJTCA9ICdbVXNlcl0gQ2FuY2VsIE9yZGVyIEZhaWwnO1xuZXhwb3J0IGNvbnN0IENBTkNFTF9PUkRFUl9TVUNDRVNTID0gJ1tVc2VyXSBDYW5jZWwgT3JkZXIgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVTRVRfQ0FOQ0VMX09SREVSX1BST0NFU1MgPSAnW1VzZXJdIFJlc2V0IENhbmNlbCBPcmRlciBQcm9jZXNzJztcblxuZXhwb3J0IGNsYXNzIExvYWRPcmRlckRldGFpbHMgZXh0ZW5kcyBMb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JERVJfREVUQUlMUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgb3JkZXJDb2RlOiBzdHJpbmc7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihVU0VSX09SREVSX0RFVEFJTFMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3JkZXJEZXRhaWxzRmFpbCBleHRlbmRzIExvYWRlckZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkRFUl9ERVRBSUxTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihVU0VSX09SREVSX0RFVEFJTFMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3JkZXJEZXRhaWxzU3VjY2VzcyBleHRlbmRzIExvYWRlclN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkRFUl9ERVRBSUxTX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBPcmRlcikge1xuICAgIHN1cGVyKFVTRVJfT1JERVJfREVUQUlMUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyT3JkZXJEZXRhaWxzIGV4dGVuZHMgTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0xFQVJfT1JERVJfREVUQUlMUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXIgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDQU5DRUxfT1JERVI7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ6IHN0cmluZztcbiAgICAgIG9yZGVyQ29kZTogc3RyaW5nO1xuICAgICAgY2FuY2VsUmVxdWVzdElucHV0OiBDYW5jZWxsYXRpb25SZXF1ZXN0RW50cnlJbnB1dExpc3Q7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIENBTkNFTF9PUkRFUl9QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJGYWlsIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIENBTkNFTF9PUkRFUl9QUk9DRVNTX0lELCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgQ0FOQ0VMX09SREVSX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldENhbmNlbE9yZGVyUHJvY2VzcyBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9DQU5DRUxfT1JERVJfUFJPQ0VTUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgT3JkZXJEZXRhaWxzQWN0aW9uID1cbiAgfCBMb2FkT3JkZXJEZXRhaWxzXG4gIHwgTG9hZE9yZGVyRGV0YWlsc0ZhaWxcbiAgfCBMb2FkT3JkZXJEZXRhaWxzU3VjY2Vzc1xuICB8IENsZWFyT3JkZXJEZXRhaWxzXG4gIHwgQ2FuY2VsT3JkZXJcbiAgfCBDYW5jZWxPcmRlckZhaWxcbiAgfCBDYW5jZWxPcmRlclN1Y2Nlc3M7XG4iXX0=