{"version":3,"file":"user-order.service.d.ts","sources":["user-order.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { CancellationRequestEntryInputList, Order, OrderHistoryList } from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserOrderService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected authService: AuthService;\n    protected routingService: RoutingService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService, routingService: RoutingService);\n    /**\n     * Returns an order's detail\n     */\n    getOrderDetails(): Observable<Order>;\n    /**\n     * Retrieves order's details\n     *\n     * @param orderCode an order code\n     */\n    loadOrderDetails(orderCode: string): void;\n    /**\n     * Clears order's details\n     */\n    clearOrderDetails(): void;\n    /**\n     * Returns order history list\n     */\n    getOrderHistoryList(pageSize: number): Observable<OrderHistoryList>;\n    /**\n     * Returns a loaded flag for order history list\n     */\n    getOrderHistoryListLoaded(): Observable<boolean>;\n    /**\n     * Retrieves an order list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadOrderList(pageSize: number, currentPage?: number, sort?: string): void;\n    /**\n     * Cleaning order list\n     */\n    clearOrderList(): void;\n    /**\n     *  Returns a consignment tracking detail\n     */\n    getConsignmentTracking(): Observable<ConsignmentTracking>;\n    /**\n     * Retrieves consignment tracking details\n     * @param orderCode an order code\n     * @param consignmentCode a consignment code\n     */\n    loadConsignmentTracking(orderCode: string, consignmentCode: string): void;\n    /**\n     * Cleaning consignment tracking\n     */\n    clearConsignmentTracking(): void;\n    cancelOrder(orderCode: string, cancelRequestInput: CancellationRequestEntryInputList): void;\n    /**\n     * Returns the cancel order loading flag\n     */\n    getCancelOrderLoading(): Observable<boolean>;\n    /**\n     * Returns the cancel order success flag\n     */\n    getCancelOrderSuccess(): Observable<boolean>;\n    /**\n     * Resets the cancel order process flags\n     */\n    resetCancelOrderProcessState(): void;\n}\n"]}