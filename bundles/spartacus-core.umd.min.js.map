{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/base-event.model.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","OccConfig","_super","SiteContextConfig","AnonymousConsentsConfig","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","entityStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","LoadClientToken","_this","StateLoaderActions.LoaderLoadAction","LoadClientTokenFail","StateLoaderActions.LoaderFailAction","LoadClientTokenSuccess","StateLoaderActions.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","take","subscribe","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","RoutingConfig","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","OccEndpointsService","baseSiteService","SCOPE_SUFFIX","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","encodeURIComponent","httpParamsOptions","fromString","httpParams_1","HttpParams","toString","endpointsConfig","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","useExisting","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateLoaderActions.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateLoaderSelectors.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateLoaderSelectors.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateLoaderSelectors.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateLoaderSelectors.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","decodeURIComponent","consentsUpdated","newConsents","previousConsents","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","substr","isFeatureEnabled","feature","featureConfig","DeferLoadingStrategy","FeatureConfigService","isLevel","isEnabled","FeaturesConfig","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","exports","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","featureConfigService","getCartEndpoint","cartEndpoint","cartId","productCode","quantity","toAdd","legacyAdd","code","qty","update","entryNumber","pickupStore","legacyUpdate","patch","remove","legacyRemove","queryString","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","DETAILS_PARAMS","OccCartAdapter","loadAll","pluck","legacyLoadAll","legacyLoad","oldCartId","toMergeCartGuid","legacyCreate","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","CustomEncoder","encodeKey","encodeValue","decodeKey","decodeValue","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","encoder","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","product_scopes","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","getOrderEndpoint","orderCode","orderId","loadHistory","legacyLoadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","defaultOccConfig","occConfigValidator","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","BaseEvent","EventService","eventsMeta","eventType","source$","getEventMeta","sources$","unregister","newSources","s$","output$","getInputSubject","eventMeta","inputSubject$","Subject","validateEventType","createEventMeta","BehaviorSubject","merge","share","validateEventStream","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateEntityLoaderSelectors.entityStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateEntityLoaderActions.EntityLoadAction","CancelOrderFail","StateEntityLoaderActions.EntityFailAction","CancelOrderSuccess","StateEntityLoaderActions.EntitySuccessAction","ResetCancelOrderProcess","StateEntityLoaderActions.EntityResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","withUserId","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","callback","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","initializeContext","langService","currService","configInit","contextServiceProviders","APP_INITIALIZER","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","val","unsubscribe","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","ngOnDestroy","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","activateLanguage$","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","activateCurrency$","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","ReactiveFormsModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","getAsmState","getAsmUi","ɵ0$r","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","customerId","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentTokenInterceptor","asmAuthService","HttpResponseStatus","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$u","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","BadGatewayHandler","responseStatus","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","subject","subjectType","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","HttpErrorInterceptor","handlers","reverse","handleErrorResponse","handler","getResponseHandler","h","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","GlobalMessageConfig","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","CustomerSupportAgentErrorHandlingService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","getCartIdByUserId","isTempCartId","CREATE_CART","LOAD_CART","MERGE_CART","DELETE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","ClearExpiredCoupons","ClearCart","DeleteCart","DeleteCartFail","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","SET_TEMP_CART","REMOVE_CART","RemoveTempCart","SetTempCart","LoadMultiCart","LoadMultiCartFail","LoadMultiCartSuccess","MergeMultiCart","MergeMultiCartSuccess","ResetMultiCartDetails","RemoveCart","AddEmailToMultiCart","AddEmailToMultiCartFail","AddEmailToMultiCartSuccess","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearMultiCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","DeprecatedCartActions.MergeCart","loadCart","DeprecatedCartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","DeprecatedCartActions.AddEmailToCart","DeprecatedCartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","CartVoucherService","activeCartService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","SelectiveCartService","userService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","WishListService","createWishList","description","CartActions.CreateWishList","getWishList","wishListId","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","MultiCartSelectors.getWishListId","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateEntitySelectors.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","from","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","withdrawOn","notifier","switchMapTo","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","err","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","CartActions.LoadCart","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","DeprecatedCartActions.LOAD_CART","groupBy","group$","DeprecatedCartActions.LoadCartSuccess","CartActions.LoadMultiCartSuccess","CartActions.RemoveCart","DeprecatedCartActions.LoadCartFail","CartActions.LoadMultiCartFail","CartActions.ClearExpiredCoupons","DeprecatedCartActions.ClearCart","createCart$","DeprecatedCartActions.CREATE_CART","conditionalActions","DeprecatedCartActions.MergeCartSuccess","CartActions.MergeMultiCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","DeprecatedCartActions.MERGE_CART","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","DeprecatedCartActions.ResetCartDetails","CartActions.ResetMultiCartDetails","addEmail$","DeprecatedCartActions.AddEmailToCartSuccess","CartActions.AddEmailToMultiCartSuccess","DeprecatedCartActions.AddEmailToCartFail","CartActions.AddEmailToMultiCartFail","deleteCart$","DeprecatedCartActions.DELETE_CART","DeprecatedCartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.LoadCartFail","resetWishList$","activeCartReducer","CartActions.CREATE_CART","CartActions.REMOVE_CART","cartEntitiesReducer","CartActions.SET_TEMP_CART","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCart","CartActions.ClearMultiCartState","CartActions.SetActiveCartId","MultiCartEffects","loadCart2$","CartActions.LoadMultiCart","setTempCart$","CartActions.RemoveTempCart","mergeCart2$","CartActions.MergeMultiCart","addEmail2$","CartActions.AddEmailToMultiCart","removeCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","initialState$9","getDeliveryAddressSelector","getDeliveryModeSelector","deliveryMode","getPaymentDetailsSelector","getOrderDetailsSelector","orderDetails","getCheckoutState","checkoutState","steps","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","supported","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","initialState$a","cardTypesEntities","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cart_1","activeCart","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","CmsStructureConfig","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentLoader","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesConfig","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","cmsComponentConnector","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","matchingResolvers","resolver","DynamicAttributeService","addDynamicAttributes","element","renderer","groupProps","propName","propValue","classItem","classList","setAttribute","toLowerCase","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","debug","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","_data","i18nextProviders","ɵ0$C","defaultI18nConfig","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","Observable","subscriber","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_enabled","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","PersonalizationConfig","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","cmsService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","codes","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","SmartEditService","zone","isPreviewPage","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","attr","classes","run","NgZone","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","StoreFinderConfig","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","_result","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\n\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter(key => keys[key] === type);\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map(userToken => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe(userToken => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map(userToken => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map(s => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig =\n      this.config && this.config.routing && this.config.routing.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map(segment => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find(path =>\n      this.getParams(path).every(paramName => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, state => state.router);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  context => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, entities => {\n  return entities\n    ? Object.keys(entities).map(isocode => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, entities => {\n  return entities\n    ? Object.keys(entities).map(isocode => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map(baseSite => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe(activeBaseSite => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap(baseSite => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  private readonly SCOPE_SUFFIX = '_scopes';\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe(value => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope = ''\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach(key => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions;\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = { fromString: queryParamsFromEndpoint };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach(key => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope: string): string {\n    const endpointsConfig =\n      this.config.backend &&\n      this.config.backend.occ &&\n      this.config.backend.occ.endpoints;\n\n    if (scope) {\n      const endpointConfig = endpointsConfig[`${endpoint}${this.SCOPE_SUFFIX}`];\n      if (endpointConfig && endpointConfig[scope]) {\n        return endpointConfig[scope];\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return endpointsConfig[endpoint] || endpoint;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap(token => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(\n    config: AuthConfig,\n    http: HttpClient,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(config: AuthConfig, http: HttpClient);\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(\n    http: HttpClient,\n    config: AuthConfig,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(http: HttpClient, config: AuthConfig);\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return reducer => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return reducer => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function(reducer) {\n    return function(state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function(reducer) {\n    return function(state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { StateConfig } from './config/state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n        { provide: StateConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError(error =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError(error =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError(error =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError(error => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        ...AuthServices,\n        { provide: AuthConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { LoaderState } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, state => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, templates => {\n    return templates\n      ? templates.find(template => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, state => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, state => state.ui.bannerDismissed);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, state => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, consents =>\n    consents.find(consent => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(authenticated => !authenticated),\n      tap(_ => this.getTemplates(true)),\n      switchMap(_ =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap(templates =>\n        templates.forEach(template => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap(templates =>\n        templates.forEach(template => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(_ =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","export abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n\nexport const ANONYMOUS_CONSENTS_FEATURE = 'anonymousConsents';\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n        {\n          provide: FeaturesConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map(source => this.convertSource(source, injectionToken));\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe(value => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map(entry => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map(el => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyAdd(userId, cartId, productCode, quantity);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyUpdate(userId, cartId, entryNumber, qty, pickupStore);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyRemove(userId, cartId, entryNumber);\n    }\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyAdd(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const url = this.getCartEndpoint(userId) + cartId + '/entries';\n\n    const params = new HttpParams({\n      fromString: 'code=' + productCode + '&qty=' + quantity,\n    });\n\n    const toAdd = JSON.stringify({});\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyUpdate(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n    let queryString = 'qty=' + qty;\n\n    if (pickupStore) {\n      queryString = queryString + '&pickupStore=' + pickupStore;\n    }\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http\n      .patch<CartModification>(url, {}, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyRemove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_CART_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n// TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.\nconst DETAILS_PARAMS =\n  'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +\n  'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +\n  'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +\n  'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +\n  'appliedVouchers,productDiscounts(formattedValue),user';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = `users/${userId}/carts/`;\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadAll(userId);\n    }\n\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map(carts => {\n          if (carts) {\n            const activeCart = carts.find(cart => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      // TODO: Deprecated, remove Issue: #4125.\n      if (!this.featureConfigService.isLevel('1.1')) {\n        return this.legacyLoad(userId, cartId);\n      }\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);\n    }\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadAll(userId: string): Observable<Cart[]> {\n    const url = this.getCartEndpoint(userId);\n    const params = new HttpParams({\n      fromString: `fields=carts(${DETAILS_PARAMS},saveTime)`,\n    });\n\n    return this.http\n      .get<Occ.CartList>(url, { params })\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, cartId: string): Observable<Cart> {\n    const url = this.getCartEndpoint(userId) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${DETAILS_PARAMS}`,\n    });\n\n    return this.http\n      .get<Occ.Cart>(url, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyCreate(\n    userId: string,\n    toAdd: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId);\n    let queryString = `fields=${DETAILS_PARAMS}`;\n\n    if (oldCartId) {\n      queryString = `${queryString}&oldCartId=${oldCartId}`;\n    }\n    if (toMergeCartGuid) {\n      queryString = `${queryString}&toMergeCartGuid=${toMergeCartGuid}`;\n    }\n\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n\n    return this.http\n      .post<Occ.Cart>(url, toAdd, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map(data => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap(sub => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map(response => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap(fromPaymentProvider => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map(cardTypeList => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function(result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map(entry =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map(consignment => ({\n        ...consignment,\n        entries: consignment.entries.map(entry => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map(entry =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map(product =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter(facet => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find(value => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map(reference => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map(f =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach(key => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map(key => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find(el => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach(key => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map(lo => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map(param => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = url => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach(modelData => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map(data => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map(model => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        scopedProduct =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product:\n          'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n        product_scopes: {\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map(languageList => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map(currencyList => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map(countryList => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map(regionList => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map(siteList => {\n          return siteList.baseSites.find(site => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap(currencies => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter(currenies => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe(activeCurrency => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap(languages => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter(languages => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe(activeLanguage => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe(data => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe(data => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(\n      this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER)\n    );\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String('10000000');\n    } else {\n      params['query'] = query;\n    }\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError(error => throwError(error)),\n      map(consentList => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map(addressList => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map(consentList => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError(error => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getOrderEndpoint(userId: string): string {\n    const orderEndpoint = 'users/' + userId + '/orders';\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoad(userId, orderCode);\n    }\n\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadHistory(userId, pageSize, currentPage, sort);\n    }\n\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, orderCode: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId) + '/' + orderCode;\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<Occ.Order>(url, {\n        params,\n      })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const url = this.getOrderEndpoint(userId);\n    let params = new HttpParams();\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (sort) {\n      params = params.set('sort', sort);\n    }\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url, { params: params })\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map(methodList => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map(titleList => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map(list => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map(result => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map(entry => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find(site =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex(javaRegexp => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map(param =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      el => el.isocode === defaultElement.isocode\n    ).map(el => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap(externalConfig => this.transfer(externalConfig)),\n        map(externalConfig =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map(baseSites =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { OccConfig } from './config/occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        { provide: OccConfig, useExisting: Config },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { iif, Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  ANONYMOUS_CONSENTS_FEATURE,\n  isFeatureEnabled,\n} from '../../features-config/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return iif(\n      () => isFeatureEnabled(this.config, ANONYMOUS_CONSENTS_FEATURE),\n      this.anonymousConsentsService.getConsents().pipe(\n        take(1),\n        withLatestFrom(this.authService.isUserLoggedIn()),\n        switchMap(([consents, isUserLoggedIn]) => {\n          if (!this.isOccUrl(request.url)) {\n            return next.handle(request);\n          }\n\n          const clonedRequest = this.handleRequest(consents, request);\n          return next.handle(clonedRequest).pipe(\n            tap(event => {\n              if (event instanceof HttpResponse) {\n                this.handleResponse(\n                  isUserLoggedIn,\n                  event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                  consents\n                );\n              }\n            })\n          );\n        })\n      ),\n      next.handle(request)\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","/**\n * Base class for events.\n *\n * For convenience it copies all properties of the argument object into the properties of the class instance.\n *\n * Provides type safety both for the argument and the result class instance. For example:\n *\n * ```\n * export class CreateCartSuccess extends BaseEvent<CreateCartSuccess> {\n *   cart: Cart;\n * }\n * const event = new CreateCartSuccess({ cart: ... });\n * event.cart\n * ```\n */\nexport abstract class BaseEvent<T> {\n  constructor(data: T) {\n    Object.assign(this, data);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { share, switchMap, tap } from 'rxjs/operators';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * Observable with array of sources of the event\n   */\n  sources$: BehaviorSubject<Observable<T>[]>;\n\n  /**\n   * Output observable with merged all event sources\n   */\n  output$: Observable<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const event = this.getEventMeta(eventType);\n    const sources: Observable<T>[] = event.sources$.value;\n    if (sources.includes(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      event.sources$.next([...sources, source$]);\n    }\n\n    return () => this.unregister(eventType, source$);\n  }\n\n  /**\n   * Unregisters an event source for the given event type\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   */\n  private unregister<T>(eventType: Type<T>, source$: Observable<T>): void {\n    const event = this.getEventMeta(eventType);\n    const newSources: Observable<T>[] = event.sources$.value.filter(\n      s$ => s$ !== source$\n    );\n    event.sources$.next(newSources);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    return this.getEventMeta(eventType).output$;\n  }\n\n  /**\n   * Dispatches a single event.\n   *\n   * However, it's recommended to use method `register` instead, whenever the event can come from some stream.\n   *  It allows for lazy computations in the event source stream -\n   *  if no one subscribes to the event, the logic of the event source stream won't be evaluated.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    const sources$ = new BehaviorSubject<Observable<T>[]>([]);\n    let output$ = sources$.pipe(\n      switchMap((sources: Observable<T>[]) => merge(...sources)),\n      share() // share the result observable to avoid merging sources for each subscriber\n    );\n\n    if (isDevMode()) {\n      output$ = this.validateEventStream(output$, eventType);\n    }\n\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      sources$,\n      output$,\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap(event => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/index';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory ? factory(action) : new eventType(action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map(context => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap(state => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateEntityLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), entityState =>\n    StateEntityLoaderSelectors.entityStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), loaderState =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), loaderState =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), loaderState =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { LoaderState } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  consents: LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: LoaderState<Order>;\n  orderReturn: LoaderState<ReturnRequest>;\n  orderReturnList: LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: LoaderState<NotificationPreference[]>;\n  productInterests: LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, entites =>\n  Object.keys(entites).map(isocode => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, entites =>\n  Object.keys(entites).map(isocode => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, entities =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateLoaderSelectors.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateLoaderSelectors.loaderSuccessSelector(state),\n    loading: StateLoaderSelectors.loaderLoadingSelector(state),\n    regions: StateLoaderSelectors.loaderValueSelector(state).entities,\n    country: StateLoaderSelectors.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, entites =>\n  Object.keys(entites).map(code => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, entities =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, templates =>\n    templates.find(template => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter(p => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.withUserId(userId =>\n      this.store.dispatch(new UserActions.LoadUserConsents(userId))\n    );\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(_ => this.getConsents(true)),\n      switchMap(_ =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter(template => Boolean(template)),\n      map(template => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport {\n  ANONYMOUS_CONSENTS_FEATURE,\n  isFeatureEnabled,\n} from '../../../features-config/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(_ =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError(error =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      () =>\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ) && Boolean(this.anonymousConsentsConfig.anonymousConsents)\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      action =>\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ) &&\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          ongoingScopes => ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      baseSiteService.initialize();\n      langService.initialize();\n      currService.initialize();\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        param => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe(val => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map(param =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter(value => value.every(param => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map(param => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.router.url);\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach(param => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe(value => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            event =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach(param =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init();\n    });\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler, ConfigInitializerService],\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          languages => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          currencies => new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map(baseSite => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        { provide: SiteContextConfig, useExisting: Config },\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map(consent => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function(state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AnonymousConsentsConfig } from './config/anonymous-consents-config';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        { provide: AnonymousConsentsConfig, useExisting: Config },\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateLoaderActions.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap(options =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError(error =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError(error =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, state =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, state =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, state =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, state =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(userToken => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    entities => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    entities => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter(data => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  abstract responseStatus: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter(error => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(e => e.type === 'ValidationError')\n      .forEach(error => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(e => e.subjectType === 'cart' && e.reason === 'notFound')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      error => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpResponseStatus } from '../models/response-status.model';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {\n    // We reverse the handlers to allow for custom handlers\n    // that replace standard handlers\n    this.handlers.reverse();\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    const status = response.status;\n    let handler = this.handlers.find(h => h.responseStatus === status);\n    if (!handler) {\n      handler = this.handlers.find(\n        h => h.responseStatus === HttpResponseStatus.UNKNOWN\n      );\n    }\n    return handler;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { GlobalMessageConfig } from './config/global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),\n    GlobalMessageService,\n    { provide: GlobalMessageConfig, useExisting: Config },\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmConfig } from './config/asm-config';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [\n        { provide: AsmConfig, useExisting: Config },\n        ...interceptors,\n        provideDefaultConfig(defaultAsmConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi) {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'multi-cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find(entry => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart lifecycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const CLEAR_EXPIRED_COUPONS = '[Cart] Clear Expired Coupon';\n\nexport const CLEAR_CART = '[Cart] Clear Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {}\n}\n\nexport class AddEmailToCartFail {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddEmailToCartSuccess {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class LoadCart {\n  readonly type = LOAD_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; extraData?: any }\n  ) {}\n}\n\nexport class LoadCartFail {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCartSuccess {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCartSuccess implements Action {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: { cartId: string; userId: string }) {}\n}\n\nexport class ResetCartDetails implements Action {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {}\n}\n\nexport class ClearExpiredCoupons implements Action {\n  readonly type = CLEAR_EXPIRED_COUPONS;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCart {\n  readonly type = CLEAR_CART;\n  constructor() {}\n}\n\nexport class DeleteCart {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartFail {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartFail\n  | ClearExpiredCoupons\n  | ClearCart;\n","import {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; [key: string]: any }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entry: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(public payload: { error: any; cartId: string; userId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entry: string;\n      qty: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(public payload: { error: any; userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartResetAddVoucher extends EntityResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n  EntityProcessesLoaderResetAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const REMOVE_TEMP_CART = '[Multi Cart] Remove Temp Cart';\n\nexport const LOAD_MULTI_CART = '[Multi Cart] Load Cart';\nexport const LOAD_MULTI_CART_FAIL = '[Multi Cart] Load Cart Fail';\nexport const LOAD_MULTI_CART_SUCCESS = '[Multi Cart] Load Cart Success';\n\nexport const MERGE_MULTI_CART = '[Multi Cart] Merge Cart';\nexport const MERGE_MULTI_CART_SUCCESS = '[Multi Cart] Merge Cart Success';\n\nexport const RESET_MULTI_CART_DETAILS = '[Multi Cart] Reset Cart Details';\n\nexport const SET_TEMP_CART = '[Multi Cart] Set Temp Cart';\n\nexport const REMOVE_CART = '[Multi Cart] Remove Cart';\n\nexport const ADD_EMAIL_TO_MULTI_CART = '[Multi Cart] Add Email';\nexport const ADD_EMAIL_TO_MULTI_CART_FAIL = '[Multi Cart] Add Email Fail';\nexport const ADD_EMAIL_TO_MULTI_CART_SUCCESS = '[Multi Cart] Add Email Success';\n\nexport const CART_PROCESSES_INCREMENT = '[Multi Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Multi Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Multi Cart] Set Active Cart Id';\n\nexport const CLEAR_MULTI_CART_STATE = '[Multi Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class RemoveTempCart extends EntityRemoveAction {\n  readonly type = REMOVE_TEMP_CART;\n  constructor(public payload: { tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\nexport class LoadMultiCart extends EntityLoadAction {\n  readonly type = LOAD_MULTI_CART;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadMultiCartFail extends EntityFailAction {\n  readonly type = LOAD_MULTI_CART_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class LoadMultiCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_MULTI_CART_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string; extraData?: any }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class MergeMultiCart implements Action {\n  readonly type = MERGE_MULTI_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeMultiCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_MULTI_CART_SUCCESS;\n  constructor(\n    public payload: { oldCartId: string; cartId: string; userId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\nexport class ResetMultiCartDetails extends EntityProcessesLoaderResetAction {\n  readonly type = RESET_MULTI_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA, undefined);\n  }\n}\n\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class AddEmailToMultiCart extends EntityLoadAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToMultiCartFail extends EntityFailAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class AddEmailToMultiCartSuccess extends EntitySuccessAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\nexport class ClearMultiCartState extends EntityRemoveAction {\n  readonly type = CLEAR_MULTI_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA, null);\n  }\n}\n\nexport type MultiCartActions =\n  | RemoveTempCart\n  | SetTempCart\n  | LoadMultiCart\n  | LoadMultiCartFail\n  | LoadMultiCartSuccess\n  | MergeMultiCart\n  | MergeMultiCartSuccess\n  | ResetMultiCartDetails\n  | RemoveCart\n  | AddEmailToMultiCart\n  | AddEmailToMultiCartFail\n  | AddEmailToMultiCartSuccess\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearMultiCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class LoadWishList implements Action {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: { userId: string; customerId: string }) {}\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string; extraData?: any }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport * as DeprecatedCartActions from '../store/actions/cart.action';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce(isStable => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random()\n      .toString(36)\n      .substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: any;\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({ userId, cartId, extraData }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new DeprecatedCartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new DeprecatedCartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach(product => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entry: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entry: `${entryNumber}`,\n          qty: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new DeprecatedCartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new DeprecatedCartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map(cartId => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap(cartId => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe(userId => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe(cartId => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap(cart => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map(cart => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap(cartId => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap(cartId => this.multiCartService.isStable(cartId)),\n      debounce(state => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map(entry => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe(cartState => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter(cartState => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter(cartState => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap(cartState => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter(cartState => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        cartState =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap(cartState => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter(cartState => !cartState.loading),\n      filter(cartState => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter(cartState => !this.isCartCreating(cartState)),\n      filter(cartState => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe(cartState => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap(cartId => this.multiCartService.getEntry(cartId, productCode)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map(cart => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(\n          this.cartUser.uid\n            .split('|')\n            .slice(1)\n            .join('|')\n        ))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach(entry => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe(entries => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable()\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map(userId => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap(details => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.withUserId(userId => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.withUserId(userId =>\n      this.store.dispatch(new UserActions.RemoveUser(userId))\n    );\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\nimport { UserService } from '../../user/facade/user.service';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport { Cart } from '../../model/cart.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { map, filter, tap, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { OrderEntry } from '../../model/order.model';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\n\n@Injectable()\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap(cartId => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe(userId => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map(cart => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap(cartState => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter(cartState => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(_ => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(new CartActions.LoadWishList({ userId, customerId }));\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap(wishListId =>\n        this.multiCartService.isStable(wishListId).pipe(map(stable => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsComponent } from '../../model';\nimport { EntityState, LoaderState } from '../../state/index';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: EntityLoaderState<string>;\n  product: EntityLoaderState<string>;\n  category: EntityLoaderState<string>;\n  catalog: EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map(cmp => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport {\n  initialLoaderState,\n  LoaderState,\n  StateEntitySelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, state => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, componentsState =>\n    StateEntitySelectors.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    componentsContext =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      initialLoaderState\n  );\n};\n\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    loaderState =>\n      StateLoaderSelectors.loaderValueSelector(loaderState) || false\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(componentsContextSelectorFactory(uid), state =>\n    state ? state.component : undefined\n  );\n};\n\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      if (componentState && exists) {\n        return componentState;\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, nodes =>\n    StateEntityLoaderSelectors.entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    itemState => StateLoaderSelectors.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, LoaderState<string>> =>\n  createSelector(getPageStateIndexEntityLoaderState(pageContext), indexState =>\n    StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), entity =>\n    StateLoaderSelectors.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), pageData =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), entity => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value: boolean) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap(pageContext =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter(currentContext => !!currentContext),\n        switchMap(currentContext =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      // TODO(issue:6431) - this `filter` should be removed.\n      // The reason for removal: with `filter` in place, when moving to a page that has restrictions, the component data will still emit the previous value.\n      // Removing it causes some components to fail, because they are not checking\n      // if the data is actually there. I noticed these that this component is failing, but there are possibly more:\n      // - `tab-paragraph-container.component.ts` when visiting any PDP page\n      filter(component => !!component)\n    ) as Observable<T>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap(pageContext =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe(pageContext =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter(entity => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap(hasPage =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter(page => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map(p => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap(payload => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (entry: any) =>\n              new CartActions.CartAddEntrySuccess({\n                ...entry,\n                userId: payload.userId,\n                cartId: payload.cartId,\n              })\n          ),\n          catchError(error =>\n            from([\n              new CartActions.CartAddEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap(payload =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entry)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError(error =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap(payload =>\n      this.cartEntryConnector\n        .update(payload.userId, payload.cartId, payload.entry, payload.qty)\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError(error =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap(payload => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError(error => {\n            if (error?.error?.errors) {\n              error.error.errors.forEach(err => {\n                if (err.message) {\n                  this.messageService.add(\n                    err.message,\n                    GlobalMessageType.MSG_TYPE_ERROR\n                  );\n                }\n              });\n            }\n            return from([\n              new CartActions.CartAddVoucherFail(makeErrorSerializable(error)),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ]);\n          })\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap(payload => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError(error =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryModeSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryModeFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport {\n  getActiveCartId,\n  getCartHasPendingProcessesSelectorFactory,\n} from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | DeprecatedCartActions.LoadCartFail\n    | CartActions.LoadMultiCartFail\n    | DeprecatedCartActions.LoadCartSuccess\n    | CartActions.LoadMultiCartSuccess\n    | CartActions.ClearExpiredCoupons\n    | DeprecatedCartActions.ClearCart\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.LOAD_CART),\n    map((action: DeprecatedCartActions.LoadCart) => action.payload),\n    groupBy(payload => payload.cartId),\n    mergeMap(group$ =>\n      group$.pipe(\n        switchMap(payload => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap(payload => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            // TODO: remove with the `cart` store feature\n            withLatestFrom(this.store.pipe(select(getActiveCartId))),\n            mergeMap(([cart, activeCartId]: [Cart, string]) => {\n              let actions = [];\n              if (cart) {\n                // `cart` store branch should only be updated for active cart\n                // avoid dispatching LoadCartSuccess action on different cart loads\n                if (\n                  payload.cartId === activeCartId ||\n                  payload.cartId === OCC_CART_ID_CURRENT\n                ) {\n                  actions.push(new DeprecatedCartActions.LoadCartSuccess(cart));\n                }\n                actions.push(\n                  new CartActions.LoadMultiCartSuccess({\n                    cart,\n                    userId: payload.userId,\n                    extraData: payload.extraData,\n                  })\n                );\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(new CartActions.RemoveCart(OCC_CART_ID_CURRENT));\n                }\n              } else {\n                actions = [\n                  new DeprecatedCartActions.LoadCartFail({}),\n                  new CartActions.LoadMultiCartFail({\n                    cartId: payload.cartId,\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError(error => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  err => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // clear coupons actions just wanted to reload cart again\n                  // no need to do it in refresh or keep that action\n                  // however removing this action will be a breaking change\n                  // remove that action in 2.0 release\n                  // @deprecated since 1.4\n                  return from([\n                    new CartActions.LoadCart({ ...payload }),\n                    new CartActions.ClearExpiredCoupons({}),\n                  ]);\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  err => err.reason === 'notFound' || 'UnknownResourceError'\n                );\n                if (\n                  cartNotFoundErrors.length > 0 &&\n                  payload.extraData &&\n                  payload.extraData.active\n                ) {\n                  // Clear cart is responsible for removing cart in `cart` store feature.\n                  // Remove cart does the same thing, but in `multi-cart` store feature.\n                  return from([\n                    new DeprecatedCartActions.ClearCart(),\n                    new CartActions.RemoveCart(payload.cartId),\n                  ]);\n                }\n              }\n              return from([\n                new DeprecatedCartActions.LoadCartFail(\n                  makeErrorSerializable(error)\n                ),\n                new CartActions.LoadMultiCartFail({\n                  cartId: payload.cartId,\n                  error: makeErrorSerializable(error),\n                }),\n              ]);\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | DeprecatedCartActions.MergeCartSuccess\n    | CartActions.MergeMultiCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap(payload => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new DeprecatedCartActions.MergeCartSuccess({\n                  userId: payload.userId,\n                  cartId: cart.code,\n                })\n              );\n              conditionalActions.push(\n                new CartActions.MergeMultiCartSuccess({\n                  userId: payload.userId,\n                  cartId: cart.code,\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                cart,\n                userId: payload.userId,\n                extraData: payload.extraData,\n                cartId: getCartIdByUserId(cart, payload.userId),\n                tempCartId: payload.tempCartId,\n                oldCartId: payload.oldCartId,\n                toMergeCartGuid: payload.toMergeCartGuid,\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError(error =>\n            of(\n              new CartActions.CreateCartFail({\n                tempCartId: payload.tempCartId,\n                error: makeErrorSerializable(error),\n                userId: payload.userId,\n                oldCartId: payload.oldCartId,\n                toMergeCartGuid: payload.toMergeCartGuid,\n                extraData: payload.extraData,\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART),\n    map((action: DeprecatedCartActions.MergeCart) => action.payload),\n    mergeMap(payload => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap(currentCart => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  refresh$: Observable<\n    DeprecatedCartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.ADD_EMAIL_TO_CART_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,\n      CartActions.CART_ADD_VOUCHER_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | DeprecatedCartActions.AddEmailToCartSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n          | CartActions.CartAddVoucherSuccess\n      ) => action.payload\n    ),\n    concatMap(payload =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new DeprecatedCartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.MERGE_CART_SUCCESS,\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | DeprecatedCartActions.MergeCartSuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n      ) => action.payload\n    ),\n    map(\n      payload =>\n        new DeprecatedCartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    DeprecatedCartActions.ResetCartDetails | CartActions.ResetMultiCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [\n        new DeprecatedCartActions.ResetCartDetails(),\n        new CartActions.ResetMultiCartDetails(),\n      ];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | DeprecatedCartActions.AddEmailToCartSuccess\n    | DeprecatedCartActions.AddEmailToCartFail\n    | CartActions.AddEmailToMultiCartFail\n    | CartActions.AddEmailToMultiCartSuccess\n    | CartActions.CartProcessesDecrement\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART),\n    map((action: DeprecatedCartActions.AddEmailToCart) => action.payload),\n    mergeMap(payload =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new DeprecatedCartActions.AddEmailToCartSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CartActions.AddEmailToMultiCartSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError(error =>\n            from([\n              new DeprecatedCartActions.AddEmailToCartFail(\n                makeErrorSerializable(error)\n              ),\n              new CartActions.AddEmailToMultiCartFail({\n                error: makeErrorSerializable(error),\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new DeprecatedCartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<any> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.DELETE_CART),\n    map((action: DeprecatedCartActions.DeleteCart) => action.payload),\n    exhaustMap(payload =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new DeprecatedCartActions.ClearCart();\n        }),\n        catchError(error =>\n          of(\n            new DeprecatedCartActions.DeleteCartFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap(payload => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap(cart => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap(saveCartResult => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError(error =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.CreateWishList\n    | CartActions.LoadCartFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap(payload => {\n      const { userId, customerId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap(carts => {\n          if (carts) {\n            const wishList = carts.find(\n              cart => cart.name === `wishlist${customerId}`\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: `wishlist${customerId}`,\n                }),\n              ];\n            }\n          }\n        }),\n        catchError(error =>\n          from([new CartActions.LoadCartFail(makeErrorSerializable(error))])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadCartFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap(wishList => [\n            new CartActions.LoadWishListSuccess({ cart: wishList, userId }),\n          ]),\n          catchError(error =>\n            from([new CartActions.LoadCartFail(makeErrorSerializable(error))])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_MULTI_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n      if (action.payload === state) {\n        return activeCartInitialState;\n      } else {\n        return state;\n      }\n    case CartActions.CLEAR_MULTI_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_MULTI_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearMultiCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_MULTI_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: state => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter(state => !!state),\n      distinctUntilKeyChanged('active'),\n      map(state => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCart());\n    this.store.dispatch(new CartActions.ClearMultiCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  loadCart2$: Observable<CartActions.LoadMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.LOAD_CART),\n    map(\n      (action: DeprecatedCartActions.LoadCart) =>\n        new CartActions.LoadMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveTempCart(action.payload);\n    })\n  );\n\n  @Effect()\n  mergeCart2$: Observable<CartActions.MergeMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART),\n    map(\n      (action: DeprecatedCartActions.MergeCart) =>\n        new CartActions.MergeMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  addEmail2$: Observable<CartActions.AddEmailToMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART),\n    map(\n      (action: CartActions.AddEmailToCart) =>\n        new CartActions.AddEmailToMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  removeCart$: Observable<CartActions.RemoveCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.DELETE_CART),\n    map((action: DeprecatedCartActions.DeleteCart) => action.payload),\n    map(payload => new CartActions.RemoveCart(payload.cartId))\n  );\n\n  // TODO: Change actions to extend Increment action instead of doing extra dispatch in this effect\n  // Change for 2.0 release\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.ADD_EMAIL_TO_CART,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE,\n      CartActions.CART_ADD_VOUCHER\n    ),\n    map(\n      (\n        action:\n          | DeprecatedCartActions.AddEmailToCart\n          | CheckoutActions.ClearCheckoutDeliveryMode\n          | CartActions.CartAddVoucher\n      ) => action.payload\n    ),\n    map(payload => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { ActiveCartService } from './facade/active-cart.service';\nimport {\n  CartVoucherService,\n  SelectiveCartService,\n  WishListService,\n} from './facade/index';\nimport { MultiCartService } from './facade/multi-cart.service';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartVoucherService,\n        MultiCartService,\n        WishListService,\n        ActiveCartService,\n        SelectiveCartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, state =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, deliveryMode => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      code => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, deliveryMode => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, deliveryMode => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  state =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, entites => {\n  return Object.keys(entites).map(code => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe(activeCartId => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap(c =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map(action => action.payload),\n    mergeMap(payload =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map(data => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError(error =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map(cardTypes => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError(error =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport * as DeprecatedCartActions from '../../../cart/store/actions/cart.action';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap(payload =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap(address => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map(data => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new DeprecatedCartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap(details => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap(data => [\n            new CartActions.RemoveCart(payload.cartId),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError(error =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError(error =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART_SUCCESS),\n    map((action: DeprecatedCartActions.MergeCartSuccess) => action.payload),\n    map(payload => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId ? payload.cartId : OCC_CART_ID_CURRENT,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter(payload => Boolean(payload.cartId)),\n    switchMap(payload => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError(error =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.CartProcessesDecrement\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter(payload => Boolean(payload.cartId)),\n    concatMap(payload => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              })\n          ),\n          catchError(error =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail(\n                makeErrorSerializable(error)\n              ),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter(results => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe(activeCartId => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe(activeCartId => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe(activeCartId => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe(activeCart => (cart = activeCart))\n        .unsubscribe();\n      if (cart && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId: cart.code,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe(activeCartId => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe(activeCartId => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe(activeCartId => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe(occUserId => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe(activeCart => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe(occUserId => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter(p => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map(p => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map(label => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap(value => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap(page => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map(page => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map(id => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find(p => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap(page => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap(configuredComponent =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap(configuredComponents => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map(loadedComponents => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentLoader: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy(actions => serializePageContext(actions.payload.pageContext)),\n        mergeMap(actionGroup =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap(actions =>\n              this.loadComponentsEffect(\n                actions.map(action => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentLoader.getList(componentUids, pageContext).pipe(\n      switchMap(components =>\n        from(\n          components.map(\n            component =>\n              new CmsActions.LoadCmsComponentSuccess({\n                component,\n                uid: component.uid,\n                pageContext,\n              })\n          )\n        )\n      ),\n      catchError(error =>\n        from(\n          componentUids.map(\n            uid =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter(spec => spec.positive);\n  const excludePatterns = processedPatterns.filter(spec => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some(pattern => pattern.regex.test(url)) &&\n    !excludePatterns.some(pattern => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map(url => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter(spec => spec.positive);\n    const excludePatterns = processedPatterns.filter(spec => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some(pattern => pattern.regex.test(url)) &&\n      !excludePatterns.some(pattern => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map(path => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map(s => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map(route => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(matcherOrFactory => {\n      return typeof matcherOrFactory === 'function'\n        ? matcherOrFactory // matcher\n        : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n    });\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","export abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable()\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        ExternalRoutesService,\n        { provide: ExternalRoutesConfig, useExisting: Config },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map(path =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some(pathSegments =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map(seg => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(url => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(_ => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              x => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map(urlSegment => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { Config } from '../config/config.module';\nimport { RoutingConfig } from './configurable-routes/config/routing-config';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n        { provide: RoutingConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map(payload => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap(data => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter(routerState => routerState !== undefined),\n          map(routerState => routerState.state.context),\n          take(1),\n          mergeMap(pageContext =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  components =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError(error =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach(item => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap(loadFromConfig => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError(error => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap(page => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(_ =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          routerState =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map(routerState => routerState.state.context),\n        mergeMap(context => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy(pageContext => serializePageContext(pageContext)),\n    mergeMap(group =>\n      group.pipe(\n        switchMap(pageContext =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map(component => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError(error =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state = false,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function(state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { CmsConfig } from './config/cms-config';\nimport { CmsStructureConfig } from './config/cms-structure.config';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [\n        CmsService,\n        { provide: CmsConfig, useExisting: Config },\n        { provide: CmsStructureConfig, useExisting: Config },\n        provideDefaultConfig(defaultCmsModuleConfig),\n      ],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: any[] = Object.keys(this.resolverMethods)\n      .filter(key => metaResolver[this.resolverMethods[key]])\n      .map(key =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map(data => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      map(data => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    const matchingResolvers = this.resolvers.filter(\n      resolver => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function(a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param properties: properties in each cms item response data\n   * @param element: slot or cms component element\n   * @param renderer\n   */\n  addDynamicAttributes(\n    properties: any,\n    element: Element,\n    renderer: Renderer2\n  ): void {\n    if (properties) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach(group => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach(propName => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach(classItem => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then(config => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe(lang => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe(val => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\n\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach(chunk => {\n      chunks[chunk].forEach(key => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach(key => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport i18next from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then(config => {\n      let i18nextConfig: i18next.InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach(lang => {\n    Object.keys(resources[lang]).forEach(chunkName => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe(lang => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      data => callback(data, { status: 200 }),\n      error => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport i18next from 'i18next';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\n\n@Injectable()\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>(subscriber => {\n      const translate = () => {\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslatePipe } from './translate.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { I18nConfig } from './config/i18n-config';\nimport { TranslationService } from './translation.service';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { CxDatePipe } from './date.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: I18nConfig, useExisting: Config },\n        { provide: TranslationService, useClass: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map(optionName => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>(subscriber => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    /**\n     * If set to `true`, the integration with kyma will be enabled, and Open ID token will be retrieved when registering/logging in,\n     */\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, state => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_enabled: false,\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError(error => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { iif, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<KymaActions.LoadOpenIdToken> = iif<\n    KymaActions.LoadOpenIdToken,\n    KymaActions.LoadOpenIdToken\n  >(\n    () => this.config.authentication && this.config.authentication.kyma_enabled,\n    this.actions$.pipe(\n      ofType<KymaActions.LoadOpenIdTokenSuccess>(\n        AuthActions.LOAD_USER_TOKEN_SUCCESS\n      ),\n      withLatestFrom(\n        this.actions$.pipe(\n          ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n        )\n      ),\n      map(\n        ([, loginAction]) =>\n          new KymaActions.LoadOpenIdToken({\n            username: loginAction.payload.userId,\n            password: loginAction.payload.password,\n          })\n      )\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap(payload =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map(token => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError(error =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService,\n    private config: KymaConfig\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaConfig } from './config/kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [\n    provideDefaultConfig(defaultKymaConfig),\n    ...KymaServices,\n    { provide: KymaConfig, useExisting: Config },\n  ],\n})\nexport class KymaModule {}\n","export abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { PersonalizationConfig } from './config/personalization-config';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  providers: [{ provide: PersonalizationConfig, useExisting: Config }],\n})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          i => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach(action => {\n      Object.keys(action).forEach(key => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map(product => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, referenceTypeData => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            item => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, reviewData => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  initialLoaderState,\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductsFactory = (\n  codes: string[]\n): MemoizedSelector<StateWithProduct, Product[]> => {\n  return createSelector(\n    getProductState,\n    (details: EntityLoaderState<Product>) => {\n      return codes\n        .map(code =>\n          details.entities[code] ? details.entities[code].value : undefined\n        )\n        .filter(product => product !== undefined);\n    }\n  );\n};\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(getProductState, details =>\n    scope\n      ? StateEntityLoaderSelectors.entityStateSelector(details, code)[scope] ||\n        initialLoaderState\n      : StateEntityLoaderSelectors.entityStateSelector(details, code)\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    productState => StateLoaderSelectors.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    productState => StateLoaderSelectors.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    productState => StateLoaderSelectors.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    productState => StateLoaderSelectors.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, details => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap(references => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap(reviews => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map(scope => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map(productParts =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        productState =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter(x => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = ''\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      key =>\n        !!page.slots[key].components.find(\n          comp =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter(data => !!data?.pagination),\n    map(results => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map(state => state.state.params['productCode']),\n    filter(code => !!code),\n    switchMap(code => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY).zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter(data => !!data?.pagination),\n    map(results => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map(state => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap(payload => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map(data => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError(_error =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap(productCode => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map(data => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError(_error =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap(payload => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map(reviewResponse => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError(_error =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap(group =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map(data => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError(error =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap(payload => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map(suggestions => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError(error =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap(products =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        data =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError(error => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                obj =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { LoaderState } from '../loader/loader-state';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * For backward compatibility, we accommodate scopes alongside current\n * loading/error/success/value flags, thus those names can't be used as scope\n * names.\n *\n * TODO: Improve, issue #5445\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T> | LoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> | LoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> | LoaderState<T> = initialLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> | LoaderState<T> => {\n    if (\n      action &&\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.scope\n    ) {\n      return {\n        ...state,\n        [action.meta.scope]: loader(state[action.meta.scope], action),\n      };\n    } else {\n      return loader(state, action);\n    }\n  };\n}\n","import { ScopedLoaderState } from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from '../entity-loader/entity-loader-state';\nimport { EntityLoaderAction } from '../entity-loader/entity-loader.action';\nimport { LoaderState } from '../loader/loader-state';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T> | LoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(_ => {\n        this.cmsService.launchInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter(site => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe(site => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe(cmsPage => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach(attr =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach(attr =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach(classItem => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, state =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, state =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, state =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, state =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      weekDayOpeningListItem => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map(key => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function() {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function() {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function() {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap(payload =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map(data => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                store =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap(payload =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map(data => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError(error =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map(data => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError(error =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useExisting: Config },\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map(consent => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map(consent => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.withUserId(userId =>\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId))\n    );\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      )\n    );\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      )\n    );\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      )\n    );\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      )\n    );\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap(orderListState => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map(orderListState => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      )\n    );\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      )\n    );\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.withUserId(userId => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.store.dispatch(\n      new UserActions.LoadCustomerCoupons({\n        userId: OCC_USER_ID_CURRENT,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        sort: sort,\n      })\n    );\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getCustomerCouponsState),\n      tap(customerCouponsState => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(customerCouponsState => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.store.dispatch(\n      new UserActions.SubscribeCustomerCoupon({\n        userId: OCC_USER_ID_CURRENT,\n        couponCode: couponCode,\n      })\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.store.dispatch(\n      new UserActions.UnsubscribeCustomerCoupon({\n        userId: OCC_USER_ID_CURRENT,\n        couponCode: couponCode,\n      })\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.store.dispatch(\n      new UserActions.ClaimCustomerCoupon({\n        userId: OCC_USER_ID_CURRENT,\n        couponCode: couponCode,\n      })\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.withUserId(userId =>\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId))\n    );\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      )\n    );\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.withUserId(userId =>\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.withUserId(userId => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap(returnListState => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map(returnListState => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.withUserId(userId => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId: userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.withUserId(userId => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId: userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.withUserId(userId => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n\n  /*\n   * Utility method to distinquish user id in a convenient way\n   */\n  private withUserId(callback: (userId: string) => void): void {\n    this.authService\n      .getOccUserId()\n      .pipe(take(1))\n      .subscribe(userId => callback(userId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\nimport { NotificationPreference } from '../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.store.dispatch(\n      new UserActions.LoadNotificationPreferences(OCC_USER_ID_CURRENT)\n    );\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.store.dispatch(\n      new UserActions.UpdateNotificationPreferences({\n        userId: OCC_USER_ID_CURRENT,\n        preferences: preferences,\n      })\n    );\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../store/user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../model/product-interest.model';\nimport { tap, map } from 'rxjs/operators';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n  getProcessErrorFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.store.dispatch(\n      new UserActions.LoadProductInterests({\n        userId: OCC_USER_ID_CURRENT,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        sort: sort,\n        productCode: productCode,\n        notificationType: notificationType,\n      })\n    );\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap(interestListState => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map(interestListState => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.store.dispatch(\n      new UserActions.RemoveProductInterest({\n        userId: OCC_USER_ID_CURRENT,\n        item: item,\n        singleDelete: singleDelete,\n      })\n    );\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.store.dispatch(\n      new UserActions.AddProductInterest({\n        userId: OCC_USER_ID_CURRENT,\n        productCode: productCode,\n        notificationType: notificationType,\n      })\n    );\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map(consentTemplate =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          countries => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError(error =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap(payload => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError(error =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          countries => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError(error =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap(userEmailAddress => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap(payload =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          preferences =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError(error =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap(payload =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError(error =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(_ => new UserActions.CancelOrderSuccess()),\n          catchError(error =>\n            of(new UserActions.CancelOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError(error =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError(error =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(_ => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError(error =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError(error =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError(error =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap(data => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap(data => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          regions =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError(error =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError(error => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach(err => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map(titles => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap(payload =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError(error =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap(payload =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(_ => new UserActions.UpdatePasswordSuccess()),\n          catchError(error =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError(error =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map(data => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError(error =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map(data => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap(userId =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map(consents => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError(error =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap(action =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map(consent => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError(error => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError(error =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap(userId => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap(payload =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(_ => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)),\n        catchError(error =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError(error =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError(error =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap(user => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError(error =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(_result => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError(error =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap(payload => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError(error =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap(payload => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError(error =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap(payload => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError(error =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap(payload => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map(data => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError(error =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap(payload => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError(error =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap(payload =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap(data => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap(payload =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","export const testestsd = 'sare';\n"]}