/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateEntityLoaderActions, StateLoaderActions, } from '../../../state/utils/index';
import { GIVE_CONSENT_PROCESS_ID, USER_CONSENTS, WITHDRAW_CONSENT_PROCESS_ID, } from '../user-state';
/** @type {?} */
export const LOAD_USER_CONSENTS = '[User] Load User Consents';
/** @type {?} */
export const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';
/** @type {?} */
export const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';
/** @type {?} */
export const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';
/** @type {?} */
export const GIVE_USER_CONSENT = '[User] Give User Consent';
/** @type {?} */
export const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';
/** @type {?} */
export const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';
/** @type {?} */
export const RESET_GIVE_USER_CONSENT_PROCESS = '[User] Reset Give User Consent Process';
/** @type {?} */
export const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';
/** @type {?} */
export const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';
/** @type {?} */
export const WITHDRAW_USER_CONSENT_SUCCESS = '[User] Withdraw User Consent Success';
/** @type {?} */
export const RESET_WITHDRAW_USER_CONSENT_PROCESS = '[User] Reset Withdraw User Consent Process';
export class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_CONSENTS);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS;
    }
}
if (false) {
    /** @type {?} */
    LoadUserConsents.prototype.type;
    /** @type {?} */
    LoadUserConsents.prototype.payload;
}
export class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_CONSENTS, payload);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS_FAIL;
    }
}
if (false) {
    /** @type {?} */
    LoadUserConsentsFail.prototype.type;
    /** @type {?} */
    LoadUserConsentsFail.prototype.payload;
}
export class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(USER_CONSENTS);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    LoadUserConsentsSuccess.prototype.type;
    /** @type {?} */
    LoadUserConsentsSuccess.prototype.payload;
}
export class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {
    constructor() {
        super(USER_CONSENTS);
        this.type = RESET_LOAD_USER_CONSENTS;
    }
}
if (false) {
    /** @type {?} */
    ResetLoadUserConsents.prototype.type;
}
export class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.payload = payload;
        this.type = GIVE_USER_CONSENT;
    }
}
if (false) {
    /** @type {?} */
    GiveUserConsent.prototype.type;
    /** @type {?} */
    GiveUserConsent.prototype.payload;
}
export class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);
        this.type = GIVE_USER_CONSENT_FAIL;
    }
}
if (false) {
    /** @type {?} */
    GiveUserConsentFail.prototype.type;
}
export class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    /**
     * @param {?} consentTemplate
     */
    constructor(consentTemplate) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.consentTemplate = consentTemplate;
        this.type = GIVE_USER_CONSENT_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    GiveUserConsentSuccess.prototype.type;
    /** @type {?} */
    GiveUserConsentSuccess.prototype.consentTemplate;
}
export class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.type = RESET_GIVE_USER_CONSENT_PROCESS;
    }
}
if (false) {
    /** @type {?} */
    ResetGiveUserConsentProcess.prototype.type;
}
export class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.payload = payload;
        this.type = WITHDRAW_USER_CONSENT;
    }
}
if (false) {
    /** @type {?} */
    WithdrawUserConsent.prototype.type;
    /** @type {?} */
    WithdrawUserConsent.prototype.payload;
}
export class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);
        this.type = WITHDRAW_USER_CONSENT_FAIL;
    }
}
if (false) {
    /** @type {?} */
    WithdrawUserConsentFail.prototype.type;
}
export class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.type = WITHDRAW_USER_CONSENT_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    WithdrawUserConsentSuccess.prototype.type;
}
export class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.type = RESET_WITHDRAW_USER_CONSENT_PROCESS;
    }
}
if (false) {
    /** @type {?} */
    ResetWithdrawUserConsentProcess.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,