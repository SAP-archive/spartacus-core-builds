import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var ɵ0 = function (state) { return state.components; };
export var getComponentsState = createSelector(getCmsState, ɵ0);
export var componentsContextSelectorFactory = function (uid) {
    return createSelector(getComponentsState, function (componentsState) {
        return StateUtils.entitySelector(componentsState, uid);
    });
};
export var componentsLoaderStateSelectorFactory = function (uid, context) {
    return createSelector(componentsContextSelectorFactory(uid), function (componentsContext) {
        return (componentsContext &&
            componentsContext.pageContext &&
            componentsContext.pageContext[context]) ||
            StateUtils.initialLoaderState;
    });
};
export var componentsContextExistsSelectorFactory = function (uid, context) {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), function (loaderState) { return StateUtils.loaderValueSelector(loaderState) || false; });
};
export var componentsDataSelectorFactory = function (uid) {
    return createSelector(componentsContextSelectorFactory(uid), function (state) {
        return state ? state.component : undefined;
    });
};
export var componentsSelectorFactory = function (uid, context) {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), function (componentState, exists) {
        if (componentState && exists) {
            return componentState;
        }
        else {
            return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO1NBS2xCLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLFVBQVUsRUFBaEIsQ0FBZ0I7QUFIM0QsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FBQyxXQUFXLEtBQThCLENBQUM7QUFFN0QsTUFBTSxDQUFDLElBQU0sZ0NBQWdDLEdBQUcsVUFDOUMsR0FBVztJQUVYLE9BQU8sY0FBYyxDQUFDLGtCQUFrQixFQUFFLFVBQUMsZUFBZTtRQUN4RCxPQUFBLFVBQVUsQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQztJQUEvQyxDQUErQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUcsVUFDbEQsR0FBVyxFQUNYLE9BQWU7SUFFZixPQUFPLGNBQWMsQ0FDbkIsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQ3JDLFVBQUMsaUJBQWlCO1FBQ2hCLE9BQUEsQ0FBQyxpQkFBaUI7WUFDaEIsaUJBQWlCLENBQUMsV0FBVztZQUM3QixpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekMsVUFBVSxDQUFDLGtCQUFrQjtJQUg3QixDQUc2QixDQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sc0NBQXNDLEdBQUcsVUFDcEQsR0FBVyxFQUNYLE9BQWU7SUFFZixPQUFPLGNBQWMsQ0FDbkIsb0NBQW9DLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNsRCxVQUFDLFdBQVcsSUFBSyxPQUFBLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLEVBQXBELENBQW9ELENBQ3RFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSw2QkFBNkIsR0FBRyxVQUMzQyxHQUFXO0lBRVgsT0FBTyxjQUFjLENBQUMsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBQyxLQUFLO1FBQ2pFLE9BQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTO0lBQW5DLENBQW1DLENBQ3BDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSx5QkFBeUIsR0FBRyxVQUN2QyxHQUFXLEVBQ1gsT0FBZTtJQUVmLE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxHQUFHLENBQUMsRUFDbEMsc0NBQXNDLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNwRCxVQUFDLGNBQWMsRUFBRSxNQUFNO1FBQ3JCLElBQUksY0FBYyxJQUFJLE1BQU0sRUFBRTtZQUM1QixPQUFPLGNBQWMsQ0FBQztTQUN2QjthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDb21wb25lbnRzQ29udGV4dCwgQ29tcG9uZW50c1N0YXRlLCBTdGF0ZVdpdGhDbXMgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcblxuZXhwb3J0IGNvbnN0IGdldENvbXBvbmVudHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICBDb21wb25lbnRzU3RhdGVcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDbXNTdGF0ZSwgKHN0YXRlKSA9PiBzdGF0ZS5jb21wb25lbnRzKTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENvbXBvbmVudHNDb250ZXh0PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRDb21wb25lbnRzU3RhdGUsIChjb21wb25lbnRzU3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5lbnRpdHlTZWxlY3Rvcihjb21wb25lbnRzU3RhdGUsIHVpZClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPGJvb2xlYW4+PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzQ29udGV4dFNlbGVjdG9yRmFjdG9yeSh1aWQpLFxuICAgIChjb21wb25lbnRzQ29udGV4dCkgPT5cbiAgICAgIChjb21wb25lbnRzQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dFtjb250ZXh0XSkgfHxcbiAgICAgIFN0YXRlVXRpbHMuaW5pdGlhbExvYWRlclN0YXRlXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcbiAgICAobG9hZGVyU3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihsb2FkZXJTdGF0ZSkgfHwgZmFsc2VcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzRGF0YVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDbXNDb21wb25lbnQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksIChzdGF0ZSkgPT5cbiAgICBzdGF0ZSA/IHN0YXRlLmNvbXBvbmVudCA6IHVuZGVmaW5lZFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDbXNDb21wb25lbnQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5KHVpZCksXG4gICAgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcbiAgICAoY29tcG9uZW50U3RhdGUsIGV4aXN0cykgPT4ge1xuICAgICAgaWYgKGNvbXBvbmVudFN0YXRlICYmIGV4aXN0cykge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50U3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG4iXX0=