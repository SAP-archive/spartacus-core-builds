import { __assign, __read, __spread } from "tslib";
import { ProductActions } from '../actions/index';
export var initialState = {
    productCode: '',
    list: [],
};
export function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {
            var productCode = action.payload.productCode;
            var list = action.payload.list;
            return __assign(__assign({}, state), { list: __spread(state.list, (list ? list : [])).reduce(function (productReferences, productReference) {
                    if (!productReferences.some(function (obj) {
                        return obj.referenceType === productReference.referenceType &&
                            obj.target.code === productReference.target.code;
                    })) {
                        productReferences.push(productReference);
                    }
                    return productReferences;
                }, []), productCode: productCode });
        }
        case ProductActions.CLEAN_PRODUCT_REFERENCES: {
            return initialState;
        }
    }
    return state;
}
export var getProductReferenceList = function (state) { return state.list; };
export var getProductReferenceProductCode = function (state) { return state.productCode; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1yZWZlcmVuY2VzLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvcHJvZHVjdC9zdG9yZS9yZWR1Y2Vycy9wcm9kdWN0LXJlZmVyZW5jZXMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2xELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBMkI7SUFDbEQsV0FBVyxFQUFFLEVBQUU7SUFDZixJQUFJLEVBQUUsRUFBRTtDQUNULENBQUM7QUFFRixNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFvQixFQUNwQixNQUE4QztJQUQ5QyxzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxjQUFjLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUNuRCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztZQUMvQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUVqQyw2QkFDSyxLQUFLLEtBQ1IsSUFBSSxFQUFFLFNBQUksS0FBSyxDQUFDLElBQUksRUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQ2pELFVBQ0UsaUJBQXFDLEVBQ3JDLGdCQUFrQztvQkFFbEMsSUFDRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FDckIsVUFBQyxHQUFHO3dCQUNGLE9BQUEsR0FBRyxDQUFDLGFBQWEsS0FBSyxnQkFBZ0IsQ0FBQyxhQUFhOzRCQUNwRCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSTtvQkFEaEQsQ0FDZ0QsQ0FDbkQsRUFDRDt3QkFDQSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztxQkFDMUM7b0JBQ0QsT0FBTyxpQkFBaUIsQ0FBQztnQkFDM0IsQ0FBQyxFQUNELEVBQUUsQ0FDSCxFQUNELFdBQVcsYUFBQSxJQUNYO1NBQ0g7UUFFRCxLQUFLLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzVDLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxVQUNyQyxLQUE2QixJQUNOLE9BQUEsS0FBSyxDQUFDLElBQUksRUFBVixDQUFVLENBQUM7QUFDcEMsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQUcsVUFDNUMsS0FBNkIsSUFDbEIsT0FBQSxLQUFLLENBQUMsV0FBVyxFQUFqQixDQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvZHVjdFJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3Byb2R1Y3QubW9kZWwnO1xuaW1wb3J0IHsgUHJvZHVjdEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IFByb2R1Y3RSZWZlcmVuY2VzU3RhdGUgfSBmcm9tICcuLi9wcm9kdWN0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZSA9IHtcbiAgcHJvZHVjdENvZGU6ICcnLFxuICBsaXN0OiBbXSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBQcm9kdWN0QWN0aW9ucy5Qcm9kdWN0UmVmZXJlbmNlc0FjdGlvblxuKTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFByb2R1Y3RBY3Rpb25zLkxPQURfUFJPRFVDVF9SRUZFUkVOQ0VTX1NVQ0NFU1M6IHtcbiAgICAgIGNvbnN0IHByb2R1Y3RDb2RlID0gYWN0aW9uLnBheWxvYWQucHJvZHVjdENvZGU7XG4gICAgICBjb25zdCBsaXN0ID0gYWN0aW9uLnBheWxvYWQubGlzdDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxpc3Q6IFsuLi5zdGF0ZS5saXN0LCAuLi4obGlzdCA/IGxpc3QgOiBbXSldLnJlZHVjZShcbiAgICAgICAgICAoXG4gICAgICAgICAgICBwcm9kdWN0UmVmZXJlbmNlczogUHJvZHVjdFJlZmVyZW5jZVtdLFxuICAgICAgICAgICAgcHJvZHVjdFJlZmVyZW5jZTogUHJvZHVjdFJlZmVyZW5jZVxuICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhcHJvZHVjdFJlZmVyZW5jZXMuc29tZShcbiAgICAgICAgICAgICAgICAob2JqKSA9PlxuICAgICAgICAgICAgICAgICAgb2JqLnJlZmVyZW5jZVR5cGUgPT09IHByb2R1Y3RSZWZlcmVuY2UucmVmZXJlbmNlVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgb2JqLnRhcmdldC5jb2RlID09PSBwcm9kdWN0UmVmZXJlbmNlLnRhcmdldC5jb2RlXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBwcm9kdWN0UmVmZXJlbmNlcy5wdXNoKHByb2R1Y3RSZWZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb2R1Y3RSZWZlcmVuY2VzO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgW11cbiAgICAgICAgKSxcbiAgICAgICAgcHJvZHVjdENvZGUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgUHJvZHVjdEFjdGlvbnMuQ0xFQU5fUFJPRFVDVF9SRUZFUkVOQ0VTOiB7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFByb2R1Y3RSZWZlcmVuY2VMaXN0ID0gKFxuICBzdGF0ZTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZVxuKTogUHJvZHVjdFJlZmVyZW5jZVtdID0+IHN0YXRlLmxpc3Q7XG5leHBvcnQgY29uc3QgZ2V0UHJvZHVjdFJlZmVyZW5jZVByb2R1Y3RDb2RlID0gKFxuICBzdGF0ZTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZVxuKTogc3RyaW5nID0+IHN0YXRlLnByb2R1Y3RDb2RlO1xuIl19