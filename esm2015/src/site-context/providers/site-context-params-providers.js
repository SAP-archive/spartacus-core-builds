import { APP_INITIALIZER } from '@angular/core';
import { UrlSerializer } from '@angular/router';
import { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';
import { SiteContextParamsService } from '../services/site-context-params.service';
import { SiteContextRoutesHandler } from '../services/site-context-routes-handler';
import { SiteContextUrlSerializer } from '../services/site-context-url-serializer';
// functions below should not be exposed in public API:
export function initSiteContextRoutesHandler(siteContextRoutesHandler, configInit) {
    return () => {
        configInit.getStableConfig('context').then(() => {
            siteContextRoutesHandler.init();
        });
    };
}
export const siteContextParamsProviders = [
    SiteContextParamsService,
    SiteContextUrlSerializer,
    { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },
    {
        provide: APP_INITIALIZER,
        useFactory: initSiteContextRoutesHandler,
        deps: [SiteContextRoutesHandler, ConfigInitializerService],
        multi: true,
    },
];
/**
 * @deprecated since 1.3.1; TODO: remove
 */
export function deprecatedInitSiteContextRoutesHandler(siteContextRoutesHandler) {
    return () => {
        siteContextRoutesHandler.init();
    };
}
/**
 * @deprecated since 1.3.1; TODO: remove
 */
export const deprecatedSiteContextParamsProviders = [
    SiteContextParamsService,
    SiteContextUrlSerializer,
    { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },
    {
        provide: APP_INITIALIZER,
        useFactory: deprecatedInitSiteContextRoutesHandler,
        deps: [SiteContextRoutesHandler],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS1jb250ZXh0LXBhcmFtcy1wcm92aWRlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc2l0ZS1jb250ZXh0L3Byb3ZpZGVycy9zaXRlLWNvbnRleHQtcGFyYW1zLXByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUN0RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUVuRix1REFBdUQ7QUFFdkQsTUFBTSxVQUFVLDRCQUE0QixDQUMxQyx3QkFBa0QsRUFDbEQsVUFBb0M7SUFFcEMsT0FBTyxHQUFHLEVBQUU7UUFDVixVQUFVLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDOUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQWU7SUFDcEQsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4QixFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixFQUFFO0lBQ2pFO1FBQ0UsT0FBTyxFQUFFLGVBQWU7UUFDeEIsVUFBVSxFQUFFLDRCQUE0QjtRQUN4QyxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSx3QkFBd0IsQ0FBQztRQUMxRCxLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0YsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHNDQUFzQyxDQUNwRCx3QkFBa0Q7SUFFbEQsT0FBTyxHQUFHLEVBQUU7UUFDVix3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBZTtJQUM5RCx3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUU7SUFDakU7UUFDRSxPQUFPLEVBQUUsZUFBZTtRQUN4QixVQUFVLEVBQUUsc0NBQXNDO1FBQ2xELElBQUksRUFBRSxDQUFDLHdCQUF3QixDQUFDO1FBQ2hDLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXJsU2VyaWFsaXplciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25maWdJbml0aWFsaXplclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLWluaXRpYWxpemVyL2NvbmZpZy1pbml0aWFsaXplci5zZXJ2aWNlJztcbmltcG9ydCB7IFNpdGVDb250ZXh0UGFyYW1zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NpdGUtY29udGV4dC1wYXJhbXMuc2VydmljZSc7XG5pbXBvcnQgeyBTaXRlQ29udGV4dFJvdXRlc0hhbmRsZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9zaXRlLWNvbnRleHQtcm91dGVzLWhhbmRsZXInO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRVcmxTZXJpYWxpemVyIH0gZnJvbSAnLi4vc2VydmljZXMvc2l0ZS1jb250ZXh0LXVybC1zZXJpYWxpemVyJztcblxuLy8gZnVuY3Rpb25zIGJlbG93IHNob3VsZCBub3QgYmUgZXhwb3NlZCBpbiBwdWJsaWMgQVBJOlxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNpdGVDb250ZXh0Um91dGVzSGFuZGxlcihcbiAgc2l0ZUNvbnRleHRSb3V0ZXNIYW5kbGVyOiBTaXRlQ29udGV4dFJvdXRlc0hhbmRsZXIsXG4gIGNvbmZpZ0luaXQ6IENvbmZpZ0luaXRpYWxpemVyU2VydmljZVxuKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uZmlnSW5pdC5nZXRTdGFibGVDb25maWcoJ2NvbnRleHQnKS50aGVuKCgpID0+IHtcbiAgICAgIHNpdGVDb250ZXh0Um91dGVzSGFuZGxlci5pbml0KCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBzaXRlQ29udGV4dFBhcmFtc1Byb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcbiAgU2l0ZUNvbnRleHRQYXJhbXNTZXJ2aWNlLFxuICBTaXRlQ29udGV4dFVybFNlcmlhbGl6ZXIsXG4gIHsgcHJvdmlkZTogVXJsU2VyaWFsaXplciwgdXNlRXhpc3Rpbmc6IFNpdGVDb250ZXh0VXJsU2VyaWFsaXplciB9LFxuICB7XG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgIHVzZUZhY3Rvcnk6IGluaXRTaXRlQ29udGV4dFJvdXRlc0hhbmRsZXIsXG4gICAgZGVwczogW1NpdGVDb250ZXh0Um91dGVzSGFuZGxlciwgQ29uZmlnSW5pdGlhbGl6ZXJTZXJ2aWNlXSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbl07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMS4zLjE7IFRPRE86IHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlZEluaXRTaXRlQ29udGV4dFJvdXRlc0hhbmRsZXIoXG4gIHNpdGVDb250ZXh0Um91dGVzSGFuZGxlcjogU2l0ZUNvbnRleHRSb3V0ZXNIYW5kbGVyXG4pIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBzaXRlQ29udGV4dFJvdXRlc0hhbmRsZXIuaW5pdCgpO1xuICB9O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDEuMy4xOyBUT0RPOiByZW1vdmVcbiAqL1xuZXhwb3J0IGNvbnN0IGRlcHJlY2F0ZWRTaXRlQ29udGV4dFBhcmFtc1Byb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcbiAgU2l0ZUNvbnRleHRQYXJhbXNTZXJ2aWNlLFxuICBTaXRlQ29udGV4dFVybFNlcmlhbGl6ZXIsXG4gIHsgcHJvdmlkZTogVXJsU2VyaWFsaXplciwgdXNlRXhpc3Rpbmc6IFNpdGVDb250ZXh0VXJsU2VyaWFsaXplciB9LFxuICB7XG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgIHVzZUZhY3Rvcnk6IGRlcHJlY2F0ZWRJbml0U2l0ZUNvbnRleHRSb3V0ZXNIYW5kbGVyLFxuICAgIGRlcHM6IFtTaXRlQ29udGV4dFJvdXRlc0hhbmRsZXJdLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuXTtcbiJdfQ==