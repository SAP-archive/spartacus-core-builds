import { __values } from "tslib";
import { createSelector } from '@ngrx/store';
import { PageType } from '../../../model/cms.model';
import { StateEntityLoaderSelectors, StateLoaderSelectors, } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var getPageEntitiesSelector = function (state) { return state.pageData.entities; };
var ɵ0 = getPageEntitiesSelector;
var getIndexByType = function (index, type) {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
var ɵ1 = getIndexByType;
var getPageComponentTypesSelector = function (page) {
    var e_1, _a, e_2, _b;
    var componentTypes = new Set();
    if (page && page.slots) {
        try {
            for (var _c = __values(Object.keys(page.slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var slot = _d.value;
                try {
                    for (var _e = (e_2 = void 0, __values(page.slots[slot].components || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var component = _f.value;
                        componentTypes.add(component.flexType);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return Array.from(componentTypes);
};
var ɵ2 = getPageComponentTypesSelector;
var ɵ3 = function (state) { return state.page; };
export var getPageState = createSelector(getCmsState, ɵ3);
var ɵ4 = function (page) { return page.index; };
export var getPageStateIndex = createSelector(getPageState, ɵ4);
export var getPageStateIndexEntityLoaderState = function (pageContext) {
    return createSelector(getPageStateIndex, function (index) {
        return getIndexByType(index, pageContext.type);
    });
};
export var getPageStateIndexLoaderState = function (pageContext) {
    return createSelector(getPageStateIndexEntityLoaderState(pageContext), function (indexState) {
        return StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id);
    });
};
export var getPageStateIndexValue = function (pageContext) {
    return createSelector(getPageStateIndexLoaderState(pageContext), function (entity) {
        return StateLoaderSelectors.loaderValueSelector(entity);
    });
};
export var getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
export var getPageData = function (pageContext) {
    return createSelector(getPageEntities, getPageStateIndexValue(pageContext), function (entities, indexValue) {
        return entities[indexValue];
    });
};
export var getPageComponentTypes = function (pageContext) {
    return createSelector(getPageData(pageContext), function (pageData) {
        return getPageComponentTypesSelector(pageData);
    });
};
export var getCurrentSlotSelectorFactory = function (pageContext, position) {
    return createSelector(getPageData(pageContext), function (entity) {
        if (entity) {
            return entity.slots[position] || { components: [] };
        }
    });
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,