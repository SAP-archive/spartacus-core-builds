import { CartActions } from '../actions/index';
export const activeCartInitialState = '';
export const wishListInitialState = '';
export function activeCartReducer(state = activeCartInitialState, action) {
    var _a, _b, _c;
    switch (action.type) {
        case CartActions.LOAD_MULTI_CART_SUCCESS:
        case CartActions.CREATE_CART_SUCCESS:
        // point to `temp-${uuid}` cart when we are creating/merging cart
        case CartActions.CREATE_CART:
            if ((_c = (_b = (_a = action) === null || _a === void 0 ? void 0 : _a.payload) === null || _b === void 0 ? void 0 : _b.extraData) === null || _c === void 0 ? void 0 : _c.active) {
                return action.meta.entityId;
            }
            else {
                return state;
            }
        case CartActions.SET_ACTIVE_CART_ID:
            return action.payload;
        case CartActions.REMOVE_CART:
            if (action.payload === state) {
                return activeCartInitialState;
            }
            else {
                return state;
            }
        case CartActions.CLEAR_MULTI_CART_STATE:
            return activeCartInitialState;
    }
    return state;
}
export const cartEntitiesInitialState = undefined;
export function cartEntitiesReducer(state = cartEntitiesInitialState, action) {
    switch (action.type) {
        case CartActions.LOAD_MULTI_CART_SUCCESS:
        case CartActions.CREATE_CART_SUCCESS:
        case CartActions.CREATE_WISH_LIST_SUCCESS:
        case CartActions.LOAD_WISH_LIST_SUCCESS:
        case CartActions.SET_TEMP_CART:
            return action.payload.cart;
    }
    return state;
}
export function wishListReducer(state = wishListInitialState, action) {
    switch (action.type) {
        case CartActions.CREATE_WISH_LIST_SUCCESS:
        case CartActions.LOAD_WISH_LIST_SUCCESS:
            return action.meta.entityId;
        case CartActions.CLEAR_MULTI_CART_STATE:
            return wishListInitialState;
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NhcnQvc3RvcmUvcmVkdWNlcnMvbXVsdGktY2FydC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBRXZDLE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsS0FBSyxHQUFHLHNCQUFzQixFQUM5QixNQUE2RDs7SUFFN0QsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssV0FBVyxDQUFDLHVCQUF1QixDQUFDO1FBQ3pDLEtBQUssV0FBVyxDQUFDLG1CQUFtQixDQUFDO1FBQ3JDLGlFQUFpRTtRQUNqRSxLQUFLLFdBQVcsQ0FBQyxXQUFXO1lBQzFCLHNCQUFJLE1BQU0sMENBQUUsT0FBTywwQ0FBRSxTQUFTLDBDQUFFLE1BQU0sRUFBRTtnQkFDdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQWtCLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILEtBQUssV0FBVyxDQUFDLGtCQUFrQjtZQUNqQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDeEIsS0FBSyxXQUFXLENBQUMsV0FBVztZQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO2dCQUM1QixPQUFPLHNCQUFzQixDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxLQUFLLFdBQVcsQ0FBQyxzQkFBc0I7WUFDckMsT0FBTyxzQkFBc0IsQ0FBQztLQUNqQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLFNBQVMsQ0FBQztBQUVsRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQUssR0FBRyx3QkFBd0IsRUFDaEMsTUFBb0I7SUFFcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssV0FBVyxDQUFDLHVCQUF1QixDQUFDO1FBQ3pDLEtBQUssV0FBVyxDQUFDLG1CQUFtQixDQUFDO1FBQ3JDLEtBQUssV0FBVyxDQUFDLHdCQUF3QixDQUFDO1FBQzFDLEtBQUssV0FBVyxDQUFDLHNCQUFzQixDQUFDO1FBQ3hDLEtBQUssV0FBVyxDQUFDLGFBQWE7WUFDNUIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztLQUM5QjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzdCLEtBQUssR0FBRyxvQkFBb0IsRUFDNUIsTUFBcUU7SUFFckUsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssV0FBVyxDQUFDLHdCQUF3QixDQUFDO1FBQzFDLEtBQUssV0FBVyxDQUFDLHNCQUFzQjtZQUNyQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBa0IsQ0FBQztRQUN4QyxLQUFLLFdBQVcsQ0FBQyxzQkFBc0I7WUFDckMsT0FBTyxvQkFBb0IsQ0FBQztLQUMvQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7IExvYWRlckFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIuYWN0aW9uJztcbmltcG9ydCB7IENhcnRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5cbmV4cG9ydCBjb25zdCBhY3RpdmVDYXJ0SW5pdGlhbFN0YXRlID0gJyc7XG5leHBvcnQgY29uc3Qgd2lzaExpc3RJbml0aWFsU3RhdGUgPSAnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2ZUNhcnRSZWR1Y2VyKFxuICBzdGF0ZSA9IGFjdGl2ZUNhcnRJbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQ2FydEFjdGlvbnMuQ2FydEFjdGlvbiB8IENhcnRBY3Rpb25zLk11bHRpQ2FydEFjdGlvbnNcbik6IHN0cmluZyB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIENhcnRBY3Rpb25zLkxPQURfTVVMVElfQ0FSVF9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ1JFQVRFX0NBUlRfU1VDQ0VTUzpcbiAgICAvLyBwb2ludCB0byBgdGVtcC0ke3V1aWR9YCBjYXJ0IHdoZW4gd2UgYXJlIGNyZWF0aW5nL21lcmdpbmcgY2FydFxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ1JFQVRFX0NBUlQ6XG4gICAgICBpZiAoYWN0aW9uPy5wYXlsb2FkPy5leHRyYURhdGE/LmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLm1ldGEuZW50aXR5SWQgYXMgc3RyaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgIGNhc2UgQ2FydEFjdGlvbnMuU0VUX0FDVElWRV9DQVJUX0lEOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuUkVNT1ZFX0NBUlQ6XG4gICAgICBpZiAoYWN0aW9uLnBheWxvYWQgPT09IHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVDYXJ0SW5pdGlhbFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ0xFQVJfTVVMVElfQ0FSVF9TVEFURTpcbiAgICAgIHJldHVybiBhY3RpdmVDYXJ0SW5pdGlhbFN0YXRlO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZXhwb3J0IGNvbnN0IGNhcnRFbnRpdGllc0luaXRpYWxTdGF0ZSA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRFbnRpdGllc1JlZHVjZXIoXG4gIHN0YXRlID0gY2FydEVudGl0aWVzSW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IExvYWRlckFjdGlvblxuKTogQ2FydCB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIENhcnRBY3Rpb25zLkxPQURfTVVMVElfQ0FSVF9TVUNDRVNTOlxuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ1JFQVRFX0NBUlRfU1VDQ0VTUzpcbiAgICBjYXNlIENhcnRBY3Rpb25zLkNSRUFURV9XSVNIX0xJU1RfU1VDQ0VTUzpcbiAgICBjYXNlIENhcnRBY3Rpb25zLkxPQURfV0lTSF9MSVNUX1NVQ0NFU1M6XG4gICAgY2FzZSBDYXJ0QWN0aW9ucy5TRVRfVEVNUF9DQVJUOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkLmNhcnQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2lzaExpc3RSZWR1Y2VyKFxuICBzdGF0ZSA9IHdpc2hMaXN0SW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IENhcnRBY3Rpb25zLldpc2hMaXN0QWN0aW9ucyB8IENhcnRBY3Rpb25zLkNsZWFyTXVsdGlDYXJ0U3RhdGVcbik6IHN0cmluZyB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIENhcnRBY3Rpb25zLkNSRUFURV9XSVNIX0xJU1RfU1VDQ0VTUzpcbiAgICBjYXNlIENhcnRBY3Rpb25zLkxPQURfV0lTSF9MSVNUX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gYWN0aW9uLm1ldGEuZW50aXR5SWQgYXMgc3RyaW5nO1xuICAgIGNhc2UgQ2FydEFjdGlvbnMuQ0xFQVJfTVVMVElfQ0FSVF9TVEFURTpcbiAgICAgIHJldHVybiB3aXNoTGlzdEluaXRpYWxTdGF0ZTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG4iXX0=