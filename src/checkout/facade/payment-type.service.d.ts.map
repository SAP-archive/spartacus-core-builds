{"version":3,"file":"payment-type.service.d.ts","sources":["payment-type.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PaymentType } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithCheckout } from '../store/checkout-state';\nexport declare class PaymentTypeService {\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>;\n    protected activeCartService: ActiveCartService;\n    protected userIdService: UserIdService;\n    constructor(checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>, activeCartService: ActiveCartService, userIdService: UserIdService);\n    /**\n     * Get payment types\n     */\n    getPaymentTypes(): Observable<PaymentType[]>;\n    /**\n     * Load the supported payment types\n     */\n    loadPaymentTypes(): void;\n    /**\n     * Set payment type to cart\n     * @param typeCode\n     * @param poNumber : purchase order number\n     */\n    setPaymentType(typeCode: string, poNumber?: string): void;\n    /**\n     * Get the selected payment type\n     */\n    getSelectedPaymentType(): Observable<string>;\n    /**\n     * Get whether the selected payment type is \"ACCOUNT\" payment\n     */\n    isAccountPayment(): Observable<boolean>;\n    /**\n     * Get PO Number\n     */\n    getPoNumber(): Observable<string>;\n}\n"]}