import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { OccConfig } from '../../occ/config/occ-config';
import { Config } from '../../config/config-tokens';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config-tokens";
export var JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export var CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
var CmsConfig = /** @class */ (function (_super) {
    __extends(CmsConfig, _super);
    function CmsConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CmsConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsConfig, providedIn: "root" });
    CmsConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], CmsConfig);
    return CmsConfig;
}(OccConfig));
export { CmsConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jbXMvY29uZmlnL2Ntcy1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBSTNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQStCcEQsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQUcscUJBQXFCLENBQUM7QUFDcEUsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsa0JBQWtCLENBQUM7QUFrQjFELGdFQUFnRTtBQUNoRSxNQUFNLENBQU4sSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLGtGQUFrRjtJQUNsRixrREFBMEIsQ0FBQTtJQUMxQiwyRUFBMkU7SUFDM0UsbURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUxXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFLL0I7QUEyQkQ7SUFBd0MsNkJBQVM7SUFBakQ7O0tBVUM7O0lBVnFCLFNBQVM7UUFKOUIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07WUFDbEIsV0FBVyxFQUFFLE1BQU07U0FDcEIsQ0FBQztPQUNvQixTQUFTLENBVTlCO29CQWxHRDtDQWtHQyxBQVZELENBQXdDLFNBQVMsR0FVaEQ7U0FWcUIsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQXV0aENvbmZpZyB9IGZyb20gJy4uLy4uL2F1dGgvY29uZmlnL2F1dGgtY29uZmlnJztcbmltcG9ydCB7IEt5bWFDb25maWcgfSBmcm9tICcuLi8uLi9reW1hL2NvbmZpZy9reW1hLWNvbmZpZyc7XG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuLi8uLi9vY2MvY29uZmlnL29jYy1jb25maWcnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy10b2tlbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YW5kYXJkQ21zQ29tcG9uZW50Q29uZmlnIHtcbiAgQ01TU2l0ZUNvbnRleHRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDTVNMaW5rQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgU2ltcGxlUmVzcG9uc2l2ZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNpbXBsZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENNU1BhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEJyZWFkY3J1bWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBOYXZpZ2F0aW9uQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgRm9vdGVyTmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENhdGVnb3J5TmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RBZGRUb0NhcnRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBNaW5pQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RDYXJvdXNlbENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNlYXJjaEJveENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RSZWZlcmVuY2VzQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ01TVGFiUGFyYWdyYXBoQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTG9naW5Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzcEluY2x1ZGVDbXNDb21wb25lbnRDb25maWcge1xuICBBY2NvdW50QWRkcmVzc0Jvb2tDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBGb3Jnb3RQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFJlc2V0UGFzc3dvcmRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0RGV0YWlsc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RTcGVjc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3RSZXZpZXdzVGFiQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbn1cblxuZXhwb3J0IGNvbnN0IEpTUF9JTkNMVURFX0NNU19DT01QT05FTlRfVFlQRSA9ICdKc3BJbmNsdWRlQ29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBDTVNfRkxFWF9DT01QT05FTlRfVFlQRSA9ICdDTVNGbGV4Q29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBDbXNDb21wb25lbnRNYXBwaW5nIHtcbiAgY29tcG9uZW50PzogYW55O1xuICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xuICBjaGlsZFJvdXRlcz86IFJvdXRlcztcbiAgZGlzYWJsZVNTUj86IGJvb2xlYW47XG4gIGkxOG5LZXlzPzogc3RyaW5nW107XG4gIGd1YXJkcz86IGFueVtdO1xuXG4gIC8qKlxuICAgKiBEZWZlckxvYWRpbmcgY2FuIGJlIHNwZWNpZmllZCBnbG9iYWxseSwgYnV0IGFsc28gcGVyIGNvbXBvbmVudC5cbiAgICogU29tZSBjb21wb25lbnRzIHJlcXVpcmUgZGlyZWN0IGxvYWRpbmcgd2hpbGUgaXQncyBub3QgaW5pdGlhbGx5XG4gICAqIGluIHRoZSB2aWV3cG9ydC5cbiAgICovXG4gIGRlZmVyTG9hZGluZz86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xufVxuXG4vKiogU3RyYXRlZ3kgdG8gY29udHJvbCB0aGUgbG9hZGluZyBzdHJhdGVneSBvZiBET00gZWxlbWVudHMuICovXG5leHBvcnQgZW51bSBEZWZlckxvYWRpbmdTdHJhdGVneSB7XG4gIC8qKiBEZWZlcnMgbG9hZGluZyBvZiBET00gZWxlbWVudHMgdW50aWwgZWxlbWVudCBpcyBuZWFyL2luIHRoZSB1c2VycyB2aWV3IHBvcnQgKi9cbiAgREVGRVIgPSAnREVGRVJSRUQtTE9BRElORycsXG4gIC8qKiBSZW5kZXJzIHRoZSBET00gaW5zdGFudGx5IHdpdGhvdXQgYmVpbmcgY29uY2VybmVkIHdpdGggdGhlIHZpZXcgcG9ydCAqL1xuICBJTlNUQU5UID0gJ0lOU1RBTlQtTE9BRElORycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ01TQ29tcG9uZW50Q29uZmlnXG4gIGV4dGVuZHMgU3RhbmRhcmRDbXNDb21wb25lbnRDb25maWcsXG4gICAgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XG4gIFtjb21wb25lbnRUeXBlOiBzdHJpbmddOiBDbXNDb21wb25lbnRNYXBwaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVNb2R1bGVDb25maWcge1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBmZWF0dXJlIG1vZHVsZVxuICAgKi9cbiAgbW9kdWxlPzogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBkZXBlbmRlbmN5IG1vZHVsZXNcbiAgICovXG4gIGRlcGVuZGVuY2llcz86ICgoKSA9PiBQcm9taXNlPGFueT4pW107XG4gIC8qKlxuICAgKiBDbXMgY29tcG9uZW50cyBjb3ZlcmVkIGJ5IHRoaXMgZmVhdHVyZVxuICAgKi9cbiAgY21zQ29tcG9uZW50cz86IHN0cmluZ1tdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ21zQ29uZmlnIGV4dGVuZHMgT2NjQ29uZmlnXG4gIGltcGxlbWVudHMgQXV0aENvbmZpZywgS3ltYUNvbmZpZyB7XG4gIGF1dGhlbnRpY2F0aW9uPzoge1xuICAgIGNsaWVudF9pZD86IHN0cmluZztcbiAgICBjbGllbnRfc2VjcmV0Pzogc3RyaW5nO1xuICAgIGt5bWFfY2xpZW50X2lkPzogc3RyaW5nO1xuICAgIGt5bWFfY2xpZW50X3NlY3JldD86IHN0cmluZztcbiAgfTtcbiAgZmVhdHVyZU1vZHVsZXM/OiB7IFtmZWF0dXJlTmFtZTogc3RyaW5nXTogRmVhdHVyZU1vZHVsZUNvbmZpZyB9O1xuICBjbXNDb21wb25lbnRzPzogQ01TQ29tcG9uZW50Q29uZmlnO1xufVxuIl19