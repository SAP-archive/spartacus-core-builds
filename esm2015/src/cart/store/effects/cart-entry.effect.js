import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { from } from 'rxjs';
import { catchError, concatMap, map } from 'rxjs/operators';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { withdrawOn } from '../../../util/withdraw-on';
import { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';
import * as DeprecatedCartActions from '../actions/cart.action';
import { CartActions } from '../actions/index';
let CartEntryEffects = class CartEntryEffects {
    constructor(actions$, cartEntryConnector) {
        this.actions$ = actions$;
        this.cartEntryConnector = cartEntryConnector;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.addEntry$ = this.actions$.pipe(ofType(CartActions.CART_ADD_ENTRY), map((action) => action.payload), concatMap((payload) => {
            return this.cartEntryConnector
                .add(payload.userId, payload.cartId, payload.productCode, payload.quantity)
                .pipe(map((entry) => new CartActions.CartAddEntrySuccess(Object.assign(Object.assign({}, entry), { userId: payload.userId, cartId: payload.cartId }))), catchError((error) => from([
                new CartActions.CartAddEntryFail({
                    error: makeErrorSerializable(error),
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
                new DeprecatedCartActions.LoadCart({
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
            ])));
        }), withdrawOn(this.contextChange$));
        this.removeEntry$ = this.actions$.pipe(ofType(CartActions.CART_REMOVE_ENTRY), map((action) => action.payload), concatMap((payload) => this.cartEntryConnector
            .remove(payload.userId, payload.cartId, payload.entry)
            .pipe(map(() => {
            return new CartActions.CartRemoveEntrySuccess({
                userId: payload.userId,
                cartId: payload.cartId,
            });
        }), catchError((error) => from([
            new CartActions.CartRemoveEntryFail({
                error: makeErrorSerializable(error),
                cartId: payload.cartId,
                userId: payload.userId,
            }),
            new DeprecatedCartActions.LoadCart({
                cartId: payload.cartId,
                userId: payload.userId,
            }),
        ])))), withdrawOn(this.contextChange$));
        this.updateEntry$ = this.actions$.pipe(ofType(CartActions.CART_UPDATE_ENTRY), map((action) => action.payload), concatMap((payload) => this.cartEntryConnector
            .update(payload.userId, payload.cartId, payload.entry, payload.qty)
            .pipe(map(() => {
            return new CartActions.CartUpdateEntrySuccess({
                userId: payload.userId,
                cartId: payload.cartId,
            });
        }), catchError((error) => from([
            new CartActions.CartUpdateEntryFail({
                error: makeErrorSerializable(error),
                cartId: payload.cartId,
                userId: payload.userId,
            }),
            new DeprecatedCartActions.LoadCart({
                cartId: payload.cartId,
                userId: payload.userId,
            }),
        ])))), withdrawOn(this.contextChange$));
    }
};
CartEntryEffects.ctorParameters = () => [
    { type: Actions },
    { type: CartEntryConnector }
];
__decorate([
    Effect()
], CartEntryEffects.prototype, "addEntry$", void 0);
__decorate([
    Effect()
], CartEntryEffects.prototype, "removeEntry$", void 0);
__decorate([
    Effect()
], CartEntryEffects.prototype, "updateEntry$", void 0);
CartEntryEffects = __decorate([
    Injectable()
], CartEntryEffects);
export { CartEntryEffects };
//# sourceMappingURL=data:application/json;base64,