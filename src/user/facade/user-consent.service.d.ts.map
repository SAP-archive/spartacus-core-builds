{"version":3,"file":"user-consent.service.d.ts","sources":["user-consent.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserConsentService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected authService: AuthService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\n    /**\n     * Retrieves all consents.\n     */\n    loadConsents(): void;\n    /**\n     * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n     * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n     */\n    getConsents(loadIfMissing?: boolean): Observable<ConsentTemplate[]>;\n    /**\n     * Returns the consents loading flag\n     */\n    getConsentsResultLoading(): Observable<boolean>;\n    /**\n     * Returns the consents success flag\n     */\n    getConsentsResultSuccess(): Observable<boolean>;\n    /**\n     * Returns the consents error flag\n     */\n    getConsentsResultError(): Observable<boolean>;\n    /**\n     * Resets the processing state for consent retrieval\n     */\n    resetConsentsProcessState(): void;\n    /**\n     * Returns the registered consent for the given template ID.\n     *\n     * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n     *\n     * @param templateId a template ID by which to filter the registered templates.\n     */\n    getConsent(templateId: string): Observable<Consent>;\n    /**\n     * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n     * Otherwise, `false` is returned.\n     *\n     * @param consent to check\n     */\n    isConsentGiven(consent: Consent): boolean;\n    /**\n     * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n     * Otherwise, `false` is returned.\n     *\n     * @param consent to check\n     */\n    isConsentWithdrawn(consent: Consent): boolean;\n    /**\n     * Give consent for specified consent template ID and version.\n     * @param consentTemplateId a template ID for which to give a consent\n     * @param consentTemplateVersion a template version for which to give a consent\n     */\n    giveConsent(consentTemplateId: string, consentTemplateVersion: number): void;\n    /**\n     * Returns the give consent process loading flag\n     */\n    getGiveConsentResultLoading(): Observable<boolean>;\n    /**\n     * Returns the give consent process success flag\n     */\n    getGiveConsentResultSuccess(): Observable<boolean>;\n    /**\n     * Returns the give consent process error flag\n     */\n    getGiveConsentResultError(): Observable<boolean>;\n    /**\n     * Resents the give consent process flags\n     */\n    resetGiveConsentProcessState(): void;\n    /**\n     * Withdraw consent for the given `consentCode`\n     * @param consentCode for which to withdraw the consent\n     */\n    withdrawConsent(consentCode: string): void;\n    /**\n     * Returns the withdraw consent process loading flag\n     */\n    getWithdrawConsentResultLoading(): Observable<boolean>;\n    /**\n     * Returns the withdraw consent process success flag\n     */\n    getWithdrawConsentResultSuccess(): Observable<boolean>;\n    /**\n     * Returns the withdraw consent process error flag\n     */\n    getWithdrawConsentResultError(): Observable<boolean>;\n    /**\n     * Resets the process flags for withdraw consent\n     */\n    resetWithdrawConsentProcessState(): void;\n    /**\n     * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n     * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n     *\n     * @param templateList a list of consent templates to filter\n     * @param hideTemplateIds template IDs to hide\n     */\n    filterConsentTemplates(templateList: ConsentTemplate[], hideTemplateIds?: string[]): ConsentTemplate[];\n}\n"]}