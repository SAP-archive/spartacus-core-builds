import { InjectionToken, Optional, PLATFORM_ID } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { META_REDUCERS } from '@ngrx/store';
import { AuthStatePersistenceService } from '../../auth/user-auth/services/auth-state-persistence.service';
import { Config } from '../../config/config-tokens';
import { WindowRef } from '../../window/window-ref';
import { getStorageSyncReducer } from './storage-sync.reducer';
import { getTransferStateReducer } from './transfer-state.reducer';
export { getStateSlice } from '../utils/get-state-slice';
export { getStorageSyncReducer } from './storage-sync.reducer';
export * from './transfer-state.reducer';
export const TRANSFER_STATE_META_REDUCER = new InjectionToken('TransferStateMetaReducer');
export const STORAGE_SYNC_META_REDUCER = new InjectionToken('StorageSyncMetaReducer');
const ɵ0 = getTransferStateReducer, ɵ1 = getStorageSyncReducer;
export const stateMetaReducers = [
    {
        provide: TRANSFER_STATE_META_REDUCER,
        useFactory: ɵ0,
        deps: [
            PLATFORM_ID,
            [new Optional(), TransferState],
            [new Optional(), Config],
            [new Optional(), AuthStatePersistenceService],
        ],
    },
    {
        provide: STORAGE_SYNC_META_REDUCER,
        useFactory: ɵ1,
        deps: [WindowRef, [new Optional(), Config]],
    },
    {
        provide: META_REDUCERS,
        useExisting: TRANSFER_STATE_META_REDUCER,
        multi: true,
    },
    {
        provide: META_REDUCERS,
        useExisting: STORAGE_SYNC_META_REDUCER,
        multi: true,
    },
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9zdGF0ZS9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sOERBQThELENBQUM7QUFDM0csT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsY0FBYywwQkFBMEIsQ0FBQztBQUV6QyxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FDM0QsMEJBQTBCLENBQzNCLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FDekQsd0JBQXdCLENBQ3pCLENBQUM7V0FLYyx1QkFBdUIsT0FVdkIscUJBQXFCO0FBYnJDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFlO0lBQzNDO1FBQ0UsT0FBTyxFQUFFLDJCQUEyQjtRQUNwQyxVQUFVLElBQXlCO1FBQ25DLElBQUksRUFBRTtZQUNKLFdBQVc7WUFDWCxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsYUFBYSxDQUFDO1lBQy9CLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUM7WUFDeEIsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDJCQUEyQixDQUFDO1NBQzlDO0tBQ0Y7SUFDRDtRQUNFLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsVUFBVSxJQUF1QjtRQUNqQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzVDO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsYUFBYTtRQUN0QixXQUFXLEVBQUUsMkJBQTJCO1FBQ3hDLEtBQUssRUFBRSxJQUFJO0tBQ1o7SUFDRDtRQUNFLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLFdBQVcsRUFBRSx5QkFBeUI7UUFDdEMsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIFBMQVRGT1JNX0lELCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTUVUQV9SRURVQ0VSUyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEF1dGhTdGF0ZVBlcnNpc3RlbmNlU2VydmljZSB9IGZyb20gJy4uLy4uL2F1dGgvdXNlci1hdXRoL3NlcnZpY2VzL2F1dGgtc3RhdGUtcGVyc2lzdGVuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLXRva2Vucyc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuLi8uLi93aW5kb3cvd2luZG93LXJlZic7XG5pbXBvcnQgeyBnZXRTdG9yYWdlU3luY1JlZHVjZXIgfSBmcm9tICcuL3N0b3JhZ2Utc3luYy5yZWR1Y2VyJztcbmltcG9ydCB7IGdldFRyYW5zZmVyU3RhdGVSZWR1Y2VyIH0gZnJvbSAnLi90cmFuc2Zlci1zdGF0ZS5yZWR1Y2VyJztcblxuZXhwb3J0IHsgZ2V0U3RhdGVTbGljZSB9IGZyb20gJy4uL3V0aWxzL2dldC1zdGF0ZS1zbGljZSc7XG5leHBvcnQgeyBnZXRTdG9yYWdlU3luY1JlZHVjZXIgfSBmcm9tICcuL3N0b3JhZ2Utc3luYy5yZWR1Y2VyJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNmZXItc3RhdGUucmVkdWNlcic7XG5cbmV4cG9ydCBjb25zdCBUUkFOU0ZFUl9TVEFURV9NRVRBX1JFRFVDRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdUcmFuc2ZlclN0YXRlTWV0YVJlZHVjZXInXG4pO1xuZXhwb3J0IGNvbnN0IFNUT1JBR0VfU1lOQ19NRVRBX1JFRFVDRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdTdG9yYWdlU3luY01ldGFSZWR1Y2VyJ1xuKTtcblxuZXhwb3J0IGNvbnN0IHN0YXRlTWV0YVJlZHVjZXJzOiBQcm92aWRlcltdID0gW1xuICB7XG4gICAgcHJvdmlkZTogVFJBTlNGRVJfU1RBVEVfTUVUQV9SRURVQ0VSLFxuICAgIHVzZUZhY3Rvcnk6IGdldFRyYW5zZmVyU3RhdGVSZWR1Y2VyLFxuICAgIGRlcHM6IFtcbiAgICAgIFBMQVRGT1JNX0lELFxuICAgICAgW25ldyBPcHRpb25hbCgpLCBUcmFuc2ZlclN0YXRlXSxcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgQ29uZmlnXSxcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgQXV0aFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlXSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogU1RPUkFHRV9TWU5DX01FVEFfUkVEVUNFUixcbiAgICB1c2VGYWN0b3J5OiBnZXRTdG9yYWdlU3luY1JlZHVjZXIsXG4gICAgZGVwczogW1dpbmRvd1JlZiwgW25ldyBPcHRpb25hbCgpLCBDb25maWddXSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IE1FVEFfUkVEVUNFUlMsXG4gICAgdXNlRXhpc3Rpbmc6IFRSQU5TRkVSX1NUQVRFX01FVEFfUkVEVUNFUixcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IE1FVEFfUkVEVUNFUlMsXG4gICAgdXNlRXhpc3Rpbmc6IFNUT1JBR0VfU1lOQ19NRVRBX1JFRFVDRVIsXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG5dO1xuIl19