import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import { UserIdService } from '../../auth/user-auth/facade/user-id.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { UserService } from '../../user/facade/user.service';
import { CartActions } from '../store/actions/index';
import { MultiCartSelectors } from '../store/selectors/index';
import { getWishlistName } from '../utils/utils';
import { MultiCartService } from './multi-cart.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../user/facade/user.service";
import * as i3 from "./multi-cart.service";
import * as i4 from "../../auth/user-auth/facade/user-id.service";
export class WishListService {
    constructor(store, userService, multiCartService, userIdService) {
        this.store = store;
        this.userService = userService;
        this.multiCartService = multiCartService;
        this.userIdService = userIdService;
    }
    createWishList(userId, name, description) {
        this.store.dispatch(new CartActions.CreateWishList({ userId, name, description }));
    }
    getWishList() {
        return combineLatest([
            this.getWishListId(),
            this.userService.get(),
            this.userIdService.getUserId(),
        ]).pipe(distinctUntilChanged(), tap(([wishListId, user, userId]) => {
            if (!Boolean(wishListId) &&
                userId !== OCC_USER_ID_ANONYMOUS &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), switchMap(([wishListId]) => this.multiCartService.getCart(wishListId)));
    }
    loadWishList(userId, customerId) {
        this.store.dispatch(new CartActions.LoadWishList({
            userId,
            customerId,
            tempCartId: getWishlistName(customerId),
        }));
    }
    addEntry(productCode) {
        this.getWishListId()
            .pipe(distinctUntilChanged(), withLatestFrom(this.userIdService.getUserId(), this.userService.get()), tap(([wishListId, userId, user]) => {
            if (!Boolean(wishListId) &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), take(1))
            .subscribe(([wishListId, userId]) => this.multiCartService.addEntry(userId, wishListId, productCode, 1));
    }
    removeEntry(entry) {
        this.getWishListId()
            .pipe(distinctUntilChanged(), withLatestFrom(this.userIdService.getUserId(), this.userService.get()), tap(([wishListId, userId, user]) => {
            if (!Boolean(wishListId) &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), take(1))
            .subscribe(([wishListId, userId]) => this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber));
    }
    getWishListLoading() {
        return this.getWishListId().pipe(switchMap((wishListId) => this.multiCartService
            .isStable(wishListId)
            .pipe(map((stable) => !stable))));
    }
    getWishListId() {
        return this.store.pipe(select(MultiCartSelectors.getWishListId));
    }
}
WishListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WishListService_Factory() { return new WishListService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.MultiCartService), i0.ɵɵinject(i4.UserIdService)); }, token: WishListService, providedIn: "root" });
WishListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
WishListService.ctorParameters = () => [
    { type: Store },
    { type: UserService },
    { type: MultiCartService },
    { type: UserIdService }
];
//# sourceMappingURL=data:application/json;base64,