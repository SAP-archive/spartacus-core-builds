{"version":3,"file":"multi-cart.service.d.ts","sources":["multi-cart.service.d.ts"],"names":[],"mappingssourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nexport declare class MultiCartService {\n    protected store: Store<StateWithMultiCart>;\n    protected userIdService: UserIdService;\n    constructor(store: Store<StateWithMultiCart>, userIdService: UserIdService);\n    /**\n     * Returns cart from store as an observable\n     *\n     * @param cartId\n     */\n    getCart(cartId: string): Observable<Cart>;\n    /**\n     * Returns cart entity from store (cart with loading, error, success flags) as an observable\n     *\n     * @param cartId\n     */\n    getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>>;\n    /**\n     * Returns true when there are no operations on that in progress and it is not currently loading\n     *\n     * @param cartId\n     */\n    isStable(cartId: string): Observable<boolean>;\n    /**\n     * Simple random temp cart id generator\n     */\n    private generateTempCartId;\n    /**\n     * Create or merge cart\n     *\n     * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n     */\n    createCart({ userId, oldCartId, toMergeCartGuid, extraData, }: {\n        userId: string;\n        oldCartId?: string;\n        toMergeCartGuid?: string;\n        extraData?: {\n            active?: boolean;\n        };\n    }): Observable<ProcessesLoaderState<Cart>>;\n    /**\n     * Merge provided cart to current user cart\n     *\n     * @param params Object with userId, cartId and extraData\n     */\n    mergeToCurrentCart({ userId, cartId, extraData, }: {\n        userId: string;\n        cartId: string;\n        extraData?: {\n            active?: boolean;\n        };\n    }): void;\n    /**\n     * Load cart\n     *\n     * @param params Object with userId, cartId and extraData\n     */\n    loadCart({ cartId, userId, extraData, }: {\n        cartId: string;\n        userId: string;\n        extraData?: any;\n    }): void;\n    /**\n     * Get cart entries as an observable\n     * @param cartId\n     */\n    getEntries(cartId: string): Observable<OrderEntry[]>;\n    /**\n     * Get last entry for specific product code from cart.\n     * Needed to cover processes where multiple entries can share the same product code\n     * (e.g. promotions or configurable products)\n     *\n     * @param cartId\n     * @param productCode\n     */\n    getLastEntry(cartId: string, productCode: string): Observable<OrderEntry | null>;\n    /**\n     * Add entry to cart\n     *\n     * @param userId\n     * @param cartId\n     * @param productCode\n     * @param quantity\n     */\n    addEntry(userId: string, cartId: string, productCode: string, quantity: number): void;\n    /**\n     * Add multiple entries to cart\n     *\n     * @param userId\n     * @param cartId\n     * @param products Array with items (productCode and quantity)\n     */\n    addEntries(userId: string, cartId: string, products: Array<{\n        productCode: string;\n        quantity: number;\n    }>): void;\n    /**\n     * Remove entry from cart\n     *\n     * @param userId\n     * @param cartId\n     * @param entryNumber\n     */\n    removeEntry(userId: string, cartId: string, entryNumber: number): void;\n    /**\n     * Update entry in cart. For quantity = 0 it removes entry\n     *\n     * @param userId\n     * @param cartId\n     * @param entryNumber\n     * @param quantity\n     */\n    updateEntry(userId: string, cartId: string, entryNumber: number, quantity: number): void;\n    /**\n     * Get first entry from cart matching the specified product code\n     *\n     * @param cartId\n     * @param productCode\n     */\n    getEntry(cartId: string, productCode: string): Observable<OrderEntry | null>;\n    /**\n     * Assign email to the cart\n     *\n     * @param cartId\n     * @param userId\n     * @param email\n     */\n    assignEmail(cartId: string, userId: string, email: string): void;\n    /**\n     * Delete cart\n     *\n     * @param cartId\n     * @param userId\n     */\n    deleteCart(cartId: string, userId: string): void;\n    /**\n     * Reloads the cart with specified id.\n     *\n     * @param cartId\n     * @param extraData\n     */\n    reloadCart(cartId: string, extraData?: {\n        active: boolean;\n    }): void;\n}\n"]}