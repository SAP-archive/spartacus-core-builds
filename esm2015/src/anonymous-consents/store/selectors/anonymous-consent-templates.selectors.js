import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getAnonymousConsentState } from './feature.selector';
const ɵ0 = (state) => state.templates;
export const getAnonymousConsentTemplatesState = createSelector(getAnonymousConsentState, ɵ0);
export const getAnonymousConsentTemplatesValue = createSelector(getAnonymousConsentTemplatesState, StateUtils.loaderValueSelector);
export const getAnonymousConsentTemplatesLoading = createSelector(getAnonymousConsentTemplatesState, StateUtils.loaderLoadingSelector);
export const getAnonymousConsentTemplatesSuccess = createSelector(getAnonymousConsentTemplatesState, StateUtils.loaderSuccessSelector);
export const getAnonymousConsentTemplatesError = createSelector(getAnonymousConsentTemplatesState, StateUtils.loaderErrorSelector);
export const getAnonymousConsentTemplate = (templateCode) => {
    return createSelector(getAnonymousConsentTemplatesValue, (templates) => {
        return templates
            ? templates.find((template) => template.id === templateCode)
            : null;
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtdGVtcGxhdGVzLnNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvc2VsZWN0b3JzL2Fub255bW91cy1jb25zZW50LXRlbXBsYXRlcy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1dBS2pCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUztBQUh2RSxNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FHMUMsY0FBYyxDQUFDLHdCQUF3QixLQUE2QixDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUcxQyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxVQUFVLENBQUMsbUJBQW1CLENBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FHNUMsY0FBYyxDQUNoQixpQ0FBaUMsRUFDakMsVUFBVSxDQUFDLHFCQUFxQixDQUNqQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUNBQW1DLEdBRzVDLGNBQWMsQ0FDaEIsaUNBQWlDLEVBQ2pDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FDakMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUcxQyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxVQUFVLENBQUMsbUJBQW1CLENBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxZQUFvQixFQUMyQyxFQUFFO0lBQ2pFLE9BQU8sY0FBYyxDQUFDLGlDQUFpQyxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUU7UUFDckUsT0FBTyxTQUFTO1lBQ2QsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDO1lBQzVELENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ29uc2VudFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7IFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcbmltcG9ydCB7IGdldEFub255bW91c0NvbnNlbnRTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBMb2FkZXJTdGF0ZTxDb25zZW50VGVtcGxhdGVbXT5cbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRBbm9ueW1vdXNDb25zZW50U3RhdGUsIChzdGF0ZSkgPT4gc3RhdGUudGVtcGxhdGVzKTtcblxuZXhwb3J0IGNvbnN0IGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNWYWx1ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIENvbnNlbnRUZW1wbGF0ZVtdXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc0xvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2VzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZVV0aWxzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNFcnJvcjogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZVV0aWxzLmxvYWRlckVycm9yU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGUgPSAoXG4gIHRlbXBsYXRlQ29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLCBDb25zZW50VGVtcGxhdGU+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNWYWx1ZSwgKHRlbXBsYXRlcykgPT4ge1xuICAgIHJldHVybiB0ZW1wbGF0ZXNcbiAgICAgID8gdGVtcGxhdGVzLmZpbmQoKHRlbXBsYXRlKSA9PiB0ZW1wbGF0ZS5pZCA9PT0gdGVtcGxhdGVDb2RlKVxuICAgICAgOiBudWxsO1xuICB9KTtcbn07XG4iXX0=