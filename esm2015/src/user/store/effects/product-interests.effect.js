import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, Actions, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { UserActions } from '../actions/index';
import { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';
import { makeErrorSerializable } from '../../../util/serialization-utils';
export class ProductInterestsEffect {
    constructor(actions$, userInterestsConnector) {
        this.actions$ = actions$;
        this.userInterestsConnector = userInterestsConnector;
        this.loadProductInteres$ = this.actions$.pipe(ofType(UserActions.LOAD_PRODUCT_INTERESTS), map((action) => action.payload), switchMap((payload) => {
            return this.userInterestsConnector
                .getInterests(payload.userId, payload.pageSize, payload.currentPage, payload.sort, payload.productCode, payload.notificationType)
                .pipe(map((interests) => {
                return new UserActions.LoadProductInterestsSuccess(interests);
            }), catchError((error) => of(new UserActions.LoadProductInterestsFail(makeErrorSerializable(error)))));
        }));
        this.removeProductInterest$ = this.actions$.pipe(ofType(UserActions.REMOVE_PRODUCT_INTEREST), map((action) => action.payload), switchMap((payload) => this.userInterestsConnector
            .removeInterest(payload.userId, payload.item)
            .pipe(switchMap((data) => [
            new UserActions.LoadProductInterests(payload.singleDelete
                ? {
                    userId: payload.userId,
                    productCode: payload.item.product.code,
                    notificationType: payload.item.productInterestEntry[0].interestType,
                }
                : { userId: payload.userId }),
            new UserActions.RemoveProductInterestSuccess(data),
        ]), catchError((error) => of(new UserActions.RemoveProductInterestFail(makeErrorSerializable(error)))))));
        this.addProductInterest$ = this.actions$.pipe(ofType(UserActions.ADD_PRODUCT_INTEREST), map((action) => action.payload), switchMap((payload) => this.userInterestsConnector
            .addInterest(payload.userId, payload.productCode, payload.notificationType)
            .pipe(switchMap((res) => [
            new UserActions.LoadProductInterests({
                userId: payload.userId,
                productCode: payload.productCode,
                notificationType: payload.notificationType,
            }),
            new UserActions.AddProductInterestSuccess(res),
        ]), catchError((error) => of(new UserActions.AddProductInterestFail(makeErrorSerializable(error)))))));
    }
}
ProductInterestsEffect.decorators = [
    { type: Injectable }
];
ProductInterestsEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserInterestsConnector }
];
__decorate([
    Effect()
], ProductInterestsEffect.prototype, "loadProductInteres$", void 0);
__decorate([
    Effect()
], ProductInterestsEffect.prototype, "removeProductInterest$", void 0);
__decorate([
    Effect()
], ProductInterestsEffect.prototype, "addProductInterest$", void 0);
//# sourceMappingURL=data:application/json;base64,