/**
 * Will grab last synchronously available value from the observable stream
 * at the time of the call.
 *
 * Should be used with caution, as it's not a legitimate way for getting value
 * from the observable. Observable composition or standard subscribe method
 * should be used for most of the cases.
 *
 * @param source
 */
export function getLastValueSync(source) {
    let value;
    source.subscribe((emission) => (value = emission)).unsubscribe();
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWxhc3QtdmFsdWUtc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3V0aWwvcnhqcy9nZXQtbGFzdC12YWx1ZS1zeW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBSSxNQUFxQjtJQUN2RCxJQUFJLEtBQW9CLENBQUM7SUFDekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogV2lsbCBncmFiIGxhc3Qgc3luY2hyb25vdXNseSBhdmFpbGFibGUgdmFsdWUgZnJvbSB0aGUgb2JzZXJ2YWJsZSBzdHJlYW1cbiAqIGF0IHRoZSB0aW1lIG9mIHRoZSBjYWxsLlxuICpcbiAqIFNob3VsZCBiZSB1c2VkIHdpdGggY2F1dGlvbiwgYXMgaXQncyBub3QgYSBsZWdpdGltYXRlIHdheSBmb3IgZ2V0dGluZyB2YWx1ZVxuICogZnJvbSB0aGUgb2JzZXJ2YWJsZS4gT2JzZXJ2YWJsZSBjb21wb3NpdGlvbiBvciBzdGFuZGFyZCBzdWJzY3JpYmUgbWV0aG9kXG4gKiBzaG91bGQgYmUgdXNlZCBmb3IgbW9zdCBvZiB0aGUgY2FzZXMuXG4gKlxuICogQHBhcmFtIHNvdXJjZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdFZhbHVlU3luYzxUPihzb3VyY2U6IE9ic2VydmFibGU8VD4pOiBUIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHZhbHVlOiBUIHwgdW5kZWZpbmVkO1xuICBzb3VyY2Uuc3Vic2NyaWJlKChlbWlzc2lvbikgPT4gKHZhbHVlID0gZW1pc3Npb24pKS51bnN1YnNjcmliZSgpO1xuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=