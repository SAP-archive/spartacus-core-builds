{"version":3,"file":"auth-redirect.service.d.ts","sources":["auth-redirect.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Router } from '@angular/router';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthRedirectStorageService } from './auth-redirect-storage.service';\n/**\n * Responsible for saving last accessed page (or attempted) before login and for redirecting to that page after login.\n */\nexport declare class AuthRedirectService {\n    protected routing: RoutingService;\n    protected router: Router;\n    protected authRedirectStorageService: AuthRedirectStorageService;\n    /**\n     * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n     * 1. Just the previously opened page; or\n     * 2. The page that we just tried to open, but AuthGuard cancelled it\n     *\n     * For example:\n     * 1. The user opens the product page, then clicks /login link and signs in\n     *    -> Then we should redirect to the product page; or\n     * 2. The user opens the product page, then he clicks /my-account link,\n     *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n     *    -> Then we should redirect to the my-account page, not the product page\n     */\n    constructor(routing: RoutingService, router: Router, authRedirectStorageService: AuthRedirectStorageService);\n    private ignoredUrls;\n    private lastAuthGuardNavigation;\n    /**\n     * Redirect to saved url (homepage if nothing is saved).\n     */\n    redirect(): void;\n    /**\n     * Saves url of a page that user wanted to access, but wasn't yet logged in.\n     */\n    reportAuthGuard(): void;\n    /**\n     * Saves url of a page that was accessed before entering a page only for not auth users.\n     */\n    reportNotAuthGuard(): void;\n    private getCurrentNavigation;\n}\n"]}