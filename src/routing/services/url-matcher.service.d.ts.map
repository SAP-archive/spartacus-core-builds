{"version":3,"file":"url-matcher.service.d.ts","sources":["url-matcher.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { UrlMatcher } from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\nexport declare class UrlMatcherService {\n    protected globService: GlobService;\n    constructor(globService: GlobService);\n    /**\n     * Returns a matcher that is always fails\n     */\n    getFalsy(): UrlMatcher;\n    /**\n     * Returns a matcher for given list of paths\n     */\n    getFromPaths(paths: string[]): UrlMatcher;\n    /**\n     * Returns a matcher that combines the given matchers\n     * */\n    getCombined(matchers: UrlMatcher[]): UrlMatcher;\n    /**\n     * Similar to Angular's defaultUrlMatcher. Differences:\n     * - the `path` comes from function's argument, not from `route.path`\n     * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n     */\n    protected getFromPath(path?: string): UrlMatcher;\n    /**\n     * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n     */\n    getOpposite(originalMatcher: UrlMatcher): UrlMatcher;\n    /**\n     * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n     */\n    getFromGlob(globPatterns: string[]): UrlMatcher;\n}\n"]}