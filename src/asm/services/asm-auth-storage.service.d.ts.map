{"version":3,"file":"asm-auth-storage.service.d.ts","sources":["asm-auth-storage.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { AuthToken } from '../../auth/user-auth/models/auth-token.model';\nimport { AuthStorageService } from '../../auth/user-auth/services/auth-storage.service';\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nexport declare enum TokenTarget {\n    CSAgent = \"CSAgent\",\n    User = \"User\"\n}\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\nexport declare class AsmAuthStorageService extends AuthStorageService {\n    protected _tokenTarget$: Observable<TokenTarget>;\n    /**\n     * When CS Agent logs in during regular user session we store the regular\n     * user token to restore the session after CS Agent logout.\n     *\n     * This supports in-store use case when CS Agent want's to quickly help\n     * customer and then give an option to customer to continue the process.\n     */\n    protected emulatedUserToken: AuthToken;\n    /**\n     * Get target user for current auth token.\n     *\n     * @return observable with TokenTarget\n     */\n    getTokenTarget(): Observable<TokenTarget>;\n    /**\n     * Set new token target.\n     *\n     * @param tokenTarget\n     */\n    setTokenTarget(tokenTarget: TokenTarget): void;\n    /**\n     * Get token for previously user session, when it was interrupted by CS agent login.\n     *\n     * @return previously logged in user token.\n     */\n    getEmulatedUserToken(): AuthToken;\n    /**\n     * Save user token on CS agent login.\n     *\n     * @param token\n     */\n    setEmulatedUserToken(token: AuthToken): void;\n    /**\n     * Change token target to CS Agent.\n     */\n    switchTokenTargetToCSAgent(): void;\n    /**\n     * Change token target to user.\n     */\n    switchTokenTargetToUser(): void;\n    /**\n     * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n     * Only available solution is to drop session we could restore, to avoid account hijack.\n     */\n    clearEmulatedUserToken(): void;\n}\n"]}