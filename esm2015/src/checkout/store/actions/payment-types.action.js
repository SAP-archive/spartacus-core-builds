import { EntityFailAction, EntityLoadAction, EntitySuccessAction, EntityLoaderResetAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';
export const LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
export const LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
export const LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
export const RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
export const SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
export const SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
export const SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
export class LoadPaymentTypes extends EntityLoadAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = LOAD_PAYMENT_TYPES;
    }
}
export class LoadPaymentTypesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_FAIL;
    }
}
export class LoadPaymentTypesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_SUCCESS;
    }
}
export class ResetLoadPaymentTypesProcess extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
    }
}
export class SetPaymentType {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE;
    }
}
export class SetPaymentTypeFail {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_FAIL;
    }
}
export class SetPaymentTypeSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jaGVja291dC9zdG9yZS9hY3Rpb25zL3BheW1lbnQtdHlwZXMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQix1QkFBdUIsR0FDeEIsTUFBTSx5REFBeUQsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsK0JBQStCLENBQUM7QUFDbEUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0NBQW9DLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQ3JDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUM5Qyw0Q0FBNEMsQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyw2QkFBNkIsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxxQ0FBcUMsQ0FBQztBQUU5RSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsZ0JBQWdCO0lBRXBEO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRjlDLFNBQUksR0FBRyxrQkFBa0IsQ0FBQztJQUduQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZ0JBQWdCO0lBRXhELFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRHBDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBR3hDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxtQkFBbUI7SUFFOUQsWUFBbUIsT0FBc0I7UUFDdkMsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRHBDLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFEaEMsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBRzNDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSx1QkFBdUI7SUFFdkU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFGOUMsU0FBSSxHQUFHLG1DQUFtQyxDQUFDO0lBR3BELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxjQUFjO0lBRXpCLFlBQ1MsT0FLTjtRQUxNLFlBQU8sR0FBUCxPQUFPLENBS2I7UUFQTSxTQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFROUIsQ0FBQztDQUNMO0FBRUQsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixZQUFtQixPQUFZO1FBQVosWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcscUJBQXFCLENBQUM7SUFDSixDQUFDO0NBQ3BDO0FBRUQsTUFBTSxPQUFPLHFCQUFxQjtJQUVoQyxZQUFtQixPQUFhO1FBQWIsWUFBTyxHQUFQLE9BQU8sQ0FBTTtRQUR2QixTQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFDTixDQUFDO0NBQ3JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgUGF5bWVudFR5cGUsIENhcnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7XG4gIEVudGl0eUZhaWxBY3Rpb24sXG4gIEVudGl0eUxvYWRBY3Rpb24sXG4gIEVudGl0eVN1Y2Nlc3NBY3Rpb24sXG4gIEVudGl0eUxvYWRlclJlc2V0QWN0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uJztcbmltcG9ydCB7IFBST0NFU1NfRkVBVFVSRSB9IGZyb20gJy4uLy4uLy4uL3Byb2Nlc3Mvc3RvcmUvcHJvY2Vzcy1zdGF0ZSc7XG5pbXBvcnQgeyBHRVRfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEIH0gZnJvbSAnLi4vY2hlY2tvdXQtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTID0gJ1tDaGVja291dF0gTG9hZCBQYXltZW50IFR5cGVzJztcbmV4cG9ydCBjb25zdCBMT0FEX1BBWU1FTlRfVFlQRVNfRkFJTCA9ICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX1BBWU1FTlRfVFlQRVNfU1VDQ0VTUyA9XG4gICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVNFVF9MT0FEX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCA9XG4gICdbQ2hlY2tvdXRdIFJlc2V0IExvYWQgUGF5bWVudCBUeXBlIFByb2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgU0VUX1BBWU1FTlRfVFlQRSA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUnO1xuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEVfRkFJTCA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUgRmFpbCc7XG5leHBvcnQgY29uc3QgU0VUX1BBWU1FTlRfVFlQRV9TVUNDRVNTID0gJ1tDaGVja291dF0gU2V0IFBheW1lbnQgVHlwZSBTdWNjZXNzJztcblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXMgZXh0ZW5kcyBFbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfUEFZTUVOVF9UWVBFUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHRVRfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFBheW1lbnRUeXBlc0ZhaWwgZXh0ZW5kcyBFbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfUEFZTUVOVF9UWVBFU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHRVRfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFBheW1lbnRUeXBlc1N1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfUEFZTUVOVF9UWVBFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogUGF5bWVudFR5cGVbXSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0TG9hZFBheW1lbnRUeXBlc1Byb2Nlc3MgZXh0ZW5kcyBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9MT0FEX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHRVRfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UGF5bWVudFR5cGUgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU0VUX1BBWU1FTlRfVFlQRTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgY2FydElkOiBzdHJpbmc7XG4gICAgICB0eXBlQ29kZTogc3RyaW5nO1xuICAgICAgcG9OdW1iZXI/OiBzdHJpbmc7XG4gICAgfVxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRQYXltZW50VHlwZUZhaWwgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU0VUX1BBWU1FTlRfVFlQRV9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UGF5bWVudFR5cGVTdWNjZXNzIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9QQVlNRU5UX1RZUEVfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IENhcnQpIHt9XG59XG5cbmV4cG9ydCB0eXBlIFBheW1lbnRUeXBlc0FjdGlvbiA9XG4gIHwgTG9hZFBheW1lbnRUeXBlc1xuICB8IExvYWRQYXltZW50VHlwZXNGYWlsXG4gIHwgTG9hZFBheW1lbnRUeXBlc1N1Y2Nlc3NcbiAgfCBSZXNldExvYWRQYXltZW50VHlwZXNQcm9jZXNzXG4gIHwgU2V0UGF5bWVudFR5cGVcbiAgfCBTZXRQYXltZW50VHlwZUZhaWxcbiAgfCBTZXRQYXltZW50VHlwZVN1Y2Nlc3M7XG4iXX0=