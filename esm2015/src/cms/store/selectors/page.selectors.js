import { createSelector } from '@ngrx/store';
import { PageType } from '../../../model/cms.model';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
const getPageEntitiesSelector = (state) => state.pageData.entities;
const ɵ0 = getPageEntitiesSelector;
const getIndexByType = (index, type) => {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
const ɵ1 = getIndexByType;
const getPageComponentTypesSelector = (page) => {
    const componentTypes = new Set();
    if (page && page.slots) {
        for (const slot of Object.keys(page.slots)) {
            for (const component of page.slots[slot].components || []) {
                componentTypes.add(component.flexType);
            }
        }
    }
    return Array.from(componentTypes);
};
const ɵ2 = getPageComponentTypesSelector;
const ɵ3 = (state) => state.page;
export const getPageState = createSelector(getCmsState, ɵ3);
const ɵ4 = (page) => page.index;
export const getPageStateIndex = createSelector(getPageState, ɵ4);
export const getPageStateIndexEntityLoaderState = (pageContext) => createSelector(getPageStateIndex, (index) => getIndexByType(index, pageContext.type));
export const getPageStateIndexLoaderState = (pageContext) => createSelector(getPageStateIndexEntityLoaderState(pageContext), (indexState) => StateUtils.entityLoaderStateSelector(indexState, pageContext.id));
export const getPageStateIndexValue = (pageContext) => createSelector(getPageStateIndexLoaderState(pageContext), (entity) => StateUtils.loaderValueSelector(entity));
export const getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
export const getPageData = (pageContext) => createSelector(getPageEntities, getPageStateIndexValue(pageContext), (entities, indexValue) => entities[indexValue]);
export const getPageComponentTypes = (pageContext) => createSelector(getPageData(pageContext), (pageData) => getPageComponentTypesSelector(pageData));
export const getCurrentSlotSelectorFactory = (pageContext, position) => {
    return createSelector(getPageData(pageContext), (entity) => {
        if (entity) {
            return entity.slots[position] || { components: [] };
        }
    });
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,