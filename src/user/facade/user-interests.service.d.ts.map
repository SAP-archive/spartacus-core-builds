{"version":3,"file":"user-interests.service.d.ts","sources":["user-interests.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { NotificationType, ProductInterestEntryRelation, ProductInterestSearchResult } from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserInterestsService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected userIdService: UserIdService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, userIdService: UserIdService);\n    /**\n     * Retrieves an product interest list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadProductInterests(pageSize?: number, currentPage?: number, sort?: string, productCode?: string, notificationType?: NotificationType): void;\n    /**\n     * Returns product interests\n     */\n    getProductInterests(): Observable<ProductInterestSearchResult>;\n    /**\n     * Returns product interests\n     * @param pageSize the page size\n     */\n    getAndLoadProductInterests(pageSize?: number): Observable<ProductInterestSearchResult>;\n    /**\n     * Returns a loading flag for product interests\n     */\n    getProdutInterestsLoading(): Observable<boolean>;\n    /**\n     * Removes a ProductInterestRelation\n     * @param item product interest relation item\n     * @param singleDelete flag to delete only one interest\n     */\n    removeProdutInterest(item: ProductInterestEntryRelation, singleDelete?: boolean): void;\n    /**\n     * Returns a loading flag for removing product interests.\n     */\n    getRemoveProdutInterestLoading(): Observable<boolean>;\n    /**\n     * Returns a success flag for removing a product interests.\n     */\n    getRemoveProdutInterestSuccess(): Observable<boolean>;\n    /**\n     * Add a new product interest.\n     *\n     * @param productCode the product code\n     * @param notificationType the notification type\n     */\n    addProductInterest(productCode: string, notificationType: NotificationType): void;\n    /**\n     * Returns a success flag for adding a product interest.\n     */\n    getAddProductInterestSuccess(): Observable<boolean>;\n    /**\n     * Returns a error flag for adding a product interest.\n     */\n    getAddProductInterestError(): Observable<boolean>;\n    /**\n     * Reset product interest adding state.\n     */\n    resetAddInterestState(): void;\n    /**\n     * Reset product interest removing state.\n     */\n    resetRemoveInterestState(): void;\n    /**\n     * Clears product interests\n     */\n    clearProductInterests(): void;\n}\n"]}