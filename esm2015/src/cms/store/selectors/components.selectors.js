import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
const ɵ0 = (state) => state.components;
export const getComponentsState = createSelector(getCmsState, ɵ0);
export const componentsContextSelectorFactory = (uid) => {
    return createSelector(getComponentsState, (componentsState) => StateUtils.entitySelector(componentsState, uid));
};
export const componentsLoaderStateSelectorFactory = (uid, context) => {
    return createSelector(componentsContextSelectorFactory(uid), (componentsContext) => (componentsContext &&
        componentsContext.pageContext &&
        componentsContext.pageContext[context]) ||
        StateUtils.initialLoaderState);
};
/**
 * This selector will return:
 *   - true: component for this context exists
 *   - false: component for this context doesn't exist
 *   - undefined: if the exists status for component is unknown
 *
 * @param uid
 * @param context
 */
export const componentsContextExistsSelectorFactory = (uid, context) => {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), (loaderState) => StateUtils.loaderValueSelector(loaderState));
};
export const componentsDataSelectorFactory = (uid) => {
    return createSelector(componentsContextSelectorFactory(uid), (state) => state ? state.component : undefined);
};
/**
 * This selector will return:
 *   - CmsComponent instance: if we have component data for specified context
 *   - null: if there is no component data for specified context
 *   - undefined: if status of component data for specified context is unknown
 *
 * @param uid
 * @param context
 */
export const componentsSelectorFactory = (uid, context) => {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (componentState, exists) => {
        switch (exists) {
            case true:
                return componentState;
            case false:
                return null;
            case undefined:
                return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO1dBS2xCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVTtBQUgzRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLFdBQVcsS0FBOEIsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxHQUFXLEVBQ3dDLEVBQUU7SUFDckQsT0FBTyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUM1RCxVQUFVLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FDaEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHLENBQ2xELEdBQVcsRUFDWCxPQUFlLEVBQ2tELEVBQUU7SUFDbkUsT0FBTyxjQUFjLENBQ25CLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FDcEIsQ0FBQyxpQkFBaUI7UUFDaEIsaUJBQWlCLENBQUMsV0FBVztRQUM3QixpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsVUFBVSxDQUFDLGtCQUFrQixDQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FBRyxDQUNwRCxHQUFXLEVBQ1gsT0FBZSxFQUNzQyxFQUFFO0lBQ3ZELE9BQU8sY0FBYyxDQUNuQixvQ0FBb0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ2xELENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQzdELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxDQUMzQyxHQUFXLEVBQytDLEVBQUU7SUFDNUQsT0FBTyxjQUFjLENBQUMsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNyRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FDdkMsR0FBVyxFQUNYLE9BQWUsRUFDa0QsRUFBRTtJQUNuRSxPQUFPLGNBQWMsQ0FDbkIsNkJBQTZCLENBQUMsR0FBRyxDQUFDLEVBQ2xDLHNDQUFzQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFDcEQsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDekIsUUFBUSxNQUFNLEVBQUU7WUFDZCxLQUFLLElBQUk7Z0JBQ1AsT0FBTyxjQUFjLENBQUM7WUFDeEIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxTQUFTO2dCQUNaLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENtc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgQ29tcG9uZW50c0NvbnRleHQsIENvbXBvbmVudHNTdGF0ZSwgU3RhdGVXaXRoQ21zIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcbmltcG9ydCB7IGdldENtc1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBnZXRDb21wb25lbnRzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENtcyxcbiAgQ29tcG9uZW50c1N0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q21zU3RhdGUsIChzdGF0ZSkgPT4gc3RhdGUuY29tcG9uZW50cyk7XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzQ29udGV4dFNlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDb21wb25lbnRzQ29udGV4dD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q29tcG9uZW50c1N0YXRlLCAoY29tcG9uZW50c1N0YXRlKSA9PlxuICAgIFN0YXRlVXRpbHMuZW50aXR5U2VsZWN0b3IoY29tcG9uZW50c1N0YXRlLCB1aWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxib29sZWFuPj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkodWlkKSxcbiAgICAoY29tcG9uZW50c0NvbnRleHQpID0+XG4gICAgICAoY29tcG9uZW50c0NvbnRleHQgJiZcbiAgICAgICAgY29tcG9uZW50c0NvbnRleHQucGFnZUNvbnRleHQgJiZcbiAgICAgICAgY29tcG9uZW50c0NvbnRleHQucGFnZUNvbnRleHRbY29udGV4dF0pIHx8XG4gICAgICBTdGF0ZVV0aWxzLmluaXRpYWxMb2FkZXJTdGF0ZVxuICApO1xufTtcblxuLyoqXG4gKiBUaGlzIHNlbGVjdG9yIHdpbGwgcmV0dXJuOlxuICogICAtIHRydWU6IGNvbXBvbmVudCBmb3IgdGhpcyBjb250ZXh0IGV4aXN0c1xuICogICAtIGZhbHNlOiBjb21wb25lbnQgZm9yIHRoaXMgY29udGV4dCBkb2Vzbid0IGV4aXN0XG4gKiAgIC0gdW5kZWZpbmVkOiBpZiB0aGUgZXhpc3RzIHN0YXR1cyBmb3IgY29tcG9uZW50IGlzIHVua25vd25cbiAqXG4gKiBAcGFyYW0gdWlkXG4gKiBAcGFyYW0gY29udGV4dFxuICovXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBib29sZWFuIHwgdW5kZWZpbmVkPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcbiAgICAobG9hZGVyU3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihsb2FkZXJTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzRGF0YVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDbXNDb21wb25lbnQgfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksIChzdGF0ZSkgPT5cbiAgICBzdGF0ZSA/IHN0YXRlLmNvbXBvbmVudCA6IHVuZGVmaW5lZFxuICApO1xufTtcblxuLyoqXG4gKiBUaGlzIHNlbGVjdG9yIHdpbGwgcmV0dXJuOlxuICogICAtIENtc0NvbXBvbmVudCBpbnN0YW5jZTogaWYgd2UgaGF2ZSBjb21wb25lbnQgZGF0YSBmb3Igc3BlY2lmaWVkIGNvbnRleHRcbiAqICAgLSBudWxsOiBpZiB0aGVyZSBpcyBubyBjb21wb25lbnQgZGF0YSBmb3Igc3BlY2lmaWVkIGNvbnRleHRcbiAqICAgLSB1bmRlZmluZWQ6IGlmIHN0YXR1cyBvZiBjb21wb25lbnQgZGF0YSBmb3Igc3BlY2lmaWVkIGNvbnRleHQgaXMgdW5rbm93blxuICpcbiAqIEBwYXJhbSB1aWRcbiAqIEBwYXJhbSBjb250ZXh0XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ21zQ29tcG9uZW50IHwgbnVsbCB8IHVuZGVmaW5lZD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0RhdGFTZWxlY3RvckZhY3RvcnkodWlkKSxcbiAgICBjb21wb25lbnRzQ29udGV4dEV4aXN0c1NlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxuICAgIChjb21wb25lbnRTdGF0ZSwgZXhpc3RzKSA9PiB7XG4gICAgICBzd2l0Y2ggKGV4aXN0cykge1xuICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFN0YXRlO1xuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG4iXX0=