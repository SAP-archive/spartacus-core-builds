import { __decorate, __param, __read, __spread } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { debounceTime, filter, map, switchMap } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import * as i0 from "@angular/core";
import * as i1 from "../page/page-meta.resolver";
import * as i2 from "./cms.service";
var PageMetaService = /** @class */ (function () {
    function PageMetaService(resolvers, cms) {
        this.resolvers = resolvers;
        this.cms = cms;
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.resolvers = this.resolvers || [];
    }
    PageMetaService.prototype.getMeta = function () {
        var _this = this;
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap(function (page) {
            var metaResolver = _this.getMetaResolver(page);
            if (metaResolver) {
                return _this.resolve(metaResolver);
            }
            else {
                // we do not have a page resolver
                return of(null);
            }
        }));
    };
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    PageMetaService.prototype.resolve = function (metaResolver) {
        var _this = this;
        var resolveMethods = Object.keys(this.resolverMethods)
            .filter(function (key) { return metaResolver[_this.resolverMethods[key]]; })
            .map(function (key) {
            return metaResolver[_this.resolverMethods[key]]().pipe(map(function (data) {
                var _a;
                return (_a = {},
                    _a[key] = data,
                    _a);
            }));
        });
        return combineLatest(resolveMethods).pipe(debounceTime(0), // avoid partial data emissions when all methods resolve at the same time
        map(function (data) { return Object.assign.apply(Object, __spread([{}], data)); }));
    };
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    PageMetaService.prototype.getMetaResolver = function (page) {
        return resolveApplicable(this.resolvers, [page], [page]);
    };
    PageMetaService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PageMetaResolver,] }] },
        { type: CmsService }
    ]; };
    PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.PageMetaResolver, 8), i0.ɵɵinject(i2.CmsService)); }, token: PageMetaService, providedIn: "root" });
    PageMetaService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Optional()),
        __param(0, Inject(PageMetaResolver))
    ], PageMetaService);
    return PageMetaService;
}());
export { PageMetaService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2ZhY2FkZS9wYWdlLW1ldGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSzNDO0lBQ0UseUJBR1ksU0FBNkIsRUFDN0IsR0FBZTtRQURmLGNBQVMsR0FBVCxTQUFTLENBQW9CO1FBQzdCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFJM0I7Ozs7OztXQU1HO1FBQ08sb0JBQWUsR0FBOEI7WUFDckQsS0FBSyxFQUFFLGNBQWM7WUFDckIsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsS0FBSyxFQUFFLGNBQWM7WUFDckIsTUFBTSxFQUFFLGVBQWU7U0FDeEIsQ0FBQztRQWhCQSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFpQkQsaUNBQU8sR0FBUDtRQUFBLGlCQWNDO1FBYkMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFNBQVMsQ0FBQyxVQUFDLElBQVU7WUFDbkIsSUFBTSxZQUFZLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVoRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLGlDQUFpQztnQkFDakMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxpQ0FBTyxHQUFqQixVQUFrQixZQUE4QjtRQUFoRCxpQkFpQkM7UUFoQkMsSUFBTSxjQUFjLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQ3hELElBQUksQ0FBQyxlQUFlLENBQ3JCO2FBQ0UsTUFBTSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsWUFBWSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQzthQUN4RCxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ1AsT0FBQSxZQUFZLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsVUFBQyxJQUFJOztnQkFBSyxPQUFBO29CQUNaLEdBQUMsR0FBRyxJQUFHLElBQUk7dUJBQ1g7WUFGWSxDQUVaLENBQUMsQ0FDSjtRQUpELENBSUMsQ0FDRixDQUFDO1FBRUosT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUN2QyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUseUVBQXlFO1FBQzFGLEdBQUcsQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLE9BQWIsTUFBTSxZQUFRLEVBQUUsR0FBSyxJQUFJLElBQXpCLENBQTBCLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLHlDQUFlLEdBQXpCLFVBQTBCLElBQVU7UUFDbEMsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7OzRDQXZFRSxRQUFRLFlBQ1IsTUFBTSxTQUFDLGdCQUFnQjtnQkFFVCxVQUFVOzs7SUFMaEIsZUFBZTtRQUgzQixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBR0csV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7T0FIaEIsZUFBZSxDQTBFM0I7MEJBckZEO0NBcUZDLEFBMUVELElBMEVDO1NBMUVZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgcmVzb2x2ZUFwcGxpY2FibGUgfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpY2FibGUnO1xuaW1wb3J0IHsgUGFnZSwgUGFnZU1ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VNZXRhUmVzb2x2ZXIgfSBmcm9tICcuLi9wYWdlL3BhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbXMuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdlTWV0YVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoUGFnZU1ldGFSZXNvbHZlcilcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZXJzOiBQYWdlTWV0YVJlc29sdmVyW10sXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJlc29sdmVycyA9IHRoaXMucmVzb2x2ZXJzIHx8IFtdO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiByZXNvbHZlciBpbnRlcmZhY2VzIHdpbGwgYmUgZXZhbHVhdGVkIGZvciB0aGUgcGFnZVJlc29sdmVycy5cbiAgICpcbiAgICogVE9PRDogb3B0aW1pemUgYnJvd3NlciB2cyBTU1IgcmVzb2x2ZXJzOyBpbWFnZSwgcm9ib3RzIGFuZCBkZXNjcmlwdGlvblxuICAgKiAgICAgICBhcmVuJ3QgbmVlZGVkIGR1cmluZyBicm93c2luZy5cbiAgICogVE9ETzogd2UgY2FuIG1ha2UgdGhlIGxpc3Qgb2YgcmVzb2x2ZXIgdHlwZXMgY29uZmlndXJhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZXJNZXRob2RzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIHRpdGxlOiAncmVzb2x2ZVRpdGxlJyxcbiAgICBoZWFkaW5nOiAncmVzb2x2ZUhlYWRpbmcnLFxuICAgIGRlc2NyaXB0aW9uOiAncmVzb2x2ZURlc2NyaXB0aW9uJyxcbiAgICBicmVhZGNydW1iczogJ3Jlc29sdmVCcmVhZGNydW1icycsXG4gICAgaW1hZ2U6ICdyZXNvbHZlSW1hZ2UnLFxuICAgIHJvYm90czogJ3Jlc29sdmVSb2JvdHMnLFxuICB9O1xuXG4gIGdldE1ldGEoKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT4ge1xuICAgIHJldHVybiB0aGlzLmNtcy5nZXRDdXJyZW50UGFnZSgpLnBpcGUoXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2U6IFBhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgbWV0YVJlc29sdmVyID0gdGhpcy5nZXRNZXRhUmVzb2x2ZXIocGFnZSk7XG5cbiAgICAgICAgaWYgKG1ldGFSZXNvbHZlcikge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmUobWV0YVJlc29sdmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3ZSBkbyBub3QgaGF2ZSBhIHBhZ2UgcmVzb2x2ZXJcbiAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIGBQYWdlUmVzb2x2ZXJgIGhhcyBpbXBsZW1lbnRlZCBhIHJlc29sdmVyIGludGVyZmFjZSwgdGhlIHJlc29sdmVkIGRhdGFcbiAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxuICAgKiBAcGFyYW0gbWV0YVJlc29sdmVyXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPiB7XG4gICAgY29uc3QgcmVzb2x2ZU1ldGhvZHM6IE9ic2VydmFibGU8UGFnZU1ldGE+W10gPSBPYmplY3Qua2V5cyhcbiAgICAgIHRoaXMucmVzb2x2ZXJNZXRob2RzXG4gICAgKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBtZXRhUmVzb2x2ZXJbdGhpcy5yZXNvbHZlck1ldGhvZHNba2V5XV0pXG4gICAgICAubWFwKChrZXkpID0+XG4gICAgICAgIG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSgpLnBpcGUoXG4gICAgICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgW2tleV06IGRhdGEsXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChyZXNvbHZlTWV0aG9kcykucGlwZShcbiAgICAgIGRlYm91bmNlVGltZSgwKSwgLy8gYXZvaWQgcGFydGlhbCBkYXRhIGVtaXNzaW9ucyB3aGVuIGFsbCBtZXRob2RzIHJlc29sdmUgYXQgdGhlIHNhbWUgdGltZVxuICAgICAgbWFwKChkYXRhKSA9PiBPYmplY3QuYXNzaWduKHt9LCAuLi5kYXRhKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcmVzb2x2ZXIgd2l0aCB0aGUgYmVzdCBtYXRjaCwgYmFzZWQgb24gYSBzY29yZVxuICAgKiBnZW5lcmF0ZWQgYnkgdGhlIHJlc29sdmVyLlxuICAgKlxuICAgKiBSZXNvbHZlcnMgbWF0Y2ggYnkgZGVmYXVsdCBvbiBgUGFnZVR5cGVgIGFuZCBgcGFnZS50ZW1wbGF0ZWAuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0TWV0YVJlc29sdmVyKHBhZ2U6IFBhZ2UpOiBQYWdlTWV0YVJlc29sdmVyIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFwcGxpY2FibGUodGhpcy5yZXNvbHZlcnMsIFtwYWdlXSwgW3BhZ2VdKTtcbiAgfVxufVxuIl19