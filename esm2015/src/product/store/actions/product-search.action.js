export const SEARCH_PRODUCTS = '[Product] Search Products';
export const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';
export const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';
export const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';
export const GET_PRODUCT_SUGGESTIONS_SUCCESS = '[Product] Get Product Suggestions Success';
export const GET_PRODUCT_SUGGESTIONS_FAIL = '[Product] Get Product Suggestions Fail';
export const CLEAR_PRODUCT_SEARCH_RESULT = '[Product] Clear Product Search Result';
export class SearchProducts {
    constructor(payload, auxiliary) {
        this.payload = payload;
        this.auxiliary = auxiliary;
        this.type = SEARCH_PRODUCTS;
    }
}
export class SearchProductsFail {
    constructor(payload, auxiliary) {
        this.payload = payload;
        this.auxiliary = auxiliary;
        this.type = SEARCH_PRODUCTS_FAIL;
    }
}
export class SearchProductsSuccess {
    constructor(payload, auxiliary) {
        this.payload = payload;
        this.auxiliary = auxiliary;
        this.type = SEARCH_PRODUCTS_SUCCESS;
    }
}
export class GetProductSuggestions {
    constructor(payload) {
        this.payload = payload;
        this.type = GET_PRODUCT_SUGGESTIONS;
    }
}
export class GetProductSuggestionsSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = GET_PRODUCT_SUGGESTIONS_SUCCESS;
    }
}
export class GetProductSuggestionsFail {
    constructor(payload) {
        this.payload = payload;
        this.type = GET_PRODUCT_SUGGESTIONS_FAIL;
    }
}
export class ClearProductSearchResult {
    constructor(payload = {
        clearPageResults: false,
        clearSearchboxResults: false,
    }) {
        this.payload = payload;
        this.type = CLEAR_PRODUCT_SEARCH_RESULT;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zZWFyY2guYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3Byb2R1Y3Qvc3RvcmUvYWN0aW9ucy9wcm9kdWN0LXNlYXJjaC5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLDJCQUEyQixDQUFDO0FBQzNELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLGdDQUFnQyxDQUFDO0FBQ3JFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLG1DQUFtQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLG1DQUFtQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUMxQywyQ0FBMkMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FDdkMsd0NBQXdDLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3RDLHVDQUF1QyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxjQUFjO0lBRXpCLFlBQ1MsT0FBMEQsRUFDMUQsU0FBbUI7UUFEbkIsWUFBTyxHQUFQLE9BQU8sQ0FBbUQ7UUFDMUQsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUhuQixTQUFJLEdBQUcsZUFBZSxDQUFDO0lBSTdCLENBQUM7Q0FDTDtBQUVELE1BQU0sT0FBTyxrQkFBa0I7SUFFN0IsWUFBbUIsT0FBbUIsRUFBUyxTQUFtQjtRQUEvQyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVMsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUR6RCxTQUFJLEdBQUcsb0JBQW9CLENBQUM7SUFDZ0MsQ0FBQztDQUN2RTtBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFFaEMsWUFBbUIsT0FBMEIsRUFBUyxTQUFtQjtRQUF0RCxZQUFPLEdBQVAsT0FBTyxDQUFtQjtRQUFTLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFEaEUsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ29DLENBQUM7Q0FDOUU7QUFFRCxNQUFNLE9BQU8scUJBQXFCO0lBRWhDLFlBQW1CLE9BQXFEO1FBQXJELFlBQU8sR0FBUCxPQUFPLENBQThDO1FBRC9ELFNBQUksR0FBRyx1QkFBdUIsQ0FBQztJQUNtQyxDQUFDO0NBQzdFO0FBRUQsTUFBTSxPQUFPLDRCQUE0QjtJQUV2QyxZQUFtQixPQUFxQjtRQUFyQixZQUFPLEdBQVAsT0FBTyxDQUFjO1FBRC9CLFNBQUksR0FBRywrQkFBK0IsQ0FBQztJQUNMLENBQUM7Q0FDN0M7QUFFRCxNQUFNLE9BQU8seUJBQXlCO0lBRXBDLFlBQW1CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFEN0IsU0FBSSxHQUFHLDRCQUE0QixDQUFDO0lBQ0osQ0FBQztDQUMzQztBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFFbkMsWUFDUyxVQUF1QjtRQUM1QixnQkFBZ0IsRUFBRSxLQUFLO1FBQ3ZCLHFCQUFxQixFQUFFLEtBQUs7S0FDN0I7UUFITSxZQUFPLEdBQVAsT0FBTyxDQUdiO1FBTE0sU0FBSSxHQUFHLDJCQUEyQixDQUFDO0lBTXpDLENBQUM7Q0FDTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVycm9yTW9kZWwgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9taXNjLm1vZGVsJztcbmltcG9ydCB7XG4gIENsZWFyU2VhcmNoLFxuICBQcm9kdWN0U2VhcmNoUGFnZSxcbiAgU3VnZ2VzdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC1zZWFyY2gubW9kZWwnO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWwvc2VhcmNoLWNvbmZpZyc7XG5cbmV4cG9ydCBjb25zdCBTRUFSQ0hfUFJPRFVDVFMgPSAnW1Byb2R1Y3RdIFNlYXJjaCBQcm9kdWN0cyc7XG5leHBvcnQgY29uc3QgU0VBUkNIX1BST0RVQ1RTX0ZBSUwgPSAnW1Byb2R1Y3RdIFNlYXJjaCBQcm9kdWN0cyBGYWlsJztcbmV4cG9ydCBjb25zdCBTRUFSQ0hfUFJPRFVDVFNfU1VDQ0VTUyA9ICdbUHJvZHVjdF0gU2VhcmNoIFByb2R1Y3RzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IEdFVF9QUk9EVUNUX1NVR0dFU1RJT05TID0gJ1tQcm9kdWN0XSBHZXQgUHJvZHVjdCBTdWdnZXN0aW9ucyc7XG5leHBvcnQgY29uc3QgR0VUX1BST0RVQ1RfU1VHR0VTVElPTlNfU1VDQ0VTUyA9XG4gICdbUHJvZHVjdF0gR2V0IFByb2R1Y3QgU3VnZ2VzdGlvbnMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgR0VUX1BST0RVQ1RfU1VHR0VTVElPTlNfRkFJTCA9XG4gICdbUHJvZHVjdF0gR2V0IFByb2R1Y3QgU3VnZ2VzdGlvbnMgRmFpbCc7XG5leHBvcnQgY29uc3QgQ0xFQVJfUFJPRFVDVF9TRUFSQ0hfUkVTVUxUID1cbiAgJ1tQcm9kdWN0XSBDbGVhciBQcm9kdWN0IFNlYXJjaCBSZXN1bHQnO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoUHJvZHVjdHMgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU0VBUkNIX1BST0RVQ1RTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyBxdWVyeVRleHQ6IHN0cmluZzsgc2VhcmNoQ29uZmlnOiBTZWFyY2hDb25maWcgfSxcbiAgICBwdWJsaWMgYXV4aWxpYXJ5PzogYm9vbGVhblxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hQcm9kdWN0c0ZhaWwgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU0VBUkNIX1BST0RVQ1RTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBFcnJvck1vZGVsLCBwdWJsaWMgYXV4aWxpYXJ5PzogYm9vbGVhbikge31cbn1cblxuZXhwb3J0IGNsYXNzIFNlYXJjaFByb2R1Y3RzU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRUFSQ0hfUFJPRFVDVFNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IFByb2R1Y3RTZWFyY2hQYWdlLCBwdWJsaWMgYXV4aWxpYXJ5PzogYm9vbGVhbikge31cbn1cblxuZXhwb3J0IGNsYXNzIEdldFByb2R1Y3RTdWdnZXN0aW9ucyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfUFJPRFVDVF9TVUdHRVNUSU9OUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdGVybTogc3RyaW5nOyBzZWFyY2hDb25maWc6IFNlYXJjaENvbmZpZyB9KSB7fVxufVxuXG5leHBvcnQgY2xhc3MgR2V0UHJvZHVjdFN1Z2dlc3Rpb25zU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfUFJPRFVDVF9TVUdHRVNUSU9OU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogU3VnZ2VzdGlvbltdKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgR2V0UHJvZHVjdFN1Z2dlc3Rpb25zRmFpbCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfUFJPRFVDVF9TVUdHRVNUSU9OU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogRXJyb3JNb2RlbCkge31cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyUHJvZHVjdFNlYXJjaFJlc3VsdCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9QUk9EVUNUX1NFQVJDSF9SRVNVTFQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiBDbGVhclNlYXJjaCA9IHtcbiAgICAgIGNsZWFyUGFnZVJlc3VsdHM6IGZhbHNlLFxuICAgICAgY2xlYXJTZWFyY2hib3hSZXN1bHRzOiBmYWxzZSxcbiAgICB9XG4gICkge31cbn1cblxuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBQcm9kdWN0U2VhcmNoQWN0aW9uID1cbiAgfCBTZWFyY2hQcm9kdWN0c1xuICB8IFNlYXJjaFByb2R1Y3RzRmFpbFxuICB8IFNlYXJjaFByb2R1Y3RzU3VjY2Vzc1xuICB8IEdldFByb2R1Y3RTdWdnZXN0aW9uc1xuICB8IEdldFByb2R1Y3RTdWdnZXN0aW9uc1N1Y2Nlc3NcbiAgfCBHZXRQcm9kdWN0U3VnZ2VzdGlvbnNGYWlsXG4gIHwgQ2xlYXJQcm9kdWN0U2VhcmNoUmVzdWx0O1xuIl19