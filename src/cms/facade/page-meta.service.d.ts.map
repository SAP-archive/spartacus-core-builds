{"version":3,"file":"page-meta.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/cms/facade/page-meta.service.d.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { FeatureConfigService } from '../../features-config/services/feature-config.service';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\nexport declare class PageMetaService {\n    protected resolvers: PageMetaResolver[];\n    protected cms: CmsService;\n    protected featureConfigService?: FeatureConfigService;\n    constructor(resolvers: PageMetaResolver[], cms: CmsService, featureConfigService?: FeatureConfigService);\n    /**\n     * The list of resolver interfaces will be evaluated for the pageResolvers.\n     *\n     * TOOD: optimize browser vs SSR resolvers; image, robots and description\n     *       aren't needed during browsing.\n     * TODO: we can make the list of resolver types configurable\n     */\n    resolverMethods: {\n        title: string;\n        heading: string;\n        description: string;\n        breadcrumbs: string;\n        image: string;\n        robots: string;\n    };\n    getMeta(): Observable<PageMeta>;\n    /**\n     * If a pageResolver has implemented a resolver interface, the resolved data\n     * is merged into the `PageMeta` object.\n     * @param metaResolver\n     */\n    private resolve;\n    /**\n     * return the resolver with the best match\n     * resovers can by default match on PageType and page template\n     * but custom match comparisors can be implemented.\n     */\n    protected getMetaResolver(page: Page): PageMetaResolver;\n}\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;"}