import { __extends } from "tslib";
import { StateUtils } from '../../../state/utils/index';
import { NAVIGATION_DETAIL_ENTITY } from '../cms-state';
export var LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';
export var LOAD_CMS_NAVIGATION_ITEMS_FAIL = '[Cms] Load NavigationEntry items Fail';
export var LOAD_CMS_NAVIGATION_ITEMS_SUCCESS = '[Cms] Load NavigationEntry items Success';
var LoadCmsNavigationItems = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItems, _super);
    function LoadCmsNavigationItems(payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS;
        return _this;
    }
    return LoadCmsNavigationItems;
}(StateUtils.EntityLoadAction));
export { LoadCmsNavigationItems };
var LoadCmsNavigationItemsFail = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItemsFail, _super);
    function LoadCmsNavigationItemsFail(nodeId, payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, nodeId, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;
        return _this;
    }
    return LoadCmsNavigationItemsFail;
}(StateUtils.EntityFailAction));
export { LoadCmsNavigationItemsFail };
var LoadCmsNavigationItemsSuccess = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItemsSuccess, _super);
    function LoadCmsNavigationItemsSuccess(payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;
        return _this;
    }
    return LoadCmsNavigationItemsSuccess;
}(StateUtils.EntitySuccessAction));
export { LoadCmsNavigationItemsSuccess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1lbnRyeS1pdGVtLmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jbXMvc3RvcmUvYWN0aW9ucy9uYXZpZ2F0aW9uLWVudHJ5LWl0ZW0uYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXhELE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxJQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsSUFBTSxpQ0FBaUMsR0FDNUMsMENBQTBDLENBQUM7QUFFN0M7SUFBNEMsMENBQTJCO0lBRXJFLGdDQUFtQixPQUF5QztRQUE1RCxZQUNFLGtCQUFNLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FDaEQ7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBa0M7UUFEbkQsVUFBSSxHQUFHLHlCQUF5QixDQUFDOztJQUcxQyxDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBNEMsVUFBVSxDQUFDLGdCQUFnQixHQUt0RTs7QUFFRDtJQUFnRCw4Q0FBMkI7SUFFekUsb0NBQVksTUFBYyxFQUFTLE9BQVk7UUFBL0MsWUFDRSxrQkFBTSx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQ2pEO1FBRmtDLGFBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEMsVUFBSSxHQUFHLDhCQUE4QixDQUFDOztJQUcvQyxDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBZ0QsVUFBVSxDQUFDLGdCQUFnQixHQUsxRTs7QUFFRDtJQUFtRCxpREFBOEI7SUFFL0UsdUNBQW1CLE9BQThDO1FBQWpFLFlBQ0Usa0JBQU0sd0JBQXdCLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUNoRDtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUF1QztRQUR4RCxVQUFJLEdBQUcsaUNBQWlDLENBQUM7O0lBR2xELENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFMRCxDQUFtRCxVQUFVLENBQUMsbUJBQW1CLEdBS2hGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IE5BVklHQVRJT05fREVUQUlMX0VOVElUWSB9IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0NNU19OQVZJR0FUSU9OX0lURU1TID0gJ1tDbXNdIExvYWQgTmF2aWdhdGlvbkVudHJ5IGl0ZW1zJztcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19OQVZJR0FUSU9OX0lURU1TX0ZBSUwgPVxuICAnW0Ntc10gTG9hZCBOYXZpZ2F0aW9uRW50cnkgaXRlbXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9DTVNfTkFWSUdBVElPTl9JVEVNU19TVUNDRVNTID1cbiAgJ1tDbXNdIExvYWQgTmF2aWdhdGlvbkVudHJ5IGl0ZW1zIFN1Y2Nlc3MnO1xuXG5leHBvcnQgY2xhc3MgTG9hZENtc05hdmlnYXRpb25JdGVtcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19OQVZJR0FUSU9OX0lURU1TO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBub2RlSWQ6IHN0cmluZzsgaXRlbXM6IGFueVtdIH0pIHtcbiAgICBzdXBlcihOQVZJR0FUSU9OX0RFVEFJTF9FTlRJVFksIHBheWxvYWQubm9kZUlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZENtc05hdmlnYXRpb25JdGVtc0ZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfTkFWSUdBVElPTl9JVEVNU19GQUlMO1xuICBjb25zdHJ1Y3Rvcihub2RlSWQ6IHN0cmluZywgcHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKE5BVklHQVRJT05fREVUQUlMX0VOVElUWSwgbm9kZUlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZENtc05hdmlnYXRpb25JdGVtc1N1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfTkFWSUdBVElPTl9JVEVNU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBub2RlSWQ6IHN0cmluZzsgY29tcG9uZW50czogYW55W10gfSkge1xuICAgIHN1cGVyKE5BVklHQVRJT05fREVUQUlMX0VOVElUWSwgcGF5bG9hZC5ub2RlSWQpO1xuICB9XG59XG5cbi8vIGFjdGlvbiB0eXBlc1xuZXhwb3J0IHR5cGUgQ21zTmF2aWdhdGlvbkVudHJ5SXRlbUFjdGlvbiA9XG4gIHwgTG9hZENtc05hdmlnYXRpb25JdGVtc1xuICB8IExvYWRDbXNOYXZpZ2F0aW9uSXRlbXNGYWlsXG4gIHwgTG9hZENtc05hdmlnYXRpb25JdGVtc1N1Y2Nlc3M7XG4iXX0=