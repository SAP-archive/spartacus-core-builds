import { CheckoutActions } from '../actions/index';
export const initialState = {
    entities: {},
    selected: undefined,
};
export function reducer(state = initialState, action) {
    switch (action.type) {
        case CheckoutActions.LOAD_PAYMENT_TYPES_SUCCESS: {
            const paymentTypes = action.payload;
            const entities = paymentTypes.reduce((paymentTypesEntities, name) => {
                return Object.assign(Object.assign({}, paymentTypesEntities), { [name.code]: name });
            }, Object.assign({}, state.entities));
            return Object.assign(Object.assign({}, state), { entities });
        }
        case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {
            return Object.assign(Object.assign({}, state), { selected: action.payload.paymentType.code });
        }
        case CheckoutActions.CLEAR_CHECKOUT_DATA: {
            return Object.assign(Object.assign({}, state), { selected: undefined });
        }
        case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {
            return initialState;
        }
    }
    return state;
}
export const getPaymentTypesEntites = (state) => state.entities;
export const getSelectedPaymentType = (state) => state.selected;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3JlZHVjZXJzL3BheW1lbnQtdHlwZXMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHbkQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFzQjtJQUM3QyxRQUFRLEVBQUUsRUFBRTtJQUNaLFFBQVEsRUFBRSxTQUFTO0NBQ3BCLENBQUM7QUFFRixNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUcwQztJQUUxQyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxlQUFlLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMvQyxNQUFNLFlBQVksR0FBa0IsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuRCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUNsQyxDQUNFLG9CQUFxRCxFQUNyRCxJQUFpQixFQUNqQixFQUFFO2dCQUNGLHVDQUNLLG9CQUFvQixLQUN2QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQ2pCO1lBQ0osQ0FBQyxvQkFFSSxLQUFLLENBQUMsUUFBUSxFQUVwQixDQUFDO1lBRUYsdUNBQ0ssS0FBSyxLQUNSLFFBQVEsSUFDUjtTQUNIO1FBRUQsS0FBSyxlQUFlLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUM3Qyx1Q0FDSyxLQUFLLEtBQ1IsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksSUFDekM7U0FDSDtRQUVELEtBQUssZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDeEMsdUNBQ0ssS0FBSyxLQUNSLFFBQVEsRUFBRSxTQUFTLElBQ25CO1NBQ0g7UUFFRCxLQUFLLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUNqRSxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsS0FBd0IsRUFBRSxFQUFFLENBQ2pFLEtBQUssQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXltZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xuaW1wb3J0IHsgQ2hlY2tvdXRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBQYXltZW50VHlwZXNTdGF0ZSB9IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogUGF5bWVudFR5cGVzU3RhdGUgPSB7XG4gIGVudGl0aWVzOiB7fSxcbiAgc2VsZWN0ZWQ6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOlxuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLlBheW1lbnRUeXBlc0FjdGlvblxuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLkNsZWFyQ2hlY2tvdXREYXRhXG4gICAgfCBDaGVja291dEFjdGlvbnMuQ2hlY2tvdXRDbGVhck1pc2NzRGF0YVxuKTogUGF5bWVudFR5cGVzU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBDaGVja291dEFjdGlvbnMuTE9BRF9QQVlNRU5UX1RZUEVTX1NVQ0NFU1M6IHtcbiAgICAgIGNvbnN0IHBheW1lbnRUeXBlczogUGF5bWVudFR5cGVbXSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSBwYXltZW50VHlwZXMucmVkdWNlKFxuICAgICAgICAoXG4gICAgICAgICAgcGF5bWVudFR5cGVzRW50aXRpZXM6IHsgW2NvZGU6IHN0cmluZ106IFBheW1lbnRUeXBlIH0sXG4gICAgICAgICAgbmFtZTogUGF5bWVudFR5cGVcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBheW1lbnRUeXBlc0VudGl0aWVzLFxuICAgICAgICAgICAgW25hbWUuY29kZV06IG5hbWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLnN0YXRlLmVudGl0aWVzLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW50aXRpZXMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgQ2hlY2tvdXRBY3Rpb25zLlNFVF9QQVlNRU5UX1RZUEVfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNlbGVjdGVkOiBhY3Rpb24ucGF5bG9hZC5wYXltZW50VHlwZS5jb2RlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIENoZWNrb3V0QWN0aW9ucy5DTEVBUl9DSEVDS09VVF9EQVRBOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2VsZWN0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBDaGVja291dEFjdGlvbnMuQ0hFQ0tPVVRfQ0xFQVJfTUlTQ1NfREFUQToge1xuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQYXltZW50VHlwZXNFbnRpdGVzID0gKHN0YXRlOiBQYXltZW50VHlwZXNTdGF0ZSkgPT5cbiAgc3RhdGUuZW50aXRpZXM7XG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQYXltZW50VHlwZSA9IChzdGF0ZTogUGF5bWVudFR5cGVzU3RhdGUpID0+XG4gIHN0YXRlLnNlbGVjdGVkO1xuIl19