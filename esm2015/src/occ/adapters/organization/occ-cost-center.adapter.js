import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { ConverterService } from '../../../util/converter.service';
import { COST_CENTER_NORMALIZER, COST_CENTERS_NORMALIZER, } from '../../../organization/connectors/cost-center/converters';
import { BUDGETS_NORMALIZER } from '../../../organization/connectors/budget/converters';
let OccCostCenterAdapter = class OccCostCenterAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId, costCenterCode) {
        return this.http
            .get(this.getCostCenterEndpoint(userId, costCenterCode))
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    loadList(userId, params) {
        return this.http
            .get(this.getAllCostCentersEndpoint(userId, params))
            .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
    }
    loadActiveList(userId) {
        const params = new HttpParams().set('fields', 'DEFAULT,unit(BASIC,addresses(DEFAULT))');
        return this.http
            .get(this.getCostCentersEndpoint(userId), { params })
            .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
    }
    create(userId, costCenter) {
        return this.http
            .post(this.getCostCentersEndpoint(userId), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    update(userId, costCenterCode, costCenter) {
        return this.http
            .patch(this.getCostCenterEndpoint(userId, costCenterCode), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    loadBudgets(userId, costCenterCode, params) {
        return this.http
            .get(this.getBudgetsEndpoint(userId, costCenterCode, params))
            .pipe(this.converter.pipeable(BUDGETS_NORMALIZER));
    }
    assignBudget(userId, costCenterCode, budgetCode) {
        return this.http.post(this.getBudgetsEndpoint(userId, costCenterCode, { budgetCode }), null);
    }
    unassignBudget(userId, costCenterCode, budgetCode) {
        return this.http.delete(this.getBudgetEndpoint(userId, costCenterCode, budgetCode));
    }
    getCostCenterEndpoint(userId, costCenterCode) {
        return this.occEndpoints.getUrl('costCenter', { userId, costCenterCode });
    }
    getCostCentersEndpoint(userId, params) {
        return this.occEndpoints.getUrl('costCenters', { userId }, params);
    }
    getAllCostCentersEndpoint(userId, params) {
        return this.occEndpoints.getUrl('costCentersAll', { userId }, params);
    }
    getBudgetsEndpoint(userId, costCenterCode, params) {
        return this.occEndpoints.getUrl('costCenterBudgets', { userId, costCenterCode }, params);
    }
    getBudgetEndpoint(userId, costCenterCode, budgetCode) {
        return this.occEndpoints.getUrl('costCenterBudget', {
            userId,
            costCenterCode,
            budgetCode,
        });
    }
};
OccCostCenterAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
OccCostCenterAdapter = __decorate([
    Injectable()
], OccCostCenterAdapter);
export { OccCostCenterAdapter };
//# sourceMappingURL=data:application/json;base64,