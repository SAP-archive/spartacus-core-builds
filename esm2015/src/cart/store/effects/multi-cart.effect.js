import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { map } from 'rxjs/operators';
import { CheckoutActions } from '../../../checkout/store/actions';
import * as DeprecatedCartActions from '../actions/cart.action';
import { CartActions } from '../actions/index';
let MultiCartEffects = class MultiCartEffects {
    constructor(actions$) {
        this.actions$ = actions$;
        this.loadCart2$ = this.actions$.pipe(ofType(DeprecatedCartActions.LOAD_CART), map((action) => new CartActions.LoadMultiCart(action.payload)));
        this.createCart2$ = this.actions$.pipe(ofType(DeprecatedCartActions.CREATE_CART), map((action) => new CartActions.CreateMultiCart(action.payload)));
        this.setTempCart$ = this.actions$.pipe(ofType(CartActions.SET_TEMP_CART), map((action) => {
            return new CartActions.RemoveTempCart(action.payload);
        }));
        this.mergeCart2$ = this.actions$.pipe(ofType(DeprecatedCartActions.MERGE_CART), map((action) => new CartActions.MergeMultiCart(action.payload)));
        this.addEmail2$ = this.actions$.pipe(ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART), map((action) => new CartActions.AddEmailToMultiCart(action.payload)));
        this.removeCart$ = this.actions$.pipe(ofType(DeprecatedCartActions.DELETE_CART), map((action) => action.payload), map(payload => new CartActions.RemoveCart(payload.cartId)));
        // TODO: Change actions to extend Increment action instead of doing extra dispatch in this effect
        // Change for 2.0 release
        this.processesIncrement$ = this.actions$.pipe(ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART, CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE, CartActions.CART_ADD_VOUCHER), map((action) => action.payload), map(payload => new CartActions.CartProcessesIncrement(payload.cartId)));
    }
};
MultiCartEffects.ctorParameters = () => [
    { type: Actions }
];
__decorate([
    Effect()
], MultiCartEffects.prototype, "loadCart2$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "createCart2$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "setTempCart$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "mergeCart2$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "addEmail2$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "removeCart$", void 0);
__decorate([
    Effect()
], MultiCartEffects.prototype, "processesIncrement$", void 0);
MultiCartEffects = __decorate([
    Injectable()
], MultiCartEffects);
export { MultiCartEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5lZmZlY3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zdG9yZS9lZmZlY3RzL211bHRpLWNhcnQuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHL0MsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUEwRTNCLFlBQW9CLFFBQWlCO1FBQWpCLGFBQVEsR0FBUixRQUFRLENBQVM7UUF4RXJDLGVBQVUsR0FBMEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3BFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsRUFDdkMsR0FBRyxDQUNELENBQUMsTUFBc0MsRUFBRSxFQUFFLENBQ3pDLElBQUksV0FBVyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ2hELENBQ0YsQ0FBQztRQUdGLGlCQUFZLEdBQTRDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN4RSxNQUFNLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLEVBQ3pDLEdBQUcsQ0FDRCxDQUFDLE1BQThCLEVBQUUsRUFBRSxDQUNqQyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNsRCxDQUNGLENBQUM7UUFHRixpQkFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUMvQixNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUNqQyxHQUFHLENBQUMsQ0FBQyxNQUErQixFQUFFLEVBQUU7WUFDdEMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUNILENBQUM7UUFHRixnQkFBVyxHQUEyQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdEUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUN4QyxHQUFHLENBQ0QsQ0FBQyxNQUF1QyxFQUFFLEVBQUUsQ0FDMUMsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDakQsQ0FDRixDQUFDO1FBR0YsZUFBVSxHQUFnRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDMUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQy9DLEdBQUcsQ0FDRCxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUNyQyxJQUFJLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ3RELENBQ0YsQ0FBQztRQUdGLGdCQUFXLEdBQXVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNsRSxNQUFNLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLEVBQ3pDLEdBQUcsQ0FBQyxDQUFDLE1BQXdDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDakUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUMzRCxDQUFDO1FBRUYsaUdBQWlHO1FBQ2pHLHlCQUF5QjtRQUV6Qix3QkFBbUIsR0FFZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUNKLHFCQUFxQixDQUFDLGlCQUFpQixFQUN2QyxlQUFlLENBQUMsNEJBQTRCLEVBQzVDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FDN0IsRUFDRCxHQUFHLENBQ0QsQ0FDRSxNQUc4QixFQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDcEIsRUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDdkUsQ0FBQztJQUVzQyxDQUFDO0NBQzFDLENBQUE7O1lBRCtCLE9BQU87O0FBeEVyQztJQURDLE1BQU0sRUFBRTtvREFPUDtBQUdGO0lBREMsTUFBTSxFQUFFO3NEQU9QO0FBR0Y7SUFEQyxNQUFNLEVBQUU7c0RBTVA7QUFHRjtJQURDLE1BQU0sRUFBRTtxREFPUDtBQUdGO0lBREMsTUFBTSxFQUFFO29EQU9QO0FBR0Y7SUFEQyxNQUFNLEVBQUU7cURBS1A7QUFLRjtJQURDLE1BQU0sRUFBRTs2REFrQlA7QUF4RVMsZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTtHQUNBLGdCQUFnQixDQTJFNUI7U0EzRVksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENoZWNrb3V0QWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2NoZWNrb3V0L3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0ICogYXMgRGVwcmVjYXRlZENhcnRBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvY2FydC5hY3Rpb24nO1xuaW1wb3J0IHsgQ2FydEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE11bHRpQ2FydEVmZmVjdHMge1xuICBARWZmZWN0KClcbiAgbG9hZENhcnQyJDogT2JzZXJ2YWJsZTxDYXJ0QWN0aW9ucy5Mb2FkTXVsdGlDYXJ0PiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoRGVwcmVjYXRlZENhcnRBY3Rpb25zLkxPQURfQ0FSVCksXG4gICAgbWFwKFxuICAgICAgKGFjdGlvbjogRGVwcmVjYXRlZENhcnRBY3Rpb25zLkxvYWRDYXJ0KSA9PlxuICAgICAgICBuZXcgQ2FydEFjdGlvbnMuTG9hZE11bHRpQ2FydChhY3Rpb24ucGF5bG9hZClcbiAgICApXG4gICk7XG5cbiAgQEVmZmVjdCgpXG4gIGNyZWF0ZUNhcnQyJDogT2JzZXJ2YWJsZTxDYXJ0QWN0aW9ucy5DcmVhdGVNdWx0aUNhcnQ+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShEZXByZWNhdGVkQ2FydEFjdGlvbnMuQ1JFQVRFX0NBUlQpLFxuICAgIG1hcChcbiAgICAgIChhY3Rpb246IENhcnRBY3Rpb25zLkNyZWF0ZUNhcnQpID0+XG4gICAgICAgIG5ldyBDYXJ0QWN0aW9ucy5DcmVhdGVNdWx0aUNhcnQoYWN0aW9uLnBheWxvYWQpXG4gICAgKVxuICApO1xuXG4gIEBFZmZlY3QoKVxuICBzZXRUZW1wQ2FydCQgPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKENhcnRBY3Rpb25zLlNFVF9URU1QX0NBUlQpLFxuICAgIG1hcCgoYWN0aW9uOiBDYXJ0QWN0aW9ucy5TZXRUZW1wQ2FydCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBDYXJ0QWN0aW9ucy5SZW1vdmVUZW1wQ2FydChhY3Rpb24ucGF5bG9hZCk7XG4gICAgfSlcbiAgKTtcblxuICBARWZmZWN0KClcbiAgbWVyZ2VDYXJ0MiQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuTWVyZ2VNdWx0aUNhcnQ+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShEZXByZWNhdGVkQ2FydEFjdGlvbnMuTUVSR0VfQ0FSVCksXG4gICAgbWFwKFxuICAgICAgKGFjdGlvbjogRGVwcmVjYXRlZENhcnRBY3Rpb25zLk1lcmdlQ2FydCkgPT5cbiAgICAgICAgbmV3IENhcnRBY3Rpb25zLk1lcmdlTXVsdGlDYXJ0KGFjdGlvbi5wYXlsb2FkKVxuICAgIClcbiAgKTtcblxuICBARWZmZWN0KClcbiAgYWRkRW1haWwyJDogT2JzZXJ2YWJsZTxDYXJ0QWN0aW9ucy5BZGRFbWFpbFRvTXVsdGlDYXJ0PiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoRGVwcmVjYXRlZENhcnRBY3Rpb25zLkFERF9FTUFJTF9UT19DQVJUKSxcbiAgICBtYXAoXG4gICAgICAoYWN0aW9uOiBDYXJ0QWN0aW9ucy5BZGRFbWFpbFRvQ2FydCkgPT5cbiAgICAgICAgbmV3IENhcnRBY3Rpb25zLkFkZEVtYWlsVG9NdWx0aUNhcnQoYWN0aW9uLnBheWxvYWQpXG4gICAgKVxuICApO1xuXG4gIEBFZmZlY3QoKVxuICByZW1vdmVDYXJ0JDogT2JzZXJ2YWJsZTxDYXJ0QWN0aW9ucy5SZW1vdmVDYXJ0PiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoRGVwcmVjYXRlZENhcnRBY3Rpb25zLkRFTEVURV9DQVJUKSxcbiAgICBtYXAoKGFjdGlvbjogRGVwcmVjYXRlZENhcnRBY3Rpb25zLkRlbGV0ZUNhcnQpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICBtYXAocGF5bG9hZCA9PiBuZXcgQ2FydEFjdGlvbnMuUmVtb3ZlQ2FydChwYXlsb2FkLmNhcnRJZCkpXG4gICk7XG5cbiAgLy8gVE9ETzogQ2hhbmdlIGFjdGlvbnMgdG8gZXh0ZW5kIEluY3JlbWVudCBhY3Rpb24gaW5zdGVhZCBvZiBkb2luZyBleHRyYSBkaXNwYXRjaCBpbiB0aGlzIGVmZmVjdFxuICAvLyBDaGFuZ2UgZm9yIDIuMCByZWxlYXNlXG4gIEBFZmZlY3QoKVxuICBwcm9jZXNzZXNJbmNyZW1lbnQkOiBPYnNlcnZhYmxlPFxuICAgIENhcnRBY3Rpb25zLkNhcnRQcm9jZXNzZXNJbmNyZW1lbnRcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoXG4gICAgICBEZXByZWNhdGVkQ2FydEFjdGlvbnMuQUREX0VNQUlMX1RPX0NBUlQsXG4gICAgICBDaGVja291dEFjdGlvbnMuQ0xFQVJfQ0hFQ0tPVVRfREVMSVZFUllfTU9ERSxcbiAgICAgIENhcnRBY3Rpb25zLkNBUlRfQUREX1ZPVUNIRVJcbiAgICApLFxuICAgIG1hcChcbiAgICAgIChcbiAgICAgICAgYWN0aW9uOlxuICAgICAgICAgIHwgRGVwcmVjYXRlZENhcnRBY3Rpb25zLkFkZEVtYWlsVG9DYXJ0XG4gICAgICAgICAgfCBDaGVja291dEFjdGlvbnMuQ2xlYXJDaGVja291dERlbGl2ZXJ5TW9kZVxuICAgICAgICAgIHwgQ2FydEFjdGlvbnMuQ2FydEFkZFZvdWNoZXJcbiAgICAgICkgPT4gYWN0aW9uLnBheWxvYWRcbiAgICApLFxuICAgIG1hcChwYXlsb2FkID0+IG5ldyBDYXJ0QWN0aW9ucy5DYXJ0UHJvY2Vzc2VzSW5jcmVtZW50KHBheWxvYWQuY2FydElkKSlcbiAgKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zKSB7fVxufVxuIl19