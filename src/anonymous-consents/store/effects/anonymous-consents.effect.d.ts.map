{"version":3,"file":"anonymous-consents.effect.d.ts","sources":["anonymous-consents.effect.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Actions } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { AuthService, UserIdService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\nexport declare class AnonymousConsentsEffects {\n    private actions$;\n    private anonymousConsentTemplatesConnector;\n    private authService;\n    private anonymousConsentsConfig;\n    private anonymousConsentService;\n    private userConsentService;\n    private userIdService;\n    checkConsentVersions$: Observable<AnonymousConsentsActions.LoadAnonymousConsentTemplates | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail | Observable<never>>;\n    loadAnonymousConsentTemplates$: Observable<AnonymousConsentsActions.AnonymousConsentsActions>;\n    transferAnonymousConsentsToUser$: Observable<UserActions.TransferAnonymousConsent | Observable<never>>;\n    giveRequiredConsentsToUser$: Observable<UserActions.GiveUserConsent | Observable<never>>;\n    constructor(actions$: Actions, anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector, authService: AuthService, anonymousConsentsConfig: AnonymousConsentsConfig, anonymousConsentService: AnonymousConsentsService, userConsentService: UserConsentService, userIdService: UserIdService);\n    /**\n     * Compares the given versions and determines if there's a mismatch,\n     * in which case `true` is returned.\n     *\n     * @param currentVersions versions of the current consents\n     * @param newVersions versions of the new consents\n     */\n    private detectUpdatedVersion;\n}\n"]}