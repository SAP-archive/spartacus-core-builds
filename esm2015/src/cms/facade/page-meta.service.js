import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { debounceTime, filter, map, shareReplay, switchMap, } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import * as i0 from "@angular/core";
import * as i1 from "./cms.service";
import * as i2 from "../../lazy-loading/unified-injector";
export class PageMetaService {
    constructor(cms, unifiedInjector) {
        this.cms = cms;
        this.unifiedInjector = unifiedInjector;
        this.resolvers$ = this.unifiedInjector
            .getMulti(PageMetaResolver)
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
    }
    getMeta() {
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap((page) => this.getMetaResolver(page)), switchMap((metaResolver) => metaResolver ? this.resolve(metaResolver) : of(null)));
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolveMethods = Object.keys(this.resolverMethods)
            .filter((key) => metaResolver[this.resolverMethods[key]])
            .map((key) => metaResolver[this.resolverMethods[key]]().pipe(map((data) => ({
            [key]: data,
        }))));
        return combineLatest(resolveMethods).pipe(debounceTime(0), // avoid partial data emissions when all methods resolve at the same time
        map((data) => Object.assign({}, ...data)));
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return this.resolvers$.pipe(map((resolvers) => resolveApplicable(resolvers, [page], [page])));
    }
}
PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.UnifiedInjector)); }, token: PageMetaService, providedIn: "root" });
PageMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PageMetaService.ctorParameters = () => [
    { type: CmsService },
    { type: UnifiedInjector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvZmFjYWRlL3BhZ2UtbWV0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUNMLFlBQVksRUFDWixNQUFNLEVBQ04sR0FBRyxFQUNILFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7OztBQUt0RSxNQUFNLE9BQU8sZUFBZTtJQVMxQixZQUNZLEdBQWUsRUFDZixlQUFpQztRQURqQyxRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2Ysb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBVnJDLGVBQVUsR0FFZCxJQUFJLENBQUMsZUFBZTthQUNyQixRQUFRLENBQUMsZ0JBQWdCLENBQUM7YUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBRXJELENBQUM7UUFNRjs7Ozs7O1dBTUc7UUFDTyxvQkFBZSxHQUE4QjtZQUNyRCxLQUFLLEVBQUUsY0FBYztZQUNyQixPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxLQUFLLEVBQUUsY0FBYztZQUNyQixNQUFNLEVBQUUsZUFBZTtTQUN4QixDQUFDO0lBZkMsQ0FBQztJQWlCSixPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFNBQVMsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNyRCxTQUFTLENBQUMsQ0FBQyxZQUE4QixFQUFFLEVBQUUsQ0FDM0MsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ3JELENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sT0FBTyxDQUFDLFlBQThCO1FBQzlDLE1BQU0sY0FBYyxHQUEyQixNQUFNLENBQUMsSUFBSSxDQUN4RCxJQUFJLENBQUMsZUFBZSxDQUNyQjthQUNFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4RCxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNYLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNiLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQyxDQUNKLENBQ0YsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLHlFQUF5RTtRQUMxRixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLGVBQWUsQ0FBQyxJQUFVO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2pFLENBQUM7SUFDSixDQUFDOzs7O1lBNUVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBTFEsVUFBVTtZQUNWLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgZGVib3VuY2VUaW1lLFxuICBmaWx0ZXIsXG4gIG1hcCxcbiAgc2hhcmVSZXBsYXksXG4gIHN3aXRjaE1hcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgcmVzb2x2ZUFwcGxpY2FibGUgfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpY2FibGUnO1xuaW1wb3J0IHsgUGFnZSwgUGFnZU1ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VNZXRhUmVzb2x2ZXIgfSBmcm9tICcuLi9wYWdlL3BhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBVbmlmaWVkSW5qZWN0b3IgfSBmcm9tICcuLi8uLi9sYXp5LWxvYWRpbmcvdW5pZmllZC1pbmplY3Rvcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdlTWV0YVNlcnZpY2Uge1xuICBwcml2YXRlIHJlc29sdmVycyQ6IE9ic2VydmFibGU8XG4gICAgUGFnZU1ldGFSZXNvbHZlcltdXG4gID4gPSB0aGlzLnVuaWZpZWRJbmplY3RvclxuICAgIC5nZXRNdWx0aShQYWdlTWV0YVJlc29sdmVyKVxuICAgIC5waXBlKHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSkpIGFzIE9ic2VydmFibGU8XG4gICAgUGFnZU1ldGFSZXNvbHZlcltdXG4gID47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdW5pZmllZEluamVjdG9yPzogVW5pZmllZEluamVjdG9yXG4gICkge31cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHJlc29sdmVyIGludGVyZmFjZXMgd2lsbCBiZSBldmFsdWF0ZWQgZm9yIHRoZSBwYWdlUmVzb2x2ZXJzLlxuICAgKlxuICAgKiBUT09EOiBvcHRpbWl6ZSBicm93c2VyIHZzIFNTUiByZXNvbHZlcnM7IGltYWdlLCByb2JvdHMgYW5kIGRlc2NyaXB0aW9uXG4gICAqICAgICAgIGFyZW4ndCBuZWVkZWQgZHVyaW5nIGJyb3dzaW5nLlxuICAgKiBUT0RPOiB3ZSBjYW4gbWFrZSB0aGUgbGlzdCBvZiByZXNvbHZlciB0eXBlcyBjb25maWd1cmFibGVcbiAgICovXG4gIHByb3RlY3RlZCByZXNvbHZlck1ldGhvZHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgdGl0bGU6ICdyZXNvbHZlVGl0bGUnLFxuICAgIGhlYWRpbmc6ICdyZXNvbHZlSGVhZGluZycsXG4gICAgZGVzY3JpcHRpb246ICdyZXNvbHZlRGVzY3JpcHRpb24nLFxuICAgIGJyZWFkY3J1bWJzOiAncmVzb2x2ZUJyZWFkY3J1bWJzJyxcbiAgICBpbWFnZTogJ3Jlc29sdmVJbWFnZScsXG4gICAgcm9ib3RzOiAncmVzb2x2ZVJvYm90cycsXG4gIH07XG5cbiAgZ2V0TWV0YSgpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmNtcy5nZXRDdXJyZW50UGFnZSgpLnBpcGUoXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2U6IFBhZ2UpID0+IHRoaXMuZ2V0TWV0YVJlc29sdmVyKHBhZ2UpKSxcbiAgICAgIHN3aXRjaE1hcCgobWV0YVJlc29sdmVyOiBQYWdlTWV0YVJlc29sdmVyKSA9PlxuICAgICAgICBtZXRhUmVzb2x2ZXIgPyB0aGlzLnJlc29sdmUobWV0YVJlc29sdmVyKSA6IG9mKG51bGwpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIGBQYWdlUmVzb2x2ZXJgIGhhcyBpbXBsZW1lbnRlZCBhIHJlc29sdmVyIGludGVyZmFjZSwgdGhlIHJlc29sdmVkIGRhdGFcbiAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxuICAgKiBAcGFyYW0gbWV0YVJlc29sdmVyXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPiB7XG4gICAgY29uc3QgcmVzb2x2ZU1ldGhvZHM6IE9ic2VydmFibGU8UGFnZU1ldGE+W10gPSBPYmplY3Qua2V5cyhcbiAgICAgIHRoaXMucmVzb2x2ZXJNZXRob2RzXG4gICAgKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBtZXRhUmVzb2x2ZXJbdGhpcy5yZXNvbHZlck1ldGhvZHNba2V5XV0pXG4gICAgICAubWFwKChrZXkpID0+XG4gICAgICAgIG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSgpLnBpcGUoXG4gICAgICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgW2tleV06IGRhdGEsXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChyZXNvbHZlTWV0aG9kcykucGlwZShcbiAgICAgIGRlYm91bmNlVGltZSgwKSwgLy8gYXZvaWQgcGFydGlhbCBkYXRhIGVtaXNzaW9ucyB3aGVuIGFsbCBtZXRob2RzIHJlc29sdmUgYXQgdGhlIHNhbWUgdGltZVxuICAgICAgbWFwKChkYXRhKSA9PiBPYmplY3QuYXNzaWduKHt9LCAuLi5kYXRhKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcmVzb2x2ZXIgd2l0aCB0aGUgYmVzdCBtYXRjaCwgYmFzZWQgb24gYSBzY29yZVxuICAgKiBnZW5lcmF0ZWQgYnkgdGhlIHJlc29sdmVyLlxuICAgKlxuICAgKiBSZXNvbHZlcnMgbWF0Y2ggYnkgZGVmYXVsdCBvbiBgUGFnZVR5cGVgIGFuZCBgcGFnZS50ZW1wbGF0ZWAuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0TWV0YVJlc29sdmVyKHBhZ2U6IFBhZ2UpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhUmVzb2x2ZXI+IHtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlcnMkLnBpcGUoXG4gICAgICBtYXAoKHJlc29sdmVycykgPT4gcmVzb2x2ZUFwcGxpY2FibGUocmVzb2x2ZXJzLCBbcGFnZV0sIFtwYWdlXSkpXG4gICAgKTtcbiAgfVxufVxuIl19