(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngrx/store'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/router'), require('angular-oauth2-oidc'), require('@angular/common/http'), require('@ngrx/effects'), require('@angular/platform-browser'), require('@ngrx/router-store'), require('i18next'), require('i18next-xhr-backend')) :
    typeof define === 'function' && define.amd ? define('@spartacus/core', ['exports', '@angular/core', '@ngrx/store', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/router', 'angular-oauth2-oidc', '@angular/common/http', '@ngrx/effects', '@angular/platform-browser', '@ngrx/router-store', 'i18next', 'i18next-xhr-backend'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.core = {}), global.ng.core, global.store, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.router, global.angularOAuth2Oidc, global.ng.common.http, global.effects, global.ng.platformBrowser, global.fromNgrxRouter, global.i18next, global.i18nextXhrBackend));
}(this, (function (exports, i0, i1$2, rxjs, operators, i1, i1$1, i1$3, i1$4, i3, i5, fromNgrxRouter, i18next, i18nextXhrBackend) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var i18next__default = /*#__PURE__*/_interopDefaultLegacy(i18next);
    var i18nextXhrBackend__default = /*#__PURE__*/_interopDefaultLegacy(i18nextXhrBackend);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    function isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item);
    }
    function deepMerge(target) {
        var _a, _b, _c;
        if (target === void 0) { target = {}; }
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift() || {};
        if (isObject(target) && isObject(source)) {
            for (var key in source) {
                if (source[key] instanceof Date) {
                    Object.assign(target, (_a = {}, _a[key] = source[key], _a));
                }
                else if (isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_b = {}, _b[key] = {}, _b));
                    }
                    deepMerge(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_c = {}, _c[key] = source[key], _c));
                }
            }
        }
        return deepMerge.apply(void 0, __spread([target], sources));
    }

    /**
     * Global Configuration injection token, can be used to inject configuration to any part of the app
     */
    var Config = new i0.InjectionToken('Configuration', {
        providedIn: 'root',
        factory: function () { return deepMerge({}, i0.inject(DefaultConfig), i0.inject(RootConfig)); },
    });
    /**
     * Default Configuration token, used to build Global Configuration, built from DefaultConfigChunks
     */
    var DefaultConfig = new i0.InjectionToken('DefaultConfiguration', {
        providedIn: 'root',
        factory: function () { var _a; return deepMerge.apply(void 0, __spread([{}], ((_a = i0.inject(DefaultConfigChunk, i0.InjectFlags.Optional)) !== null && _a !== void 0 ? _a : []))); },
    });
    /**
     * Root Configuration token, used to build Global Configuration, built from ConfigChunks
     */
    var RootConfig = new i0.InjectionToken('RootConfiguration', {
        providedIn: 'root',
        factory: function () { var _a; return deepMerge.apply(void 0, __spread([{}], ((_a = i0.inject(ConfigChunk, i0.InjectFlags.Optional)) !== null && _a !== void 0 ? _a : []))); },
    });
    /**
     * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.
     * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.
     */
    var ConfigChunk = new i0.InjectionToken('ConfigurationChunk');
    /**
     * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.
     * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.
     *
     * General rule is, that all config provided in libraries should be provided as default config.
     */
    var DefaultConfigChunk = new i0.InjectionToken('DefaultConfigurationChunk');

    /**
     * Helper function to provide configuration chunk using ConfigChunk token
     *
     * To provide default configuration in libraries provideDefaultConfig should be used instead.
     *
     * @param config Config object to merge with the global configuration
     */
    function provideConfig(config, defaultConfig) {
        if (config === void 0) { config = {}; }
        if (defaultConfig === void 0) { defaultConfig = false; }
        return {
            provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,
            useValue: config,
            multi: true,
        };
    }
    /**
     * Helper function to provide configuration with factory function, using ConfigChunk token
     *
     * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.
     *
     * @param configFactory Factory Function that will generate config object
     * @param deps Optional dependencies to a factory function
     */
    function provideConfigFactory(configFactory, deps, defaultConfig) {
        if (defaultConfig === void 0) { defaultConfig = false; }
        return {
            provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,
            useFactory: configFactory,
            multi: true,
            deps: deps,
        };
    }
    /**
     * Helper function to provide default configuration chunk using DefaultConfigChunk token
     *
     * @param config Config object to merge with the default configuration
     */
    function provideDefaultConfig(config) {
        if (config === void 0) { config = {}; }
        return {
            provide: DefaultConfigChunk,
            useValue: config,
            multi: true,
        };
    }
    /**
     * Helper function to provide default configuration with factory function, using DefaultConfigChunk token
     *
     * @param configFactory Factory Function that will generate config object
     * @param deps Optional dependencies to a factory function
     */
    function provideDefaultConfigFactory(configFactory, deps) {
        return {
            provide: DefaultConfigChunk,
            useFactory: configFactory,
            multi: true,
            deps: deps,
        };
    }

    var defaultAnonymousConsentsConfig = {
        anonymousConsents: {
            registerConsent: 'MARKETING_NEWSLETTER',
            showLegalDescriptionInDialog: true,
            requiredConsents: [],
            consentManagementPage: {
                showAnonymousConsents: true,
                hideConsents: [],
            },
        },
    };

    var OCC_USER_ID_CURRENT = 'current';
    var OCC_USER_ID_ANONYMOUS = 'anonymous';
    var OCC_USER_ID_GUEST = 'guest';
    var OCC_CART_ID_CURRENT = 'current';

    var WindowRef = /** @class */ (function () {
        function WindowRef(document) {
            // it's a workaround to have document property properly typed
            // see: https://github.com/angular/angular/issues/15640
            this.document = document;
        }
        Object.defineProperty(WindowRef.prototype, "nativeWindow", {
            get: function () {
                return typeof window !== 'undefined' ? window : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "sessionStorage", {
            get: function () {
                return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "localStorage", {
            get: function () {
                return this.nativeWindow ? this.nativeWindow.localStorage : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WindowRef.prototype, "resize$", {
            /**
             * Returns an observable for the window resize event and emits an event
             * every 300ms in case of resizing. An event is simulated initially.
             *
             * If there's no window object available (i.e. in SSR), a null value is emitted.
             */
            get: function () {
                if (!this.nativeWindow) {
                    return rxjs.of(null);
                }
                else {
                    return rxjs.fromEvent(this.nativeWindow, 'resize').pipe(operators.debounceTime(300), operators.startWith({ target: this.nativeWindow }), operators.distinctUntilChanged());
                }
            },
            enumerable: false,
            configurable: true
        });
        return WindowRef;
    }());
    WindowRef.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowRef_Factory() { return new WindowRef(i0.ɵɵinject(i1.DOCUMENT)); }, token: WindowRef, providedIn: "root" });
    WindowRef.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    WindowRef.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }
    ]; };

    var UrlParsingService = /** @class */ (function () {
        function UrlParsingService(router) {
            this.router = router;
        }
        UrlParsingService.prototype.getPrimarySegments = function (url) {
            var urlTree = this.router.parseUrl(url);
            return this._getPrimarySegmentsFromUrlTree(urlTree.root);
        };
        UrlParsingService.prototype._getPrimarySegmentsFromUrlTree = function (tree) {
            var segments = tree.segments.map(function (s) { return s.path; });
            var childrenSegments = tree.children[i1$1.PRIMARY_OUTLET]
                ? this._getPrimarySegmentsFromUrlTree(tree.children[i1$1.PRIMARY_OUTLET])
                : [];
            return segments.concat(childrenSegments);
        };
        return UrlParsingService;
    }());
    UrlParsingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UrlParsingService_Factory() { return new UrlParsingService(i0.ɵɵinject(i1$1.Router)); }, token: UrlParsingService, providedIn: "root" });
    UrlParsingService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    UrlParsingService.ctorParameters = function () { return [
        { type: i1$1.Router }
    ]; };

    var isParam = function (segment) { return segment.startsWith(':'); };
    var getParamName = function (segment) { return segment.slice(1); }; // it just removes leading ':'
    var ensureLeadingSlash = function (path) { return path.startsWith('/') ? path : '/' + path; };
    var removeLeadingSlash = function (path) { return path.startsWith('/') ? path.slice(1) : path; };

    var RoutingConfig = /** @class */ (function () {
        function RoutingConfig() {
        }
        return RoutingConfig;
    }());
    RoutingConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingConfig_Factory() { return i0.ɵɵinject(Config); }, token: RoutingConfig, providedIn: "root" });
    RoutingConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var RoutingConfigService = /** @class */ (function () {
        function RoutingConfigService(config) {
            this.config = config;
        }
        /**
         * Returns the route config for the given route name.
         */
        RoutingConfigService.prototype.getRouteConfig = function (routeName) {
            var _a, _b;
            var routeConfig = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.routes;
            var result = routeConfig && routeConfig[routeName];
            if (!routeConfig || result === undefined) {
                this.warn("No path was configured for the named route '" + routeName + "'!");
            }
            return result;
        };
        RoutingConfigService.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (i0.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        /**
         * Returns the configured route loading strategy.
         */
        RoutingConfigService.prototype.getLoadStrategy = function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.loadStrategy) !== null && _c !== void 0 ? _c : "always" /* ALWAYS */;
        };
        /**
         * Returns the route name of the configured path.
         *
         * For example, when the config is:
         * ```
         * routing: {
         *   routes: {
         *      addressBook: { paths: ['my-account/address-book'] }
         *   }
         * }
         * ```
         *
         * the `getRouteName('my-account/address-book')` returns `'addressBook'`.
         */
        RoutingConfigService.prototype.getRouteName = function (path) {
            if (!this.routeNamesByPath) {
                this.initRouteNamesByPath();
            }
            return this.routeNamesByPath[path];
        };
        /**
         * Initializes the property `routeNamesByPath`.
         *
         * The original config allows for reading configured path by the route name.
         * But this method builds up a structure with a 'reversed config'
         * to read quickly the route name by the path.
         */
        RoutingConfigService.prototype.initRouteNamesByPath = function () {
            var e_1, _d;
            var _this = this;
            var _a, _b, _c;
            this.routeNamesByPath = {};
            var _loop_1 = function (routeName, routeConfig) {
                (_c = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths) === null || _c === void 0 ? void 0 : _c.forEach(function (path) {
                    if (i0.isDevMode() && _this.routeNamesByPath[path]) {
                        console.error("The same path '" + path + "' is configured for two different route names: '" + _this.routeNamesByPath[path] + "' and '" + routeName);
                    }
                    _this.routeNamesByPath[path] = routeName;
                });
            };
            try {
                for (var _e = __values(Object.entries((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.routes)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var _g = __read(_f.value, 2), routeName = _g[0], routeConfig = _g[1];
                    _loop_1(routeName, routeConfig);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        return RoutingConfigService;
    }());
    RoutingConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingConfigService_Factory() { return new RoutingConfigService(i0.ɵɵinject(RoutingConfig)); }, token: RoutingConfigService, providedIn: "root" });
    RoutingConfigService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    RoutingConfigService.ctorParameters = function () { return [
        { type: RoutingConfig }
    ]; };

    var SemanticPathService = /** @class */ (function () {
        function SemanticPathService(routingConfigService, urlParser) {
            this.routingConfigService = routingConfigService;
            this.urlParser = urlParser;
            this.ROOT_URL = ['/'];
        }
        /**
         * Returns the first path alias configured for a given route name. It adds `/` at the beginning.
         */
        SemanticPathService.prototype.get = function (routeName) {
            var routeConfig = this.routingConfigService.getRouteConfig(routeName);
            return routeConfig && Array.isArray(routeConfig.paths)
                ? '/' + routeConfig.paths[0]
                : undefined;
        };
        /**
         * Transforms the array of url commands. Each command can be:
         * a) string - will be left untouched
         * b) object { cxRoute: <route name> } - will be replaced with semantic path
         * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params
         *
         * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)
         */
        SemanticPathService.prototype.transform = function (commands) {
            var e_1, _a;
            if (!Array.isArray(commands)) {
                commands = [commands];
            }
            var result = [];
            try {
                for (var commands_1 = __values(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {
                    var command = commands_1_1.value;
                    if (!this.isRouteCommand(command)) {
                        // don't modify segment that is not route command:
                        result.push(command);
                    }
                    else {
                        // generate array with url segments for given route command:
                        var partialResult = this.generateUrlPart(command);
                        if (partialResult === null) {
                            return this.ROOT_URL;
                        }
                        result.push.apply(result, __spread(partialResult));
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.shouldOutputAbsolute(commands)) {
                result.unshift('/');
            }
            return result;
        };
        SemanticPathService.prototype.isRouteCommand = function (command) {
            return command && Boolean(command.cxRoute);
        };
        SemanticPathService.prototype.shouldOutputAbsolute = function (commands) {
            return this.isRouteCommand(commands[0]);
        };
        SemanticPathService.prototype.generateUrlPart = function (command) {
            this.standarizeRouteCommand(command);
            if (!command.cxRoute) {
                return null;
            }
            var routeConfig = this.routingConfigService.getRouteConfig(command.cxRoute);
            // if no route translation was configured, return null:
            if (!routeConfig || !routeConfig.paths) {
                return null;
            }
            // find first path that can satisfy it's parameters with given parameters
            var path = this.findPathWithFillableParams(routeConfig, command.params);
            // if there is no configured path that can be satisfied with given params, return null
            if (!path) {
                return null;
            }
            var result = this.provideParamsValues(path, command.params, routeConfig.paramsMapping);
            return result;
        };
        SemanticPathService.prototype.standarizeRouteCommand = function (command) {
            command.params = command.params || {};
        };
        SemanticPathService.prototype.provideParamsValues = function (path, params, paramsMapping) {
            var _this = this;
            return this.urlParser.getPrimarySegments(path).map(function (segment) {
                if (isParam(segment)) {
                    var paramName = getParamName(segment);
                    var mappedParamName = _this.getMappedParamName(paramName, paramsMapping);
                    return params[mappedParamName];
                }
                return segment;
            });
        };
        SemanticPathService.prototype.findPathWithFillableParams = function (routeConfig, params) {
            var _this = this;
            var foundPath = routeConfig.paths.find(function (path) { return _this.getParams(path).every(function (paramName) {
                var mappedParamName = _this.getMappedParamName(paramName, routeConfig.paramsMapping);
                return params[mappedParamName] !== undefined;
            }); });
            if (foundPath === undefined || foundPath === null) {
                this.warn("No configured path matches all its params to given object. ", "Route config: ", routeConfig, "Params object: ", params);
                return null;
            }
            return foundPath;
        };
        SemanticPathService.prototype.getParams = function (path) {
            return this.urlParser
                .getPrimarySegments(path)
                .filter(isParam)
                .map(getParamName);
        };
        SemanticPathService.prototype.getMappedParamName = function (paramName, paramsMapping) {
            if (paramsMapping) {
                return paramsMapping[paramName] || paramName;
            }
            return paramName;
        };
        SemanticPathService.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (i0.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        return SemanticPathService;
    }());
    SemanticPathService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SemanticPathService_Factory() { return new SemanticPathService(i0.ɵɵinject(RoutingConfigService), i0.ɵɵinject(UrlParsingService)); }, token: SemanticPathService, providedIn: "root" });
    SemanticPathService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    SemanticPathService.ctorParameters = function () { return [
        { type: RoutingConfigService },
        { type: UrlParsingService }
    ]; };

    var ROUTER_GO = '[Router] Go';
    var ROUTER_GO_BY_URL = '[Router] Go By Url';
    var ROUTER_BACK = '[Router] Back';
    var ROUTER_FORWARD = '[Router] Forward';
    var RouteGoAction = /** @class */ (function () {
        function RouteGoAction(payload) {
            this.payload = payload;
            this.type = ROUTER_GO;
        }
        return RouteGoAction;
    }());
    var RouteGoByUrlAction = /** @class */ (function () {
        function RouteGoByUrlAction(payload) {
            this.payload = payload;
            this.type = ROUTER_GO_BY_URL;
        }
        return RouteGoByUrlAction;
    }());
    var RouteBackAction = /** @class */ (function () {
        function RouteBackAction() {
            this.type = ROUTER_BACK;
        }
        return RouteBackAction;
    }());
    var RouteForwardAction = /** @class */ (function () {
        function RouteForwardAction() {
            this.type = ROUTER_FORWARD;
        }
        return RouteForwardAction;
    }());

    var routingGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ROUTER_GO: ROUTER_GO,
        ROUTER_GO_BY_URL: ROUTER_GO_BY_URL,
        ROUTER_BACK: ROUTER_BACK,
        ROUTER_FORWARD: ROUTER_FORWARD,
        RouteGoAction: RouteGoAction,
        RouteGoByUrlAction: RouteGoByUrlAction,
        RouteBackAction: RouteBackAction,
        RouteForwardAction: RouteForwardAction
    });

    var ROUTING_FEATURE = 'router';

    var getRouterFeatureState = i1$2.createFeatureSelector(ROUTING_FEATURE);
    var ɵ0 = function (state) { return state.router; };
    var getRouterState = i1$2.createSelector(getRouterFeatureState, ɵ0);
    var ɵ1 = function (routingState) { return (routingState.state && routingState.state.semanticRoute) || ''; };
    var getSemanticRoute = i1$2.createSelector(getRouterState, ɵ1);
    var ɵ2 = function (routingState) { return (routingState.state && routingState.state.context) || { id: '' }; };
    var getPageContext = i1$2.createSelector(getRouterState, ɵ2);
    var ɵ3 = function (routingState) { return routingState.nextState && routingState.nextState.context; };
    var getNextPageContext = i1$2.createSelector(getRouterState, ɵ3);
    var ɵ4 = function (context) { return !!context; };
    var isNavigating = i1$2.createSelector(getNextPageContext, ɵ4);

    var routingGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getRouterFeatureState: getRouterFeatureState,
        getRouterState: getRouterState,
        getSemanticRoute: getSemanticRoute,
        getPageContext: getPageContext,
        getNextPageContext: getNextPageContext,
        isNavigating: isNavigating,
        ɵ0: ɵ0,
        ɵ1: ɵ1,
        ɵ2: ɵ2,
        ɵ3: ɵ3,
        ɵ4: ɵ4
    });

    /**
     * Helper service to expose all activated routes
     */
    var ActivatedRoutesService = /** @class */ (function () {
        function ActivatedRoutesService(router) {
            var _this = this;
            this.router = router;
            /**
             * Array of currently activated routes (from the root route to the leaf route).
             */
            this.routes$ = this.router.events.pipe(operators.filter(function (event) { return event instanceof i1$1.NavigationEnd; }), 
            // tslint:disable-next-line: deprecation https://github.com/ReactiveX/rxjs/issues/4772
            operators.startWith(undefined), // emit value for consumer who subscribed lately after NavigationEnd event
            operators.map(function () {
                var route = _this.router.routerState.snapshot.root;
                var routes = [route];
                // traverse to the leaf route:
                while ((route = route.firstChild)) {
                    routes.push(route);
                }
                return routes;
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        return ActivatedRoutesService;
    }());
    ActivatedRoutesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActivatedRoutesService_Factory() { return new ActivatedRoutesService(i0.ɵɵinject(i1$1.Router)); }, token: ActivatedRoutesService, providedIn: "root" });
    ActivatedRoutesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ActivatedRoutesService.ctorParameters = function () { return [
        { type: i1$1.Router }
    ]; };

    /**
     * Service to expose all parameters for the router, including child routes.
     * This is convenient in case the parent route (component) requires awareness
     * of child routes parameters.
     */
    var RoutingParamsService = /** @class */ (function () {
        function RoutingParamsService(router, activatedRoutesService) {
            var _this = this;
            this.router = router;
            this.activatedRoutesService = activatedRoutesService;
            this.params$ = this.activatedRoutesService.routes$.pipe(operators.map(function (routes) { return _this.findAllParam(routes); }), operators.shareReplay({ refCount: true, bufferSize: 1 }));
        }
        /**
         * Get the list of all parameters of the full route. This includes
         * active child routes.
         */
        RoutingParamsService.prototype.getParams = function () {
            return this.params$;
        };
        RoutingParamsService.prototype.findAllParam = function (routes) {
            return Object.assign.apply(Object, __spread([{}], routes.map(function (route) { return route.params; })));
        };
        return RoutingParamsService;
    }());
    RoutingParamsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingParamsService_Factory() { return new RoutingParamsService(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(ActivatedRoutesService)); }, token: RoutingParamsService, providedIn: "root" });
    RoutingParamsService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    RoutingParamsService.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: ActivatedRoutesService }
    ]; };

    var RoutingService = /** @class */ (function () {
        function RoutingService(store, winRef, semanticPathService, routingParamsService) {
            this.store = store;
            this.winRef = winRef;
            this.semanticPathService = semanticPathService;
            this.routingParamsService = routingParamsService;
        }
        /**
         * Get the list of all parameters of the full route. This includes
         * active child routes.
         */
        RoutingService.prototype.getParams = function () {
            var _a;
            return (_a = this.routingParamsService) === null || _a === void 0 ? void 0 : _a.getParams();
        };
        /**
         * Get the current router state
         */
        RoutingService.prototype.getRouterState = function () {
            return this.store.pipe(i1$2.select(getRouterState));
        };
        /**
         * Get the `PageContext` from the state
         */
        RoutingService.prototype.getPageContext = function () {
            return this.store.pipe(i1$2.select(getPageContext));
        };
        /**
         * Get the next `PageContext` from the state
         */
        RoutingService.prototype.getNextPageContext = function () {
            return this.store.pipe(i1$2.select(getNextPageContext));
        };
        /**
         * Get the `isNavigating` info from the state
         */
        RoutingService.prototype.isNavigating = function () {
            return this.store.pipe(i1$2.select(isNavigating));
        };
        /**
         * Navigation with a new state into history
         * @param commands: url commands
         * @param query
         * @param extras: Represents the extra options used during navigation.
         */
        RoutingService.prototype.go = function (commands, query, extras) {
            var path = this.semanticPathService.transform(commands);
            return this.navigate(path, query, extras);
        };
        /**
         * Navigation using URL
         * @param url
         */
        RoutingService.prototype.goByUrl = function (url) {
            this.store.dispatch(new RouteGoByUrlAction(url));
        };
        /**
         * Navigating back
         */
        RoutingService.prototype.back = function () {
            var isLastPageInApp = this.winRef.document.referrer.includes(this.winRef.nativeWindow.location.origin);
            if (isLastPageInApp) {
                this.store.dispatch(new RouteBackAction());
                return;
            }
            this.go(['/']);
            return;
        };
        /**
         * Navigating forward
         */
        RoutingService.prototype.forward = function () {
            this.store.dispatch(new RouteForwardAction());
        };
        /**
         * Navigation with a new state into history
         * @param path
         * @param query
         * @param extras: Represents the extra options used during navigation.
         */
        RoutingService.prototype.navigate = function (path, query, extras) {
            this.store.dispatch(new RouteGoAction({
                path: path,
                query: query,
                extras: extras,
            }));
        };
        return RoutingService;
    }());
    RoutingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingService_Factory() { return new RoutingService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(WindowRef), i0.ɵɵinject(SemanticPathService), i0.ɵɵinject(RoutingParamsService)); }, token: RoutingService, providedIn: "root" });
    RoutingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    RoutingService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: WindowRef },
        { type: SemanticPathService },
        { type: RoutingParamsService }
    ]; };

    /**
     * Service serves storage role for AuthRedirectService.
     * Used by AuthStatePersistenceService to store redirect url for OAuth flows that rely on redirects.
     */
    var AuthRedirectStorageService = /** @class */ (function () {
        function AuthRedirectStorageService() {
            this.redirectUrl$ = new rxjs.BehaviorSubject(undefined);
        }
        /**
         * Get redirect url after logging in.
         *
         * @returns observable with the redirect url as string
         */
        AuthRedirectStorageService.prototype.getRedirectUrl = function () {
            return this.redirectUrl$;
        };
        /**
         * Set url to redirect to after login.
         *
         * @param redirectUrl
         */
        AuthRedirectStorageService.prototype.setRedirectUrl = function (redirectUrl) {
            this.redirectUrl$.next(redirectUrl);
        };
        return AuthRedirectStorageService;
    }());
    AuthRedirectStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthRedirectStorageService_Factory() { return new AuthRedirectStorageService(); }, token: AuthRedirectStorageService, providedIn: "root" });
    AuthRedirectStorageService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthRedirectStorageService.ctorParameters = function () { return []; };

    /**
     * Responsible for saving last accessed page (or attempted) before login and for redirecting to that page after login.
     */
    var AuthRedirectService = /** @class */ (function () {
        /**
         * This service is responsible for redirecting to the last page before authorization. "The last page" can be:
         * 1. Just the previously opened page; or
         * 2. The page that we just tried to open, but AuthGuard cancelled it
         *
         * For example:
         * 1. The user opens the product page, then clicks /login link and signs in
         *    -> Then we should redirect to the product page; or
         * 2. The user opens the product page, then he clicks /my-account link,
         *    but is automatically redirected to the login page by the AuthGuard, and he signs in
         *    -> Then we should redirect to the my-account page, not the product page
         */
        function AuthRedirectService(routing, router, authRedirectStorageService) {
            this.routing = routing;
            this.router = router;
            this.authRedirectStorageService = authRedirectStorageService;
            this.ignoredUrls = new Set();
        }
        /**
         * Redirect to saved url (homepage if nothing is saved).
         */
        AuthRedirectService.prototype.redirect = function () {
            var _this = this;
            this.authRedirectStorageService
                .getRedirectUrl()
                .pipe(operators.take(1))
                .subscribe(function (redirectUrl) {
                if (redirectUrl === undefined) {
                    _this.routing.go('/');
                }
                else {
                    _this.routing.goByUrl(redirectUrl);
                }
                _this.authRedirectStorageService.setRedirectUrl(undefined);
                _this.lastAuthGuardNavigation = undefined;
            });
        };
        /**
         * Saves url of a page that user wanted to access, but wasn't yet logged in.
         */
        AuthRedirectService.prototype.reportAuthGuard = function () {
            var _a = this.getCurrentNavigation(), url = _a.url, navigationId = _a.navigationId;
            this.lastAuthGuardNavigation = { url: url, navigationId: navigationId };
            this.authRedirectStorageService.setRedirectUrl(url);
        };
        /**
         * Saves url of a page that was accessed before entering a page only for not auth users.
         */
        AuthRedirectService.prototype.reportNotAuthGuard = function () {
            var _a = this.getCurrentNavigation(), url = _a.url, initialUrl = _a.initialUrl, navigationId = _a.navigationId;
            this.ignoredUrls.add(url);
            // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)
            if (!this.ignoredUrls.has(initialUrl)) {
                // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent
                // than the last opened page
                if (!this.lastAuthGuardNavigation ||
                    this.lastAuthGuardNavigation.navigationId < navigationId - 1) {
                    this.authRedirectStorageService.setRedirectUrl(initialUrl);
                    this.lastAuthGuardNavigation = undefined;
                }
            }
        };
        AuthRedirectService.prototype.getCurrentNavigation = function () {
            var initialUrl = this.router.url;
            var navigation = this.router.getCurrentNavigation();
            var url = this.router.serializeUrl(navigation.finalUrl);
            return {
                navigationId: navigation.id,
                url: url,
                initialUrl: initialUrl,
            };
        };
        return AuthRedirectService;
    }());
    AuthRedirectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthRedirectService_Factory() { return new AuthRedirectService(i0.ɵɵinject(RoutingService), i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(AuthRedirectStorageService)); }, token: AuthRedirectService, providedIn: "root" });
    AuthRedirectService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthRedirectService.ctorParameters = function () { return [
        { type: RoutingService },
        { type: i1$1.Router },
        { type: AuthRedirectStorageService }
    ]; };

    /**
     * Storage service for AuthToken. Used as a storage for angular-oauth2-oidc library.
     */
    var AuthStorageService = /** @class */ (function (_super) {
        __extends(AuthStorageService, _super);
        function AuthStorageService() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this._token$ = new rxjs.BehaviorSubject({});
            return _this;
        }
        AuthStorageService.prototype.decode = function (key, value) {
            if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {
                return value;
            }
            return JSON.stringify(value);
        };
        AuthStorageService.prototype.encode = function (key, value) {
            if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {
                return value;
            }
            else {
                try {
                    return JSON.parse(value);
                }
                catch (_a) {
                    return value;
                }
            }
        };
        /* Async API for spartacus use */
        /**
         * Returns complete token (all fields).
         *
         * @return observable emitting AuthToken
         */
        AuthStorageService.prototype.getToken = function () {
            return this._token$;
        };
        /**
         * Set current value of token.
         *
         * @param token
         */
        AuthStorageService.prototype.setToken = function (token) {
            this._token$.next(token);
        };
        /* Sync API for OAuth lib use */
        /**
         * Get parameter from the token (eg. access_token)
         *
         * @param key
         */
        AuthStorageService.prototype.getItem = function (key) {
            var token;
            this.getToken()
                .subscribe(function (currentToken) { return (token = currentToken); })
                .unsubscribe();
            return this.decode(key, token === null || token === void 0 ? void 0 : token[key]);
        };
        /**
         * Removes parameter from the token (eg. access_token)
         *
         * @param key
         */
        AuthStorageService.prototype.removeItem = function (key) {
            var val = Object.assign({}, this._token$.value);
            delete val[key];
            this._token$.next(Object.assign({}, val));
        };
        /**
         * Sets parameter of the token (eg. access_token)
         *
         * @param key
         */
        AuthStorageService.prototype.setItem = function (key, data) {
            var _b;
            if (key) {
                this._token$.next(Object.assign(Object.assign({}, this._token$.value), (_b = {}, _b[key] = this.encode(key, data), _b)));
            }
        };
        return AuthStorageService;
    }(i1$3.OAuthStorage));
    /**
     * Extracted keys that are not `JSON.stringify` from reading the angular-oauth2-oidc source code
     */
    AuthStorageService.nonStringifiedOAuthLibKeys = [
        'PKCE_verifier',
        'access_token',
        'refresh_token',
        'expires_at',
        'access_token_stored_at',
        'id_token',
        'id_token_expires_at',
        'id_token_stored_at',
        'session_state',
        'nonce',
    ];
    AuthStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthStorageService_Factory() { return new AuthStorageService(); }, token: AuthStorageService, providedIn: "root" });
    AuthStorageService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var SiteContextConfig = /** @class */ (function () {
        function SiteContextConfig() {
        }
        return SiteContextConfig;
    }());
    SiteContextConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteContextConfig_Factory() { return i0.ɵɵinject(Config); }, token: SiteContextConfig, providedIn: "root" });
    SiteContextConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var OccConfig = /** @class */ (function (_super) {
        __extends(OccConfig, _super);
        function OccConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OccConfig;
    }(SiteContextConfig));
    OccConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccConfig_Factory() { return i0.ɵɵinject(Config); }, token: OccConfig, providedIn: "root" });
    OccConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var AuthConfig = /** @class */ (function () {
        function AuthConfig() {
        }
        return AuthConfig;
    }());
    AuthConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthConfig_Factory() { return i0.ɵɵinject(Config); }, token: AuthConfig, providedIn: "root" });
    AuthConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    /**
     * Supported OAuth flows.
     */
    (function (OAuthFlow) {
        /**
         * Flow when username and password is passed to the application and then the application through API fetches tokens from OAuth server.
         */
        OAuthFlow[OAuthFlow["ResourceOwnerPasswordFlow"] = 0] = "ResourceOwnerPasswordFlow";
        /**
         * Flow with redirect to OAuth server where user inputs credentials and the are redirected back with token.
         */
        OAuthFlow[OAuthFlow["ImplicitFlow"] = 1] = "ImplicitFlow";
        /**
         * Similar to Implicit flow, but user is redirected with code that need to later exchange through API for a token.
         */
        OAuthFlow[OAuthFlow["AuthorizationCode"] = 2] = "AuthorizationCode";
    })(exports.OAuthFlow || (exports.OAuthFlow = {}));

    /**
     * Utility service on top of the authorization config.
     * Provides handy defaults, when not everything is set in the configuration.
     * Use this service instead of direct configuration.
     */
    var AuthConfigService = /** @class */ (function () {
        function AuthConfigService(authConfig, occConfig) {
            this.authConfig = authConfig;
            this.occConfig = occConfig;
        }
        /**
         * Get client_id
         *
         * @return client_id
         */
        AuthConfigService.prototype.getClientId = function () {
            var _a;
            return (_a = this.authConfig.authentication.client_id) !== null && _a !== void 0 ? _a : '';
        };
        /**
         * Get client_secret. OAuth server shouldn't require it from web apps (but Hybris OAuth server requires).
         *
         * @return client_secret
         */
        AuthConfigService.prototype.getClientSecret = function () {
            var _a;
            return (_a = this.authConfig.authentication.client_secret) !== null && _a !== void 0 ? _a : '';
        };
        /**
         * Returns base url of the authorization server
         */
        AuthConfigService.prototype.getBaseUrl = function () {
            var _a;
            return ((_a = this.authConfig.authentication.baseUrl) !== null && _a !== void 0 ? _a : this.occConfig.backend.occ.baseUrl + '/authorizationserver');
        };
        /**
         * Returns endpoint for getting the auth token
         */
        AuthConfigService.prototype.getTokenEndpoint = function () {
            var _a;
            var tokenEndpoint = (_a = this.authConfig.authentication.tokenEndpoint) !== null && _a !== void 0 ? _a : '';
            return this.prefixEndpoint(tokenEndpoint);
        };
        /**
         * Returns url for redirect to the authorization server to get token/code
         */
        AuthConfigService.prototype.getLoginUrl = function () {
            var _a;
            var loginUrl = (_a = this.authConfig.authentication.loginUrl) !== null && _a !== void 0 ? _a : '';
            return this.prefixEndpoint(loginUrl);
        };
        /**
         * Returns endpoint for token revocation (both access and refresh token).
         */
        AuthConfigService.prototype.getRevokeEndpoint = function () {
            var _a;
            var revokeEndpoint = (_a = this.authConfig.authentication.revokeEndpoint) !== null && _a !== void 0 ? _a : '';
            return this.prefixEndpoint(revokeEndpoint);
        };
        /**
         * Returns logout url to redirect to on logout.
         */
        AuthConfigService.prototype.getLogoutUrl = function () {
            var _a;
            var logoutUrl = (_a = this.authConfig.authentication.logoutUrl) !== null && _a !== void 0 ? _a : '';
            return this.prefixEndpoint(logoutUrl);
        };
        /**
         * Returns userinfo endpoint of the OAuth server.
         */
        AuthConfigService.prototype.getUserinfoEndpoint = function () {
            var _a;
            var userinfoEndpoint = (_a = this.authConfig.authentication.userinfoEndpoint) !== null && _a !== void 0 ? _a : '';
            return this.prefixEndpoint(userinfoEndpoint);
        };
        /**
         * Returns configuration specific for the angular-oauth2-oidc library.
         */
        AuthConfigService.prototype.getOAuthLibConfig = function () {
            var _a, _b;
            return (_b = (_a = this.authConfig.authentication) === null || _a === void 0 ? void 0 : _a.OAuthLibConfig) !== null && _b !== void 0 ? _b : {};
        };
        AuthConfigService.prototype.prefixEndpoint = function (endpoint) {
            var url = endpoint;
            if (!url.startsWith('/')) {
                url = '/' + url;
            }
            return "" + this.getBaseUrl() + url;
        };
        /**
         * Returns the type of the OAuth flow based on auth config.
         * Use when you have to perform particular action only in some of the OAuth flow scenarios.
         */
        AuthConfigService.prototype.getOAuthFlow = function () {
            var _a, _b;
            var responseType = (_b = (_a = this.authConfig.authentication) === null || _a === void 0 ? void 0 : _a.OAuthLibConfig) === null || _b === void 0 ? void 0 : _b.responseType;
            if (responseType) {
                var types = responseType.split(' ');
                if (types.includes('code')) {
                    return exports.OAuthFlow.AuthorizationCode;
                }
                else if (types.includes('token')) {
                    return exports.OAuthFlow.ImplicitFlow;
                }
                else {
                    return exports.OAuthFlow.ResourceOwnerPasswordFlow;
                }
            }
            return exports.OAuthFlow.ResourceOwnerPasswordFlow;
        };
        return AuthConfigService;
    }());
    AuthConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthConfigService_Factory() { return new AuthConfigService(i0.ɵɵinject(AuthConfig), i0.ɵɵinject(OccConfig)); }, token: AuthConfigService, providedIn: "root" });
    AuthConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthConfigService.ctorParameters = function () { return [
        { type: AuthConfig },
        { type: OccConfig }
    ]; };

    /**
     * Wrapper service on the library OAuthService. Normalizes the lib API for services.
     * Use this service when you want to access low level OAuth library methods.
     */
    var OAuthLibWrapperService = /** @class */ (function () {
        function OAuthLibWrapperService(oAuthService, authConfigService, platformId, winRef) {
            this.oAuthService = oAuthService;
            this.authConfigService = authConfigService;
            this.platformId = platformId;
            this.winRef = winRef;
            this.initialize();
        }
        OAuthLibWrapperService.prototype.initialize = function () {
            var _a, _b, _c, _d;
            var isSSR = i1.isPlatformServer(this.platformId);
            this.oAuthService.configure(Object.assign({ tokenEndpoint: this.authConfigService.getTokenEndpoint(), loginUrl: this.authConfigService.getLoginUrl(), clientId: this.authConfigService.getClientId(), dummyClientSecret: this.authConfigService.getClientSecret(), revocationEndpoint: this.authConfigService.getRevokeEndpoint(), logoutUrl: this.authConfigService.getLogoutUrl(), userinfoEndpoint: this.authConfigService.getUserinfoEndpoint(), issuer: (_b = (_a = this.authConfigService.getOAuthLibConfig()) === null || _a === void 0 ? void 0 : _a.issuer) !== null && _b !== void 0 ? _b : this.authConfigService.getBaseUrl(), redirectUri: ((_d = (_c = this.authConfigService.getOAuthLibConfig()) === null || _c === void 0 ? void 0 : _c.redirectUri) !== null && _d !== void 0 ? _d : !isSSR) ? this.winRef.nativeWindow.location.origin
                    : '' }, this.authConfigService.getOAuthLibConfig()));
        };
        /**
         * Authorize with ResourceOwnerPasswordFlow.
         *
         * @param userId
         * @param password
         *
         * @return token response from the lib
         */
        OAuthLibWrapperService.prototype.authorizeWithPasswordFlow = function (userId, password) {
            return this.oAuthService.fetchTokenUsingPasswordFlow(userId, password);
        };
        /**
         * Refresh access_token.
         */
        OAuthLibWrapperService.prototype.refreshToken = function () {
            this.oAuthService.refreshToken();
        };
        /**
         * Revoke access tokens and clear tokens in lib state.
         */
        OAuthLibWrapperService.prototype.revokeAndLogout = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.oAuthService
                    .revokeTokenAndLogout()
                    .catch(function () {
                    // when there would be some kind of error during revocation we can't do anything else, so at least we logout user.
                    _this.oAuthService.logOut();
                })
                    .finally(function () {
                    resolve();
                });
            });
        };
        /**
         * Clear tokens in library state (no revocation).
         */
        OAuthLibWrapperService.prototype.logout = function () {
            this.oAuthService.logOut();
        };
        /**
         * Returns Open Id token. Might be empty, when it was not requested with the `responseType` config.
         *
         * @return id token
         */
        OAuthLibWrapperService.prototype.getIdToken = function () {
            return this.oAuthService.getIdToken();
        };
        /**
         * Initialize Implicit Flow or Authorization Code flows with the redirect to OAuth login url.
         */
        OAuthLibWrapperService.prototype.initLoginFlow = function () {
            return this.oAuthService.initLoginFlow();
        };
        /**
         * Tries to login user based on `code` or `token` present in the url.
         */
        OAuthLibWrapperService.prototype.tryLogin = function () {
            return this.oAuthService.tryLogin({
                // We don't load discovery document, because it doesn't contain revoke endpoint information
                disableOAuth2StateCheck: true,
            });
        };
        return OAuthLibWrapperService;
    }());
    OAuthLibWrapperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OAuthLibWrapperService_Factory() { return new OAuthLibWrapperService(i0.ɵɵinject(i1$3.OAuthService), i0.ɵɵinject(AuthConfigService), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(WindowRef)); }, token: OAuthLibWrapperService, providedIn: "root" });
    OAuthLibWrapperService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OAuthLibWrapperService.ctorParameters = function () { return [
        { type: i1$3.OAuthService },
        { type: AuthConfigService },
        { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
        { type: WindowRef }
    ]; };

    var LOGIN = '[Auth] Login';
    var LOGOUT = '[Auth] Logout';
    var Login = /** @class */ (function () {
        function Login() {
            this.type = LOGIN;
        }
        return Login;
    }());
    var Logout = /** @class */ (function () {
        function Logout() {
            this.type = LOGOUT;
        }
        return Logout;
    }());

    var authGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOGIN: LOGIN,
        LOGOUT: LOGOUT,
        Login: Login,
        Logout: Logout
    });

    /**
     * This implementation is OCC specific.
     * Different backend might have completely different need regarding user id.
     * It might not need user id at all and work based on access_token.
     * To implement custom solution provide your own implementation and customize services that use UserIdService
     */
    var UserIdService = /** @class */ (function () {
        function UserIdService() {
            this._userId = new rxjs.BehaviorSubject(OCC_USER_ID_ANONYMOUS);
        }
        /**
         * Sets current user id.
         *
         * @param userId
         */
        UserIdService.prototype.setUserId = function (userId) {
            this._userId.next(userId);
        };
        /**
         * This function provides the userId the OCC calls should use, depending
         * on whether there is an active storefront session or not.
         *
         * It returns the userId of the current storefront user or 'anonymous'
         * in the case there are no signed in user in the storefront.
         *
         * The user id of a regular customer session is 'current'. In the case of an
         * asm customer emulation session, the userId will be the customerId.
         */
        UserIdService.prototype.getUserId = function () {
            return this._userId;
        };
        /**
         * Calls provided callback with current user id.
         *
         * @param cb callback function to invoke
         */
        UserIdService.prototype.invokeWithUserId = function (cb) {
            return this.getUserId()
                .pipe(operators.take(1))
                .subscribe(function (id) { return cb(id); });
        };
        /**
         * Sets user id to the default value for logged out user.
         */
        UserIdService.prototype.clearUserId = function () {
            this.setUserId(OCC_USER_ID_ANONYMOUS);
        };
        /**
         * Checks if the userId is of emulated user type.
         */
        UserIdService.prototype.isEmulated = function () {
            return this.getUserId().pipe(operators.map(function (userId) { return userId !== OCC_USER_ID_ANONYMOUS && userId !== OCC_USER_ID_CURRENT; }));
        };
        return UserIdService;
    }());
    UserIdService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserIdService_Factory() { return new UserIdService(); }, token: UserIdService, providedIn: "root" });
    UserIdService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /**
     * Auth service for normal user authentication.
     * Use to check auth status, login/logout with different OAuth flows.
     */
    var AuthService = /** @class */ (function () {
        function AuthService(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService) {
            this.store = store;
            this.userIdService = userIdService;
            this.oAuthLibWrapperService = oAuthLibWrapperService;
            this.authStorageService = authStorageService;
            this.authRedirectService = authRedirectService;
            this.routingService = routingService;
        }
        /**
         * Check params in url and if there is an code/token then try to login with those.
         */
        AuthService.prototype.checkOAuthParamsInUrl = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, token, _a_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.oAuthLibWrapperService.tryLogin()];
                        case 1:
                            result = _b.sent();
                            token = this.authStorageService.getItem('access_token');
                            // We get the result in the code flow even if we did not logged in that why we also need to check if we have access_token
                            if (result && token) {
                                this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                                this.store.dispatch(new Login());
                                this.authRedirectService.redirect();
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            _a_1 = _b.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Initialize Implicit/Authorization Code flow by redirecting to OAuth server.
         */
        AuthService.prototype.loginWithRedirect = function () {
            this.oAuthLibWrapperService.initLoginFlow();
            return true;
        };
        /**
         * Loads a new user token with Resource Owner Password Flow.
         * @param userId
         * @param password
         */
        AuthService.prototype.loginWithCredentials = function (userId, password) {
            return __awaiter(this, void 0, void 0, function () {
                var _a_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password)];
                        case 1:
                            _b.sent();
                            // OCC specific user id handling. Customize when implementing different backend
                            this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                            this.store.dispatch(new Login());
                            this.authRedirectService.redirect();
                            return [3 /*break*/, 3];
                        case 2:
                            _a_2 = _b.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Revokes tokens and clears state for logged user (tokens, userId).
         * To perform logout it is best to use `logout` method. Use this method with caution.
         */
        AuthService.prototype.coreLogout = function () {
            var _this = this;
            this.userIdService.clearUserId();
            return new Promise(function (resolve) {
                _this.oAuthLibWrapperService.revokeAndLogout().finally(function () {
                    _this.store.dispatch(new Logout());
                    resolve();
                });
            });
        };
        /**
         * Returns `true` if the user is logged in; and `false` if the user is anonymous.
         */
        AuthService.prototype.isUserLoggedIn = function () {
            return this.authStorageService.getToken().pipe(operators.map(function (userToken) { return Boolean(userToken === null || userToken === void 0 ? void 0 : userToken.access_token); }), operators.distinctUntilChanged());
        };
        /**
         * Logout a storefront customer. It will initialize logout procedure by redirecting to the `logout` endpoint.
         */
        AuthService.prototype.logout = function () {
            this.routingService.go({ cxRoute: 'logout' });
        };
        return AuthService;
    }());
    AuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(OAuthLibWrapperService), i0.ɵɵinject(AuthStorageService), i0.ɵɵinject(AuthRedirectService), i0.ɵɵinject(RoutingService)); }, token: AuthService, providedIn: "root" });
    AuthService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: OAuthLibWrapperService },
        { type: AuthStorageService },
        { type: AuthRedirectService },
        { type: RoutingService }
    ]; };

    (function (CountryType) {
        CountryType["BILLING"] = "BILLING";
        CountryType["SHIPPING"] = "SHIPPING";
    })(exports.CountryType || (exports.CountryType = {}));

    (function (PromotionLocation) {
        PromotionLocation["ActiveCart"] = "CART";
        PromotionLocation["Checkout"] = "CHECKOUT";
        PromotionLocation["Order"] = "ORDER";
    })(exports.PromotionLocation || (exports.PromotionLocation = {}));
    (function (B2BPaymentTypeEnum) {
        B2BPaymentTypeEnum["ACCOUNT_PAYMENT"] = "ACCOUNT";
        B2BPaymentTypeEnum["CARD_PAYMENT"] = "CARD";
    })(exports.B2BPaymentTypeEnum || (exports.B2BPaymentTypeEnum = {}));

    (function (PageType) {
        PageType["CONTENT_PAGE"] = "ContentPage";
        PageType["PRODUCT_PAGE"] = "ProductPage";
        PageType["CATEGORY_PAGE"] = "CategoryPage";
        PageType["CATALOG_PAGE"] = "CatalogPage";
    })(exports.PageType || (exports.PageType = {}));
    (function (CmsBannerCarouselEffect) {
        CmsBannerCarouselEffect["FADE"] = "FADE";
        CmsBannerCarouselEffect["ZOOM"] = "ZOOM";
        CmsBannerCarouselEffect["CURTAIN"] = "CURTAINX";
        CmsBannerCarouselEffect["TURNDOWN"] = "TURNDOWN";
    })(exports.CmsBannerCarouselEffect || (exports.CmsBannerCarouselEffect = {}));

    (function (ANONYMOUS_CONSENT_STATUS) {
        ANONYMOUS_CONSENT_STATUS["GIVEN"] = "GIVEN";
        ANONYMOUS_CONSENT_STATUS["WITHDRAWN"] = "WITHDRAWN";
    })(exports.ANONYMOUS_CONSENT_STATUS || (exports.ANONYMOUS_CONSENT_STATUS = {}));
    var ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';

    (function (ImageType) {
        ImageType["PRIMARY"] = "PRIMARY";
        ImageType["GALLERY"] = "GALLERY";
    })(exports.ImageType || (exports.ImageType = {}));

    (function (B2BUserGroup) {
        B2BUserGroup["B2B_ADMIN_GROUP"] = "b2badmingroup";
        B2BUserGroup["B2B_CUSTOMER_GROUP"] = "b2bcustomergroup";
        B2BUserGroup["B2B_MANAGER_GROUP"] = "b2bmanagergroup";
        B2BUserGroup["B2B_APPROVER_GROUP"] = "b2bapprovergroup";
    })(exports.B2BUserGroup || (exports.B2BUserGroup = {}));

    (function (NotificationType) {
        NotificationType["BACK_IN_STOCK"] = "BACK_IN_STOCK";
    })(exports.NotificationType || (exports.NotificationType = {}));

    (function (VariantType) {
        VariantType["SIZE"] = "ApparelSizeVariantProduct";
        VariantType["STYLE"] = "ApparelStyleVariantProduct";
        VariantType["COLOR"] = "ElectronicsColorVariantProduct";
    })(exports.VariantType || (exports.VariantType = {}));
    (function (PriceType) {
        PriceType["BUY"] = "BUY";
        PriceType["FROM"] = "FROM";
    })(exports.PriceType || (exports.PriceType = {}));
    (function (VariantQualifier) {
        VariantQualifier["SIZE"] = "size";
        VariantQualifier["STYLE"] = "style";
        VariantQualifier["COLOR"] = "color";
        VariantQualifier["THUMBNAIL"] = "thumbnail";
        VariantQualifier["PRODUCT"] = "product";
        VariantQualifier["ROLLUP_PROPERTY"] = "rollupProperty";
    })(exports.VariantQualifier || (exports.VariantQualifier = {}));

    (function (DaysOfWeek) {
        DaysOfWeek["MONDAY"] = "MONDAY";
        DaysOfWeek["TUESDAY"] = "TUESDAY";
        DaysOfWeek["WEDNESDAY"] = "WEDNESDAY";
        DaysOfWeek["THURSDAY"] = "THURSDAY";
        DaysOfWeek["FRIDAY"] = "FRIDAY";
        DaysOfWeek["SATURDAY"] = "SATURDAY";
        DaysOfWeek["SUNDAY"] = "SUNDAY";
    })(exports.DaysOfWeek || (exports.DaysOfWeek = {}));
    var recurrencePeriod = {
        DAILY: 'DAILY',
        WEEKLY: 'WEEKLY',
        MONTHLY: 'MONTHLY',
    };
    (function (ORDER_TYPE) {
        ORDER_TYPE["PLACE_ORDER"] = "PLACE_ORDER";
        ORDER_TYPE["SCHEDULE_REPLENISHMENT_ORDER"] = "SCHEDULE_REPLENISHMENT_ORDER";
    })(exports.ORDER_TYPE || (exports.ORDER_TYPE = {}));

    var ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';
    var ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';
    function entityMeta(type, id) {
        return {
            entityType: type,
            entityId: id,
        };
    }
    function entityRemoveMeta(type, id) {
        return {
            entityId: id,
            entityType: type,
            entityRemove: true,
        };
    }
    function entityRemoveAllMeta(type) {
        return {
            entityId: null,
            entityType: type,
            entityRemove: true,
        };
    }
    var EntityRemoveAction = /** @class */ (function () {
        function EntityRemoveAction(entityType, id) {
            this.type = ENTITY_REMOVE_ACTION;
            this.meta = entityRemoveMeta(entityType, id);
        }
        return EntityRemoveAction;
    }());
    var EntityRemoveAllAction = /** @class */ (function () {
        function EntityRemoveAllAction(entityType) {
            this.type = ENTITY_REMOVE_ALL_ACTION;
            this.meta = entityRemoveAllMeta(entityType);
        }
        return EntityRemoveAllAction;
    }());

    var LOADER_LOAD_ACTION = '[LOADER] LOAD';
    var LOADER_FAIL_ACTION = '[LOADER] FAIL';
    var LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';
    var LOADER_RESET_ACTION = '[LOADER] RESET';
    function loadMeta(entityType) {
        return {
            entityType: entityType,
            loader: {
                load: true,
            },
        };
    }
    function failMeta(entityType, error) {
        return {
            entityType: entityType,
            loader: {
                error: error ? error : true,
            },
        };
    }
    function successMeta(entityType) {
        return {
            entityType: entityType,
            loader: {
                success: true,
            },
        };
    }
    function resetMeta(entityType) {
        return {
            entityType: entityType,
            loader: {},
        };
    }
    var LoaderLoadAction = /** @class */ (function () {
        function LoaderLoadAction(entityType) {
            this.type = LOADER_LOAD_ACTION;
            this.meta = loadMeta(entityType);
        }
        return LoaderLoadAction;
    }());
    var LoaderFailAction = /** @class */ (function () {
        function LoaderFailAction(entityType, error) {
            this.type = LOADER_FAIL_ACTION;
            this.meta = failMeta(entityType, error);
        }
        return LoaderFailAction;
    }());
    var LoaderSuccessAction = /** @class */ (function () {
        function LoaderSuccessAction(entityType) {
            this.type = LOADER_SUCCESS_ACTION;
            this.meta = successMeta(entityType);
        }
        return LoaderSuccessAction;
    }());
    var LoaderResetAction = /** @class */ (function () {
        function LoaderResetAction(entityType) {
            this.type = LOADER_RESET_ACTION;
            this.meta = resetMeta(entityType);
        }
        return LoaderResetAction;
    }());

    var ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
    var ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
    var ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
    var ENTITY_RESET_ACTION = '[ENTITY] RESET';
    function entityLoadMeta(entityType, id) {
        return Object.assign(Object.assign({}, loadMeta(entityType)), entityMeta(entityType, id));
    }
    function entityFailMeta(entityType, id, error) {
        return Object.assign(Object.assign({}, failMeta(entityType, error)), entityMeta(entityType, id));
    }
    function entitySuccessMeta(entityType, id) {
        return Object.assign(Object.assign({}, successMeta(entityType)), entityMeta(entityType, id));
    }
    function entityResetMeta(entityType, id) {
        return Object.assign(Object.assign({}, resetMeta(entityType)), entityMeta(entityType, id));
    }
    var EntityLoadAction = /** @class */ (function () {
        function EntityLoadAction(entityType, id) {
            this.type = ENTITY_LOAD_ACTION;
            this.meta = entityLoadMeta(entityType, id);
        }
        return EntityLoadAction;
    }());
    var EntityFailAction = /** @class */ (function () {
        function EntityFailAction(entityType, id, error) {
            this.type = ENTITY_FAIL_ACTION;
            this.meta = entityFailMeta(entityType, id, error);
        }
        return EntityFailAction;
    }());
    var EntitySuccessAction = /** @class */ (function () {
        function EntitySuccessAction(entityType, id, payload) {
            this.payload = payload;
            this.type = ENTITY_SUCCESS_ACTION;
            this.meta = entitySuccessMeta(entityType, id);
        }
        return EntitySuccessAction;
    }());
    var EntityLoaderResetAction = /** @class */ (function () {
        function EntityLoaderResetAction(entityType, id) {
            this.type = ENTITY_RESET_ACTION;
            this.meta = entityResetMeta(entityType, id);
        }
        return EntityLoaderResetAction;
    }());

    var initialLoaderState = {
        loading: false,
        error: false,
        success: false,
        value: undefined,
    };
    /**
     * Higher order reducer that adds generic loading flag to chunk of the state
     *
     * Utilizes "loader" meta field of actions to set specific flags for specific
     * action (LOAD, SUCCESS, FAIL, RESET)
     */
    function loaderReducer(entityType, reducer) {
        return function (state, action) {
            if (state === void 0) { state = initialLoaderState; }
            if (action.meta &&
                action.meta.loader &&
                action.meta.entityType === entityType) {
                var entity = action.meta.loader;
                if (entity.load) {
                    return Object.assign(Object.assign({}, state), { loading: true, value: reducer ? reducer(state.value, action) : state.value });
                }
                else if (entity.error) {
                    return Object.assign(Object.assign({}, state), { loading: false, error: true, success: false, value: reducer ? reducer(state.value, action) : undefined });
                }
                else if (entity.success) {
                    return Object.assign(Object.assign({}, state), { value: reducer ? reducer(state.value, action) : action.payload, loading: false, error: false, success: true });
                }
                else {
                    // reset state action
                    return Object.assign(Object.assign({}, initialLoaderState), { value: reducer
                            ? reducer(initialLoaderState.value, action)
                            : initialLoaderState.value });
                }
            }
            if (reducer) {
                var newValue = reducer(state.value, action);
                if (newValue !== state.value) {
                    return Object.assign(Object.assign({}, state), { value: newValue });
                }
            }
            return state;
        };
    }

    function loaderValueSelector(state) {
        return state.value;
    }
    function loaderLoadingSelector(state) {
        return state.loading;
    }
    function loaderErrorSelector(state) {
        return state.error;
    }
    function loaderSuccessSelector(state) {
        return state.success;
    }

    function entityLoaderStateSelector(state, id) {
        return state.entities[id] || initialLoaderState;
    }
    function entityValueSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return loaderValueSelector(entityState);
    }
    function entityLoadingSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return loaderLoadingSelector(entityState);
    }
    function entityErrorSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return loaderErrorSelector(entityState);
    }
    function entitySuccessSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return loaderSuccessSelector(entityState);
    }

    var initialEntityState = { entities: {} };
    /**
     * Higher order reducer for reusing reducer logic for multiple entities
     *
     * Utilizes entityId meta field to target entity by id in actions
     */
    function entityReducer(entityType, reducer) {
        return function (state, action) {
            if (state === void 0) { state = initialEntityState; }
            var ids;
            var partitionPayload = false;
            if (action.meta &&
                action.meta.entityType === entityType &&
                action.meta.entityId !== undefined) {
                ids = [].concat(action.meta.entityId);
                // remove selected entities
                if (action.meta.entityRemove) {
                    if (action.meta.entityId === null) {
                        return initialEntityState;
                    }
                    else {
                        var removed_1 = false;
                        var newEntities = Object.keys(state.entities).reduce(function (acc, cur) {
                            if (ids.includes(cur)) {
                                removed_1 = true;
                            }
                            else {
                                acc[cur] = state.entities[cur];
                            }
                            return acc;
                        }, {});
                        return removed_1 ? { entities: newEntities } : state;
                    }
                }
                partitionPayload =
                    Array.isArray(action.meta.entityId) && Array.isArray(action.payload);
            }
            else {
                ids = Object.keys(state.entities);
            }
            var entityUpdates = {};
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var subAction = partitionPayload
                    ? Object.assign(Object.assign({}, action), { payload: action.payload[i] }) : action;
                var newState = reducer(state.entities[id], subAction);
                if (newState) {
                    entityUpdates[id] = newState;
                }
            }
            if (Object.keys(entityUpdates).length > 0) {
                return Object.assign(Object.assign({}, state), { entities: Object.assign(Object.assign({}, state.entities), entityUpdates) });
            }
            return state;
        };
    }

    /**
     * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic loading flags
     */
    function entityLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, loaderReducer(entityType, reducer));
    }

    var PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';
    var PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';
    var PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';
    function processesIncrementMeta(entityType) {
        return {
            entityType: entityType,
            loader: undefined,
            processesCountDiff: 1,
        };
    }
    function processesDecrementMeta(entityType) {
        return {
            entityType: entityType,
            loader: undefined,
            processesCountDiff: -1,
        };
    }
    function processesLoaderResetMeta(entityType) {
        // processes reset action is a reset action for loader reducer, but not the other way around
        return Object.assign(Object.assign({}, resetMeta(entityType)), { processesCountDiff: null });
    }
    var ProcessesLoaderResetAction = /** @class */ (function () {
        function ProcessesLoaderResetAction(entityType) {
            this.type = PROCESSES_LOADER_RESET_ACTION;
            this.meta = processesLoaderResetMeta(entityType);
        }
        return ProcessesLoaderResetAction;
    }());
    var ProcessesIncrementAction = /** @class */ (function () {
        function ProcessesIncrementAction(entityType) {
            this.type = PROCESSES_INCREMENT_ACTION;
            this.meta = processesIncrementMeta(entityType);
        }
        return ProcessesIncrementAction;
    }());
    var ProcessesDecrementAction = /** @class */ (function () {
        function ProcessesDecrementAction(entityType) {
            this.type = PROCESSES_DECREMENT_ACTION;
            this.meta = processesDecrementMeta(entityType);
        }
        return ProcessesDecrementAction;
    }());

    var ENTITY_PROCESSES_LOADER_RESET_ACTION = '[ENTITY] PROCESSES LOADER RESET';
    var ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';
    var ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';
    function entityProcessesLoaderResetMeta(entityType, id) {
        return Object.assign(Object.assign({}, processesLoaderResetMeta(entityType)), entityMeta(entityType, id));
    }
    function entityProcessesIncrementMeta(entityType, id) {
        return Object.assign(Object.assign({}, processesIncrementMeta(entityType)), entityMeta(entityType, id));
    }
    function entityProcessesDecrementMeta(entityType, id) {
        return Object.assign(Object.assign({}, processesDecrementMeta(entityType)), entityMeta(entityType, id));
    }
    var EntityProcessesLoaderResetAction = /** @class */ (function () {
        function EntityProcessesLoaderResetAction(entityType, id) {
            this.type = ENTITY_PROCESSES_LOADER_RESET_ACTION;
            this.meta = entityProcessesLoaderResetMeta(entityType, id);
        }
        return EntityProcessesLoaderResetAction;
    }());
    var EntityProcessesIncrementAction = /** @class */ (function () {
        function EntityProcessesIncrementAction(entityType, id) {
            this.type = ENTITY_PROCESSES_INCREMENT_ACTION;
            this.meta = entityProcessesIncrementMeta(entityType, id);
        }
        return EntityProcessesIncrementAction;
    }());
    var EntityProcessesDecrementAction = /** @class */ (function () {
        function EntityProcessesDecrementAction(entityType, id) {
            this.type = ENTITY_PROCESSES_DECREMENT_ACTION;
            this.meta = entityProcessesDecrementMeta(entityType, id);
        }
        return EntityProcessesDecrementAction;
    }());

    function isStableSelector(state) {
        return state.processesCount === 0 && !state.loading;
    }
    function hasPendingProcessesSelector(state) {
        return state.processesCount > 0;
    }

    var initialProcessesState = {
        processesCount: 0,
    };
    /**
     * Higher order reducer that adds processes count
     */
    function processesLoaderReducer(entityType, reducer) {
        return function (state, action) {
            if (state === void 0) { state = Object.assign(Object.assign({}, initialProcessesState), initialLoaderState); }
            var loaderState = loaderReducer(entityType, reducer)(state, action);
            if (action.meta && action.meta.entityType === entityType) {
                var processesCountDiff = action.meta.processesCountDiff;
                if (i0.isDevMode() && state.processesCount + processesCountDiff < 0) {
                    console.error("Action '" + action.type + "' sets processesCount to value < 0!\n" +
                        'Make sure to keep processesCount in sync.\n' +
                        'There should always be only one decrement action for each increment action.\n' +
                        "Make sure that you don't reset state in between those actions.\n", action);
                }
                if (processesCountDiff) {
                    return Object.assign(Object.assign({}, loaderState), { processesCount: state.processesCount
                            ? state.processesCount + processesCountDiff
                            : processesCountDiff });
                }
                else if (processesCountDiff === null) {
                    // reset action
                    return Object.assign(Object.assign({}, loaderState), initialProcessesState);
                }
            }
            return loaderState;
        };
    }

    var initialProcessesLoaderState = Object.assign(Object.assign({}, initialLoaderState), initialProcessesState);
    function entityHasPendingProcessesSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return hasPendingProcessesSelector(entityState);
    }
    function entityIsStableSelector(state, id) {
        var entityState = entityLoaderStateSelector(state, id);
        return isStableSelector(entityState);
    }
    function entityProcessesLoaderStateSelector(state, id) {
        return state.entities[id] || initialProcessesLoaderState;
    }

    /**
     * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic processesCount flag
     */
    function entityProcessesLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, processesLoaderReducer(entityType, reducer));
    }

    function entitySelector(state, id) {
        return state.entities[id] || undefined;
    }

    var OBJECT_SEPARATOR = '.';
    function getStateSliceValue(keys, state) {
        return keys
            .split(OBJECT_SEPARATOR)
            .reduce(function (previous, current) { return (previous ? previous[current] : undefined); }, state);
    }
    function createShellObject(key, excludeKeys, value) {
        if (!key || !value || Object.keys(value).length === 0) {
            return {};
        }
        var shell = key.split(OBJECT_SEPARATOR).reduceRight(function (acc, previous) {
            var _a;
            return _a = {}, _a[previous] = acc, _a;
        }, value);
        return handleExclusions(key, excludeKeys, shell);
    }
    function getStateSlice(keys, excludeKeys, state) {
        var e_1, _a;
        if (keys && keys.length === 0) {
            return {};
        }
        var stateSlices = {};
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var currentKey = keys_1_1.value;
                var stateValue = getStateSliceValue(currentKey, state);
                var shell = createShellObject(currentKey, excludeKeys, stateValue);
                stateSlices = deepMerge(stateSlices, shell);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return stateSlices;
    }
    function handleExclusions(key, excludeKeys, value) {
        var e_2, _a;
        var exclusionKeys = getExclusionKeys(key, excludeKeys);
        if (exclusionKeys.length === 0) {
            return value;
        }
        var finalValue = deepMerge({}, value);
        try {
            for (var exclusionKeys_1 = __values(exclusionKeys), exclusionKeys_1_1 = exclusionKeys_1.next(); !exclusionKeys_1_1.done; exclusionKeys_1_1 = exclusionKeys_1.next()) {
                var currentExclusionKey = exclusionKeys_1_1.value;
                var exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);
                var nestedTemp = finalValue;
                for (var i = 0; i < exclusionChunksSplit.length; i++) {
                    var currentChunk = exclusionChunksSplit[i];
                    // last iteration
                    if (i === exclusionChunksSplit.length - 1) {
                        if (nestedTemp && nestedTemp[currentChunk]) {
                            delete nestedTemp[currentChunk];
                        }
                    }
                    else {
                        nestedTemp = nestedTemp[currentChunk];
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (exclusionKeys_1_1 && !exclusionKeys_1_1.done && (_a = exclusionKeys_1.return)) _a.call(exclusionKeys_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return finalValue;
    }
    function getExclusionKeys(key, excludeKeys) {
        var e_3, _a;
        if (!key || !excludeKeys) {
            return [];
        }
        var exclusionKeys = [];
        try {
            for (var excludeKeys_1 = __values(excludeKeys), excludeKeys_1_1 = excludeKeys_1.next(); !excludeKeys_1_1.done; excludeKeys_1_1 = excludeKeys_1.next()) {
                var exclusionKey = excludeKeys_1_1.value;
                if (exclusionKey.includes(key)) {
                    exclusionKeys.push(exclusionKey);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (excludeKeys_1_1 && !excludeKeys_1_1.done && (_a = excludeKeys_1.return)) _a.call(excludeKeys_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return exclusionKeys;
    }
    function filterKeysByType(keys, type) {
        if (!keys) {
            return [];
        }
        return Object.keys(keys).filter(function (key) { return keys[key] === type; });
    }

    var ALL = 'all';
    function serializeSearchConfig(config, id) {
        var _a, _b, _c;
        return (id !== null && id !== void 0 ? id : '') + "?pageSize=" + ((_a = config.pageSize) !== null && _a !== void 0 ? _a : '') + "&currentPage=" + ((_b = config.currentPage) !== null && _b !== void 0 ? _b : '') + "&sort=" + ((_c = config.sort) !== null && _c !== void 0 ? _c : '');
    }
    function denormalizeSearch(state, params) {
        return denormalizeCustomB2BSearch(state.list, state.entities, params);
    }
    function denormalizeCustomB2BSearch(list, entities, params, id) {
        var serializedList = entityLoaderStateSelector(list, params ? serializeSearchConfig(params, id) : id !== null && id !== void 0 ? id : ALL);
        if (!serializedList.value || !serializedList.value.ids) {
            return serializedList;
        }
        var res = Object.assign({}, serializedList, {
            value: {
                values: serializedList.value.ids.map(function (code) { return entityLoaderStateSelector(entities, code).value; }),
            },
        });
        if (params) {
            res.value.pagination = serializedList.value.pagination;
            res.value.sorts = serializedList.value.sorts;
        }
        return res;
    }
    function normalizeListPage(list, id) {
        var values = (list === null || list === void 0 ? void 0 : list.values) || [];
        var page = {
            ids: values.map(function (data) { return data[id]; }),
        };
        if (list.pagination) {
            page.pagination = list.pagination;
        }
        if (list.sorts) {
            page.sorts = list.sorts;
        }
        return { values: values, page: page };
    }
    function serializeParams(params, searchConfig) {
        return [params, serializeSearchConfig(searchConfig)].toString();
    }

    var utilsGroup = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getStateSlice: getStateSlice,
        ENTITY_LOAD_ACTION: ENTITY_LOAD_ACTION,
        ENTITY_FAIL_ACTION: ENTITY_FAIL_ACTION,
        ENTITY_SUCCESS_ACTION: ENTITY_SUCCESS_ACTION,
        ENTITY_RESET_ACTION: ENTITY_RESET_ACTION,
        entityLoadMeta: entityLoadMeta,
        entityFailMeta: entityFailMeta,
        entitySuccessMeta: entitySuccessMeta,
        entityResetMeta: entityResetMeta,
        EntityLoadAction: EntityLoadAction,
        EntityFailAction: EntityFailAction,
        EntitySuccessAction: EntitySuccessAction,
        EntityLoaderResetAction: EntityLoaderResetAction,
        entityLoaderStateSelector: entityLoaderStateSelector,
        entityValueSelector: entityValueSelector,
        entityLoadingSelector: entityLoadingSelector,
        entityErrorSelector: entityErrorSelector,
        entitySuccessSelector: entitySuccessSelector,
        entityLoaderReducer: entityLoaderReducer,
        ENTITY_PROCESSES_LOADER_RESET_ACTION: ENTITY_PROCESSES_LOADER_RESET_ACTION,
        ENTITY_PROCESSES_INCREMENT_ACTION: ENTITY_PROCESSES_INCREMENT_ACTION,
        ENTITY_PROCESSES_DECREMENT_ACTION: ENTITY_PROCESSES_DECREMENT_ACTION,
        entityProcessesLoaderResetMeta: entityProcessesLoaderResetMeta,
        entityProcessesIncrementMeta: entityProcessesIncrementMeta,
        entityProcessesDecrementMeta: entityProcessesDecrementMeta,
        EntityProcessesLoaderResetAction: EntityProcessesLoaderResetAction,
        EntityProcessesIncrementAction: EntityProcessesIncrementAction,
        EntityProcessesDecrementAction: EntityProcessesDecrementAction,
        entityHasPendingProcessesSelector: entityHasPendingProcessesSelector,
        entityIsStableSelector: entityIsStableSelector,
        entityProcessesLoaderStateSelector: entityProcessesLoaderStateSelector,
        entityProcessesLoaderReducer: entityProcessesLoaderReducer,
        ENTITY_REMOVE_ACTION: ENTITY_REMOVE_ACTION,
        ENTITY_REMOVE_ALL_ACTION: ENTITY_REMOVE_ALL_ACTION,
        entityMeta: entityMeta,
        entityRemoveMeta: entityRemoveMeta,
        entityRemoveAllMeta: entityRemoveAllMeta,
        EntityRemoveAction: EntityRemoveAction,
        EntityRemoveAllAction: EntityRemoveAllAction,
        entitySelector: entitySelector,
        initialEntityState: initialEntityState,
        entityReducer: entityReducer,
        LOADER_LOAD_ACTION: LOADER_LOAD_ACTION,
        LOADER_FAIL_ACTION: LOADER_FAIL_ACTION,
        LOADER_SUCCESS_ACTION: LOADER_SUCCESS_ACTION,
        LOADER_RESET_ACTION: LOADER_RESET_ACTION,
        loadMeta: loadMeta,
        failMeta: failMeta,
        successMeta: successMeta,
        resetMeta: resetMeta,
        LoaderLoadAction: LoaderLoadAction,
        LoaderFailAction: LoaderFailAction,
        LoaderSuccessAction: LoaderSuccessAction,
        LoaderResetAction: LoaderResetAction,
        loaderValueSelector: loaderValueSelector,
        loaderLoadingSelector: loaderLoadingSelector,
        loaderErrorSelector: loaderErrorSelector,
        loaderSuccessSelector: loaderSuccessSelector,
        initialLoaderState: initialLoaderState,
        loaderReducer: loaderReducer,
        PROCESSES_INCREMENT_ACTION: PROCESSES_INCREMENT_ACTION,
        PROCESSES_DECREMENT_ACTION: PROCESSES_DECREMENT_ACTION,
        PROCESSES_LOADER_RESET_ACTION: PROCESSES_LOADER_RESET_ACTION,
        processesIncrementMeta: processesIncrementMeta,
        processesDecrementMeta: processesDecrementMeta,
        processesLoaderResetMeta: processesLoaderResetMeta,
        ProcessesLoaderResetAction: ProcessesLoaderResetAction,
        ProcessesIncrementAction: ProcessesIncrementAction,
        ProcessesDecrementAction: ProcessesDecrementAction,
        isStableSelector: isStableSelector,
        hasPendingProcessesSelector: hasPendingProcessesSelector,
        initialProcessesState: initialProcessesState,
        processesLoaderReducer: processesLoaderReducer,
        serializeSearchConfig: serializeSearchConfig,
        denormalizeSearch: denormalizeSearch,
        denormalizeCustomB2BSearch: denormalizeCustomB2BSearch,
        normalizeListPage: normalizeListPage,
        serializeParams: serializeParams
    });

    var ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';
    var ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';

    var LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
    var LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
    var LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
    var RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
    var GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
    var GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
    var SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
    var GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
    var WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
    var TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
    var TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
    var ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS = '[Anonymous Consents] Check Updated Versions';
    var LoadAnonymousConsentTemplates = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplates, _super);
        function LoadAnonymousConsentTemplates() {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
            return _this;
        }
        return LoadAnonymousConsentTemplates;
    }(LoaderLoadAction));
    var LoadAnonymousConsentTemplatesSuccess = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplatesSuccess, _super);
        function LoadAnonymousConsentTemplatesSuccess(payload) {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
            return _this;
        }
        return LoadAnonymousConsentTemplatesSuccess;
    }(LoaderSuccessAction));
    var LoadAnonymousConsentTemplatesFail = /** @class */ (function (_super) {
        __extends(LoadAnonymousConsentTemplatesFail, _super);
        function LoadAnonymousConsentTemplatesFail(payload) {
            var _this = _super.call(this, ANONYMOUS_CONSENTS, payload) || this;
            _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
            return _this;
        }
        return LoadAnonymousConsentTemplatesFail;
    }(LoaderFailAction));
    var ResetLoadAnonymousConsentTemplates = /** @class */ (function (_super) {
        __extends(ResetLoadAnonymousConsentTemplates, _super);
        function ResetLoadAnonymousConsentTemplates() {
            var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
            _this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
            return _this;
        }
        return ResetLoadAnonymousConsentTemplates;
    }(LoaderResetAction));
    var GetAllAnonymousConsents = /** @class */ (function () {
        function GetAllAnonymousConsents() {
            this.type = GET_ALL_ANONYMOUS_CONSENTS;
        }
        return GetAllAnonymousConsents;
    }());
    var GetAnonymousConsent = /** @class */ (function () {
        function GetAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = GET_ANONYMOUS_CONSENT;
        }
        return GetAnonymousConsent;
    }());
    var SetAnonymousConsents = /** @class */ (function () {
        function SetAnonymousConsents(payload) {
            this.payload = payload;
            this.type = SET_ANONYMOUS_CONSENTS;
        }
        return SetAnonymousConsents;
    }());
    var GiveAnonymousConsent = /** @class */ (function () {
        function GiveAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = GIVE_ANONYMOUS_CONSENT;
        }
        return GiveAnonymousConsent;
    }());
    var WithdrawAnonymousConsent = /** @class */ (function () {
        function WithdrawAnonymousConsent(templateCode) {
            this.templateCode = templateCode;
            this.type = WITHDRAW_ANONYMOUS_CONSENT;
        }
        return WithdrawAnonymousConsent;
    }());
    var ToggleAnonymousConsentsBannerDissmissed = /** @class */ (function () {
        function ToggleAnonymousConsentsBannerDissmissed(dismissed) {
            this.dismissed = dismissed;
            this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
        }
        return ToggleAnonymousConsentsBannerDissmissed;
    }());
    var ToggleAnonymousConsentTemplatesUpdated = /** @class */ (function () {
        function ToggleAnonymousConsentTemplatesUpdated(updated) {
            this.updated = updated;
            this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
        }
        return ToggleAnonymousConsentTemplatesUpdated;
    }());
    var AnonymousConsentCheckUpdatedVersions = /** @class */ (function () {
        function AnonymousConsentCheckUpdatedVersions() {
            this.type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;
        }
        return AnonymousConsentCheckUpdatedVersions;
    }());

    var anonymousConsentsGroup = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_ANONYMOUS_CONSENT_TEMPLATES: LOAD_ANONYMOUS_CONSENT_TEMPLATES,
        LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS: LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS,
        LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL: LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL,
        RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES: RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES,
        GET_ALL_ANONYMOUS_CONSENTS: GET_ALL_ANONYMOUS_CONSENTS,
        GET_ANONYMOUS_CONSENT: GET_ANONYMOUS_CONSENT,
        SET_ANONYMOUS_CONSENTS: SET_ANONYMOUS_CONSENTS,
        GIVE_ANONYMOUS_CONSENT: GIVE_ANONYMOUS_CONSENT,
        WITHDRAW_ANONYMOUS_CONSENT: WITHDRAW_ANONYMOUS_CONSENT,
        TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED,
        TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED,
        ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS: ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS,
        LoadAnonymousConsentTemplates: LoadAnonymousConsentTemplates,
        LoadAnonymousConsentTemplatesSuccess: LoadAnonymousConsentTemplatesSuccess,
        LoadAnonymousConsentTemplatesFail: LoadAnonymousConsentTemplatesFail,
        ResetLoadAnonymousConsentTemplates: ResetLoadAnonymousConsentTemplates,
        GetAllAnonymousConsents: GetAllAnonymousConsents,
        GetAnonymousConsent: GetAnonymousConsent,
        SetAnonymousConsents: SetAnonymousConsents,
        GiveAnonymousConsent: GiveAnonymousConsent,
        WithdrawAnonymousConsent: WithdrawAnonymousConsent,
        ToggleAnonymousConsentsBannerDissmissed: ToggleAnonymousConsentsBannerDissmissed,
        ToggleAnonymousConsentTemplatesUpdated: ToggleAnonymousConsentTemplatesUpdated,
        AnonymousConsentCheckUpdatedVersions: AnonymousConsentCheckUpdatedVersions
    });

    var getAnonymousConsentState = i1$2.createFeatureSelector(ANONYMOUS_CONSENTS_STORE_FEATURE);

    var ɵ0$1 = function (state) { return state.templates; };
    var getAnonymousConsentTemplatesState = i1$2.createSelector(getAnonymousConsentState, ɵ0$1);
    var getAnonymousConsentTemplatesValue = i1$2.createSelector(getAnonymousConsentTemplatesState, loaderValueSelector);
    var getAnonymousConsentTemplatesLoading = i1$2.createSelector(getAnonymousConsentTemplatesState, loaderLoadingSelector);
    var getAnonymousConsentTemplatesSuccess = i1$2.createSelector(getAnonymousConsentTemplatesState, loaderSuccessSelector);
    var getAnonymousConsentTemplatesError = i1$2.createSelector(getAnonymousConsentTemplatesState, loaderErrorSelector);
    var getAnonymousConsentTemplate = function (templateCode) {
        return i1$2.createSelector(getAnonymousConsentTemplatesValue, function (templates) {
            return templates
                ? templates.find(function (template) { return template.id === templateCode; })
                : null;
        });
    };

    var ɵ0$2 = function (state) { return state.ui.updated; };
    var getAnonymousConsentTemplatesUpdate = i1$2.createSelector(getAnonymousConsentState, ɵ0$2);
    var ɵ1$1 = function (state) { return state.ui.bannerDismissed; };
    var getAnonymousConsentsBannerDismissed = i1$2.createSelector(getAnonymousConsentState, ɵ1$1);

    var ɵ0$3 = function (state) { return state.consents; };
    var getAnonymousConsents = i1$2.createSelector(getAnonymousConsentState, ɵ0$3);
    var getAnonymousConsentByTemplateCode = function (templateCode) { return i1$2.createSelector(getAnonymousConsents, function (consents) { return consents.find(function (consent) { return consent.templateCode === templateCode; }); }); };

    var anonymousConsentsGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAnonymousConsentTemplatesState: getAnonymousConsentTemplatesState,
        getAnonymousConsentTemplatesValue: getAnonymousConsentTemplatesValue,
        getAnonymousConsentTemplatesLoading: getAnonymousConsentTemplatesLoading,
        getAnonymousConsentTemplatesSuccess: getAnonymousConsentTemplatesSuccess,
        getAnonymousConsentTemplatesError: getAnonymousConsentTemplatesError,
        getAnonymousConsentTemplate: getAnonymousConsentTemplate,
        ɵ0: ɵ0$1,
        getAnonymousConsentTemplatesUpdate: getAnonymousConsentTemplatesUpdate,
        getAnonymousConsentsBannerDismissed: getAnonymousConsentsBannerDismissed,
        ɵ1: ɵ1$1,
        getAnonymousConsents: getAnonymousConsents,
        getAnonymousConsentByTemplateCode: getAnonymousConsentByTemplateCode,
        getAnonymousConsentState: getAnonymousConsentState
    });

    var AnonymousConsentsService = /** @class */ (function () {
        function AnonymousConsentsService(store, authService) {
            this.store = store;
            this.authService = authService;
        }
        /**
         * Retrieves the anonymous consent templates.
         */
        AnonymousConsentsService.prototype.loadTemplates = function () {
            this.store.dispatch(new LoadAnonymousConsentTemplates());
        };
        /**
         * Conditionally triggers the load of the anonymous consent templates if:
         *   - `loadIfMissing` parameter is set to `true`
         *   - the `templates` in the store are `undefined`
         *
         * Othewise it just returns the value from the store.
         *
         * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`
         */
        AnonymousConsentsService.prototype.getTemplates = function (loadIfMissing) {
            var _this = this;
            if (loadIfMissing === void 0) { loadIfMissing = false; }
            return rxjs.iif(function () { return loadIfMissing; }, this.store.pipe(i1$2.select(getAnonymousConsentTemplatesValue), operators.withLatestFrom(this.getLoadTemplatesLoading()), operators.filter(function (_a) {
                var _b = __read(_a, 2), _templates = _b[0], loading = _b[1];
                return !loading;
            }), operators.tap(function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                if (!Boolean(templates)) {
                    _this.loadTemplates();
                }
            }), operators.filter(function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return Boolean(templates);
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return templates;
            })), this.store.pipe(i1$2.select(getAnonymousConsentTemplatesValue)));
        };
        /**
         * Returns the anonymous consent templates with the given template code.
         * @param templateCode a template code by which to filter anonymous consent templates.
         */
        AnonymousConsentsService.prototype.getTemplate = function (templateCode) {
            return this.store.pipe(i1$2.select(getAnonymousConsentTemplate(templateCode)));
        };
        /**
         * Returns an indicator for the loading status for the anonymous consent templates.
         */
        AnonymousConsentsService.prototype.getLoadTemplatesLoading = function () {
            return this.store.pipe(i1$2.select(getAnonymousConsentTemplatesLoading));
        };
        /**
         * Returns an indicator for the success status for the anonymous consent templates.
         */
        AnonymousConsentsService.prototype.getLoadTemplatesSuccess = function () {
            return this.store.pipe(i1$2.select(getAnonymousConsentTemplatesSuccess));
        };
        /**
         * Returns an indicator for the error status for the anonymous consent templates.
         */
        AnonymousConsentsService.prototype.getLoadTemplatesError = function () {
            return this.store.pipe(i1$2.select(getAnonymousConsentTemplatesError));
        };
        /**
         * Resets the loading, success and error indicators for the anonymous consent templates.
         */
        AnonymousConsentsService.prototype.resetLoadTemplatesState = function () {
            this.store.dispatch(new ResetLoadAnonymousConsentTemplates());
        };
        /**
         * Returns all the anonymous consents.
         */
        AnonymousConsentsService.prototype.getConsents = function () {
            return this.store.pipe(i1$2.select(getAnonymousConsents));
        };
        /**
         * Puts the provided anonymous consents into the store.
         */
        AnonymousConsentsService.prototype.setConsents = function (consents) {
            return this.store.dispatch(new SetAnonymousConsents(consents));
        };
        /**
         * Returns the anonymous consent for the given template ID.
         *
         * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.
         *
         * @param templateId a template ID by which to filter anonymous consent templates.
         */
        AnonymousConsentsService.prototype.getConsent = function (templateId) {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.filter(function (authenticated) { return !authenticated; }), operators.tap(function () { return _this.getTemplates(true); }), operators.switchMap(function () { return _this.store.pipe(i1$2.select(getAnonymousConsentByTemplateCode(templateId))); }));
        };
        /**
         * Give a consent for the given `templateCode`
         * @param templateCode for which to give the consent
         */
        AnonymousConsentsService.prototype.giveConsent = function (templateCode) {
            this.store.dispatch(new GiveAnonymousConsent(templateCode));
        };
        /**
         * Sets all the anonymous consents' state to given.
         */
        AnonymousConsentsService.prototype.giveAllConsents = function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.tap(function (templates) { return templates.forEach(function (template) { return _this.giveConsent(template.id); }); }));
        };
        /**
         * Returns `true` if the provided `consent` is given.
         * @param consent a consent to test
         */
        AnonymousConsentsService.prototype.isConsentGiven = function (consent) {
            return consent && consent.consentState === exports.ANONYMOUS_CONSENT_STATUS.GIVEN;
        };
        /**
         * Withdraw a consent for the given `templateCode`
         * @param templateCode for which to withdraw the consent
         */
        AnonymousConsentsService.prototype.withdrawConsent = function (templateCode) {
            this.store.dispatch(new WithdrawAnonymousConsent(templateCode));
        };
        /**
         * Sets all the anonymous consents' state to withdrawn.
         */
        AnonymousConsentsService.prototype.withdrawAllConsents = function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.tap(function (templates) { return templates.forEach(function (template) { return _this.withdrawConsent(template.id); }); }));
        };
        /**
         * Returns `true` if the provided `consent` is withdrawn.
         * @param consent a consent to test
         */
        AnonymousConsentsService.prototype.isConsentWithdrawn = function (consent) {
            return (consent && consent.consentState === exports.ANONYMOUS_CONSENT_STATUS.WITHDRAWN);
        };
        /**
         * Toggles the dismissed state of the anonymous consents banner.
         * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.
         */
        AnonymousConsentsService.prototype.toggleBannerDismissed = function (dismissed) {
            this.store.dispatch(new ToggleAnonymousConsentsBannerDissmissed(dismissed));
            if (dismissed) {
                this.toggleTemplatesUpdated(false);
            }
        };
        /**
         * Returns `true` if the banner was dismissed, `false` otherwise.
         */
        AnonymousConsentsService.prototype.isBannerDismissed = function () {
            return this.store.pipe(i1$2.select(getAnonymousConsentsBannerDismissed));
        };
        /**
         * Returns `true` if the consent templates were updated on the back-end.
         * If the templates are not present in the store, it triggers the load.
         */
        AnonymousConsentsService.prototype.getTemplatesUpdated = function () {
            var _this = this;
            return this.getTemplates(true).pipe(operators.switchMap(function () { return _this.store.pipe(i1$2.select(getAnonymousConsentTemplatesUpdate)); }));
        };
        /**
         * Toggles the `updated` slice of the state
         * @param updated
         */
        AnonymousConsentsService.prototype.toggleTemplatesUpdated = function (updated) {
            this.store.dispatch(new ToggleAnonymousConsentTemplatesUpdated(updated));
        };
        /**
         * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.
         * Otherwise, it returns `false`.
         */
        AnonymousConsentsService.prototype.isBannerVisible = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.isBannerDismissed(),
                this.getTemplatesUpdated(),
            ]).pipe(operators.tap(function () { return _this.checkConsentVersions(); }), operators.map(function (_a) {
                var _b = __read(_a, 2), dismissed = _b[0], updated = _b[1];
                return !dismissed || updated;
            }));
        };
        /**
         * Dispatches an action to trigger the check
         * whether the anonymous consent version have been updated
         */
        AnonymousConsentsService.prototype.checkConsentVersions = function () {
            this.store.dispatch(new AnonymousConsentCheckUpdatedVersions());
        };
        /**
         * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`
         * @param currentTemplates current templates to check
         * @param newTemplates new templates to check
         */
        AnonymousConsentsService.prototype.detectUpdatedTemplates = function (currentTemplates, newTemplates) {
            if (newTemplates.length !== currentTemplates.length) {
                return true;
            }
            for (var i = 0; i < newTemplates.length; i++) {
                var newTemplate = newTemplates[i];
                var currentTemplate = currentTemplates[i];
                if (newTemplate.version !== currentTemplate.version) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods
         * @param consents to serialize and encode
         */
        AnonymousConsentsService.prototype.serializeAndEncode = function (consents) {
            if (!consents) {
                return '';
            }
            var serialized = JSON.stringify(consents);
            var encoded = encodeURIComponent(serialized);
            return encoded;
        };
        /**
         * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`
         * @param rawConsents to decode an deserialize
         */
        AnonymousConsentsService.prototype.decodeAndDeserialize = function (rawConsents) {
            var decoded = decodeURIComponent(rawConsents);
            var unserialized = JSON.parse(decoded);
            return unserialized;
        };
        /**
         *
         * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).
         * Otherwise it returns `false`.
         *
         * @param newConsents new consents to compare
         * @param previousConsents old consents to compare
         */
        AnonymousConsentsService.prototype.consentsUpdated = function (newConsents, previousConsents) {
            var newRawConsents = this.serializeAndEncode(newConsents);
            var previousRawConsents = this.serializeAndEncode(previousConsents);
            return newRawConsents !== previousRawConsents;
        };
        return AnonymousConsentsService;
    }());
    AnonymousConsentsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentsService_Factory() { return new AnonymousConsentsService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(AuthService)); }, token: AnonymousConsentsService, providedIn: "root" });
    AnonymousConsentsService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AnonymousConsentsService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: AuthService }
    ]; };

    var DynamicTemplate = /** @class */ (function () {
        function DynamicTemplate() {
        }
        DynamicTemplate.resolve = function (templateString, templateVariables) {
            var e_1, _a;
            try {
                for (var _b = __values(Object.keys(templateVariables)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var variableLabel = _c.value;
                    var placeholder = new RegExp('\\${' + variableLabel + '}', 'g');
                    templateString = templateString.replace(placeholder, templateVariables[variableLabel]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return templateString;
        };
        return DynamicTemplate;
    }());

    /**
     * Helper function for safely getting context parameter config
     *
     * @param config
     * @param parameter
     */
    function getContextParameterValues(config, parameter) {
        return (config.context && config.context[parameter]) || [];
    }
    /**
     * Helper function for calculating default value for context parameter from config
     *
     * @param config
     * @param parameter
     */
    function getContextParameterDefault(config, parameter) {
        var param = getContextParameterValues(config, parameter);
        return param && param.length ? param[0] : undefined;
    }

    var LANGUAGE_CONTEXT_ID = 'language';
    var CURRENCY_CONTEXT_ID = 'currency';
    var BASE_SITE_CONTEXT_ID = 'baseSite';

    var LOAD_BASE_SITE = '[Site-context] Load BaseSite';
    var LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';
    var LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';
    var SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';
    var BASE_SITE_CHANGE = '[Site-context] BaseSite Change';
    var LoadBaseSite = /** @class */ (function () {
        function LoadBaseSite() {
            this.type = LOAD_BASE_SITE;
        }
        return LoadBaseSite;
    }());
    var LoadBaseSiteFail = /** @class */ (function () {
        function LoadBaseSiteFail(payload) {
            this.payload = payload;
            this.type = LOAD_BASE_SITE_FAIL;
        }
        return LoadBaseSiteFail;
    }());
    var LoadBaseSiteSuccess = /** @class */ (function () {
        function LoadBaseSiteSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_BASE_SITE_SUCCESS;
        }
        return LoadBaseSiteSuccess;
    }());
    var SetActiveBaseSite = /** @class */ (function () {
        function SetActiveBaseSite(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_BASE_SITE;
        }
        return SetActiveBaseSite;
    }());
    var BaseSiteChange = /** @class */ (function () {
        function BaseSiteChange() {
            this.type = BASE_SITE_CHANGE;
        }
        return BaseSiteChange;
    }());

    var LOAD_CURRENCIES = '[Site-context] Load Currencies';
    var LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';
    var LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';
    var SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';
    var CURRENCY_CHANGE = '[Site-context] Currency Change';
    var LoadCurrencies = /** @class */ (function () {
        function LoadCurrencies() {
            this.type = LOAD_CURRENCIES;
        }
        return LoadCurrencies;
    }());
    var LoadCurrenciesFail = /** @class */ (function () {
        function LoadCurrenciesFail(payload) {
            this.payload = payload;
            this.type = LOAD_CURRENCIES_FAIL;
        }
        return LoadCurrenciesFail;
    }());
    var LoadCurrenciesSuccess = /** @class */ (function () {
        function LoadCurrenciesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CURRENCIES_SUCCESS;
        }
        return LoadCurrenciesSuccess;
    }());
    var SetActiveCurrency = /** @class */ (function () {
        function SetActiveCurrency(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_CURRENCY;
        }
        return SetActiveCurrency;
    }());
    var CurrencyChange = /** @class */ (function () {
        function CurrencyChange(payload) {
            this.payload = payload;
            this.type = CURRENCY_CHANGE;
        }
        return CurrencyChange;
    }());

    var LOAD_LANGUAGES = '[Site-context] Load Languages';
    var LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';
    var LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';
    var SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';
    var LANGUAGE_CHANGE = '[Site-context] Language Change';
    var LoadLanguages = /** @class */ (function () {
        function LoadLanguages() {
            this.type = LOAD_LANGUAGES;
        }
        return LoadLanguages;
    }());
    var LoadLanguagesFail = /** @class */ (function () {
        function LoadLanguagesFail(payload) {
            this.payload = payload;
            this.type = LOAD_LANGUAGES_FAIL;
        }
        return LoadLanguagesFail;
    }());
    var LoadLanguagesSuccess = /** @class */ (function () {
        function LoadLanguagesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_LANGUAGES_SUCCESS;
        }
        return LoadLanguagesSuccess;
    }());
    var SetActiveLanguage = /** @class */ (function () {
        function SetActiveLanguage(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_LANGUAGE;
        }
        return SetActiveLanguage;
    }());
    var LanguageChange = /** @class */ (function () {
        function LanguageChange(payload) {
            this.payload = payload;
            this.type = LANGUAGE_CHANGE;
        }
        return LanguageChange;
    }());

    var siteContextGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_BASE_SITE: LOAD_BASE_SITE,
        LOAD_BASE_SITE_FAIL: LOAD_BASE_SITE_FAIL,
        LOAD_BASE_SITE_SUCCESS: LOAD_BASE_SITE_SUCCESS,
        SET_ACTIVE_BASE_SITE: SET_ACTIVE_BASE_SITE,
        BASE_SITE_CHANGE: BASE_SITE_CHANGE,
        LoadBaseSite: LoadBaseSite,
        LoadBaseSiteFail: LoadBaseSiteFail,
        LoadBaseSiteSuccess: LoadBaseSiteSuccess,
        SetActiveBaseSite: SetActiveBaseSite,
        BaseSiteChange: BaseSiteChange,
        LOAD_CURRENCIES: LOAD_CURRENCIES,
        LOAD_CURRENCIES_FAIL: LOAD_CURRENCIES_FAIL,
        LOAD_CURRENCIES_SUCCESS: LOAD_CURRENCIES_SUCCESS,
        SET_ACTIVE_CURRENCY: SET_ACTIVE_CURRENCY,
        CURRENCY_CHANGE: CURRENCY_CHANGE,
        LoadCurrencies: LoadCurrencies,
        LoadCurrenciesFail: LoadCurrenciesFail,
        LoadCurrenciesSuccess: LoadCurrenciesSuccess,
        SetActiveCurrency: SetActiveCurrency,
        CurrencyChange: CurrencyChange,
        LOAD_LANGUAGES: LOAD_LANGUAGES,
        LOAD_LANGUAGES_FAIL: LOAD_LANGUAGES_FAIL,
        LOAD_LANGUAGES_SUCCESS: LOAD_LANGUAGES_SUCCESS,
        SET_ACTIVE_LANGUAGE: SET_ACTIVE_LANGUAGE,
        LANGUAGE_CHANGE: LANGUAGE_CHANGE,
        LoadLanguages: LoadLanguages,
        LoadLanguagesFail: LoadLanguagesFail,
        LoadLanguagesSuccess: LoadLanguagesSuccess,
        SetActiveLanguage: SetActiveLanguage,
        LanguageChange: LanguageChange
    });

    var SITE_CONTEXT_FEATURE = 'siteContext';

    var getSiteContextState = i1$2.createFeatureSelector(SITE_CONTEXT_FEATURE);

    var ɵ0$4 = function (state) { return state && state.baseSite && state.baseSite.activeSite; };
    var getActiveBaseSite = i1$2.createSelector(getSiteContextState, ɵ0$4);
    var ɵ1$2 = function (state) { return state && state.baseSite && state.baseSite.details; };
    var getBaseSiteData = i1$2.createSelector(getSiteContextState, ɵ1$2);

    var currenciesEntitiesSelector = function (state) { return state.entities; };
    var ɵ0$5 = currenciesEntitiesSelector;
    var activeCurrencySelector = function (state) { return state.activeCurrency; };
    var ɵ1$3 = activeCurrencySelector;
    var ɵ2$1 = function (state) { return state.currencies; };
    var getCurrenciesState = i1$2.createSelector(getSiteContextState, ɵ2$1);
    var getCurrenciesEntities = i1$2.createSelector(getCurrenciesState, currenciesEntitiesSelector);
    var getActiveCurrency = i1$2.createSelector(getCurrenciesState, activeCurrencySelector);
    var ɵ3$1 = function (entities) {
        return entities
            ? Object.keys(entities).map(function (isocode) { return entities[isocode]; })
            : null;
    };
    var getAllCurrencies = i1$2.createSelector(getCurrenciesEntities, ɵ3$1);

    var activeLanguageSelector = function (state) { return state.activeLanguage; };
    var ɵ0$6 = activeLanguageSelector;
    var languagesEntitiesSelector = function (state) { return state.entities; };
    var ɵ1$4 = languagesEntitiesSelector;
    var ɵ2$2 = function (state) { return state.languages; };
    var getLanguagesState = i1$2.createSelector(getSiteContextState, ɵ2$2);
    var getLanguagesEntities = i1$2.createSelector(getLanguagesState, languagesEntitiesSelector);
    var getActiveLanguage = i1$2.createSelector(getLanguagesState, activeLanguageSelector);
    var ɵ3$2 = function (entities) {
        return entities
            ? Object.keys(entities).map(function (isocode) { return entities[isocode]; })
            : null;
    };
    var getAllLanguages = i1$2.createSelector(getLanguagesEntities, ɵ3$2);

    var siteContextGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getActiveBaseSite: getActiveBaseSite,
        getBaseSiteData: getBaseSiteData,
        ɵ0: ɵ0$4,
        ɵ1: ɵ1$2,
        getCurrenciesState: getCurrenciesState,
        getCurrenciesEntities: getCurrenciesEntities,
        getActiveCurrency: getActiveCurrency,
        getAllCurrencies: getAllCurrencies,
        ɵ2: ɵ2$1,
        ɵ3: ɵ3$1,
        getLanguagesState: getLanguagesState,
        getLanguagesEntities: getLanguagesEntities,
        getActiveLanguage: getActiveLanguage,
        getAllLanguages: getAllLanguages,
        getSiteContextState: getSiteContextState
    });

    var BaseSiteService = /** @class */ (function () {
        function BaseSiteService(store, config) {
            this.store = store;
            this.config = config;
        }
        /**
         * Represents the current baseSite uid.
         */
        BaseSiteService.prototype.getActive = function () {
            return this.store.pipe(i1$2.select(getActiveBaseSite), operators.filter(function (active) { return Boolean(active); }));
        };
        /**
         * We currently don't support switching baseSite at run time
         */
        BaseSiteService.prototype.getAll = function () {
            return this.getActive().pipe(operators.map(function (baseSite) { return [baseSite]; }));
        };
        BaseSiteService.prototype.setActive = function (baseSite) {
            var _this = this;
            return this.store
                .pipe(i1$2.select(getActiveBaseSite), operators.take(1))
                .subscribe(function (activeBaseSite) {
                if (baseSite && activeBaseSite !== baseSite) {
                    _this.store.dispatch(new SetActiveBaseSite(baseSite));
                }
            });
        };
        /**
         * Initializes the active baseSite.
         */
        BaseSiteService.prototype.initialize = function () {
            var value;
            this.getActive()
                .subscribe(function (val) { return (value = val); })
                .unsubscribe();
            if (value) {
                // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)
                return;
            }
            this.setActive(getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID));
        };
        /**
         * Get the base site details data
         */
        BaseSiteService.prototype.getBaseSiteData = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getBaseSiteData), operators.tap(function (baseSite) {
                if (Object.keys(baseSite).length === 0) {
                    _this.store.dispatch(new LoadBaseSite());
                }
            }));
        };
        return BaseSiteService;
    }());
    BaseSiteService.decorators = [
        { type: i0.Injectable }
    ];
    BaseSiteService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: SiteContextConfig }
    ]; };

    var HttpParamsURIEncoder = /** @class */ (function () {
        function HttpParamsURIEncoder() {
        }
        HttpParamsURIEncoder.prototype.encodeKey = function (key) {
            return encodeURIComponent(key);
        };
        HttpParamsURIEncoder.prototype.encodeValue = function (value) {
            return encodeURIComponent(value);
        };
        HttpParamsURIEncoder.prototype.decodeKey = function (key) {
            return decodeURIComponent(key);
        };
        HttpParamsURIEncoder.prototype.decodeValue = function (value) {
            return decodeURIComponent(value);
        };
        return HttpParamsURIEncoder;
    }());

    var DEFAULT_SCOPE = 'default';

    var OccEndpointsService = /** @class */ (function () {
        function OccEndpointsService(config, baseSiteService) {
            var _this = this;
            this.config = config;
            this.baseSiteService = baseSiteService;
            if (this.baseSiteService) {
                this.baseSiteService
                    .getActive()
                    .subscribe(function (value) { return (_this._activeBaseSite = value); });
            }
        }
        Object.defineProperty(OccEndpointsService.prototype, "activeBaseSite", {
            get: function () {
                var _a;
                return ((_a = this._activeBaseSite) !== null && _a !== void 0 ? _a : getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns and endpoint starting from the OCC baseUrl (no baseSite)
         * @param endpoint Endpoint suffix
         */
        OccEndpointsService.prototype.getRawEndpoint = function (endpoint) {
            var _a, _b, _c;
            if (!((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.occ)) {
                return '';
            }
            endpoint = (_c = this.config.backend.occ.endpoints) === null || _c === void 0 ? void 0 : _c[endpoint];
            if (!endpoint.startsWith('/')) {
                endpoint = '/' + endpoint;
            }
            return this.config.backend.occ.baseUrl + endpoint;
        };
        /**
         * Returns base OCC endpoint (baseUrl + prefix + baseSite)
         */
        OccEndpointsService.prototype.getBaseEndpoint = function () {
            var _a, _b;
            if (!((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.occ)) {
                return '';
            }
            return ((this.config.backend.occ.baseUrl || '') +
                this.config.backend.occ.prefix +
                this.activeBaseSite);
        };
        /**
         * Returns an OCC endpoint including baseUrl and baseSite
         * @param endpoint Endpoint suffix
         */
        OccEndpointsService.prototype.getEndpoint = function (endpoint) {
            if (!endpoint.startsWith('/')) {
                endpoint = '/' + endpoint;
            }
            return this.getBaseEndpoint() + endpoint;
        };
        /**
         * Returns a fully qualified OCC Url (including baseUrl and baseSite)
         * @param endpoint Name of the OCC endpoint key config
         * @param urlParams  URL parameters
         * @param queryParams Query parameters
         * @param scope
         */
        OccEndpointsService.prototype.getUrl = function (endpoint, urlParams, queryParams, scope) {
            var _d;
            endpoint = this.getEndpointForScope(endpoint, scope);
            if (urlParams) {
                Object.keys(urlParams).forEach(function (key) {
                    urlParams[key] = encodeURIComponent(urlParams[key]);
                });
                endpoint = DynamicTemplate.resolve(endpoint, urlParams);
            }
            if (queryParams) {
                var httpParamsOptions = { encoder: new HttpParamsURIEncoder() };
                if (endpoint.includes('?')) {
                    var queryParamsFromEndpoint = void 0;
                    _d = __read(endpoint.split('?'), 2), endpoint = _d[0], queryParamsFromEndpoint = _d[1];
                    httpParamsOptions = Object.assign(Object.assign({}, httpParamsOptions), { fromString: queryParamsFromEndpoint });
                }
                var httpParams_1 = new i1$4.HttpParams(httpParamsOptions);
                Object.keys(queryParams).forEach(function (key) {
                    var value = queryParams[key];
                    if (value !== undefined) {
                        if (value === null) {
                            httpParams_1 = httpParams_1.delete(key);
                        }
                        else {
                            httpParams_1 = httpParams_1.set(key, value);
                        }
                    }
                });
                var params = httpParams_1.toString();
                if (params.length) {
                    endpoint += '?' + params;
                }
            }
            return this.getEndpoint(endpoint);
        };
        OccEndpointsService.prototype.getEndpointForScope = function (endpoint, scope) {
            var _a, _b;
            var endpointsConfig = (_b = (_a = this.config.backend) === null || _a === void 0 ? void 0 : _a.occ) === null || _b === void 0 ? void 0 : _b.endpoints;
            var endpointConfig = endpointsConfig[endpoint];
            if (scope) {
                if (endpointConfig === null || endpointConfig === void 0 ? void 0 : endpointConfig[scope]) {
                    return endpointConfig === null || endpointConfig === void 0 ? void 0 : endpointConfig[scope];
                }
                if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {
                    return endpointConfig;
                }
                if (i0.isDevMode()) {
                    console.warn(endpoint + " endpoint configuration missing for scope \"" + scope + "\"");
                }
            }
            return ((typeof endpointConfig === 'string'
                ? endpointConfig
                : endpointConfig === null || endpointConfig === void 0 ? void 0 : endpointConfig[DEFAULT_SCOPE]) || endpoint);
        };
        return OccEndpointsService;
    }());
    OccEndpointsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccEndpointsService_Factory() { return new OccEndpointsService(i0.ɵɵinject(OccConfig), i0.ɵɵinject(BaseSiteService, 8)); }, token: OccEndpointsService, providedIn: "root" });
    OccEndpointsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OccEndpointsService.ctorParameters = function () { return [
        { type: OccConfig },
        { type: BaseSiteService, decorators: [{ type: i0.Optional }] }
    ]; };

    var USE_CLIENT_TOKEN = 'cx-use-client-token';
    var USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';
    var InterceptorUtil = /** @class */ (function () {
        function InterceptorUtil() {
        }
        InterceptorUtil.createHeader = function (headerName, interceptorParam, headers) {
            if (headers) {
                return headers.append(headerName, JSON.stringify(interceptorParam));
            }
            headers = new i1$4.HttpHeaders().set(headerName, JSON.stringify(interceptorParam));
            return headers;
        };
        InterceptorUtil.removeHeader = function (headerName, request) {
            var updatedHeaders = request.headers.delete(headerName);
            return request.clone({ headers: updatedHeaders });
        };
        InterceptorUtil.getInterceptorParam = function (headerName, headers) {
            var rawValue = headers.get(headerName);
            if (rawValue) {
                return JSON.parse(rawValue);
            }
            return undefined;
        };
        return InterceptorUtil;
    }());

    var CLIENT_AUTH_FEATURE = 'client-auth';
    var CLIENT_TOKEN_DATA = '[Client auth] Client Token Data';

    var LOAD_CLIENT_TOKEN = '[Token] Load Client Token';
    var LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';
    var LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';
    var LoadClientToken = /** @class */ (function (_super) {
        __extends(LoadClientToken, _super);
        function LoadClientToken() {
            var _this = _super.call(this, CLIENT_TOKEN_DATA) || this;
            _this.type = LOAD_CLIENT_TOKEN;
            return _this;
        }
        return LoadClientToken;
    }(LoaderLoadAction));
    var LoadClientTokenFail = /** @class */ (function (_super) {
        __extends(LoadClientTokenFail, _super);
        function LoadClientTokenFail(payload) {
            var _this = _super.call(this, CLIENT_TOKEN_DATA, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CLIENT_TOKEN_FAIL;
            return _this;
        }
        return LoadClientTokenFail;
    }(LoaderFailAction));
    var LoadClientTokenSuccess = /** @class */ (function (_super) {
        __extends(LoadClientTokenSuccess, _super);
        function LoadClientTokenSuccess(payload) {
            var _this = _super.call(this, CLIENT_TOKEN_DATA) || this;
            _this.payload = payload;
            _this.type = LOAD_CLIENT_TOKEN_SUCCESS;
            return _this;
        }
        return LoadClientTokenSuccess;
    }(LoaderSuccessAction));

    var clientTokenGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_CLIENT_TOKEN: LOAD_CLIENT_TOKEN,
        LOAD_CLIENT_TOKEN_FAIL: LOAD_CLIENT_TOKEN_FAIL,
        LOAD_CLIENT_TOKEN_SUCCESS: LOAD_CLIENT_TOKEN_SUCCESS,
        LoadClientToken: LoadClientToken,
        LoadClientTokenFail: LoadClientTokenFail,
        LoadClientTokenSuccess: LoadClientTokenSuccess
    });

    var getClientAuthState = i1$2.createFeatureSelector(CLIENT_AUTH_FEATURE);

    var ɵ0$7 = function (state) { return state.clientToken; };
    var getClientTokenState = i1$2.createSelector(getClientAuthState, ɵ0$7);

    var clientTokenGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getClientTokenState: getClientTokenState,
        ɵ0: ɵ0$7,
        getClientAuthState: getClientAuthState
    });

    /**
     * Serves a role of a facade on client token store.
     */
    var ClientTokenService = /** @class */ (function () {
        function ClientTokenService(store) {
            this.store = store;
        }
        /**
         * Returns a client token. The client token from the store is returned if there is one.
         * Otherwise a new token is fetched from the backend and saved in the store.
         */
        ClientTokenService.prototype.getClientToken = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getClientTokenState), operators.observeOn(rxjs.queueScheduler), operators.filter(function (state) {
                if (_this.isClientTokenLoaded(state)) {
                    return true;
                }
                else {
                    if (!state.loading) {
                        _this.store.dispatch(new LoadClientToken());
                    }
                    return false;
                }
            }), operators.map(function (state) { return state.value; }));
        };
        /**
         * Fetches a clientToken from the backend and saves it in the store where getClientToken can use it.
         * The new clientToken is returned.
         */
        ClientTokenService.prototype.refreshClientToken = function () {
            var _this = this;
            this.store.dispatch(new LoadClientToken());
            return this.store.pipe(i1$2.select(getClientTokenState), operators.filter(function (state) { return _this.isClientTokenLoaded(state); }), operators.map(function (state) { return state.value; }));
        };
        ClientTokenService.prototype.isClientTokenLoaded = function (state) {
            return (state.success || state.error) && !state.loading;
        };
        return ClientTokenService;
    }());
    ClientTokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClientTokenService_Factory() { return new ClientTokenService(i0.ɵɵinject(i1$2.Store)); }, token: ClientTokenService, providedIn: "root" });
    ClientTokenService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ClientTokenService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    /**
     * Service for handling `Authorization` header and errors for requests that
     * require client token (eg. user registration).
     */
    var ClientErrorHandlingService = /** @class */ (function () {
        function ClientErrorHandlingService(clientTokenService) {
            this.clientTokenService = clientTokenService;
        }
        /**
         * Refreshes client token and retries the request with the new token.
         *
         * @param request
         * @param httpHandler
         */
        ClientErrorHandlingService.prototype.handleExpiredClientToken = function (request, next) {
            var _this = this;
            return this.clientTokenService.refreshClientToken().pipe(operators.take(1), operators.switchMap(function (token) {
                return next.handle(_this.createNewRequestWithNewToken(request, token));
            }));
        };
        /**
         * Clones the requests and provided `Authorization` header.
         *
         * @param request
         * @param token
         */
        ClientErrorHandlingService.prototype.createNewRequestWithNewToken = function (request, token) {
            request = request.clone({
                setHeaders: {
                    Authorization: (token.token_type || 'Bearer') + " " + token.access_token,
                },
            });
            return request;
        };
        return ClientErrorHandlingService;
    }());
    ClientErrorHandlingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClientErrorHandlingService_Factory() { return new ClientErrorHandlingService(i0.ɵɵinject(ClientTokenService)); }, token: ClientErrorHandlingService, providedIn: "root" });
    ClientErrorHandlingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ClientErrorHandlingService.ctorParameters = function () { return [
        { type: ClientTokenService }
    ]; };

    /**
     * Interceptor for handling requests with `USE_CLIENT_TOKEN` header.
     * Provides `Authorization` header with client token and handles errors related to client auth.
     */
    var ClientTokenInterceptor = /** @class */ (function () {
        function ClientTokenInterceptor(clientTokenService, clientErrorHandlingService, occEndpoints) {
            this.clientTokenService = clientTokenService;
            this.clientErrorHandlingService = clientErrorHandlingService;
            this.occEndpoints = occEndpoints;
        }
        ClientTokenInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            var isClientTokenRequest = this.isClientTokenRequest(request);
            if (isClientTokenRequest) {
                request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);
            }
            return this.getClientToken(isClientTokenRequest).pipe(operators.take(1), operators.switchMap(function (token) {
                if ((token === null || token === void 0 ? void 0 : token.access_token) &&
                    request.url.includes(_this.occEndpoints.getBaseEndpoint())) {
                    request = request.clone({
                        setHeaders: {
                            Authorization: (token.token_type || 'Bearer') + " " + token.access_token,
                        },
                    });
                }
                return next.handle(request).pipe(operators.catchError(function (errResponse) {
                    if (errResponse instanceof i1$4.HttpErrorResponse) {
                        if (errResponse.status === 401) {
                            if (isClientTokenRequest) {
                                if (_this.isExpiredToken(errResponse)) {
                                    return _this.clientErrorHandlingService.handleExpiredClientToken(request, next);
                                }
                            }
                        }
                    }
                    return rxjs.throwError(errResponse);
                }));
            }));
        };
        ClientTokenInterceptor.prototype.getClientToken = function (isClientTokenRequest) {
            if (isClientTokenRequest) {
                return this.clientTokenService.getClientToken();
            }
            return rxjs.of(null);
        };
        ClientTokenInterceptor.prototype.isClientTokenRequest = function (request) {
            var isRequestMapping = InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers);
            return Boolean(isRequestMapping);
        };
        ClientTokenInterceptor.prototype.isExpiredToken = function (resp) {
            var _a, _b, _c;
            return ((_c = (_b = (_a = resp.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === 'InvalidTokenError';
        };
        return ClientTokenInterceptor;
    }());
    ClientTokenInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClientTokenInterceptor_Factory() { return new ClientTokenInterceptor(i0.ɵɵinject(ClientTokenService), i0.ɵɵinject(ClientErrorHandlingService), i0.ɵɵinject(OccEndpointsService)); }, token: ClientTokenInterceptor, providedIn: "root" });
    ClientTokenInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ClientTokenInterceptor.ctorParameters = function () { return [
        { type: ClientTokenService },
        { type: ClientErrorHandlingService },
        { type: OccEndpointsService }
    ]; };

    var interceptors = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: ClientTokenInterceptor,
            multi: true,
        },
    ];

    var DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';
    var DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';
    var defaultStateConfig = {
        state: {
            storageSync: {
                localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,
                sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,
                keys: {},
                excludeKeys: {},
            },
        },
    };

    (function (StorageSyncType) {
        StorageSyncType["NO_STORAGE"] = "NO_STORAGE";
        StorageSyncType["LOCAL_STORAGE"] = "LOCAL_STORAGE";
        StorageSyncType["SESSION_STORAGE"] = "SESSION_STORAGE";
    })(exports.StorageSyncType || (exports.StorageSyncType = {}));
    (function (StateTransferType) {
        StateTransferType["TRANSFER_STATE"] = "SSR";
    })(exports.StateTransferType || (exports.StateTransferType = {}));
    var StateConfig = /** @class */ (function () {
        function StateConfig() {
        }
        return StateConfig;
    }());
    StateConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function StateConfig_Factory() { return i0.ɵɵinject(Config); }, token: StateConfig, providedIn: "root" });
    StateConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    function getStorageSyncReducer(winRef, config) {
        if (!winRef.nativeWindow ||
            !config ||
            !config.state ||
            !config.state.storageSync ||
            !config.state.storageSync.keys) {
            return function (reducer) { return reducer; };
        }
        var storageSyncConfig = config.state.storageSync;
        return function (reducer) {
            return function (state, action) {
                var newState = reducer(state, action);
                if (action.type === i1$2.INIT || action.type === i1$2.UPDATE) {
                    var rehydratedState = rehydrate(config, winRef);
                    return deepMerge({}, newState, rehydratedState);
                }
                if (action.type !== i1$2.INIT) {
                    // handle local storage
                    var localStorageKeys = filterKeysByType(storageSyncConfig.keys, exports.StorageSyncType.LOCAL_STORAGE);
                    var localStorageExclusionKeys = filterKeysByType(storageSyncConfig.excludeKeys, exports.StorageSyncType.LOCAL_STORAGE);
                    var localStorageStateSlices = getStateSlice(localStorageKeys, localStorageExclusionKeys, newState);
                    persistToStorage(config.state.storageSync.localStorageKeyName, localStorageStateSlices, winRef.localStorage);
                    // handle session storage
                    var sessionStorageKeys = filterKeysByType(storageSyncConfig.keys, exports.StorageSyncType.SESSION_STORAGE);
                    var sessionStorageExclusionKeys = filterKeysByType(storageSyncConfig.excludeKeys, exports.StorageSyncType.SESSION_STORAGE);
                    var sessionStorageStateSlices = getStateSlice(sessionStorageKeys, sessionStorageExclusionKeys, newState);
                    persistToStorage(config.state.storageSync.sessionStorageKeyName, sessionStorageStateSlices, winRef.sessionStorage);
                }
                return newState;
            };
        };
    }
    function rehydrate(config, winRef) {
        var localStorageValue = readFromStorage(winRef.localStorage, config.state.storageSync.localStorageKeyName);
        var sessionStorageValue = readFromStorage(winRef.sessionStorage, config.state.storageSync.sessionStorageKeyName);
        return deepMerge(localStorageValue, sessionStorageValue);
    }
    function exists(value) {
        if (value != null) {
            if (typeof value === 'object') {
                return Object.keys(value).length !== 0;
            }
            return value !== '';
        }
        return false;
    }
    function getStorage(storageType, winRef) {
        var storage;
        switch (storageType) {
            case exports.StorageSyncType.LOCAL_STORAGE: {
                storage = winRef.localStorage;
                break;
            }
            case exports.StorageSyncType.SESSION_STORAGE: {
                storage = winRef.sessionStorage;
                break;
            }
            case exports.StorageSyncType.NO_STORAGE: {
                storage = undefined;
                break;
            }
            default: {
                storage = winRef.sessionStorage;
            }
        }
        return storage;
    }
    function persistToStorage(configKey, value, storage) {
        if (!isSsr(storage) && value) {
            storage.setItem(configKey, JSON.stringify(value));
        }
    }
    function readFromStorage(storage, key) {
        if (isSsr(storage)) {
            return;
        }
        var storageValue = storage.getItem(key);
        if (!storageValue) {
            return;
        }
        return JSON.parse(storageValue);
    }
    function isSsr(storage) {
        return !Boolean(storage);
    }

    var StatePersistenceService = /** @class */ (function () {
        function StatePersistenceService(winRef) {
            this.winRef = winRef;
        }
        /**
         * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).
         * It is context aware, so you can keep different state for te same feature based on specified context.
         *
         * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.
         * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.
         * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.
         *
         * On each context change onRead function will be executed with state from storage provided as a parameter.
         *
         * Omitting context$ will trigger onRead only once at initialization.
         *
         * @param key Key to use in storage for the synchronized state. Should be unique for each feature.
         * @param state$ State to be saved and later restored.
         * @param context$ Context for state
         * @param storageType Storage type to be used to persist state
         * @param onRead Function to be executed on each storage read after context change
         *
         * @returns Subscriptions for reading/writing in storage on context/state change
         */
        StatePersistenceService.prototype.syncWithStorage = function (_a) {
            var _this = this;
            var key = _a.key, state$ = _a.state$, _b = _a.context$, context$ = _b === void 0 ? rxjs.of('') : _b, _c = _a.storageType, storageType = _c === void 0 ? exports.StorageSyncType.LOCAL_STORAGE : _c, _d = _a.onRead, onRead = _d === void 0 ? function () { } : _d;
            var storage = getStorage(storageType, this.winRef);
            var subscriptions = new rxjs.Subscription();
            // Do not change order of subscription! Read should happen before write on context change.
            subscriptions.add(context$
                .pipe(operators.map(function (context) {
                return readFromStorage(storage, _this.generateKeyWithContext(context, key));
            }), operators.tap(function (state) { return onRead(state); }))
                .subscribe());
            subscriptions.add(state$.pipe(operators.withLatestFrom(context$)).subscribe(function (_a) {
                var _b = __read(_a, 2), state = _b[0], context = _b[1];
                persistToStorage(_this.generateKeyWithContext(context, key), state, storage);
            }));
            return subscriptions;
        };
        /**
         * Helper to read state from persistent storage (localStorage, sessionStorage).
         * It is useful if you need synchronously access state saved with `syncWithStorage`.
         *
         * @param key Key to use in storage for state. Should be unique for each feature.
         * @param context Context value for state
         * @param storageType Storage type from to read state
         *
         * @returns State from the storage
         */
        StatePersistenceService.prototype.readStateFromStorage = function (_a) {
            var key = _a.key, _b = _a.context, context = _b === void 0 ? '' : _b, _c = _a.storageType, storageType = _c === void 0 ? exports.StorageSyncType.LOCAL_STORAGE : _c;
            var storage = getStorage(storageType, this.winRef);
            return readFromStorage(storage, this.generateKeyWithContext(context, key));
        };
        StatePersistenceService.prototype.generateKeyWithContext = function (context, key) {
            return "spartacus\u26BF" + [].concat(context).join('⚿') + "\u26BF" + key;
        };
        return StatePersistenceService;
    }());
    StatePersistenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StatePersistenceService_Factory() { return new StatePersistenceService(i0.ɵɵinject(WindowRef)); }, token: StatePersistenceService, providedIn: "root" });
    StatePersistenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    StatePersistenceService.ctorParameters = function () { return [
        { type: WindowRef }
    ]; };

    /**
     * Responsible for saving the authorization data (userId, token, redirectUrl) in browser storage.
     */
    var AuthStatePersistenceService = /** @class */ (function () {
        function AuthStatePersistenceService(statePersistenceService, userIdService, authStorageService, authRedirectStorageService) {
            this.statePersistenceService = statePersistenceService;
            this.userIdService = userIdService;
            this.authStorageService = authStorageService;
            this.authRedirectStorageService = authRedirectStorageService;
            this.subscription = new rxjs.Subscription();
            /**
             * Identifier used for storage key.
             */
            this.key = 'auth';
        }
        /**
         * Initializes the synchronization between state and browser storage.
         */
        AuthStatePersistenceService.prototype.initSync = function () {
            var _this = this;
            this.subscription.add(this.statePersistenceService.syncWithStorage({
                key: this.key,
                state$: this.getAuthState(),
                onRead: function (state) { return _this.onRead(state); },
            }));
        };
        /**
         * Gets and transforms state from different sources into the form that should
         * be saved in storage.
         */
        AuthStatePersistenceService.prototype.getAuthState = function () {
            return rxjs.combineLatest([
                this.authStorageService.getToken().pipe(operators.filter(function (state) { return !!state; }), operators.map(function (state) {
                    return Object.assign({}, state);
                })),
                this.userIdService.getUserId(),
                this.authRedirectStorageService.getRedirectUrl(),
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 3), authToken = _d[0], userId = _d[1], redirectUrl = _d[2];
                var token = authToken;
                if (token) {
                    token = Object.assign({}, token);
                    // To minimize risk of user account hijacking we don't persist user refresh_token
                    delete token.refresh_token;
                }
                return { token: token, userId: userId, redirectUrl: redirectUrl };
            }));
        };
        /**
         * Function called on each browser storage read.
         * Used to update state from browser -> state.
         */
        AuthStatePersistenceService.prototype.onRead = function (state) {
            if (state) {
                if (state.token) {
                    this.authStorageService.setToken(state.token);
                }
                if (state.userId) {
                    this.userIdService.setUserId(state.userId);
                }
                if (state.redirectUrl) {
                    this.authRedirectStorageService.setRedirectUrl(state.redirectUrl);
                }
            }
        };
        /**
         * Reads synchronously state from storage and returns it.
         */
        AuthStatePersistenceService.prototype.readStateFromStorage = function () {
            return this.statePersistenceService.readStateFromStorage({
                key: this.key,
            });
        };
        /**
         * Check synchronously in browser storage if user is logged in (required by transfer state reducer).
         * For most cases `isUserLoggedIn` from the `AuthService` should be used instead of this.
         */
        AuthStatePersistenceService.prototype.isUserLoggedIn = function () {
            var _a, _b;
            return Boolean((_b = (_a = this.readStateFromStorage()) === null || _a === void 0 ? void 0 : _a.token) === null || _b === void 0 ? void 0 : _b.access_token);
        };
        AuthStatePersistenceService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return AuthStatePersistenceService;
    }());
    AuthStatePersistenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthStatePersistenceService_Factory() { return new AuthStatePersistenceService(i0.ɵɵinject(StatePersistenceService), i0.ɵɵinject(UserIdService), i0.ɵɵinject(AuthStorageService), i0.ɵɵinject(AuthRedirectStorageService)); }, token: AuthStatePersistenceService, providedIn: "root" });
    AuthStatePersistenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthStatePersistenceService.ctorParameters = function () { return [
        { type: StatePersistenceService },
        { type: UserIdService },
        { type: AuthStorageService },
        { type: AuthRedirectStorageService }
    ]; };

    var CX_KEY = i5.makeStateKey('cx-state');
    function getTransferStateReducer(platformId, transferState, config, authStatePersistenceService) {
        var _a, _b;
        if (transferState && ((_b = (_a = config === null || config === void 0 ? void 0 : config.state) === null || _a === void 0 ? void 0 : _a.ssrTransfer) === null || _b === void 0 ? void 0 : _b.keys)) {
            if (i1.isPlatformBrowser(platformId)) {
                return getBrowserTransferStateReducer(transferState, config.state.ssrTransfer.keys, Boolean(authStatePersistenceService === null || authStatePersistenceService === void 0 ? void 0 : authStatePersistenceService.isUserLoggedIn()));
            }
            else if (i1.isPlatformServer(platformId)) {
                return getServerTransferStateReducer(transferState, config.state.ssrTransfer.keys);
            }
        }
        return function (reducer) { return reducer; };
    }
    function getServerTransferStateReducer(transferState, keys) {
        var transferStateKeys = filterKeysByType(keys, exports.StateTransferType.TRANSFER_STATE);
        return function (reducer) {
            return function (state, action) {
                var newState = reducer(state, action);
                if (newState) {
                    var stateSlice = getStateSlice(transferStateKeys, [], newState);
                    transferState.set(CX_KEY, stateSlice);
                }
                return newState;
            };
        };
    }
    function getBrowserTransferStateReducer(transferState, keys, isLoggedIn) {
        var transferStateKeys = filterKeysByType(keys, exports.StateTransferType.TRANSFER_STATE);
        return function (reducer) {
            return function (state, action) {
                if (action.type === i1$2.INIT) {
                    if (!state) {
                        state = reducer(state, action);
                    }
                    if (!isLoggedIn && transferState.hasKey(CX_KEY)) {
                        var cxKey = transferState.get(CX_KEY, {});
                        var transferredStateSlice = getStateSlice(transferStateKeys, [], cxKey);
                        state = deepMerge({}, state, transferredStateSlice);
                    }
                    return state;
                }
                return reducer(state, action);
            };
        };
    }

    var TRANSFER_STATE_META_REDUCER = new i0.InjectionToken('TransferStateMetaReducer');
    var STORAGE_SYNC_META_REDUCER = new i0.InjectionToken('StorageSyncMetaReducer');
    var ɵ0$8 = getTransferStateReducer, ɵ1$5 = getStorageSyncReducer;
    var stateMetaReducers = [
        {
            provide: TRANSFER_STATE_META_REDUCER,
            useFactory: ɵ0$8,
            deps: [
                i0.PLATFORM_ID,
                [new i0.Optional(), i5.TransferState],
                [new i0.Optional(), Config],
                [new i0.Optional(), AuthStatePersistenceService],
            ],
        },
        {
            provide: STORAGE_SYNC_META_REDUCER,
            useFactory: ɵ1$5,
            deps: [WindowRef, [new i0.Optional(), Config]],
        },
        {
            provide: i1$2.META_REDUCERS,
            useExisting: TRANSFER_STATE_META_REDUCER,
            multi: true,
        },
        {
            provide: i1$2.META_REDUCERS,
            useExisting: STORAGE_SYNC_META_REDUCER,
            multi: true,
        },
    ];

    var StateModule = /** @class */ (function () {
        function StateModule() {
        }
        StateModule.forRoot = function () {
            return {
                ngModule: StateModule,
                providers: __spread(stateMetaReducers, [
                    provideDefaultConfig(defaultStateConfig),
                ]),
            };
        };
        return StateModule;
    }());
    StateModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    /**
     * Normalizes HttpErrorResponse to HttpErrorModel.
     *
     * Can be used as a safe and generic way for embodying http errors into
     * NgRx Action payload, as it will strip potentially unserializable parts from
     * it and warn in debug mode if passed error is not instance of HttpErrorModel
     * (which usually happens when logic in NgRx Effect is not sealed correctly)
     */
    function normalizeHttpError(error) {
        if (error instanceof i1$4.HttpErrorResponse) {
            var normalizedError = {
                message: error.message,
                status: error.status,
                statusText: error.statusText,
                url: error.url,
            };
            // include backend's error details
            if (Array.isArray(error.error.errors)) {
                normalizedError.details = error.error.errors;
            }
            else if (typeof error.error.error === 'string') {
                normalizedError.details = [
                    {
                        type: error.error.error,
                        message: error.error.error_description,
                    },
                ];
            }
            return normalizedError;
        }
        if (i0.isDevMode()) {
            console.error('Error passed to normalizeHttpError is not HttpErrorResponse instance', error);
        }
        return undefined;
    }

    /**
     * Responsible for requesting from OAuth server `ClientToken` for a particular
     * auth client.
     */
    var ClientAuthenticationTokenService = /** @class */ (function () {
        function ClientAuthenticationTokenService(http, authConfigService) {
            this.http = http;
            this.authConfigService = authConfigService;
        }
        /**
         * Loads token with client authentication flow.
         *
         * @returns observable with ClientToken
         */
        ClientAuthenticationTokenService.prototype.loadClientAuthenticationToken = function () {
            var url = this.authConfigService.getTokenEndpoint();
            var params = new i1$4.HttpParams()
                .set('client_id', encodeURIComponent(this.authConfigService.getClientId()))
                .set('client_secret', encodeURIComponent(this.authConfigService.getClientSecret()))
                .set('grant_type', 'client_credentials');
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.post(url, params, { headers: headers });
        };
        return ClientAuthenticationTokenService;
    }());
    ClientAuthenticationTokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClientAuthenticationTokenService_Factory() { return new ClientAuthenticationTokenService(i0.ɵɵinject(i1$4.HttpClient), i0.ɵɵinject(AuthConfigService)); }, token: ClientAuthenticationTokenService, providedIn: "root" });
    ClientAuthenticationTokenService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ClientAuthenticationTokenService.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: AuthConfigService }
    ]; };

    var ClientTokenEffect = /** @class */ (function () {
        function ClientTokenEffect(actions$, clientAuthenticationTokenService) {
            var _this = this;
            this.actions$ = actions$;
            this.clientAuthenticationTokenService = clientAuthenticationTokenService;
            this.loadClientToken$ = this.actions$.pipe(i3.ofType(LOAD_CLIENT_TOKEN), operators.exhaustMap(function () {
                return _this.clientAuthenticationTokenService
                    .loadClientAuthenticationToken()
                    .pipe(operators.map(function (token) {
                    return new LoadClientTokenSuccess(token);
                }), operators.catchError(function (error) { return rxjs.of(new LoadClientTokenFail(normalizeHttpError(error))); }));
            }));
        }
        return ClientTokenEffect;
    }());
    ClientTokenEffect.decorators = [
        { type: i0.Injectable }
    ];
    ClientTokenEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: ClientAuthenticationTokenService }
    ]; };
    __decorate([
        i3.Effect()
    ], ClientTokenEffect.prototype, "loadClientToken$", void 0);

    var effects = [ClientTokenEffect];

    function getReducers() {
        return {
            clientToken: loaderReducer(CLIENT_TOKEN_DATA),
        };
    }
    var reducerToken = new i0.InjectionToken('ClientAuthReducers');
    var reducerProvider = {
        provide: reducerToken,
        useFactory: getReducers,
    };

    var ClientAuthStoreModule = /** @class */ (function () {
        function ClientAuthStoreModule() {
        }
        return ClientAuthStoreModule;
    }());
    ClientAuthStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$4.HttpClientModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(CLIENT_AUTH_FEATURE, reducerToken),
                        i3.EffectsModule.forFeature(effects),
                    ],
                    providers: [reducerProvider],
                },] }
    ];

    /**
     * Some of the OCC endpoints require Authorization header with the client token (eg. user registration).
     * This pattern should not be used in the frontend apps, but until OCC changes this requirement
     * we provide this module to support using those endpoints.
     *
     * After OCC improvements regarding client authentication this module can be safely removed.
     */
    var ClientAuthModule = /** @class */ (function () {
        function ClientAuthModule() {
        }
        ClientAuthModule.forRoot = function () {
            return {
                ngModule: ClientAuthModule,
                providers: __spread(interceptors),
            };
        };
        return ClientAuthModule;
    }());
    ClientAuthModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, ClientAuthStoreModule],
                },] }
    ];

    var CONFIG_INITIALIZER = new i0.InjectionToken('ConfigInitializer');
    var CONFIG_INITIALIZER_FORROOT_GUARD = new i0.InjectionToken('CONFIG_INITIALIZER_FORROOT_GUARD');

    /**
     * Provides support for CONFIG_INITIALIZERS
     */
    var ConfigInitializerService = /** @class */ (function () {
        function ConfigInitializerService(config, initializerGuard, rootConfig) {
            this.config = config;
            this.initializerGuard = initializerGuard;
            this.rootConfig = rootConfig;
            this.ongoingScopes$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(ConfigInitializerService.prototype, "isStable", {
            /**
             * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly
             */
            get: function () {
                return (!this.initializerGuard ||
                    (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Recommended way to get config for code that can run before app will finish
         * initialization (APP_INITIALIZERS, selected service constructors)
         *
         * Used without parameters waits for the whole config to become stable
         *
         * Parameters allow to describe which part of the config should be stable using
         * string describing config part, e.g.:
         * 'siteContext', 'siteContext.language', etc.
         *
         * @param scopes String describing parts of the config we want to be sure are stable
         */
        ConfigInitializerService.prototype.getStableConfig = function () {
            var scopes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                scopes[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.isStable) {
                        return [2 /*return*/, this.config];
                    }
                    return [2 /*return*/, this.ongoingScopes$
                            .pipe(operators.filter(function (ongoingScopes) { return ongoingScopes && _this.areReady(scopes, ongoingScopes); }), operators.take(1), operators.mapTo(this.config))
                            .toPromise()];
                });
            });
        };
        /**
         * Removes provided scopes from currently ongoingScopes
         *
         * @param scopes
         */
        ConfigInitializerService.prototype.finishScopes = function (scopes) {
            var e_1, _a;
            var newScopes = __spread(this.ongoingScopes$.value);
            try {
                for (var scopes_1 = __values(scopes), scopes_1_1 = scopes_1.next(); !scopes_1_1.done; scopes_1_1 = scopes_1.next()) {
                    var scope = scopes_1_1.value;
                    newScopes.splice(newScopes.indexOf(scope), 1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (scopes_1_1 && !scopes_1_1.done && (_a = scopes_1.return)) _a.call(scopes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.ongoingScopes$.next(newScopes);
        };
        /**
         * Return true if provided scopes are not part of ongoingScopes
         *
         * @param scopes
         * @param ongoingScopes
         */
        ConfigInitializerService.prototype.areReady = function (scopes, ongoingScopes) {
            var e_2, _a, e_3, _b;
            if (!scopes.length) {
                return !ongoingScopes.length;
            }
            try {
                for (var scopes_2 = __values(scopes), scopes_2_1 = scopes_2.next(); !scopes_2_1.done; scopes_2_1 = scopes_2.next()) {
                    var scope = scopes_2_1.value;
                    try {
                        for (var ongoingScopes_1 = (e_3 = void 0, __values(ongoingScopes)), ongoingScopes_1_1 = ongoingScopes_1.next(); !ongoingScopes_1_1.done; ongoingScopes_1_1 = ongoingScopes_1.next()) {
                            var ongoingScope = ongoingScopes_1_1.value;
                            if (this.scopesOverlap(scope, ongoingScope)) {
                                return false;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (ongoingScopes_1_1 && !ongoingScopes_1_1.done && (_b = ongoingScopes_1.return)) _b.call(ongoingScopes_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (scopes_2_1 && !scopes_2_1.done && (_a = scopes_2.return)) _a.call(scopes_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return true;
        };
        /**
         * Check if two scopes overlap.
         *
         * Example of scopes that overlap:
         * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'
         *
         * Example of scopes that do not overlap:
         * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'
         *
         * @param a ScopeA
         * @param b ScopeB
         */
        ConfigInitializerService.prototype.scopesOverlap = function (a, b) {
            var _a;
            if (b.length > a.length) {
                _a = __read([b, a], 2), a = _a[0], b = _a[1];
            }
            return a.startsWith(b) && (a[b.length] || '.') === '.';
        };
        /**
         * @internal
         *
         * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS
         *
         */
        ConfigInitializerService.prototype.initialize = function (initializers) {
            return __awaiter(this, void 0, void 0, function () {
                var ongoingScopes, asyncConfigs, _loop_1, this_1, _a, _b, initializer;
                var e_4, _c;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (this.ongoingScopes$.value) {
                                // guard for double initialization
                                return [2 /*return*/];
                            }
                            ongoingScopes = [];
                            asyncConfigs = [];
                            _loop_1 = function (initializer) {
                                if (!initializer) {
                                    return "continue";
                                }
                                if (!initializer.scopes || !initializer.scopes.length) {
                                    throw new Error('CONFIG_INITIALIZER should provide scope!');
                                }
                                if (i0.isDevMode() && !this_1.areReady(initializer.scopes, ongoingScopes)) {
                                    console.warn('More than one CONFIG_INITIALIZER is initializing the same config scope.');
                                }
                                ongoingScopes.push.apply(ongoingScopes, __spread(initializer.scopes));
                                asyncConfigs.push((function () { return __awaiter(_this, void 0, void 0, function () {
                                    var initializerConfig;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, initializer.configFactory()];
                                            case 1:
                                                initializerConfig = _a.sent();
                                                // contribute configuration to rootConfig
                                                deepMerge(this.rootConfig, initializerConfig);
                                                // contribute configuration to global config
                                                deepMerge(this.config, initializerConfig);
                                                this.finishScopes(initializer.scopes);
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })());
                            };
                            this_1 = this;
                            try {
                                for (_a = __values(initializers || []), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    initializer = _b.value;
                                    _loop_1(initializer);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            this.ongoingScopes$.next(ongoingScopes);
                            if (!asyncConfigs.length) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.all(asyncConfigs)];
                        case 1:
                            _d.sent();
                            _d.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return ConfigInitializerService;
    }());
    ConfigInitializerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigInitializerService_Factory() { return new ConfigInitializerService(i0.ɵɵinject(Config), i0.ɵɵinject(CONFIG_INITIALIZER_FORROOT_GUARD, 8), i0.ɵɵinject(RootConfig)); }, token: ConfigInitializerService, providedIn: "root" });
    ConfigInitializerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConfigInitializerService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [Config,] }] },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CONFIG_INITIALIZER_FORROOT_GUARD,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [RootConfig,] }] }
    ]; };

    var defaultAuthConfig = {
        authentication: {
            client_id: 'mobile_android',
            client_secret: 'secret',
            tokenEndpoint: '/oauth/token',
            revokeEndpoint: '/oauth/revoke',
            loginUrl: '/oauth/authorize',
            OAuthLibConfig: {
                scope: '',
                customTokenParameters: ['token_type'],
                strictDiscoveryDocumentValidation: false,
                skipIssuerCheck: true,
                disablePKCE: true,
                oidc: false,
                clearHashAfterLogin: false,
            },
        },
    };

    var ADD_MESSAGE = '[Global-message] Add a Message';
    var REMOVE_MESSAGE = '[Global-message] Remove a Message';
    var REMOVE_MESSAGES_BY_TYPE = '[Global-message] Remove messages by type';
    var AddMessage = /** @class */ (function () {
        function AddMessage(payload) {
            this.payload = payload;
            this.type = ADD_MESSAGE;
        }
        return AddMessage;
    }());
    var RemoveMessage = /** @class */ (function () {
        function RemoveMessage(payload) {
            this.payload = payload;
            this.type = REMOVE_MESSAGE;
        }
        return RemoveMessage;
    }());
    var RemoveMessagesByType = /** @class */ (function () {
        function RemoveMessagesByType(payload) {
            this.payload = payload;
            this.type = REMOVE_MESSAGES_BY_TYPE;
        }
        return RemoveMessagesByType;
    }());

    var globalMessageGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ADD_MESSAGE: ADD_MESSAGE,
        REMOVE_MESSAGE: REMOVE_MESSAGE,
        REMOVE_MESSAGES_BY_TYPE: REMOVE_MESSAGES_BY_TYPE,
        AddMessage: AddMessage,
        RemoveMessage: RemoveMessage,
        RemoveMessagesByType: RemoveMessagesByType
    });

    var GLOBAL_MESSAGE_FEATURE = 'global-message';

    var getGlobalMessageState = i1$2.createFeatureSelector(GLOBAL_MESSAGE_FEATURE);

    var ɵ0$9 = function (state) { return state.entities; };
    var getGlobalMessageEntities = i1$2.createSelector(getGlobalMessageState, ɵ0$9);
    var getGlobalMessageEntitiesByType = function (type) {
        return i1$2.createSelector(getGlobalMessageEntities, function (entities) { return entities && entities[type]; });
    };
    var getGlobalMessageCountByType = function (type) {
        return i1$2.createSelector(getGlobalMessageEntitiesByType(type), function (entities) { return entities && entities.length; });
    };

    var globalMessageGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getGlobalMessageState: getGlobalMessageState,
        getGlobalMessageEntities: getGlobalMessageEntities,
        getGlobalMessageEntitiesByType: getGlobalMessageEntitiesByType,
        getGlobalMessageCountByType: getGlobalMessageCountByType,
        ɵ0: ɵ0$9
    });

    var GlobalMessageService = /** @class */ (function () {
        function GlobalMessageService(store) {
            this.store = store;
        }
        /**
         * Get all global messages
         */
        GlobalMessageService.prototype.get = function () {
            return this.store.pipe(i1$2.select(getGlobalMessageEntities), operators.filter(function (data) { return data !== undefined; }));
        };
        /**
         * Add one message into store
         * @param text: string | Translatable
         * @param type: GlobalMessageType object
         * @param timeout: number
         */
        GlobalMessageService.prototype.add = function (text, type, timeout) {
            this.store.dispatch(new AddMessage({
                text: typeof text === 'string' ? { raw: text } : text,
                type: type,
                timeout: timeout,
            }));
        };
        /**
         * Remove message(s) from store
         * @param type: GlobalMessageType
         * @param index:optional. Without it, messages will be removed by type; otherwise,
         * message will be removed from list by index.
         */
        GlobalMessageService.prototype.remove = function (type, index) {
            this.store.dispatch(index !== undefined
                ? new RemoveMessage({
                    type: type,
                    index: index,
                })
                : new RemoveMessagesByType(type));
        };
        return GlobalMessageService;
    }());
    GlobalMessageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GlobalMessageService_Factory() { return new GlobalMessageService(i0.ɵɵinject(i1$2.Store)); }, token: GlobalMessageService, providedIn: "root" });
    GlobalMessageService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    GlobalMessageService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    (function (GlobalMessageType) {
        GlobalMessageType["MSG_TYPE_CONFIRMATION"] = "[GlobalMessage] Confirmation";
        GlobalMessageType["MSG_TYPE_ERROR"] = "[GlobalMessage] Error";
        GlobalMessageType["MSG_TYPE_INFO"] = "[GlobalMessage] Information";
        GlobalMessageType["MSG_TYPE_WARNING"] = "[GlobalMessage] Warning";
    })(exports.GlobalMessageType || (exports.GlobalMessageType = {}));

    /**
     * Extendable service for `AuthInterceptor`.
     */
    var AuthHttpHeaderService = /** @class */ (function () {
        function AuthHttpHeaderService(authService, authStorageService, oAuthLibWrapperService, routingService, occEndpoints, globalMessageService) {
            this.authService = authService;
            this.authStorageService = authStorageService;
            this.oAuthLibWrapperService = oAuthLibWrapperService;
            this.routingService = routingService;
            this.occEndpoints = occEndpoints;
            this.globalMessageService = globalMessageService;
        }
        /**
         * Checks if request should be handled by this service (if it's OCC call).
         */
        AuthHttpHeaderService.prototype.shouldCatchError = function (request) {
            return this.isOccUrl(request.url);
        };
        /**
         * Adds `Authorization` header for OCC calls.
         */
        AuthHttpHeaderService.prototype.alterRequest = function (request) {
            var hasAuthorizationHeader = !!this.getAuthorizationHeader(request);
            var isOccUrl = this.isOccUrl(request.url);
            if (!hasAuthorizationHeader && isOccUrl) {
                return request.clone({
                    setHeaders: Object.assign({}, this.createAuthorizationHeader()),
                });
            }
            return request;
        };
        AuthHttpHeaderService.prototype.isOccUrl = function (url) {
            return url.includes(this.occEndpoints.getBaseEndpoint());
        };
        AuthHttpHeaderService.prototype.getAuthorizationHeader = function (request) {
            var rawValue = request.headers.get('Authorization');
            return rawValue;
        };
        AuthHttpHeaderService.prototype.createAuthorizationHeader = function () {
            var token;
            this.authStorageService
                .getToken()
                .subscribe(function (tok) { return (token = tok); })
                .unsubscribe();
            if (token === null || token === void 0 ? void 0 : token.access_token) {
                return {
                    Authorization: (token.token_type || 'Bearer') + " " + token.access_token,
                };
            }
            return {};
        };
        /**
         * Refreshes access_token and then retries the call with the new token.
         */
        AuthHttpHeaderService.prototype.handleExpiredAccessToken = function (request, next) {
            var _this = this;
            return this.handleExpiredToken().pipe(operators.switchMap(function (token) {
                return next.handle(_this.createNewRequestWithNewToken(request, token));
            }));
        };
        /**
         * Logout user, redirected to login page and informs about expired session.
         */
        AuthHttpHeaderService.prototype.handleExpiredRefreshToken = function () {
            // Logout user
            // TODO(#9638): Use logout route when it will support passing redirect url
            this.authService.coreLogout();
            this.routingService.go({ cxRoute: 'login' });
            this.globalMessageService.add({
                key: 'httpHandlers.sessionExpired',
            }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        /**
         * Attempts to refresh token if possible.
         * If it is not possible calls `handleExpiredRefreshToken`.
         *
         * @return observable which omits new access_token. (Warn: might never emit!).
         */
        AuthHttpHeaderService.prototype.handleExpiredToken = function () {
            var _this = this;
            var stream = this.authStorageService.getToken();
            var oldToken;
            return stream.pipe(operators.tap(function (token) {
                if (token.access_token && token.refresh_token && !oldToken) {
                    _this.oAuthLibWrapperService.refreshToken();
                }
                else if (!token.refresh_token) {
                    _this.handleExpiredRefreshToken();
                }
                oldToken = oldToken || token;
            }), operators.filter(function (token) { return oldToken.access_token !== token.access_token; }), operators.take(1));
        };
        AuthHttpHeaderService.prototype.createNewRequestWithNewToken = function (request, token) {
            request = request.clone({
                setHeaders: {
                    Authorization: (token.token_type || 'Bearer') + " " + token.access_token,
                },
            });
            return request;
        };
        return AuthHttpHeaderService;
    }());
    AuthHttpHeaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthHttpHeaderService_Factory() { return new AuthHttpHeaderService(i0.ɵɵinject(AuthService), i0.ɵɵinject(AuthStorageService), i0.ɵɵinject(OAuthLibWrapperService), i0.ɵɵinject(RoutingService), i0.ɵɵinject(OccEndpointsService), i0.ɵɵinject(GlobalMessageService)); }, token: AuthHttpHeaderService, providedIn: "root" });
    AuthHttpHeaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthHttpHeaderService.ctorParameters = function () { return [
        { type: AuthService },
        { type: AuthStorageService },
        { type: OAuthLibWrapperService },
        { type: RoutingService },
        { type: OccEndpointsService },
        { type: GlobalMessageService }
    ]; };

    /**
     * Responsible for catching auth errors and providing `Authorization` header for API calls.
     * Uses AuthHttpHeaderService for request manipulation and error handling. Interceptor only hooks into request send/received events.
     */
    var AuthInterceptor = /** @class */ (function () {
        function AuthInterceptor(authHttpHeaderService, authConfigService) {
            this.authHttpHeaderService = authHttpHeaderService;
            this.authConfigService = authConfigService;
        }
        AuthInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            var shouldCatchError = this.authHttpHeaderService.shouldCatchError(request);
            request = this.authHttpHeaderService.alterRequest(request);
            return next.handle(request).pipe(operators.catchError(function (errResponse) {
                if (errResponse instanceof i1$4.HttpErrorResponse) {
                    switch (errResponse.status) {
                        case 401: // Unauthorized
                            if (_this.isExpiredToken(errResponse) && shouldCatchError) {
                                return _this.authHttpHeaderService.handleExpiredAccessToken(request, next);
                            }
                            else if (
                            // Refresh expired token
                            // Check that the OAUTH endpoint was called and the error is for refresh token is expired
                            errResponse.url.includes(_this.authConfigService.getTokenEndpoint()) &&
                                errResponse.error.error === 'invalid_token') {
                                _this.authHttpHeaderService.handleExpiredRefreshToken();
                                return rxjs.of();
                            }
                            break;
                        case 400: // Bad Request
                            if (errResponse.url.includes(_this.authConfigService.getTokenEndpoint()) &&
                                errResponse.error.error === 'invalid_grant') {
                                if (request.body.get('grant_type') === 'refresh_token') {
                                    _this.authHttpHeaderService.handleExpiredRefreshToken();
                                }
                            }
                            break;
                    }
                }
                return rxjs.throwError(errResponse);
            }));
        };
        AuthInterceptor.prototype.isExpiredToken = function (resp) {
            var _a, _b, _c;
            return ((_c = (_b = (_a = resp.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === 'InvalidTokenError';
        };
        return AuthInterceptor;
    }());
    AuthInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthInterceptor_Factory() { return new AuthInterceptor(i0.ɵɵinject(AuthHttpHeaderService), i0.ɵɵinject(AuthConfigService)); }, token: AuthInterceptor, providedIn: "root" });
    AuthInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AuthInterceptor.ctorParameters = function () { return [
        { type: AuthHttpHeaderService },
        { type: AuthConfigService }
    ]; };

    /**
     * This interceptor is dedicated for Hybris OAuth server which requires `Authorization` header for revoke token calls.
     */
    var TokenRevocationInterceptor = /** @class */ (function () {
        function TokenRevocationInterceptor(authStorageService, authConfigService) {
            this.authStorageService = authStorageService;
            this.authConfigService = authConfigService;
        }
        TokenRevocationInterceptor.prototype.intercept = function (request, next) {
            var isTokenRevocationRequest = this.isTokenRevocationRequest(request);
            return this.authStorageService.getToken().pipe(operators.take(1), operators.switchMap(function (token) {
                if (isTokenRevocationRequest) {
                    request = request.clone({
                        setHeaders: {
                            Authorization: (token.token_type || 'Bearer') + " " + token.access_token,
                        },
                    });
                }
                return next.handle(request);
            }));
        };
        TokenRevocationInterceptor.prototype.isTokenRevocationRequest = function (request) {
            return request.url === this.authConfigService.getRevokeEndpoint();
        };
        return TokenRevocationInterceptor;
    }());
    TokenRevocationInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function TokenRevocationInterceptor_Factory() { return new TokenRevocationInterceptor(i0.ɵɵinject(AuthStorageService), i0.ɵɵinject(AuthConfigService)); }, token: TokenRevocationInterceptor, providedIn: "root" });
    TokenRevocationInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    TokenRevocationInterceptor.ctorParameters = function () { return [
        { type: AuthStorageService },
        { type: AuthConfigService }
    ]; };

    var interceptors$1 = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: AuthInterceptor,
            multi: true,
        },
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: TokenRevocationInterceptor,
            multi: true,
        },
    ];

    /**
     * Initialize the check for `token` or `code` in the url returned from the OAuth server.
     */
    function checkOAuthParamsInUrl(authService, configInit) {
        var result = function () { return configInit.getStableConfig().then(function () {
            // Wait for stable config is used, because with auth redirect would kick so quickly that the page would not be loaded correctly
            authService.checkOAuthParamsInUrl();
        }); };
        return result;
    }
    function authStatePersistenceFactory(authStatePersistenceService) {
        var result = function () { return authStatePersistenceService.initSync(); };
        return result;
    }
    /**
     * Authentication module for a user. Handlers requests for logged in users,
     * provides authorization services and storage for tokens.
     */
    var UserAuthModule = /** @class */ (function () {
        function UserAuthModule() {
        }
        UserAuthModule.forRoot = function () {
            return {
                ngModule: UserAuthModule,
                providers: __spread([
                    provideDefaultConfig(defaultAuthConfig)
                ], interceptors$1, [
                    {
                        provide: i1$3.OAuthStorage,
                        useExisting: AuthStorageService,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: authStatePersistenceFactory,
                        deps: [AuthStatePersistenceService],
                        multi: true,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: checkOAuthParamsInUrl,
                        deps: [AuthService, ConfigInitializerService],
                        multi: true,
                    },
                ]),
            };
        };
        return UserAuthModule;
    }());
    UserAuthModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, i1$3.OAuthModule.forRoot()],
                },] }
    ];

    var AuthModule = /** @class */ (function () {
        function AuthModule() {
        }
        AuthModule.forRoot = function () {
            return {
                ngModule: AuthModule,
            };
        };
        return AuthModule;
    }());
    AuthModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, ClientAuthModule.forRoot(), UserAuthModule.forRoot()],
                },] }
    ];

    /**
     * Checks if there is currently logged in user.
     * Use to protect pages dedicated only for logged in users.
     */
    var AuthGuard = /** @class */ (function () {
        function AuthGuard(authService, authRedirectService, router, semanticPathService) {
            this.authService = authService;
            this.authRedirectService = authRedirectService;
            this.router = router;
            this.semanticPathService = semanticPathService;
        }
        AuthGuard.prototype.canActivate = function () {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.map(function (isLoggedIn) {
                if (!isLoggedIn) {
                    _this.authRedirectService.reportAuthGuard();
                    return _this.router.parseUrl(_this.semanticPathService.get('login'));
                }
                return isLoggedIn;
            }));
        };
        return AuthGuard;
    }());
    AuthGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.ɵɵinject(AuthService), i0.ɵɵinject(AuthRedirectService), i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(SemanticPathService)); }, token: AuthGuard, providedIn: "root" });
    AuthGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthGuard.ctorParameters = function () { return [
        { type: AuthService },
        { type: AuthRedirectService },
        { type: i1$1.Router },
        { type: SemanticPathService }
    ]; };

    /**
     * Checks if there isn't any logged in user.
     * Use to protect pages dedicated only for guests (eg. login page).
     */
    var NotAuthGuard = /** @class */ (function () {
        function NotAuthGuard(authService, authRedirectService, semanticPathService, router) {
            this.authService = authService;
            this.authRedirectService = authRedirectService;
            this.semanticPathService = semanticPathService;
            this.router = router;
        }
        NotAuthGuard.prototype.canActivate = function () {
            var _this = this;
            this.authRedirectService.reportNotAuthGuard();
            // redirect, if user is already logged in:
            return this.authService.isUserLoggedIn().pipe(operators.map(function (isLoggedIn) {
                if (isLoggedIn) {
                    return _this.router.parseUrl(_this.semanticPathService.get('home'));
                }
                return !isLoggedIn;
            }));
        };
        return NotAuthGuard;
    }());
    NotAuthGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotAuthGuard_Factory() { return new NotAuthGuard(i0.ɵɵinject(AuthService), i0.ɵɵinject(AuthRedirectService), i0.ɵɵinject(SemanticPathService), i0.ɵɵinject(i1$1.Router)); }, token: NotAuthGuard, providedIn: "root" });
    NotAuthGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    NotAuthGuard.ctorParameters = function () { return [
        { type: AuthService },
        { type: AuthRedirectService },
        { type: SemanticPathService },
        { type: i1$1.Router }
    ]; };

    var AsmAdapter = /** @class */ (function () {
        function AsmAdapter() {
        }
        return AsmAdapter;
    }());

    var defaultOccAsmConfig = {
        backend: {
            occ: {
                endpoints: {
                    asmCustomerSearch: '/assistedservicewebservices/customers/search',
                },
            },
        },
    };

    var AsmConfig = /** @class */ (function (_super) {
        __extends(AsmConfig, _super);
        function AsmConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AsmConfig;
    }(OccConfig));
    AsmConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmConfig_Factory() { return i0.ɵɵinject(Config); }, token: AsmConfig, providedIn: "root" });
    AsmConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var CUSTOMER_SEARCH_PAGE_NORMALIZER = new i0.InjectionToken('CustomerSearchPageNormalizer');

    /**
     * Creates an instance of the given class and fills its properties with the given data.
     *
     * @param type reference to the class
     * @param data object with properties to be copied to the class
     */
    function createFrom(type, data) {
        return Object.assign(new type(), data);
    }

    /**
     * Will be thrown in case lazy loaded modules are loaded and instantiated.
     *
     * This event is thrown for cms driven lazy loaded feature modules amd it's
     * dependencies
     */
    var ModuleInitializedEvent = /** @class */ (function () {
        function ModuleInitializedEvent() {
        }
        return ModuleInitializedEvent;
    }());

    // PRIVATE API
    /**
     * Allows for dynamic adding and removing source observables
     * and exposes them as one merged observable at a property `output$`.
     *
     * Thanks to the `share()` operator used inside, it subscribes to source observables
     * only when someone subscribes to it. And it unsubscribes from source observables
     * when the counter of consumers drops to 0.
     *
     * **To avoid memory leaks**, all manually added sources should be manually removed
     * when not plan to emit values anymore. In particular closed event sources won't be
     * automatically removed.
     */
    var MergingSubject = /** @class */ (function () {
        function MergingSubject() {
            var _this = this;
            /**
             * List of already added sources (but not removed yet)
             */
            this.sources = [];
            /**
             * For each source: it stores a subscription responsible for
             * passing all values from source to the consumer
             */
            this.subscriptionsToSources = new Map();
            /**
             * Observable with all sources merged.
             *
             * Only after subscribing to it, under the hood it subscribes to the source observables.
             * When the number of subscribers drops to 0, it unsubscribes from all source observables.
             * But if later on something subscribes to it again, it subscribes to the source observables again.
             *
             * It multicasts the emissions for each subscriber.
             */
            this.output$ = new rxjs.Observable(function (consumer) {
                // There can be only 0 or 1 consumer of this observable coming from the `share()` operator
                // that is piped right after this observable.
                // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe
                // from this observable (by the nature `refCount`-nature of the `share()` operator).
                _this.consumer = consumer;
                _this.bindAllSourcesToConsumer(consumer);
                return function () {
                    _this.consumer = null;
                    _this.unbindAllSourcesFromConsumer();
                };
            }).pipe(operators.share());
            /**
             * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.
             * For more, see docs of the `output$` observable;
             */
            this.consumer = null;
        }
        /**
         * Registers the given source to pass its values to the `output$` observable.
         *
         * It does nothing, when the source has been already added (but not removed yet).
         */
        MergingSubject.prototype.add = function (source) {
            if (this.has(source)) {
                return;
            }
            if (this.consumer) {
                this.bindSourceToConsumer(source, this.consumer);
            }
            this.sources.push(source);
        };
        /**
         * Starts passing all values from already added sources to consumer
         */
        MergingSubject.prototype.bindAllSourcesToConsumer = function (consumer) {
            var _this = this;
            this.sources.forEach(function (source) { return _this.bindSourceToConsumer(source, consumer); });
        };
        /**
         * Stops passing all values from already added sources to consumer
         * (if any consumer is active at the moment)
         */
        MergingSubject.prototype.unbindAllSourcesFromConsumer = function () {
            var _this = this;
            this.sources.forEach(function (source) { return _this.unbindSourceFromConsumer(source); });
        };
        /**
         * Starts passing all values from a single source to consumer
         */
        MergingSubject.prototype.bindSourceToConsumer = function (source, consumer) {
            var subscriptionToSource = source.subscribe(function (val) { return consumer.next(val); }); // passes all emissions from source to consumer
            this.subscriptionsToSources.set(source, subscriptionToSource);
        };
        /**
         * Stops passing all values from a single source to consumer
         * (if any consumer is active at the moment)
         */
        MergingSubject.prototype.unbindSourceFromConsumer = function (source) {
            var subscriptionToSource = this.subscriptionsToSources.get(source);
            if (subscriptionToSource !== undefined) {
                subscriptionToSource.unsubscribe();
                this.subscriptionsToSources.delete(source);
            }
        };
        /**
         * Unregisters the given source so it stops passing its values to `output$` observable.
         *
         * Should be used when a source is no longer maintained **to avoid memory leaks**.
         */
        MergingSubject.prototype.remove = function (source) {
            // clear binding from source to consumer (if any consumer exists at the moment)
            this.unbindSourceFromConsumer(source);
            // remove source from array
            var i;
            if ((i = this.sources.findIndex(function (s) { return s === source; })) !== -1) {
                this.sources.splice(i, 1);
            }
        };
        /**
         * Returns whether the given source has been already addded
         */
        MergingSubject.prototype.has = function (source) {
            return this.sources.includes(source);
        };
        return MergingSubject;
    }());

    /**
     * A service to register and observe event sources. Events are driven by event types, which are class signatures
     * for the given event.
     *
     * It is possible to register multiple sources to a single event, even without
     * knowing as multiple decoupled features can attach sources to the same
     * event type.
     */
    var EventService = /** @class */ (function () {
        function EventService() {
            /**
             * The various events meta are collected in a map, stored by the event type class
             */
            this.eventsMeta = new Map();
        }
        /**
         * Register an event source for the given event type.
         *
         * CAUTION: To avoid memory leaks, the returned teardown function should be called
         *  when the event source is no longer maintained by its creator
         * (i.e. in `ngOnDestroy` if the event source was registered in the component).
         *
         * @param eventType the event type
         * @param source$ an observable that represents the source
         *
         * @returns a teardown function which unregisters the given event source
         */
        EventService.prototype.register = function (eventType, source$) {
            var eventMeta = this.getEventMeta(eventType);
            if (eventMeta.mergingSubject.has(source$)) {
                if (i0.isDevMode()) {
                    console.warn("EventService: the event source", source$, "has been already registered for the type", eventType);
                }
            }
            else {
                eventMeta.mergingSubject.add(source$);
            }
            return function () { return eventMeta.mergingSubject.remove(source$); };
        };
        /**
         * Returns a stream of events for the given event type
         * @param eventTypes event type
         */
        EventService.prototype.get = function (eventType) {
            var output$ = this.getEventMeta(eventType).mergingSubject.output$;
            if (i0.isDevMode()) {
                output$ = this.getValidatedEventStream(output$, eventType);
            }
            return output$;
        };
        /**
         * Dispatches an instance of an individual event.
         */
        EventService.prototype.dispatch = function (event) {
            var eventType = event.constructor;
            var inputSubject$ = this.getInputSubject(eventType);
            inputSubject$.next(event);
        };
        /**
         * Returns the input subject used to dispatch a single event.
         * The subject is created on demand, when it's needed for the first time.
         * @param eventType type of event
         */
        EventService.prototype.getInputSubject = function (eventType) {
            var eventMeta = this.getEventMeta(eventType);
            if (!eventMeta.inputSubject$) {
                eventMeta.inputSubject$ = new rxjs.Subject();
                this.register(eventType, eventMeta.inputSubject$);
            }
            return eventMeta.inputSubject$;
        };
        /**
         * Returns the event meta object for the given event type
         */
        EventService.prototype.getEventMeta = function (eventType) {
            if (i0.isDevMode()) {
                this.validateEventType(eventType);
            }
            if (!this.eventsMeta.get(eventType)) {
                this.createEventMeta(eventType);
            }
            return this.eventsMeta.get(eventType);
        };
        /**
         * Creates the event meta object for the given event type
         */
        EventService.prototype.createEventMeta = function (eventType) {
            this.eventsMeta.set(eventType, {
                inputSubject$: null,
                mergingSubject: new MergingSubject(),
            });
        };
        /**
         * Checks if the event type is a valid type (is a class with constructor).
         *
         * Should be used only in dev mode.
         */
        EventService.prototype.validateEventType = function (eventType) {
            if (!(eventType === null || eventType === void 0 ? void 0 : eventType.constructor)) {
                throw new Error("EventService:  " + eventType + " is not a valid event type. Please provide a class reference.");
            }
        };
        /**
         * Returns the given event source with runtime validation whether the emitted values are instances of given event type.
         *
         * Should be used only in dev mode.
         */
        EventService.prototype.getValidatedEventStream = function (source$, eventType) {
            return source$.pipe(operators.tap(function (event) {
                if (!(event instanceof eventType)) {
                    console.warn("EventService: The stream", source$, "emitted the event", event, "that is not an instance of the declared type", eventType.name);
                }
            }));
        };
        return EventService;
    }());
    EventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EventService_Factory() { return new EventService(); }, token: EventService, providedIn: "root" });
    EventService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /**
     * Utility service for managing dynamic imports of Angular services
     */
    var LazyModulesService = /** @class */ (function () {
        function LazyModulesService(compiler, injector, events) {
            this.compiler = compiler;
            this.injector = injector;
            this.events = events;
            /**
             * Expose lazy loaded module references
             */
            this.modules$ = this.events
                .get(ModuleInitializedEvent)
                .pipe(operators.map(function (event) { return event.moduleRef; }), operators.publishReplay());
            this.dependencyModules = new Map();
            this.eventSubscription = this.modules$.connect();
        }
        /**
         * Resolves module instance based dynamic import wrapped in an arrow function
         *
         * New module instance will be created with each call.
         *
         * @param moduleFunc
         * @param feature
         */
        LazyModulesService.prototype.resolveModuleInstance = function (moduleFunc, feature) {
            var _this = this;
            return this.resolveModuleFactory(moduleFunc).pipe(operators.map(function (_a) {
                var _b = __read(_a, 1), moduleFactory = _b[0];
                return moduleFactory.create(_this.injector);
            }), operators.tap(function (moduleRef) { return _this.events.dispatch(createFrom(ModuleInitializedEvent, {
                feature: feature,
                moduleRef: moduleRef,
            })); }));
        };
        /**
         * Returns dependency module instance and initializes it when needed.
         *
         * Module will be instantiated only once, at first request for a this specific module class
         */
        LazyModulesService.prototype.resolveDependencyModuleInstance = function (moduleFunc) {
            var _this = this;
            // We grab moduleFactory symbol from module function and if there is no
            // such a module created yet, we create it and store it in a
            // dependencyModules map
            return this.resolveModuleFactory(moduleFunc).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), moduleFactory = _b[0], module = _b[1];
                if (!_this.dependencyModules.has(module)) {
                    var moduleRef = moduleFactory.create(_this.injector);
                    _this.dependencyModules.set(module, moduleRef);
                }
                return _this.dependencyModules.get(module);
            }), operators.tap(function (moduleRef) { return _this.events.dispatch(createFrom(ModuleInitializedEvent, {
                moduleRef: moduleRef,
            })); }));
        };
        /**
         * Resolve any Angular module from an function that return module or moduleFactory
         */
        LazyModulesService.prototype.resolveModuleFactory = function (moduleFunc) {
            var _this = this;
            return rxjs.from(moduleFunc()).pipe(operators.switchMap(function (module) { return module instanceof i0.NgModuleFactory
                ? rxjs.of([module, module])
                : rxjs.combineLatest([
                    // using compiler here is for jit compatibility, there is no overhead
                    // for aot production builds as it will be stubbed
                    rxjs.from(_this.compiler.compileModuleAsync(module)),
                    rxjs.of(module),
                ]); }), operators.observeOn(rxjs.queueScheduler));
        };
        LazyModulesService.prototype.ngOnDestroy = function () {
            if (this.eventSubscription) {
                this.eventSubscription.unsubscribe();
            }
            // clean up all initialized dependency modules
            this.dependencyModules.forEach(function (dependency) { return dependency.destroy(); });
        };
        return LazyModulesService;
    }());
    LazyModulesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LazyModulesService_Factory() { return new LazyModulesService(i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(EventService)); }, token: LazyModulesService, providedIn: "root" });
    LazyModulesService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    LazyModulesService.ctorParameters = function () { return [
        { type: i0.Compiler },
        { type: i0.Injector },
        { type: EventService }
    ]; };

    var NOT_FOUND_SYMBOL = {};
    /**
     * UnifiedInjector provides a way to get instances of tokens not only once, from the root injector,
     * but also from lazy loaded module injectors that can be initialized over time.
     */
    var UnifiedInjector = /** @class */ (function () {
        function UnifiedInjector(rootInjector, lazyModules) {
            this.rootInjector = rootInjector;
            this.lazyModules = lazyModules;
            /**
             * Gather all the injectors, with the root injector as a first one
             *
             */
            this.injectors$ = this.lazyModules.modules$.pipe(operators.map(function (moduleRef) { return moduleRef.injector; }), operators.startWith(this.rootInjector));
        }
        /**
         * Gen instances for specified tokens.
         *
         * When notFoundValue is provided, it will consistently emit once per injector,
         * even if injector doesn't contain instances for specified token.
         * Otherwise, emissions will only involve cases, where new instances will be found.
         *
         * @param token
         * @param notFoundValue
         */
        UnifiedInjector.prototype.get = function (token, notFoundValue) {
            return this.injectors$.pipe(operators.map(function (injector, index) { return injector.get(token, notFoundValue !== null && notFoundValue !== void 0 ? notFoundValue : NOT_FOUND_SYMBOL, 
            // we want to get only Self instances from all injectors except the
            // first one, which is a root injector
            index ? i0.InjectFlags.Self : undefined); }), operators.filter(function (instance) { return instance !== NOT_FOUND_SYMBOL; }));
        };
        UnifiedInjector.prototype.getMulti = function (token) {
            return this.get(token, []).pipe(operators.filter(function (instances) {
                if (!Array.isArray(instances)) {
                    throw new Error("Multi-providers mixed with single providers for " + token.toString() + "!");
                }
                return instances.length > 0;
            }), operators.scan(function (acc, services) { return __spread(acc, services); }, []));
        };
        return UnifiedInjector;
    }());
    UnifiedInjector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UnifiedInjector_Factory() { return new UnifiedInjector(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(LazyModulesService)); }, token: UnifiedInjector, providedIn: "root" });
    UnifiedInjector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UnifiedInjector.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: LazyModulesService }
    ]; };

    /**
     * Will grab last synchronously available value from the observable stream
     * at the time of the call.
     *
     * Should be used with caution, as it's not a legitimate way for getting value
     * from the observable. Observable composition or standard subscribe method
     * should be used for most of the cases.
     *
     * @param source
     */
    function getLastValueSync(source) {
        var value;
        source.subscribe(function (emission) { return (value = emission); }).unsubscribe();
        return value;
    }

    var ConverterService = /** @class */ (function () {
        function ConverterService(unifiedInjector) {
            var _this = this;
            this.unifiedInjector = unifiedInjector;
            this.subscriptions = new rxjs.Subscription();
            this.converters = new Map();
            // Clear cached converters when new injectors appear
            var cacheResetLogic = this.unifiedInjector.injectors$.pipe(operators.tap(function () { return _this.converters.clear(); }));
            this.subscriptions.add(cacheResetLogic.subscribe());
        }
        ConverterService.prototype.getConverters = function (injectionToken) {
            if (!this.converters.has(injectionToken)) {
                var converters = getLastValueSync(this.unifiedInjector.getMulti(injectionToken));
                this.converters.set(injectionToken, converters);
            }
            return this.converters.get(injectionToken);
        };
        /**
         * Will return true if converters for specified token were provided
         */
        ConverterService.prototype.hasConverters = function (injectionToken) {
            var converters = this.getConverters(injectionToken);
            return Array.isArray(converters) && converters.length > 0;
        };
        /**
         * Pipeable operator to apply converter logic in a observable stream
         */
        ConverterService.prototype.pipeable = function (injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken)) {
                return operators.map(function (model) { return _this.convertSource(model, injectionToken); });
            }
            else {
                return function (observable) { return observable; };
            }
        };
        /**
         * Pipeable operator to apply converter logic in a observable stream to collection of items
         */
        ConverterService.prototype.pipeableMany = function (injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken)) {
                return operators.map(function (model) { return _this.convertMany(model, injectionToken); });
            }
            else {
                return function (observable) { return observable; };
            }
        };
        /**
         * Apply converter logic specified by injection token to source data
         */
        ConverterService.prototype.convert = function (source, injectionToken) {
            if (this.hasConverters(injectionToken)) {
                return this.convertSource(source, injectionToken);
            }
            else {
                return source;
            }
        };
        /**
         * Apply converter logic specified by injection token to a collection
         */
        ConverterService.prototype.convertMany = function (sources, injectionToken) {
            var _this = this;
            if (this.hasConverters(injectionToken) && Array.isArray(sources)) {
                return sources.map(function (source) { return _this.convertSource(source, injectionToken); });
            }
            else {
                return sources;
            }
        };
        ConverterService.prototype.convertSource = function (source, injectionToken) {
            return this.getConverters(injectionToken).reduce(function (target, converter) {
                return converter.convert(source, target);
            }, undefined);
        };
        ConverterService.prototype.ngOnDestroy = function () {
            this.subscriptions.unsubscribe();
        };
        return ConverterService;
    }());
    ConverterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConverterService_Factory() { return new ConverterService(i0.ɵɵinject(UnifiedInjector)); }, token: ConverterService, providedIn: "root" });
    ConverterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConverterService.ctorParameters = function () { return [
        { type: UnifiedInjector }
    ]; };

    var OccAsmAdapter = /** @class */ (function () {
        function OccAsmAdapter(http, occEndpointsService, converterService, config, baseSiteService) {
            var _this = this;
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
            this.config = config;
            this.baseSiteService = baseSiteService;
            this.baseSiteService
                .getActive()
                .subscribe(function (value) { return (_this.activeBaseSite = value); });
        }
        OccAsmAdapter.prototype.customerSearch = function (options) {
            var headers = InterceptorUtil.createHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, true, new i1$4.HttpHeaders());
            var params = new i1$4.HttpParams()
                .set('baseSite', this.activeBaseSite)
                .set('sort', 'byNameAsc');
            if (typeof options['query'] !== 'undefined') {
                params = params.set('query', '' + options.query);
            }
            if (typeof options['pageSize'] !== 'undefined') {
                params = params.set('pageSize', '' + options.pageSize);
            }
            var url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');
            return this.http
                .get(url, { headers: headers, params: params })
                .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));
        };
        return OccAsmAdapter;
    }());
    OccAsmAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccAsmAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService },
        { type: AsmConfig },
        { type: BaseSiteService }
    ]; };

    var AsmOccModule = /** @class */ (function () {
        function AsmOccModule() {
        }
        return AsmOccModule;
    }());
    AsmOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccAsmConfig),
                        {
                            provide: AsmAdapter,
                            useClass: OccAsmAdapter,
                        },
                    ],
                },] }
    ];

    var CartAdapter = /** @class */ (function () {
        function CartAdapter() {
        }
        return CartAdapter;
    }());

    var CART_NORMALIZER = new i0.InjectionToken('CartNormalizer');

    var CartEntryAdapter = /** @class */ (function () {
        function CartEntryAdapter() {
        }
        return CartEntryAdapter;
    }());

    var SaveCartAdapter = /** @class */ (function () {
        function SaveCartAdapter() {
        }
        return SaveCartAdapter;
    }());

    var CartVoucherAdapter = /** @class */ (function () {
        function CartVoucherAdapter() {
        }
        return CartVoucherAdapter;
    }());

    var PRODUCT_NORMALIZER = new i0.InjectionToken('ProductNormalizer');

    var OccCartNormalizer = /** @class */ (function () {
        function OccCartNormalizer(converter) {
            this.converter = converter;
        }
        OccCartNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source && source.entries) {
                target.entries = source.entries.map(function (entry) { return (Object.assign(Object.assign({}, entry), { product: _this.converter.convert(entry.product, PRODUCT_NORMALIZER) })); });
            }
            this.removeDuplicatePromotions(source, target);
            return target;
        };
        /**
         * Remove all duplicate promotions
         */
        OccCartNormalizer.prototype.removeDuplicatePromotions = function (source, target) {
            if (source && source.potentialOrderPromotions) {
                target.potentialOrderPromotions = this.removeDuplicateItems(source.potentialOrderPromotions);
            }
            if (source && source.potentialProductPromotions) {
                target.potentialProductPromotions = this.removeDuplicateItems(source.potentialProductPromotions);
            }
            if (source && source.appliedOrderPromotions) {
                target.appliedOrderPromotions = this.removeDuplicateItems(source.appliedOrderPromotions);
            }
            if (source && source.appliedProductPromotions) {
                target.appliedProductPromotions = this.removeDuplicateItems(source.appliedProductPromotions);
            }
        };
        OccCartNormalizer.prototype.removeDuplicateItems = function (itemList) {
            return itemList.filter(function (p, i, a) {
                var b = a.map(function (el) { return JSON.stringify(el); });
                return i === b.indexOf(JSON.stringify(p));
            });
        };
        return OccCartNormalizer;
    }());
    OccCartNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccCartNormalizer_Factory() { return new OccCartNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccCartNormalizer, providedIn: "root" });
    OccCartNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccCartNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var defaultOccCartConfig = {
        backend: {
            occ: {
                endpoints: {
                    // tslint:disable:max-line-length
                    carts: 'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',
                    cart: 'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',
                    createCart: 'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',
                    addEntries: 'users/${userId}/carts/${cartId}/entries',
                    updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',
                    removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',
                    addEmail: 'users/${userId}/carts/${cartId}/email',
                    deleteCart: 'users/${userId}/carts/${cartId}',
                    cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',
                    saveCart: 'users/${userId}/carts/${cartId}/save',
                },
            },
        },
    };

    var CART_MODIFICATION_NORMALIZER = new i0.InjectionToken('CartModificationNormalizer');

    var OccCartEntryAdapter = /** @class */ (function () {
        function OccCartEntryAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        OccCartEntryAdapter.prototype.add = function (userId, cartId, productCode, quantity) {
            if (quantity === void 0) { quantity = 1; }
            var toAdd = JSON.stringify({});
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            var url = this.occEndpointsService.getUrl('addEntries', {
                userId: userId,
                cartId: cartId,
                quantity: quantity,
            }, { code: productCode, qty: quantity } // The "qty" parameter is used for the base b2c add to cart endpoint.
            );
            return this.http
                .post(url, toAdd, { headers: headers })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        OccCartEntryAdapter.prototype.update = function (userId, cartId, entryNumber, qty, pickupStore) {
            var params = {};
            if (pickupStore) {
                params = { pickupStore: pickupStore };
            }
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            var url = this.occEndpointsService.getUrl('updateEntries', { userId: userId, cartId: cartId, entryNumber: entryNumber }, Object.assign({ qty: qty }, params));
            return this.http
                .patch(url, {}, { headers: headers })
                .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
        };
        OccCartEntryAdapter.prototype.remove = function (userId, cartId, entryNumber) {
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            var url = this.occEndpointsService.getUrl('removeEntries', {
                userId: userId,
                cartId: cartId,
                entryNumber: entryNumber,
            });
            return this.http.delete(url, { headers: headers });
        };
        return OccCartEntryAdapter;
    }());
    OccCartEntryAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCartEntryAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var CART_VOUCHER_NORMALIZER = new i0.InjectionToken('CartVoucherNormalizer');

    var OccCartVoucherAdapter = /** @class */ (function () {
        function OccCartVoucherAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCartVoucherAdapter.prototype.getCartVoucherEndpoint = function (userId, cartId) {
            return this.occEndpoints.getUrl('cartVoucher', { userId: userId, cartId: cartId });
        };
        OccCartVoucherAdapter.prototype.getHeaders = function (userId) {
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return headers;
        };
        OccCartVoucherAdapter.prototype.add = function (userId, cartId, voucherId) {
            var url = this.getCartVoucherEndpoint(userId, cartId);
            var toAdd = JSON.stringify({});
            var params = new i1$4.HttpParams().set('voucherId', voucherId);
            var headers = this.getHeaders(userId);
            return this.http.post(url, toAdd, { headers: headers, params: params }).pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), this.converter.pipeable(CART_VOUCHER_NORMALIZER));
        };
        OccCartVoucherAdapter.prototype.remove = function (userId, cartId, voucherId) {
            var url = this.getCartVoucherEndpoint(userId, cartId) +
                '/' +
                encodeURIComponent(voucherId);
            var headers = this.getHeaders(userId);
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccCartVoucherAdapter;
    }());
    OccCartVoucherAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCartVoucherAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var OccCartAdapter = /** @class */ (function () {
        function OccCartAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        OccCartAdapter.prototype.loadAll = function (userId) {
            return this.http
                .get(this.occEndpointsService.getUrl('carts', { userId: userId }))
                .pipe(operators.pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
        };
        OccCartAdapter.prototype.load = function (userId, cartId) {
            if (cartId === OCC_CART_ID_CURRENT) {
                return this.loadAll(userId).pipe(operators.map(function (carts) {
                    if (carts) {
                        var activeCart = carts.find(function (cart) {
                            return cart['saveTime'] === undefined;
                        });
                        return activeCart;
                    }
                    else {
                        return null;
                    }
                }));
            }
            else {
                return this.http
                    .get(this.occEndpointsService.getUrl('cart', { userId: userId, cartId: cartId }))
                    .pipe(this.converterService.pipeable(CART_NORMALIZER));
            }
        };
        OccCartAdapter.prototype.create = function (userId, oldCartId, toMergeCartGuid) {
            var toAdd = JSON.stringify({});
            var params = {};
            if (oldCartId) {
                params = { oldCartId: oldCartId };
            }
            if (toMergeCartGuid) {
                params['toMergeCartGuid'] = toMergeCartGuid;
            }
            return this.http
                .post(this.occEndpointsService.getUrl('createCart', { userId: userId }, params), toAdd)
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        };
        OccCartAdapter.prototype.delete = function (userId, cartId) {
            var headers = new i1$4.HttpHeaders();
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return this.http.delete(this.occEndpointsService.getUrl('deleteCart', { userId: userId, cartId: cartId }), { headers: headers });
        };
        OccCartAdapter.prototype.addEmail = function (userId, cartId, email) {
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            var httpParams = new i1$4.HttpParams().set('email', email);
            var url = this.occEndpointsService.getUrl('addEmail', {
                userId: userId,
                cartId: cartId,
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        return OccCartAdapter;
    }());
    OccCartAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCartAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var SAVE_CART_NORMALIZER = new i0.InjectionToken('SaveCartNormalizer');

    var OccSaveCartAdapter = /** @class */ (function () {
        function OccSaveCartAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        OccSaveCartAdapter.prototype.saveCart = function (userId, cartId, saveCartName, saveCartDescription) {
            var httpParams = new i1$4.HttpParams();
            if (Boolean(saveCartName)) {
                httpParams = httpParams.set('saveCartName', saveCartName);
            }
            if (Boolean(saveCartDescription)) {
                httpParams = httpParams.set('saveCartDescription', saveCartDescription);
            }
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http
                .patch(this.occEndpointsService.getUrl('saveCart', { userId: userId, cartId: cartId }), httpParams, { headers: headers })
                .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));
        };
        return OccSaveCartAdapter;
    }());
    OccSaveCartAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccSaveCartAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var CartOccModule = /** @class */ (function () {
        function CartOccModule() {
        }
        return CartOccModule;
    }());
    CartOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccCartConfig),
                        {
                            provide: CartAdapter,
                            useClass: OccCartAdapter,
                        },
                        {
                            provide: CART_NORMALIZER,
                            useExisting: OccCartNormalizer,
                            multi: true,
                        },
                        {
                            provide: CartEntryAdapter,
                            useClass: OccCartEntryAdapter,
                        },
                        {
                            provide: CartVoucherAdapter,
                            useClass: OccCartVoucherAdapter,
                        },
                        {
                            provide: SaveCartAdapter,
                            useClass: OccSaveCartAdapter,
                        },
                    ],
                },] }
    ];

    var CheckoutAdapter = /** @class */ (function () {
        function CheckoutAdapter() {
        }
        return CheckoutAdapter;
    }());

    var ORDER_NORMALIZER = new i0.InjectionToken('OrderNormalizer');

    var CheckoutCostCenterAdapter = /** @class */ (function () {
        function CheckoutCostCenterAdapter() {
        }
        return CheckoutCostCenterAdapter;
    }());

    var CheckoutDeliveryAdapter = /** @class */ (function () {
        function CheckoutDeliveryAdapter() {
        }
        return CheckoutDeliveryAdapter;
    }());

    var CheckoutConnector = /** @class */ (function () {
        function CheckoutConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutConnector.prototype.placeOrder = function (userId, cartId, termsChecked) {
            return this.adapter.placeOrder(userId, cartId, termsChecked);
        };
        CheckoutConnector.prototype.loadCheckoutDetails = function (userId, cartId) {
            return this.adapter.loadCheckoutDetails(userId, cartId);
        };
        CheckoutConnector.prototype.clearCheckoutDeliveryAddress = function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);
        };
        CheckoutConnector.prototype.clearCheckoutDeliveryMode = function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryMode(userId, cartId);
        };
        return CheckoutConnector;
    }());
    CheckoutConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutConnector_Factory() { return new CheckoutConnector(i0.ɵɵinject(CheckoutAdapter)); }, token: CheckoutConnector, providedIn: "root" });
    CheckoutConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutConnector.ctorParameters = function () { return [
        { type: CheckoutAdapter }
    ]; };

    var CheckoutCostCenterConnector = /** @class */ (function () {
        function CheckoutCostCenterConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutCostCenterConnector.prototype.setCostCenter = function (userId, cartId, costCenterId) {
            return this.adapter.setCostCenter(userId, cartId, costCenterId);
        };
        return CheckoutCostCenterConnector;
    }());
    CheckoutCostCenterConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutCostCenterConnector_Factory() { return new CheckoutCostCenterConnector(i0.ɵɵinject(CheckoutCostCenterAdapter)); }, token: CheckoutCostCenterConnector, providedIn: "root" });
    CheckoutCostCenterConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutCostCenterConnector.ctorParameters = function () { return [
        { type: CheckoutCostCenterAdapter }
    ]; };

    var CheckoutDeliveryConnector = /** @class */ (function () {
        function CheckoutDeliveryConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutDeliveryConnector.prototype.createAddress = function (userId, cartId, address) {
            return this.adapter.createAddress(userId, cartId, address);
        };
        CheckoutDeliveryConnector.prototype.setAddress = function (userId, cartId, addressId) {
            return this.adapter.setAddress(userId, cartId, addressId);
        };
        CheckoutDeliveryConnector.prototype.setMode = function (userId, cartId, deliveryModeId) {
            return this.adapter.setMode(userId, cartId, deliveryModeId);
        };
        CheckoutDeliveryConnector.prototype.getMode = function (userId, cartId) {
            return this.adapter.getMode(userId, cartId);
        };
        CheckoutDeliveryConnector.prototype.getSupportedModes = function (userId, cartId) {
            return this.adapter.getSupportedModes(userId, cartId);
        };
        return CheckoutDeliveryConnector;
    }());
    CheckoutDeliveryConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutDeliveryConnector_Factory() { return new CheckoutDeliveryConnector(i0.ɵɵinject(CheckoutDeliveryAdapter)); }, token: CheckoutDeliveryConnector, providedIn: "root" });
    CheckoutDeliveryConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutDeliveryConnector.ctorParameters = function () { return [
        { type: CheckoutDeliveryAdapter }
    ]; };

    var DELIVERY_MODE_NORMALIZER = new i0.InjectionToken('DeliveryModeNormalizer');

    var PaymentTypeAdapter = /** @class */ (function () {
        function PaymentTypeAdapter() {
        }
        return PaymentTypeAdapter;
    }());

    var PaymentTypeConnector = /** @class */ (function () {
        function PaymentTypeConnector(adapter) {
            this.adapter = adapter;
        }
        PaymentTypeConnector.prototype.getPaymentTypes = function () {
            return this.adapter.loadPaymentTypes();
        };
        PaymentTypeConnector.prototype.setPaymentType = function (userId, cartId, typeCode, poNumber) {
            return this.adapter.setPaymentType(userId, cartId, typeCode, poNumber);
        };
        return PaymentTypeConnector;
    }());
    PaymentTypeConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaymentTypeConnector_Factory() { return new PaymentTypeConnector(i0.ɵɵinject(PaymentTypeAdapter)); }, token: PaymentTypeConnector, providedIn: "root" });
    PaymentTypeConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PaymentTypeConnector.ctorParameters = function () { return [
        { type: PaymentTypeAdapter }
    ]; };

    var PAYMENT_TYPE_NORMALIZER = new i0.InjectionToken('PaymentTypeNormalizer');

    var CheckoutPaymentAdapter = /** @class */ (function () {
        function CheckoutPaymentAdapter() {
        }
        return CheckoutPaymentAdapter;
    }());

    var CheckoutPaymentConnector = /** @class */ (function () {
        function CheckoutPaymentConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutPaymentConnector.prototype.create = function (userId, cartId, paymentDetails) {
            return this.adapter.create(userId, cartId, paymentDetails);
        };
        CheckoutPaymentConnector.prototype.set = function (userId, cartId, paymentDetailsId) {
            return this.adapter.set(userId, cartId, paymentDetailsId);
        };
        CheckoutPaymentConnector.prototype.getCardTypes = function () {
            return this.adapter.loadCardTypes();
        };
        return CheckoutPaymentConnector;
    }());
    CheckoutPaymentConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutPaymentConnector_Factory() { return new CheckoutPaymentConnector(i0.ɵɵinject(CheckoutPaymentAdapter)); }, token: CheckoutPaymentConnector, providedIn: "root" });
    CheckoutPaymentConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutPaymentConnector.ctorParameters = function () { return [
        { type: CheckoutPaymentAdapter }
    ]; };

    var PAYMENT_DETAILS_NORMALIZER = new i0.InjectionToken('PaymentDetailsNormalizer');
    var PAYMENT_DETAILS_SERIALIZER = new i0.InjectionToken('PaymentDetailsSerializer');
    var CARD_TYPE_NORMALIZER = new i0.InjectionToken('CardTypeNormalizer');

    var CheckoutReplenishmentOrderAdapter = /** @class */ (function () {
        function CheckoutReplenishmentOrderAdapter() {
        }
        return CheckoutReplenishmentOrderAdapter;
    }());

    var CheckoutReplenishmentOrderConnector = /** @class */ (function () {
        function CheckoutReplenishmentOrderConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutReplenishmentOrderConnector.prototype.scheduleReplenishmentOrder = function (cartId, scheduleReplenishmentForm, termsChecked, userId) {
            return this.adapter.scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId);
        };
        return CheckoutReplenishmentOrderConnector;
    }());
    CheckoutReplenishmentOrderConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutReplenishmentOrderConnector_Factory() { return new CheckoutReplenishmentOrderConnector(i0.ɵɵinject(CheckoutReplenishmentOrderAdapter)); }, token: CheckoutReplenishmentOrderConnector, providedIn: "root" });
    CheckoutReplenishmentOrderConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutReplenishmentOrderConnector.ctorParameters = function () { return [
        { type: CheckoutReplenishmentOrderAdapter }
    ]; };

    var REPLENISHMENT_ORDER_NORMALIZER = new i0.InjectionToken('ReplenishmentOrderNormalizer');
    var REPLENISHMENT_ORDER_FORM_SERIALIZER = new i0.InjectionToken('ReplenishmentOrderFormSerializer');

    var OccOrderNormalizer = /** @class */ (function () {
        function OccOrderNormalizer(converter) {
            this.converter = converter;
        }
        OccOrderNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.entries) {
                target.entries = source.entries.map(function (entry) { return _this.convertOrderEntry(entry); });
            }
            if (source.consignments) {
                target.consignments = source.consignments.map(function (consignment) { return (Object.assign(Object.assign({}, consignment), { entries: consignment.entries.map(function (entry) { return (Object.assign(Object.assign({}, entry), { orderEntry: _this.convertOrderEntry(entry.orderEntry) })); }) })); });
            }
            if (source.unconsignedEntries) {
                target.unconsignedEntries = source.unconsignedEntries.map(function (entry) { return _this.convertOrderEntry(entry); });
            }
            return target;
        };
        OccOrderNormalizer.prototype.convertOrderEntry = function (source) {
            return Object.assign(Object.assign({}, source), { product: this.converter.convert(source.product, PRODUCT_NORMALIZER) });
        };
        return OccOrderNormalizer;
    }());
    OccOrderNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccOrderNormalizer_Factory() { return new OccOrderNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccOrderNormalizer, providedIn: "root" });
    OccOrderNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccOrderNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    /**
     * Service responsible for converting date-like strings to/from formats compatible with the `<input type="datetime-local">`
     * HTML element and valid strings compatible with the `Date` object.
     *
     * Date values used are relative to the local timezone of the user.
     */
    var DateTimePickerFormatterService = /** @class */ (function () {
        function DateTimePickerFormatterService() {
        }
        /**
         * Convert date string into a string format compatable with the browser's native `<input type="datetime-local">` HTML element.
         * @param value: date string to convert
         *
         * @example
         * With UTC-0 local offset, `toNative('2010-01-01T00:00+0000')` returns `'2010-01-01T00:00'`.
         */
        DateTimePickerFormatterService.prototype.toNative = function (value) {
            return value
                ? this.formatDateStringWithTimezone(value, this.getLocalTimezoneOffset(true))
                : null;
        };
        /**
         * Convert datetime-local native string into a valid datetime string.
         * @param value: datetime-local string to convert
         *
         * @example
         * With UTC-0 locale offset, `toModel('2010-01-01T00:00')` returns `'2010-01-01T00:00:00+00:00'`.
         */
        DateTimePickerFormatterService.prototype.toModel = function (value) {
            return value ? value + ":00" + this.getLocalTimezoneOffset() : null;
        };
        /**
         * Returns the local timezone in a format that can be appended to a date-like string.
         * @param invert (default: false): returns the opposite operator relative to the local timezone
         *
         * @example
         * When locale is set to a CEST timezone, `getLocalTimezoneOffset()` returns '+02:00'
         * and `getLocalTimezoneOffset(true)` returns '-02:00'
         */
        DateTimePickerFormatterService.prototype.getLocalTimezoneOffset = function (invert) {
            var offset = new Date().getTimezoneOffset() * -1;
            var hours = Math.abs(Math.floor(offset / 60))
                .toString()
                .padStart(2, '0');
            var minutes = (offset % 60).toString().padStart(2, '0');
            var sign = offset >= 0 ? (invert ? "-" : "+") : invert ? "+" : "-";
            return "" + sign + hours + ":" + minutes;
        };
        /**
         * Format date string into a format compatible with the browser's native `<input type="datetime-local">` HTML element.
         * @param dateString: date string to convert
         * @param offset: offset to append to date string
         *
         * @example
         * With UTC-0 local offset, `formatDateStringWithTimezone('2010-01-01T00:00+0000', '+00:00')` returns `'2010-01-01T00:00+00:00'`.
         */
        DateTimePickerFormatterService.prototype.formatDateStringWithTimezone = function (dateString, offset) {
            return new Date(dateString.replace('+0000', offset))
                .toISOString()
                .substring(0, 16);
        };
        return DateTimePickerFormatterService;
    }());
    DateTimePickerFormatterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DateTimePickerFormatterService_Factory() { return new DateTimePickerFormatterService(); }, token: DateTimePickerFormatterService, providedIn: "root" });
    DateTimePickerFormatterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var OccReplenishmentOrderFormSerializer = /** @class */ (function () {
        function OccReplenishmentOrderFormSerializer(dateTimePickerFormatterService) {
            this.dateTimePickerFormatterService = dateTimePickerFormatterService;
        }
        OccReplenishmentOrderFormSerializer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.replenishmentStartDate) {
                target.replenishmentStartDate = this.convertDate(source.replenishmentStartDate);
            }
            return target;
        };
        /**
         * Adds the current timestamp (including timezone offset) to a date string in the format YYYY-mm-dd
         * @Example
         * Converts 2021-10-15 to 2021-10-15T15:38:05-05:00
         */
        OccReplenishmentOrderFormSerializer.prototype.convertDate = function (date) {
            var localTime = new Date().toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
            });
            var modelDate = date + "T" + localTime;
            return this.dateTimePickerFormatterService.toModel(modelDate);
        };
        return OccReplenishmentOrderFormSerializer;
    }());
    OccReplenishmentOrderFormSerializer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccReplenishmentOrderFormSerializer_Factory() { return new OccReplenishmentOrderFormSerializer(i0.ɵɵinject(DateTimePickerFormatterService)); }, token: OccReplenishmentOrderFormSerializer, providedIn: "root" });
    OccReplenishmentOrderFormSerializer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccReplenishmentOrderFormSerializer.ctorParameters = function () { return [
        { type: DateTimePickerFormatterService }
    ]; };

    var OccReplenishmentOrderNormalizer = /** @class */ (function () {
        function OccReplenishmentOrderNormalizer(converter) {
            this.converter = converter;
        }
        OccReplenishmentOrderNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.entries) {
                target.entries = source.entries.map(function (entry) { return _this.convertOrderEntry(entry); });
            }
            return target;
        };
        OccReplenishmentOrderNormalizer.prototype.convertOrderEntry = function (source) {
            return Object.assign(Object.assign({}, source), { product: this.converter.convert(source.product, PRODUCT_NORMALIZER) });
        };
        return OccReplenishmentOrderNormalizer;
    }());
    OccReplenishmentOrderNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccReplenishmentOrderNormalizer_Factory() { return new OccReplenishmentOrderNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccReplenishmentOrderNormalizer, providedIn: "root" });
    OccReplenishmentOrderNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccReplenishmentOrderNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var defaultOccCheckoutConfig = {
        backend: {
            occ: {
                endpoints: {
                    setDeliveryAddress: 'users/${userId}/carts/${cartId}/addresses/delivery',
                    placeOrder: 'users/${userId}/orders?fields=FULL',
                },
            },
        },
    };

    var OccCheckoutCostCenterAdapter = /** @class */ (function () {
        function OccCheckoutCostCenterAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCheckoutCostCenterAdapter.prototype.setCostCenter = function (userId, cartId, costCenterId) {
            var httpParams = new i1$4.HttpParams().set('costCenterId', costCenterId);
            /* tslint:disable:max-line-length */
            httpParams = httpParams.set('fields', 'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user');
            // TODO(#8877): Should we improve configurable endpoints for this use case?
            return this.http
                .put(this.getCartEndpoint(userId) + cartId + '/costcenter', {}, {
                params: httpParams,
            })
                .pipe(this.converter.pipeable(CART_NORMALIZER));
        };
        OccCheckoutCostCenterAdapter.prototype.getCartEndpoint = function (userId) {
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        return OccCheckoutCostCenterAdapter;
    }());
    OccCheckoutCostCenterAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutCostCenterAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var ADDRESS_NORMALIZER = new i0.InjectionToken('AddressNormalizer');
    var ADDRESS_LIST_NORMALIZER = new i0.InjectionToken('AddressesNormalizer');
    var ADDRESS_SERIALIZER = new i0.InjectionToken('AddressSerializer');
    var ADDRESS_VALIDATION_NORMALIZER = new i0.InjectionToken('AddressValidationNormalizer');

    var OccCheckoutDeliveryAdapter = /** @class */ (function () {
        function OccCheckoutDeliveryAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCheckoutDeliveryAdapter.prototype.getCartEndpoint = function (userId) {
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        OccCheckoutDeliveryAdapter.prototype.createAddress = function (userId, cartId, address) {
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .post(this.getCartEndpoint(userId) + cartId + '/addresses/delivery', address, {
                headers: new i1$4.HttpHeaders().set('Content-Type', 'application/json'),
            })
                .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
        };
        OccCheckoutDeliveryAdapter.prototype.setAddress = function (userId, cartId, addressId) {
            return this.http.put(this.occEndpoints.getUrl('setDeliveryAddress', { userId: userId, cartId: cartId }), {}, {
                params: { addressId: addressId },
            });
        };
        OccCheckoutDeliveryAdapter.prototype.setMode = function (userId, cartId, deliveryModeId) {
            return this.http.put(this.getCartEndpoint(userId) + cartId + '/deliverymode', {}, {
                params: { deliveryModeId: deliveryModeId },
            });
        };
        OccCheckoutDeliveryAdapter.prototype.getMode = function (userId, cartId) {
            return this.http
                .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')
                .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));
        };
        OccCheckoutDeliveryAdapter.prototype.getSupportedModes = function (userId, cartId) {
            return this.http
                .get(this.getCartEndpoint(userId) + cartId + '/deliverymodes')
                .pipe(operators.pluck('deliveryModes'), this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER));
        };
        return OccCheckoutDeliveryAdapter;
    }());
    OccCheckoutDeliveryAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutDeliveryAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var ENDPOINT_PAYMENT_TYPES = 'paymenttypes';
    var OccCheckoutPaymentTypeAdapter = /** @class */ (function () {
        function OccCheckoutPaymentTypeAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCheckoutPaymentTypeAdapter.prototype.loadPaymentTypes = function () {
            return this.http
                .get(this.occEndpoints.getEndpoint(ENDPOINT_PAYMENT_TYPES))
                .pipe(operators.map(function (paymentTypeList) { return paymentTypeList.paymentTypes; }), this.converter.pipeableMany(PAYMENT_TYPE_NORMALIZER));
        };
        OccCheckoutPaymentTypeAdapter.prototype.setPaymentType = function (userId, cartId, paymentType, purchaseOrderNumber) {
            var httpParams = new i1$4.HttpParams().set('paymentType', paymentType);
            if (purchaseOrderNumber !== undefined) {
                httpParams = httpParams.set('purchaseOrderNumber', purchaseOrderNumber);
            }
            /* tslint:disable:max-line-length */
            httpParams = httpParams.set('fields', 'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user');
            // TODO(#8877): Should we improve configurable endpoints for this use case?
            return this.http
                .put(this.getCartEndpoint(userId) + cartId + '/paymenttype', {}, {
                params: httpParams,
            })
                .pipe(this.converter.pipeable(CART_NORMALIZER));
        };
        OccCheckoutPaymentTypeAdapter.prototype.getCartEndpoint = function (userId) {
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        return OccCheckoutPaymentTypeAdapter;
    }());
    OccCheckoutPaymentTypeAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutPaymentTypeAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var ENDPOINT_CARD_TYPES = 'cardtypes';
    var OccCheckoutPaymentAdapter = /** @class */ (function () {
        function OccCheckoutPaymentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            if (typeof DOMParser !== 'undefined') {
                this.domparser = new DOMParser();
            }
        }
        OccCheckoutPaymentAdapter.prototype.getCartEndpoint = function (userId) {
            var cartEndpoint = 'users/' + userId + '/carts/';
            return this.occEndpoints.getEndpoint(cartEndpoint);
        };
        OccCheckoutPaymentAdapter.prototype.create = function (userId, cartId, paymentDetails) {
            var _this = this;
            paymentDetails = this.converter.convert(paymentDetails, PAYMENT_DETAILS_SERIALIZER);
            return this.getProviderSubInfo(userId, cartId).pipe(operators.map(function (data) {
                var labelsMap = _this.convertToMap(data.mappingLabels.entry);
                return {
                    url: data.postUrl,
                    parameters: _this.getParamsForPaymentProvider(paymentDetails, data.parameters.entry, labelsMap),
                    mappingLabels: labelsMap,
                };
            }), operators.mergeMap(function (sub) {
                // create a subscription directly with payment provider
                return _this.createSubWithProvider(sub.url, sub.parameters).pipe(operators.map(function (response) { return _this.extractPaymentDetailsFromHtml(response); }), operators.mergeMap(function (fromPaymentProvider) {
                    fromPaymentProvider['defaultPayment'] =
                        paymentDetails.defaultPayment;
                    fromPaymentProvider['savePaymentInfo'] = true;
                    return _this.createDetailsWithParameters(userId, cartId, fromPaymentProvider).pipe(_this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));
                }));
            }));
        };
        OccCheckoutPaymentAdapter.prototype.set = function (userId, cartId, paymentDetailsId) {
            return this.http.put(this.getCartEndpoint(userId) + cartId + '/paymentdetails', {}, {
                params: { paymentDetailsId: paymentDetailsId },
            });
        };
        OccCheckoutPaymentAdapter.prototype.loadCardTypes = function () {
            return this.http
                .get(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))
                .pipe(operators.map(function (cardTypeList) { return cardTypeList.cardTypes; }), this.converter.pipeableMany(CARD_TYPE_NORMALIZER));
        };
        OccCheckoutPaymentAdapter.prototype.getProviderSubInfo = function (userId, cartId) {
            return this.http.get(this.getCartEndpoint(userId) +
                cartId +
                '/payment/sop/request?responseUrl=sampleUrl');
        };
        OccCheckoutPaymentAdapter.prototype.createSubWithProvider = function (postUrl, parameters) {
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
                Accept: 'text/html',
            });
            var httpParams = new i1$4.HttpParams({ encoder: new HttpParamsURIEncoder() });
            Object.keys(parameters).forEach(function (key) {
                httpParams = httpParams.append(key, parameters[key]);
            });
            return this.http.post(postUrl, httpParams, {
                headers: headers,
                responseType: 'text',
            });
        };
        OccCheckoutPaymentAdapter.prototype.createDetailsWithParameters = function (userId, cartId, parameters) {
            var httpParams = new i1$4.HttpParams({ encoder: new HttpParamsURIEncoder() });
            Object.keys(parameters).forEach(function (key) {
                httpParams = httpParams.append(key, parameters[key]);
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.post(this.getCartEndpoint(userId) + cartId + '/payment/sop/response', httpParams, { headers: headers });
        };
        OccCheckoutPaymentAdapter.prototype.getParamsForPaymentProvider = function (paymentDetails, parameters, mappingLabels) {
            var params = this.convertToMap(parameters);
            params[mappingLabels['hybris_account_holder_name']] =
                paymentDetails.accountHolderName;
            params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;
            params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;
            if (mappingLabels['hybris_combined_expiry_date'] === 'true') {
                params[mappingLabels['hybris_card_expiry_date']] =
                    paymentDetails.expiryMonth +
                        mappingLabels['hybris_separator_expiry_date'] +
                        paymentDetails.expiryYear;
            }
            else {
                params[mappingLabels['hybris_card_expiration_month']] =
                    paymentDetails.expiryMonth;
                params[mappingLabels['hybris_card_expiration_year']] =
                    paymentDetails.expiryYear;
            }
            params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;
            // billing address
            params[mappingLabels['hybris_billTo_country']] =
                paymentDetails.billingAddress.country.isocode;
            params[mappingLabels['hybris_billTo_firstname']] =
                paymentDetails.billingAddress.firstName;
            params[mappingLabels['hybris_billTo_lastname']] =
                paymentDetails.billingAddress.lastName;
            params[mappingLabels['hybris_billTo_street1']] =
                paymentDetails.billingAddress.line1 +
                    ' ' +
                    paymentDetails.billingAddress.line2;
            params[mappingLabels['hybris_billTo_city']] =
                paymentDetails.billingAddress.town;
            if (paymentDetails.billingAddress.region) {
                params[mappingLabels['hybris_billTo_region']] =
                    paymentDetails.billingAddress.region.isocodeShort;
            }
            else {
                params[mappingLabels['hybris_billTo_region']] = '';
            }
            params[mappingLabels['hybris_billTo_postalcode']] =
                paymentDetails.billingAddress.postalCode;
            return params;
        };
        OccCheckoutPaymentAdapter.prototype.extractPaymentDetailsFromHtml = function (html) {
            var domdoc = this.domparser.parseFromString(html, 'text/xml');
            var responseForm = domdoc.getElementsByTagName('form')[0];
            var inputs = responseForm.getElementsByTagName('input');
            var values = {};
            for (var i = 0; inputs[i]; i++) {
                var input = inputs[i];
                if (input.getAttribute('name') !== '{}' &&
                    input.getAttribute('value') !== '') {
                    values[input.getAttribute('name')] = input.getAttribute('value');
                }
            }
            return values;
        };
        OccCheckoutPaymentAdapter.prototype.convertToMap = function (paramList) {
            return paramList.reduce(function (result, item) {
                var key = item.key;
                result[key] = item.value;
                return result;
            }, {});
        };
        return OccCheckoutPaymentAdapter;
    }());
    OccCheckoutPaymentAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutPaymentAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    /**
     * Abstract class that can be used to resolve meta data for specific pages.
     * The `getScore` method is used to select the right resolver for a specific
     * page, based on a score. The score is calculated by the (non)matching page
     * type and page template.
     */
    var PageMetaResolver = /** @class */ (function () {
        function PageMetaResolver() {
        }
        /**
         * Returns the matching score for a resolver class, based on
         * the page type and page template.
         */
        PageMetaResolver.prototype.getScore = function (page) {
            var score = 0;
            if (this.pageType) {
                score += page.type === this.pageType ? 1 : -1;
            }
            if (this.pageTemplate) {
                score += page.template === this.pageTemplate ? 1 : -1;
            }
            return score;
        };
        PageMetaResolver.prototype.hasMatch = function (page) {
            return this.getScore(page) > 0;
        };
        PageMetaResolver.prototype.getPriority = function (page) {
            return this.getScore(page);
        };
        return PageMetaResolver;
    }());

    /**
     * Registers streams of ngrx actions as events source streams
     */
    var StateEventService = /** @class */ (function () {
        function StateEventService(actionsSubject, eventService) {
            this.actionsSubject = actionsSubject;
            this.eventService = eventService;
        }
        /**
         * Registers an event source stream of specific events
         * mapped from a given action type.
         *
         * @param mapping mapping from action to event
         *
         * @returns a teardown function that unregisters the event source
         */
        StateEventService.prototype.register = function (mapping) {
            return this.eventService.register(mapping.event, this.getFromAction(mapping));
        };
        /**
         * Returns a stream of specific events mapped from a specific action.
         * @param mapping mapping from action to event
         */
        StateEventService.prototype.getFromAction = function (mapping) {
            var _this = this;
            return this.actionsSubject
                .pipe(i3.ofType.apply(void 0, __spread([].concat(mapping.action))))
                .pipe(operators.map(function (action) { return _this.createEvent(action, mapping.event, mapping.factory); }));
        };
        /**
         * Creates an event instance for given class out from the action object.
         * Unless the `factory` parameter is given, the action's `payload` is used
         * as the argument for the event's constructor.
         *
         * @param action instance of an Action
         * @param mapping mapping from action to event
         * @param factory optional function getting an action instance and returning an event instance
         *
         * @returns instance of an Event
         */
        StateEventService.prototype.createEvent = function (action, eventType, factory) {
            var _a;
            return factory
                ? factory(action)
                : createFrom(eventType, (_a = action.payload) !== null && _a !== void 0 ? _a : {});
        };
        return StateEventService;
    }());
    StateEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StateEventService_Factory() { return new StateEventService(i0.ɵɵinject(i1$2.ActionsSubject), i0.ɵɵinject(EventService)); }, token: StateEventService, providedIn: "root" });
    StateEventService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    StateEventService.ctorParameters = function () { return [
        { type: i1$2.ActionsSubject },
        { type: EventService }
    ]; };

    var VERIFY_ADDRESS = '[Checkout] Verify Address';
    var VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';
    var VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';
    var CLEAR_ADDRESS_VERIFICATION_RESULTS = '[Checkout] Clear Address Verification Results';
    var VerifyAddress = /** @class */ (function () {
        function VerifyAddress(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS;
        }
        return VerifyAddress;
    }());
    var VerifyAddressFail = /** @class */ (function () {
        function VerifyAddressFail(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS_FAIL;
        }
        return VerifyAddressFail;
    }());
    var VerifyAddressSuccess = /** @class */ (function () {
        function VerifyAddressSuccess(payload) {
            this.payload = payload;
            this.type = VERIFY_ADDRESS_SUCCESS;
        }
        return VerifyAddressSuccess;
    }());
    var ClearAddressVerificationResults = /** @class */ (function () {
        function ClearAddressVerificationResults() {
            this.type = CLEAR_ADDRESS_VERIFICATION_RESULTS;
        }
        return ClearAddressVerificationResults;
    }());

    var LOAD_CARD_TYPES = '[Checkout] Load Card Types';
    var LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';
    var LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';
    var LoadCardTypes = /** @class */ (function () {
        function LoadCardTypes() {
            this.type = LOAD_CARD_TYPES;
        }
        return LoadCardTypes;
    }());
    var LoadCardTypesFail = /** @class */ (function () {
        function LoadCardTypesFail(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_FAIL;
        }
        return LoadCardTypesFail;
    }());
    var LoadCardTypesSuccess = /** @class */ (function () {
        function LoadCardTypesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_SUCCESS;
        }
        return LoadCardTypesSuccess;
    }());

    var MULTI_CART_FEATURE = 'cart';
    var MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';
    // TODO(#7241): Drop after event system implementation for cart vouchers
    /**
     * Add voucher process const
     * @deprecated since 2.0
     */
    var ADD_VOUCHER_PROCESS_ID = 'addVoucher';

    var PROCESS_FEATURE = 'process';

    var CHECKOUT_FEATURE = 'checkout';
    var CHECKOUT_DETAILS = '[Checkout] Checkout Details';
    var SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';
    var SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';
    var SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = 'setSupportedDeliveryMode';
    var SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';
    var GET_PAYMENT_TYPES_PROCESS_ID = 'getPaymentTypes';
    var SET_COST_CENTER_PROCESS_ID = 'setCostCenter';
    var PLACED_ORDER_PROCESS_ID = 'placeOrder';

    var CLEAR_CHECKOUT_DELIVERY_ADDRESS = '[Checkout] Clear Checkout Delivery Address';
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Clear Checkout Delivery Address Success';
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL = '[Checkout] Clear Checkout Delivery Address Fail';
    var CLEAR_CHECKOUT_DELIVERY_MODE = '[Checkout] Clear Checkout Delivery Mode';
    var CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS = '[Checkout] Clear Checkout Delivery Mode Success';
    var CLEAR_CHECKOUT_DELIVERY_MODE_FAIL = '[Checkout] Clear Checkout Delivery Mode Fail';
    var ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';
    var ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';
    var ADD_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Add Delivery Address Success';
    var SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';
    var SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';
    var SET_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Set Delivery Address Success';
    var RESET_SET_DELIVERY_ADDRESS_PROCESS = '[Checkout] Reset Set Delivery Address Process';
    var LOAD_SUPPORTED_DELIVERY_MODES = '[Checkout] Load Supported Delivery Modes';
    var LOAD_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Load Supported Delivery Modes Fail';
    var LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Load Supported Delivery Modes Success';
    var CLEAR_SUPPORTED_DELIVERY_MODES = '[Checkout] Clear Supported Delivery Modes';
    var SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';
    var SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';
    var SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';
    var RESET_SET_DELIVERY_MODE_PROCESS = '[Checkout] Reset Set Delivery Mode Process';
    var SET_SUPPORTED_DELIVERY_MODES = '[Checkout] Set Supported Delivery Modes';
    var SET_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Set Supported Delivery Modes Fail';
    var SET_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Set Supported Delivery Modes Success';
    var RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS = '[Checkout] Reset Set Supported Delivery Modes Process';
    var CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';
    var CREATE_PAYMENT_DETAILS_FAIL = '[Checkout] Create Payment Details Fail';
    var CREATE_PAYMENT_DETAILS_SUCCESS = '[Checkout] Create Payment Details Success';
    var SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';
    var SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';
    var SET_PAYMENT_DETAILS_SUCCESS = '[Checkout] Set Payment Details Success';
    var RESET_SET_PAYMENT_DETAILS_PROCESS = '[Checkout] Reset Set Payment Details Process';
    var PLACE_ORDER = '[Checkout] Place Order';
    var PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';
    var PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';
    var CLEAR_PLACE_ORDER = '[Checkout] Clear Place Order';
    var CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';
    var CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';
    var LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';
    var LOAD_CHECKOUT_DETAILS_FAIL = '[Checkout] Load Checkout Details Fail';
    var LOAD_CHECKOUT_DETAILS_SUCCESS = '[Checkout] Load Checkout Details Success';
    var CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';
    var PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';
    var SET_COST_CENTER = '[Checkout] Set Cost Center';
    var SET_COST_CENTER_FAIL = '[Checkout] Set Cost Center Fail';
    var SET_COST_CENTER_SUCCESS = '[Checkout] Set Cost Center Success';
    var RESET_SET_COST_CENTER_PROCESS = '[Checkout] Reset Set Cost Center Process';
    var AddDeliveryAddress = /** @class */ (function () {
        function AddDeliveryAddress(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS;
        }
        return AddDeliveryAddress;
    }());
    var AddDeliveryAddressFail = /** @class */ (function () {
        function AddDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_FAIL;
        }
        return AddDeliveryAddressFail;
    }());
    var AddDeliveryAddressSuccess = /** @class */ (function () {
        function AddDeliveryAddressSuccess(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_SUCCESS;
        }
        return AddDeliveryAddressSuccess;
    }());
    var SetDeliveryAddress = /** @class */ (function (_super) {
        __extends(SetDeliveryAddress, _super);
        function SetDeliveryAddress(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS;
            return _this;
        }
        return SetDeliveryAddress;
    }(EntityLoadAction));
    var SetDeliveryAddressFail = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressFail, _super);
        function SetDeliveryAddressFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_FAIL;
            return _this;
        }
        return SetDeliveryAddressFail;
    }(EntityFailAction));
    var SetDeliveryAddressSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressSuccess, _super);
        function SetDeliveryAddressSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_SUCCESS;
            return _this;
        }
        return SetDeliveryAddressSuccess;
    }(EntitySuccessAction));
    var ResetSetDeliveryAddressProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryAddressProcess, _super);
        function ResetSetDeliveryAddressProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_ADDRESS_PROCESS;
            return _this;
        }
        return ResetSetDeliveryAddressProcess;
    }(EntityLoaderResetAction));
    var LoadSupportedDeliveryModes = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModes, _super);
        function LoadSupportedDeliveryModes(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES;
            return _this;
        }
        return LoadSupportedDeliveryModes;
    }(EntityLoadAction));
    var LoadSupportedDeliveryModesFail = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesFail, _super);
        function LoadSupportedDeliveryModesFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;
            return _this;
        }
        return LoadSupportedDeliveryModesFail;
    }(EntityFailAction));
    var LoadSupportedDeliveryModesSuccess = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesSuccess, _super);
        function LoadSupportedDeliveryModesSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;
            return _this;
        }
        return LoadSupportedDeliveryModesSuccess;
    }(EntitySuccessAction));
    var ResetLoadSupportedDeliveryModesProcess = /** @class */ (function (_super) {
        __extends(ResetLoadSupportedDeliveryModesProcess, _super);
        function ResetLoadSupportedDeliveryModesProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;
            return _this;
        }
        return ResetLoadSupportedDeliveryModesProcess;
    }(EntityLoaderResetAction));
    var SetDeliveryMode = /** @class */ (function (_super) {
        __extends(SetDeliveryMode, _super);
        function SetDeliveryMode(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE;
            return _this;
        }
        return SetDeliveryMode;
    }(EntityLoadAction));
    var SetDeliveryModeFail = /** @class */ (function (_super) {
        __extends(SetDeliveryModeFail, _super);
        function SetDeliveryModeFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_FAIL;
            return _this;
        }
        return SetDeliveryModeFail;
    }(EntityFailAction));
    var SetDeliveryModeSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryModeSuccess, _super);
        function SetDeliveryModeSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_SUCCESS;
            return _this;
        }
        return SetDeliveryModeSuccess;
    }(EntitySuccessAction));
    var ResetSetDeliveryModeProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryModeProcess, _super);
        function ResetSetDeliveryModeProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_MODE_PROCESS;
            return _this;
        }
        return ResetSetDeliveryModeProcess;
    }(EntityLoaderResetAction));
    var CreatePaymentDetails = /** @class */ (function (_super) {
        __extends(CreatePaymentDetails, _super);
        function CreatePaymentDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS;
            return _this;
        }
        return CreatePaymentDetails;
    }(EntityLoadAction));
    var CreatePaymentDetailsFail = /** @class */ (function (_super) {
        __extends(CreatePaymentDetailsFail, _super);
        function CreatePaymentDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return CreatePaymentDetailsFail;
    }(EntityFailAction));
    var CreatePaymentDetailsSuccess = /** @class */ (function () {
        function CreatePaymentDetailsSuccess(payload) {
            this.payload = payload;
            this.type = CREATE_PAYMENT_DETAILS_SUCCESS;
        }
        return CreatePaymentDetailsSuccess;
    }());
    var PaymentProcessSuccess = /** @class */ (function (_super) {
        __extends(PaymentProcessSuccess, _super);
        function PaymentProcessSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = PAYMENT_PROCESS_SUCCESS;
            return _this;
        }
        return PaymentProcessSuccess;
    }(EntitySuccessAction));
    var SetPaymentDetails = /** @class */ (function (_super) {
        __extends(SetPaymentDetails, _super);
        function SetPaymentDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS;
            return _this;
        }
        return SetPaymentDetails;
    }(EntityLoadAction));
    var SetPaymentDetailsFail = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsFail, _super);
        function SetPaymentDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return SetPaymentDetailsFail;
    }(EntityFailAction));
    var SetPaymentDetailsSuccess = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsSuccess, _super);
        function SetPaymentDetailsSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_SUCCESS;
            return _this;
        }
        return SetPaymentDetailsSuccess;
    }(EntitySuccessAction));
    var ResetSetPaymentDetailsProcess = /** @class */ (function (_super) {
        __extends(ResetSetPaymentDetailsProcess, _super);
        function ResetSetPaymentDetailsProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = RESET_SET_PAYMENT_DETAILS_PROCESS;
            return _this;
        }
        return ResetSetPaymentDetailsProcess;
    }(EntityLoaderResetAction));
    var PlaceOrder = /** @class */ (function (_super) {
        __extends(PlaceOrder, _super);
        function PlaceOrder(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER;
            return _this;
        }
        return PlaceOrder;
    }(EntityLoadAction));
    var PlaceOrderFail = /** @class */ (function (_super) {
        __extends(PlaceOrderFail, _super);
        function PlaceOrderFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER_FAIL;
            return _this;
        }
        return PlaceOrderFail;
    }(EntityFailAction));
    var PlaceOrderSuccess = /** @class */ (function (_super) {
        __extends(PlaceOrderSuccess, _super);
        function PlaceOrderSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER_SUCCESS;
            return _this;
        }
        return PlaceOrderSuccess;
    }(EntitySuccessAction));
    var ClearPlaceOrder = /** @class */ (function (_super) {
        __extends(ClearPlaceOrder, _super);
        function ClearPlaceOrder() {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.type = CLEAR_PLACE_ORDER;
            return _this;
        }
        return ClearPlaceOrder;
    }(EntityLoaderResetAction));
    var ClearSupportedDeliveryModes = /** @class */ (function () {
        function ClearSupportedDeliveryModes() {
            this.type = CLEAR_SUPPORTED_DELIVERY_MODES;
        }
        return ClearSupportedDeliveryModes;
    }());
    var ClearCheckoutStep = /** @class */ (function () {
        function ClearCheckoutStep(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_STEP;
        }
        return ClearCheckoutStep;
    }());
    var ClearCheckoutData = /** @class */ (function () {
        function ClearCheckoutData() {
            this.type = CLEAR_CHECKOUT_DATA;
        }
        return ClearCheckoutData;
    }());
    var LoadCheckoutDetails = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetails, _super);
        function LoadCheckoutDetails(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS;
            return _this;
        }
        return LoadCheckoutDetails;
    }(LoaderLoadAction));
    var LoadCheckoutDetailsFail = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsFail, _super);
        function LoadCheckoutDetailsFail(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_FAIL;
            return _this;
        }
        return LoadCheckoutDetailsFail;
    }(LoaderFailAction));
    var LoadCheckoutDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsSuccess, _super);
        function LoadCheckoutDetailsSuccess(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_SUCCESS;
            return _this;
        }
        return LoadCheckoutDetailsSuccess;
    }(LoaderSuccessAction));
    var CheckoutClearMiscsData = /** @class */ (function () {
        function CheckoutClearMiscsData() {
            this.type = CHECKOUT_CLEAR_MISCS_DATA;
        }
        return CheckoutClearMiscsData;
    }());
    var ClearCheckoutDeliveryAddress = /** @class */ (function () {
        function ClearCheckoutDeliveryAddress(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;
        }
        return ClearCheckoutDeliveryAddress;
    }());
    var ClearCheckoutDeliveryAddressSuccess = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressSuccess() {
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;
        }
        return ClearCheckoutDeliveryAddressSuccess;
    }());
    var ClearCheckoutDeliveryAddressFail = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;
        }
        return ClearCheckoutDeliveryAddressFail;
    }());
    var ClearCheckoutDeliveryMode = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryMode, _super);
        function ClearCheckoutDeliveryMode(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE;
            return _this;
        }
        return ClearCheckoutDeliveryMode;
    }(EntityProcessesIncrementAction));
    var ClearCheckoutDeliveryModeSuccess = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryModeSuccess, _super);
        function ClearCheckoutDeliveryModeSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;
            return _this;
        }
        return ClearCheckoutDeliveryModeSuccess;
    }(EntityProcessesDecrementAction));
    var ClearCheckoutDeliveryModeFail = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryModeFail, _super);
        function ClearCheckoutDeliveryModeFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;
            return _this;
        }
        return ClearCheckoutDeliveryModeFail;
    }(EntityProcessesDecrementAction));
    var SetCostCenter = /** @class */ (function (_super) {
        __extends(SetCostCenter, _super);
        function SetCostCenter(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER;
            return _this;
        }
        return SetCostCenter;
    }(EntityLoadAction));
    var SetCostCenterFail = /** @class */ (function (_super) {
        __extends(SetCostCenterFail, _super);
        function SetCostCenterFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER_FAIL;
            return _this;
        }
        return SetCostCenterFail;
    }(EntityFailAction));
    var SetCostCenterSuccess = /** @class */ (function (_super) {
        __extends(SetCostCenterSuccess, _super);
        function SetCostCenterSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER_SUCCESS;
            return _this;
        }
        return SetCostCenterSuccess;
    }(EntitySuccessAction));
    var ResetSetCostCenterProcess = /** @class */ (function (_super) {
        __extends(ResetSetCostCenterProcess, _super);
        function ResetSetCostCenterProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.type = RESET_SET_COST_CENTER_PROCESS;
            return _this;
        }
        return ResetSetCostCenterProcess;
    }(EntityLoaderResetAction));

    var SET_ORDER_TYPE = '[Checkout] Set Order Type';
    var SetOrderType = /** @class */ (function () {
        function SetOrderType(payload) {
            this.payload = payload;
            this.type = SET_ORDER_TYPE;
        }
        return SetOrderType;
    }());

    var LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
    var LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
    var LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
    var RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
    var SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
    var SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
    var SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
    var LoadPaymentTypes = /** @class */ (function (_super) {
        __extends(LoadPaymentTypes, _super);
        function LoadPaymentTypes() {
            var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.type = LOAD_PAYMENT_TYPES;
            return _this;
        }
        return LoadPaymentTypes;
    }(EntityLoadAction));
    var LoadPaymentTypesFail = /** @class */ (function (_super) {
        __extends(LoadPaymentTypesFail, _super);
        function LoadPaymentTypesFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_PAYMENT_TYPES_FAIL;
            return _this;
        }
        return LoadPaymentTypesFail;
    }(EntityFailAction));
    var LoadPaymentTypesSuccess = /** @class */ (function (_super) {
        __extends(LoadPaymentTypesSuccess, _super);
        function LoadPaymentTypesSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_PAYMENT_TYPES_SUCCESS;
            return _this;
        }
        return LoadPaymentTypesSuccess;
    }(EntitySuccessAction));
    var ResetLoadPaymentTypesProcess = /** @class */ (function (_super) {
        __extends(ResetLoadPaymentTypesProcess, _super);
        function ResetLoadPaymentTypesProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
            return _this;
        }
        return ResetLoadPaymentTypesProcess;
    }(EntityLoaderResetAction));
    var SetPaymentType = /** @class */ (function () {
        function SetPaymentType(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE;
        }
        return SetPaymentType;
    }());
    var SetPaymentTypeFail = /** @class */ (function () {
        function SetPaymentTypeFail(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE_FAIL;
        }
        return SetPaymentTypeFail;
    }());
    var SetPaymentTypeSuccess = /** @class */ (function () {
        function SetPaymentTypeSuccess(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE_SUCCESS;
        }
        return SetPaymentTypeSuccess;
    }());

    var SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Schedule Replenishment Order';
    var SCHEDULE_REPLENISHMENT_ORDER_SUCCESS = '[Checkout] Schedule Replenishment Order Success';
    var SCHEDULE_REPLENISHMENT_ORDER_FAIL = '[Checkout] Schedule Replenishment Order Fail';
    var CLEAR_SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Clear Schedule Replenishment Data';
    var ScheduleReplenishmentOrder = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrder, _super);
        function ScheduleReplenishmentOrder(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER;
            return _this;
        }
        return ScheduleReplenishmentOrder;
    }(EntityLoadAction));
    var ScheduleReplenishmentOrderSuccess = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrderSuccess, _super);
        function ScheduleReplenishmentOrderSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER_SUCCESS;
            return _this;
        }
        return ScheduleReplenishmentOrderSuccess;
    }(EntitySuccessAction));
    var ScheduleReplenishmentOrderFail = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrderFail, _super);
        function ScheduleReplenishmentOrderFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER_FAIL;
            return _this;
        }
        return ScheduleReplenishmentOrderFail;
    }(EntityFailAction));
    var ClearScheduleReplenishmentOrderAction = /** @class */ (function (_super) {
        __extends(ClearScheduleReplenishmentOrderAction, _super);
        function ClearScheduleReplenishmentOrderAction() {
            var _this = _super.call(this, PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.type = CLEAR_SCHEDULE_REPLENISHMENT_ORDER;
            return _this;
        }
        return ClearScheduleReplenishmentOrderAction;
    }(EntityLoaderResetAction));

    var checkoutGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        VERIFY_ADDRESS: VERIFY_ADDRESS,
        VERIFY_ADDRESS_FAIL: VERIFY_ADDRESS_FAIL,
        VERIFY_ADDRESS_SUCCESS: VERIFY_ADDRESS_SUCCESS,
        CLEAR_ADDRESS_VERIFICATION_RESULTS: CLEAR_ADDRESS_VERIFICATION_RESULTS,
        VerifyAddress: VerifyAddress,
        VerifyAddressFail: VerifyAddressFail,
        VerifyAddressSuccess: VerifyAddressSuccess,
        ClearAddressVerificationResults: ClearAddressVerificationResults,
        LOAD_CARD_TYPES: LOAD_CARD_TYPES,
        LOAD_CARD_TYPES_FAIL: LOAD_CARD_TYPES_FAIL,
        LOAD_CARD_TYPES_SUCCESS: LOAD_CARD_TYPES_SUCCESS,
        LoadCardTypes: LoadCardTypes,
        LoadCardTypesFail: LoadCardTypesFail,
        LoadCardTypesSuccess: LoadCardTypesSuccess,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL: CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL,
        CLEAR_CHECKOUT_DELIVERY_MODE: CLEAR_CHECKOUT_DELIVERY_MODE,
        CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS: CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_MODE_FAIL: CLEAR_CHECKOUT_DELIVERY_MODE_FAIL,
        ADD_DELIVERY_ADDRESS: ADD_DELIVERY_ADDRESS,
        ADD_DELIVERY_ADDRESS_FAIL: ADD_DELIVERY_ADDRESS_FAIL,
        ADD_DELIVERY_ADDRESS_SUCCESS: ADD_DELIVERY_ADDRESS_SUCCESS,
        SET_DELIVERY_ADDRESS: SET_DELIVERY_ADDRESS,
        SET_DELIVERY_ADDRESS_FAIL: SET_DELIVERY_ADDRESS_FAIL,
        SET_DELIVERY_ADDRESS_SUCCESS: SET_DELIVERY_ADDRESS_SUCCESS,
        RESET_SET_DELIVERY_ADDRESS_PROCESS: RESET_SET_DELIVERY_ADDRESS_PROCESS,
        LOAD_SUPPORTED_DELIVERY_MODES: LOAD_SUPPORTED_DELIVERY_MODES,
        LOAD_SUPPORTED_DELIVERY_MODES_FAIL: LOAD_SUPPORTED_DELIVERY_MODES_FAIL,
        LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS,
        CLEAR_SUPPORTED_DELIVERY_MODES: CLEAR_SUPPORTED_DELIVERY_MODES,
        SET_DELIVERY_MODE: SET_DELIVERY_MODE,
        SET_DELIVERY_MODE_FAIL: SET_DELIVERY_MODE_FAIL,
        SET_DELIVERY_MODE_SUCCESS: SET_DELIVERY_MODE_SUCCESS,
        RESET_SET_DELIVERY_MODE_PROCESS: RESET_SET_DELIVERY_MODE_PROCESS,
        SET_SUPPORTED_DELIVERY_MODES: SET_SUPPORTED_DELIVERY_MODES,
        SET_SUPPORTED_DELIVERY_MODES_FAIL: SET_SUPPORTED_DELIVERY_MODES_FAIL,
        SET_SUPPORTED_DELIVERY_MODES_SUCCESS: SET_SUPPORTED_DELIVERY_MODES_SUCCESS,
        RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS: RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS,
        CREATE_PAYMENT_DETAILS: CREATE_PAYMENT_DETAILS,
        CREATE_PAYMENT_DETAILS_FAIL: CREATE_PAYMENT_DETAILS_FAIL,
        CREATE_PAYMENT_DETAILS_SUCCESS: CREATE_PAYMENT_DETAILS_SUCCESS,
        SET_PAYMENT_DETAILS: SET_PAYMENT_DETAILS,
        SET_PAYMENT_DETAILS_FAIL: SET_PAYMENT_DETAILS_FAIL,
        SET_PAYMENT_DETAILS_SUCCESS: SET_PAYMENT_DETAILS_SUCCESS,
        RESET_SET_PAYMENT_DETAILS_PROCESS: RESET_SET_PAYMENT_DETAILS_PROCESS,
        PLACE_ORDER: PLACE_ORDER,
        PLACE_ORDER_FAIL: PLACE_ORDER_FAIL,
        PLACE_ORDER_SUCCESS: PLACE_ORDER_SUCCESS,
        CLEAR_PLACE_ORDER: CLEAR_PLACE_ORDER,
        CLEAR_CHECKOUT_STEP: CLEAR_CHECKOUT_STEP,
        CLEAR_CHECKOUT_DATA: CLEAR_CHECKOUT_DATA,
        LOAD_CHECKOUT_DETAILS: LOAD_CHECKOUT_DETAILS,
        LOAD_CHECKOUT_DETAILS_FAIL: LOAD_CHECKOUT_DETAILS_FAIL,
        LOAD_CHECKOUT_DETAILS_SUCCESS: LOAD_CHECKOUT_DETAILS_SUCCESS,
        CHECKOUT_CLEAR_MISCS_DATA: CHECKOUT_CLEAR_MISCS_DATA,
        PAYMENT_PROCESS_SUCCESS: PAYMENT_PROCESS_SUCCESS,
        SET_COST_CENTER: SET_COST_CENTER,
        SET_COST_CENTER_FAIL: SET_COST_CENTER_FAIL,
        SET_COST_CENTER_SUCCESS: SET_COST_CENTER_SUCCESS,
        RESET_SET_COST_CENTER_PROCESS: RESET_SET_COST_CENTER_PROCESS,
        AddDeliveryAddress: AddDeliveryAddress,
        AddDeliveryAddressFail: AddDeliveryAddressFail,
        AddDeliveryAddressSuccess: AddDeliveryAddressSuccess,
        SetDeliveryAddress: SetDeliveryAddress,
        SetDeliveryAddressFail: SetDeliveryAddressFail,
        SetDeliveryAddressSuccess: SetDeliveryAddressSuccess,
        ResetSetDeliveryAddressProcess: ResetSetDeliveryAddressProcess,
        LoadSupportedDeliveryModes: LoadSupportedDeliveryModes,
        LoadSupportedDeliveryModesFail: LoadSupportedDeliveryModesFail,
        LoadSupportedDeliveryModesSuccess: LoadSupportedDeliveryModesSuccess,
        ResetLoadSupportedDeliveryModesProcess: ResetLoadSupportedDeliveryModesProcess,
        SetDeliveryMode: SetDeliveryMode,
        SetDeliveryModeFail: SetDeliveryModeFail,
        SetDeliveryModeSuccess: SetDeliveryModeSuccess,
        ResetSetDeliveryModeProcess: ResetSetDeliveryModeProcess,
        CreatePaymentDetails: CreatePaymentDetails,
        CreatePaymentDetailsFail: CreatePaymentDetailsFail,
        CreatePaymentDetailsSuccess: CreatePaymentDetailsSuccess,
        PaymentProcessSuccess: PaymentProcessSuccess,
        SetPaymentDetails: SetPaymentDetails,
        SetPaymentDetailsFail: SetPaymentDetailsFail,
        SetPaymentDetailsSuccess: SetPaymentDetailsSuccess,
        ResetSetPaymentDetailsProcess: ResetSetPaymentDetailsProcess,
        PlaceOrder: PlaceOrder,
        PlaceOrderFail: PlaceOrderFail,
        PlaceOrderSuccess: PlaceOrderSuccess,
        ClearPlaceOrder: ClearPlaceOrder,
        ClearSupportedDeliveryModes: ClearSupportedDeliveryModes,
        ClearCheckoutStep: ClearCheckoutStep,
        ClearCheckoutData: ClearCheckoutData,
        LoadCheckoutDetails: LoadCheckoutDetails,
        LoadCheckoutDetailsFail: LoadCheckoutDetailsFail,
        LoadCheckoutDetailsSuccess: LoadCheckoutDetailsSuccess,
        CheckoutClearMiscsData: CheckoutClearMiscsData,
        ClearCheckoutDeliveryAddress: ClearCheckoutDeliveryAddress,
        ClearCheckoutDeliveryAddressSuccess: ClearCheckoutDeliveryAddressSuccess,
        ClearCheckoutDeliveryAddressFail: ClearCheckoutDeliveryAddressFail,
        ClearCheckoutDeliveryMode: ClearCheckoutDeliveryMode,
        ClearCheckoutDeliveryModeSuccess: ClearCheckoutDeliveryModeSuccess,
        ClearCheckoutDeliveryModeFail: ClearCheckoutDeliveryModeFail,
        SetCostCenter: SetCostCenter,
        SetCostCenterFail: SetCostCenterFail,
        SetCostCenterSuccess: SetCostCenterSuccess,
        ResetSetCostCenterProcess: ResetSetCostCenterProcess,
        SET_ORDER_TYPE: SET_ORDER_TYPE,
        SetOrderType: SetOrderType,
        LOAD_PAYMENT_TYPES: LOAD_PAYMENT_TYPES,
        LOAD_PAYMENT_TYPES_FAIL: LOAD_PAYMENT_TYPES_FAIL,
        LOAD_PAYMENT_TYPES_SUCCESS: LOAD_PAYMENT_TYPES_SUCCESS,
        RESET_LOAD_PAYMENT_TYPES_PROCESS_ID: RESET_LOAD_PAYMENT_TYPES_PROCESS_ID,
        SET_PAYMENT_TYPE: SET_PAYMENT_TYPE,
        SET_PAYMENT_TYPE_FAIL: SET_PAYMENT_TYPE_FAIL,
        SET_PAYMENT_TYPE_SUCCESS: SET_PAYMENT_TYPE_SUCCESS,
        LoadPaymentTypes: LoadPaymentTypes,
        LoadPaymentTypesFail: LoadPaymentTypesFail,
        LoadPaymentTypesSuccess: LoadPaymentTypesSuccess,
        ResetLoadPaymentTypesProcess: ResetLoadPaymentTypesProcess,
        SetPaymentType: SetPaymentType,
        SetPaymentTypeFail: SetPaymentTypeFail,
        SetPaymentTypeSuccess: SetPaymentTypeSuccess,
        SCHEDULE_REPLENISHMENT_ORDER: SCHEDULE_REPLENISHMENT_ORDER,
        SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: SCHEDULE_REPLENISHMENT_ORDER_SUCCESS,
        SCHEDULE_REPLENISHMENT_ORDER_FAIL: SCHEDULE_REPLENISHMENT_ORDER_FAIL,
        CLEAR_SCHEDULE_REPLENISHMENT_ORDER: CLEAR_SCHEDULE_REPLENISHMENT_ORDER,
        ScheduleReplenishmentOrder: ScheduleReplenishmentOrder,
        ScheduleReplenishmentOrderSuccess: ScheduleReplenishmentOrderSuccess,
        ScheduleReplenishmentOrderFail: ScheduleReplenishmentOrderFail,
        ClearScheduleReplenishmentOrderAction: ClearScheduleReplenishmentOrderAction
    });

    /**
     * Indicates that a user has successfully placed an order
     */
    var OrderPlacedEvent = /** @class */ (function () {
        function OrderPlacedEvent() {
        }
        return OrderPlacedEvent;
    }());

    var CheckoutEventBuilder = /** @class */ (function () {
        function CheckoutEventBuilder(stateEventService) {
            this.stateEventService = stateEventService;
            this.register();
        }
        /**
         * Registers checkout events
         */
        CheckoutEventBuilder.prototype.register = function () {
            this.orderPlacedEvent();
        };
        /**
         * Register an order successfully placed event
         */
        CheckoutEventBuilder.prototype.orderPlacedEvent = function () {
            this.stateEventService.register({
                action: PLACE_ORDER_SUCCESS,
                event: OrderPlacedEvent,
            });
        };
        return CheckoutEventBuilder;
    }());
    CheckoutEventBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutEventBuilder_Factory() { return new CheckoutEventBuilder(i0.ɵɵinject(StateEventService)); }, token: CheckoutEventBuilder, providedIn: "root" });
    CheckoutEventBuilder.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutEventBuilder.ctorParameters = function () { return [
        { type: StateEventService }
    ]; };

    var CheckoutEventModule = /** @class */ (function () {
        function CheckoutEventModule(_checkoutEventBuilder) {
        }
        return CheckoutEventModule;
    }());
    CheckoutEventModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];
    CheckoutEventModule.ctorParameters = function () { return [
        { type: CheckoutEventBuilder }
    ]; };

    // Email Standard RFC 5322:
    var EMAIL_PATTERN = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line
    var PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\-+{};:.,]).{6,}$/;

    var getMultiCartState = i1$2.createFeatureSelector(MULTI_CART_FEATURE);
    var ɵ0$a = function (state) { return state.carts; };
    var getMultiCartEntities = i1$2.createSelector(getMultiCartState, ɵ0$a);
    var getCartEntitySelectorFactory = function (cartId) {
        return i1$2.createSelector(getMultiCartEntities, function (state) { return entityProcessesLoaderStateSelector(state, cartId); });
    };
    var getCartSelectorFactory = function (cartId) {
        return i1$2.createSelector(getMultiCartEntities, function (state) { return entityValueSelector(state, cartId); });
    };
    var getCartIsStableSelectorFactory = function (cartId) {
        return i1$2.createSelector(getMultiCartEntities, function (state) { return entityIsStableSelector(state, cartId); });
    };
    var getCartHasPendingProcessesSelectorFactory = function (cartId) {
        return i1$2.createSelector(getMultiCartEntities, function (state) { return entityHasPendingProcessesSelector(state, cartId); });
    };
    var getCartEntriesSelectorFactory = function (cartId) {
        return i1$2.createSelector(getCartSelectorFactory(cartId), function (state) {
            return state && state.entries ? state.entries : [];
        });
    };
    var getCartEntrySelectorFactory = function (cartId, productCode) {
        return i1$2.createSelector(getCartEntriesSelectorFactory(cartId), function (state) {
            return state
                ? state.find(function (entry) { return entry.product.code === productCode; })
                : undefined;
        });
    };
    var ɵ1$6 = function (state) { return state.active; };
    var getActiveCartId = i1$2.createSelector(getMultiCartState, ɵ1$6);
    var ɵ2$3 = function (state) { return state.wishList; };
    var getWishListId = i1$2.createSelector(getMultiCartState, ɵ2$3);

    var multiCartGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getMultiCartState: getMultiCartState,
        getMultiCartEntities: getMultiCartEntities,
        getCartEntitySelectorFactory: getCartEntitySelectorFactory,
        getCartSelectorFactory: getCartSelectorFactory,
        getCartIsStableSelectorFactory: getCartIsStableSelectorFactory,
        getCartHasPendingProcessesSelectorFactory: getCartHasPendingProcessesSelectorFactory,
        getCartEntriesSelectorFactory: getCartEntriesSelectorFactory,
        getCartEntrySelectorFactory: getCartEntrySelectorFactory,
        getActiveCartId: getActiveCartId,
        getWishListId: getWishListId,
        ɵ0: ɵ0$a,
        ɵ1: ɵ1$6,
        ɵ2: ɵ2$3
    });

    /**
     * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.
     */
    function getCartIdByUserId(cart, userId) {
        if (userId === OCC_USER_ID_ANONYMOUS) {
            return cart.guid;
        }
        return cart.code;
    }
    /**
     * Check if cart is selective (save for later) based on id.
     */
    function isSelectiveCart(cartId) {
        if (cartId === void 0) { cartId = ''; }
        return cartId.startsWith('selectivecart');
    }
    /**
     * Check if the returned error is of type notFound.
     *
     * We additionally check if the cart is not a selective cart.
     * For selective cart this error can happen only when extension is disabled.
     * It should never happen, because in that case, selective cart should also be disabled in our configuration.
     * However if that happens we want to handle these errors silently.
     */
    function isCartNotFoundError(error) {
        return (error.reason === 'notFound' &&
            error.subjectType === 'cart' &&
            !isSelectiveCart(error.subject));
    }
    /**
     * Compute wishlist cart name for customer.
     */
    function getWishlistName(customerId) {
        return "wishlist" + customerId;
    }
    /**
     * What is a temporary cart?
     * - frontend only cart entity!
     * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)
     *
     * Why we need temporary carts?
     * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)
     * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)
     * - cart identifiers are created in the backend, so those are only known after cart is created
     *
     * Temporary cart life cycle
     * - create cart method invoked
     * - new `temp-${uuid}` cart is created with `loading=true` state
     * - backend returns created cart
     * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)
     * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)
     * - in next tick temporary cart is removed
     */
    function isTempCartId(cartId) {
        return cartId.startsWith('temp-');
    }

    var CART_ADD_ENTRY = '[Cart-entry] Add Entry';
    var CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';
    var CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';
    var CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';
    var CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';
    var CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';
    var CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';
    var CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';
    var CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';
    var CartAddEntry = /** @class */ (function (_super) {
        __extends(CartAddEntry, _super);
        function CartAddEntry(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY;
            return _this;
        }
        return CartAddEntry;
    }(EntityProcessesIncrementAction));
    var CartAddEntrySuccess = /** @class */ (function (_super) {
        __extends(CartAddEntrySuccess, _super);
        function CartAddEntrySuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY_SUCCESS;
            return _this;
        }
        return CartAddEntrySuccess;
    }(EntityProcessesDecrementAction));
    var CartAddEntryFail = /** @class */ (function (_super) {
        __extends(CartAddEntryFail, _super);
        function CartAddEntryFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_ADD_ENTRY_FAIL;
            return _this;
        }
        return CartAddEntryFail;
    }(EntityProcessesDecrementAction));
    var CartRemoveEntry = /** @class */ (function (_super) {
        __extends(CartRemoveEntry, _super);
        function CartRemoveEntry(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY;
            return _this;
        }
        return CartRemoveEntry;
    }(EntityProcessesIncrementAction));
    var CartRemoveEntrySuccess = /** @class */ (function (_super) {
        __extends(CartRemoveEntrySuccess, _super);
        function CartRemoveEntrySuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY_SUCCESS;
            return _this;
        }
        return CartRemoveEntrySuccess;
    }(EntityProcessesDecrementAction));
    var CartRemoveEntryFail = /** @class */ (function (_super) {
        __extends(CartRemoveEntryFail, _super);
        function CartRemoveEntryFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_ENTRY_FAIL;
            return _this;
        }
        return CartRemoveEntryFail;
    }(EntityProcessesDecrementAction));
    var CartUpdateEntry = /** @class */ (function (_super) {
        __extends(CartUpdateEntry, _super);
        function CartUpdateEntry(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY;
            return _this;
        }
        return CartUpdateEntry;
    }(EntityProcessesIncrementAction));
    var CartUpdateEntrySuccess = /** @class */ (function (_super) {
        __extends(CartUpdateEntrySuccess, _super);
        function CartUpdateEntrySuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY_SUCCESS;
            return _this;
        }
        return CartUpdateEntrySuccess;
    }(EntityProcessesDecrementAction));
    var CartUpdateEntryFail = /** @class */ (function (_super) {
        __extends(CartUpdateEntryFail, _super);
        function CartUpdateEntryFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_UPDATE_ENTRY_FAIL;
            return _this;
        }
        return CartUpdateEntryFail;
    }(EntityProcessesDecrementAction));

    var CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';
    var CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';
    var CART_ADD_VOUCHER_SUCCESS = '[Cart-voucher] Add Cart Voucher Success';
    var CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';
    var CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';
    var CART_REMOVE_VOUCHER_FAIL = '[Cart-voucher] Remove Cart Voucher Fail';
    var CART_REMOVE_VOUCHER_SUCCESS = '[Cart-voucher] Remove Cart Voucher Success';
    // Adding cart voucher actions
    var CartAddVoucher = /** @class */ (function (_super) {
        __extends(CartAddVoucher, _super);
        function CartAddVoucher(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER;
            return _this;
        }
        return CartAddVoucher;
    }(EntityLoadAction));
    var CartAddVoucherFail = /** @class */ (function (_super) {
        __extends(CartAddVoucherFail, _super);
        function CartAddVoucherFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER_FAIL;
            return _this;
        }
        return CartAddVoucherFail;
    }(EntityFailAction));
    var CartAddVoucherSuccess = /** @class */ (function (_super) {
        __extends(CartAddVoucherSuccess, _super);
        function CartAddVoucherSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CART_ADD_VOUCHER_SUCCESS;
            return _this;
        }
        return CartAddVoucherSuccess;
    }(EntitySuccessAction));
    // TODO(#7241): Remove when switching to event system for vouchers
    /**
     * Resets add voucher process
     *
     * @deprecated since 2.0
     */
    var CartResetAddVoucher = /** @class */ (function (_super) {
        __extends(CartResetAddVoucher, _super);
        function CartResetAddVoucher() {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID) || this;
            _this.type = CART_RESET_ADD_VOUCHER;
            return _this;
        }
        return CartResetAddVoucher;
    }(EntityLoaderResetAction));
    // Deleting cart voucher
    var CartRemoveVoucher = /** @class */ (function (_super) {
        __extends(CartRemoveVoucher, _super);
        function CartRemoveVoucher(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER;
            return _this;
        }
        return CartRemoveVoucher;
    }(EntityProcessesIncrementAction));
    var CartRemoveVoucherFail = /** @class */ (function (_super) {
        __extends(CartRemoveVoucherFail, _super);
        function CartRemoveVoucherFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER_FAIL;
            return _this;
        }
        return CartRemoveVoucherFail;
    }(EntityProcessesDecrementAction));
    var CartRemoveVoucherSuccess = /** @class */ (function (_super) {
        __extends(CartRemoveVoucherSuccess, _super);
        function CartRemoveVoucherSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CART_REMOVE_VOUCHER_SUCCESS;
            return _this;
        }
        return CartRemoveVoucherSuccess;
    }(EntityProcessesDecrementAction));

    var CREATE_CART = '[Cart] Create Cart';
    var CREATE_CART_FAIL = '[Cart] Create Cart Fail';
    var CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
    var LOAD_CART = '[Cart] Load Cart';
    var LOAD_CART_FAIL = '[Cart] Load Cart Fail';
    var LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
    var ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
    var ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
    var ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
    var MERGE_CART = '[Cart] Merge Cart';
    var MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
    var RESET_CART_DETAILS = '[Cart] Reset Cart Details';
    var REMOVE_CART = '[Cart] Remove Cart';
    var DELETE_CART = '[Cart] Delete Cart';
    var DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';
    var DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
    var CreateCart = /** @class */ (function (_super) {
        __extends(CreateCart, _super);
        function CreateCart(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = CREATE_CART;
            return _this;
        }
        return CreateCart;
    }(EntityLoadAction));
    var CreateCartFail = /** @class */ (function (_super) {
        __extends(CreateCartFail, _super);
        function CreateCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = CREATE_CART_FAIL;
            return _this;
        }
        return CreateCartFail;
    }(EntityFailAction));
    var CreateCartSuccess = /** @class */ (function (_super) {
        __extends(CreateCartSuccess, _super);
        function CreateCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CREATE_CART_SUCCESS;
            return _this;
        }
        return CreateCartSuccess;
    }(EntitySuccessAction));
    var AddEmailToCart = /** @class */ (function (_super) {
        __extends(AddEmailToCart, _super);
        function AddEmailToCart(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART;
            return _this;
        }
        return AddEmailToCart;
    }(EntityProcessesIncrementAction));
    var AddEmailToCartFail = /** @class */ (function (_super) {
        __extends(AddEmailToCartFail, _super);
        function AddEmailToCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART_FAIL;
            return _this;
        }
        return AddEmailToCartFail;
    }(EntityProcessesDecrementAction));
    var AddEmailToCartSuccess = /** @class */ (function (_super) {
        __extends(AddEmailToCartSuccess, _super);
        function AddEmailToCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = ADD_EMAIL_TO_CART_SUCCESS;
            return _this;
        }
        return AddEmailToCartSuccess;
    }(EntityProcessesDecrementAction));
    var LoadCart = /** @class */ (function (_super) {
        __extends(LoadCart, _super);
        function LoadCart(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = LOAD_CART;
            return _this;
        }
        return LoadCart;
    }(EntityLoadAction));
    var LoadCartFail = /** @class */ (function (_super) {
        __extends(LoadCartFail, _super);
        function LoadCartFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_CART_FAIL;
            return _this;
        }
        return LoadCartFail;
    }(EntityFailAction));
    var LoadCartSuccess = /** @class */ (function (_super) {
        __extends(LoadCartSuccess, _super);
        function LoadCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = LOAD_CART_SUCCESS;
            return _this;
        }
        return LoadCartSuccess;
    }(EntitySuccessAction));
    var MergeCart = /** @class */ (function () {
        function MergeCart(payload) {
            this.payload = payload;
            this.type = MERGE_CART;
        }
        return MergeCart;
    }());
    var MergeCartSuccess = /** @class */ (function (_super) {
        __extends(MergeCartSuccess, _super);
        function MergeCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.oldCartId) || this;
            _this.payload = payload;
            _this.type = MERGE_CART_SUCCESS;
            return _this;
        }
        return MergeCartSuccess;
    }(EntityRemoveAction));
    /**
     * On site context change we want to keep current list of entities, but we want to clear the value and flags.
     * With ProcessesLoaderResetAction we run it on every entity of this type.
     */
    var ResetCartDetails = /** @class */ (function (_super) {
        __extends(ResetCartDetails, _super);
        function ResetCartDetails() {
            var _this = _super.call(this, MULTI_CART_DATA) || this;
            _this.type = RESET_CART_DETAILS;
            return _this;
        }
        return ResetCartDetails;
    }(ProcessesLoaderResetAction));
    /**
     * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.
     * For removing particular cart in both places use DeleteCart actions.
     */
    var RemoveCart = /** @class */ (function (_super) {
        __extends(RemoveCart, _super);
        function RemoveCart(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = REMOVE_CART;
            return _this;
        }
        return RemoveCart;
    }(EntityRemoveAction));
    var DeleteCart = /** @class */ (function () {
        function DeleteCart(payload) {
            this.payload = payload;
            this.type = DELETE_CART;
        }
        return DeleteCart;
    }());
    var DeleteCartSuccess = /** @class */ (function (_super) {
        __extends(DeleteCartSuccess, _super);
        function DeleteCartSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = DELETE_CART_SUCCESS;
            return _this;
        }
        return DeleteCartSuccess;
    }(EntityRemoveAction));
    var DeleteCartFail = /** @class */ (function () {
        function DeleteCartFail(payload) {
            this.payload = payload;
            this.type = DELETE_CART_FAIL;
        }
        return DeleteCartFail;
    }());

    var SET_TEMP_CART = '[Cart] Set Temp Cart';
    var CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';
    var CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';
    var SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';
    var CLEAR_CART_STATE = '[Cart] Clear Cart State';
    /**
     * To keep track of cart creation process we use cart with `temp-${uuid}` id.
     * After creating cart we switch to entity with `code` or `guid`.
     * We need `temp-${uuid}` cart entities for loading/error state.
     */
    var SetTempCart = /** @class */ (function (_super) {
        __extends(SetTempCart, _super);
        function SetTempCart(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId, payload.cart) || this;
            _this.payload = payload;
            _this.type = SET_TEMP_CART;
            return _this;
        }
        return SetTempCart;
    }(EntitySuccessAction));
    // TODO(#7241): Remove when there won't be any usage
    /**
     * Increases process counter on cart entities
     * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.
     * @deprecated since 2.0
     */
    var CartProcessesIncrement = /** @class */ (function (_super) {
        __extends(CartProcessesIncrement, _super);
        function CartProcessesIncrement(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_PROCESSES_INCREMENT;
            return _this;
        }
        return CartProcessesIncrement;
    }(EntityProcessesIncrementAction));
    // TODO(#7241): Remove when there won't be any usage
    /**
     * Decrement process counter on cart entities
     * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.
     * @deprecated since 2.0
     */
    var CartProcessesDecrement = /** @class */ (function (_super) {
        __extends(CartProcessesDecrement, _super);
        function CartProcessesDecrement(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload) || this;
            _this.payload = payload;
            _this.type = CART_PROCESSES_DECREMENT;
            return _this;
        }
        return CartProcessesDecrement;
    }(EntityProcessesDecrementAction));
    /**
     * Only sets active cart property with id of active cart. Then services take care of loading that cart.
     */
    var SetActiveCartId = /** @class */ (function () {
        function SetActiveCartId(payload) {
            this.payload = payload;
            this.type = SET_ACTIVE_CART_ID;
        }
        return SetActiveCartId;
    }());
    /**
     * Clear whole cart store state: all entities + reset rest of the cart state.
     */
    var ClearCartState = /** @class */ (function (_super) {
        __extends(ClearCartState, _super);
        function ClearCartState() {
            var _this = _super.call(this, MULTI_CART_DATA) || this;
            _this.type = CLEAR_CART_STATE;
            return _this;
        }
        return ClearCartState;
    }(EntityRemoveAllAction));

    var CREATE_WISH_LIST = '[Wish List] Create Wish List';
    var CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';
    var CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';
    var LOAD_WISH_LIST = '[Wish List] Load Wish List';
    var LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';
    var LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';
    var RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';
    var CreateWishList = /** @class */ (function () {
        function CreateWishList(payload) {
            this.payload = payload;
            this.type = CREATE_WISH_LIST;
        }
        return CreateWishList;
    }());
    var CreateWishListSuccess = /** @class */ (function (_super) {
        __extends(CreateWishListSuccess, _super);
        function CreateWishListSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId)) || this;
            _this.payload = payload;
            _this.type = CREATE_WISH_LIST_SUCCESS;
            return _this;
        }
        return CreateWishListSuccess;
    }(EntitySuccessAction));
    var CreateWishListFail = /** @class */ (function (_super) {
        __extends(CreateWishListFail, _super);
        function CreateWishListFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_WISH_LIST_FAIL;
            return _this;
        }
        return CreateWishListFail;
    }(EntityFailAction));
    var LoadWishList = /** @class */ (function (_super) {
        __extends(LoadWishList, _super);
        function LoadWishList(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
            _this.payload = payload;
            _this.type = LOAD_WISH_LIST;
            return _this;
        }
        return LoadWishList;
    }(EntityLoadAction));
    var LoadWishListSuccess = /** @class */ (function (_super) {
        __extends(LoadWishListSuccess, _super);
        function LoadWishListSuccess(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = LOAD_WISH_LIST_SUCCESS;
            return _this;
        }
        return LoadWishListSuccess;
    }(EntitySuccessAction));
    var LoadWishListFail = /** @class */ (function (_super) {
        __extends(LoadWishListFail, _super);
        function LoadWishListFail(payload) {
            var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_WISH_LIST_FAIL;
            return _this;
        }
        return LoadWishListFail;
    }(EntityFailAction));

    var cartGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CART_ADD_ENTRY: CART_ADD_ENTRY,
        CART_ADD_ENTRY_SUCCESS: CART_ADD_ENTRY_SUCCESS,
        CART_ADD_ENTRY_FAIL: CART_ADD_ENTRY_FAIL,
        CART_REMOVE_ENTRY: CART_REMOVE_ENTRY,
        CART_REMOVE_ENTRY_SUCCESS: CART_REMOVE_ENTRY_SUCCESS,
        CART_REMOVE_ENTRY_FAIL: CART_REMOVE_ENTRY_FAIL,
        CART_UPDATE_ENTRY: CART_UPDATE_ENTRY,
        CART_UPDATE_ENTRY_SUCCESS: CART_UPDATE_ENTRY_SUCCESS,
        CART_UPDATE_ENTRY_FAIL: CART_UPDATE_ENTRY_FAIL,
        CartAddEntry: CartAddEntry,
        CartAddEntrySuccess: CartAddEntrySuccess,
        CartAddEntryFail: CartAddEntryFail,
        CartRemoveEntry: CartRemoveEntry,
        CartRemoveEntrySuccess: CartRemoveEntrySuccess,
        CartRemoveEntryFail: CartRemoveEntryFail,
        CartUpdateEntry: CartUpdateEntry,
        CartUpdateEntrySuccess: CartUpdateEntrySuccess,
        CartUpdateEntryFail: CartUpdateEntryFail,
        CART_ADD_VOUCHER: CART_ADD_VOUCHER,
        CART_ADD_VOUCHER_FAIL: CART_ADD_VOUCHER_FAIL,
        CART_ADD_VOUCHER_SUCCESS: CART_ADD_VOUCHER_SUCCESS,
        CART_RESET_ADD_VOUCHER: CART_RESET_ADD_VOUCHER,
        CART_REMOVE_VOUCHER: CART_REMOVE_VOUCHER,
        CART_REMOVE_VOUCHER_FAIL: CART_REMOVE_VOUCHER_FAIL,
        CART_REMOVE_VOUCHER_SUCCESS: CART_REMOVE_VOUCHER_SUCCESS,
        CartAddVoucher: CartAddVoucher,
        CartAddVoucherFail: CartAddVoucherFail,
        CartAddVoucherSuccess: CartAddVoucherSuccess,
        CartResetAddVoucher: CartResetAddVoucher,
        CartRemoveVoucher: CartRemoveVoucher,
        CartRemoveVoucherFail: CartRemoveVoucherFail,
        CartRemoveVoucherSuccess: CartRemoveVoucherSuccess,
        CREATE_CART: CREATE_CART,
        CREATE_CART_FAIL: CREATE_CART_FAIL,
        CREATE_CART_SUCCESS: CREATE_CART_SUCCESS,
        LOAD_CART: LOAD_CART,
        LOAD_CART_FAIL: LOAD_CART_FAIL,
        LOAD_CART_SUCCESS: LOAD_CART_SUCCESS,
        ADD_EMAIL_TO_CART: ADD_EMAIL_TO_CART,
        ADD_EMAIL_TO_CART_FAIL: ADD_EMAIL_TO_CART_FAIL,
        ADD_EMAIL_TO_CART_SUCCESS: ADD_EMAIL_TO_CART_SUCCESS,
        MERGE_CART: MERGE_CART,
        MERGE_CART_SUCCESS: MERGE_CART_SUCCESS,
        RESET_CART_DETAILS: RESET_CART_DETAILS,
        REMOVE_CART: REMOVE_CART,
        DELETE_CART: DELETE_CART,
        DELETE_CART_SUCCESS: DELETE_CART_SUCCESS,
        DELETE_CART_FAIL: DELETE_CART_FAIL,
        CreateCart: CreateCart,
        CreateCartFail: CreateCartFail,
        CreateCartSuccess: CreateCartSuccess,
        AddEmailToCart: AddEmailToCart,
        AddEmailToCartFail: AddEmailToCartFail,
        AddEmailToCartSuccess: AddEmailToCartSuccess,
        LoadCart: LoadCart,
        LoadCartFail: LoadCartFail,
        LoadCartSuccess: LoadCartSuccess,
        MergeCart: MergeCart,
        MergeCartSuccess: MergeCartSuccess,
        ResetCartDetails: ResetCartDetails,
        RemoveCart: RemoveCart,
        DeleteCart: DeleteCart,
        DeleteCartSuccess: DeleteCartSuccess,
        DeleteCartFail: DeleteCartFail,
        SET_TEMP_CART: SET_TEMP_CART,
        CART_PROCESSES_INCREMENT: CART_PROCESSES_INCREMENT,
        CART_PROCESSES_DECREMENT: CART_PROCESSES_DECREMENT,
        SET_ACTIVE_CART_ID: SET_ACTIVE_CART_ID,
        CLEAR_CART_STATE: CLEAR_CART_STATE,
        SetTempCart: SetTempCart,
        CartProcessesIncrement: CartProcessesIncrement,
        CartProcessesDecrement: CartProcessesDecrement,
        SetActiveCartId: SetActiveCartId,
        ClearCartState: ClearCartState,
        CREATE_WISH_LIST: CREATE_WISH_LIST,
        CREATE_WISH_LIST_FAIL: CREATE_WISH_LIST_FAIL,
        CREATE_WISH_LIST_SUCCESS: CREATE_WISH_LIST_SUCCESS,
        LOAD_WISH_LIST: LOAD_WISH_LIST,
        LOAD_WISH_LIST_SUCCESS: LOAD_WISH_LIST_SUCCESS,
        LOAD_WISH_LIST_FAIL: LOAD_WISH_LIST_FAIL,
        RESET_WISH_LIST_DETAILS: RESET_WISH_LIST_DETAILS,
        CreateWishList: CreateWishList,
        CreateWishListSuccess: CreateWishListSuccess,
        CreateWishListFail: CreateWishListFail,
        LoadWishList: LoadWishList,
        LoadWishListSuccess: LoadWishListSuccess,
        LoadWishListFail: LoadWishListFail
    });

    var MultiCartService = /** @class */ (function () {
        function MultiCartService(store) {
            this.store = store;
        }
        /**
         * Returns cart from store as an observable
         *
         * @param cartId
         */
        MultiCartService.prototype.getCart = function (cartId) {
            return this.store.pipe(i1$2.select(getCartSelectorFactory(cartId)));
        };
        /**
         * Returns cart entity from store (cart with loading, error, success flags) as an observable
         *
         * @param cartId
         */
        MultiCartService.prototype.getCartEntity = function (cartId) {
            return this.store.pipe(i1$2.select(getCartEntitySelectorFactory(cartId)));
        };
        /**
         * Returns true when there are no operations on that in progress and it is not currently loading
         *
         * @param cartId
         */
        MultiCartService.prototype.isStable = function (cartId) {
            return this.store.pipe(i1$2.select(getCartIsStableSelectorFactory(cartId)), 
            // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.
            // This flickering should only be avoided when switching from false to true
            // Start of loading should be showed instantly (no debounce)
            // Extra actions are only dispatched after some loading
            operators.debounce(function (isStable) { return (isStable ? rxjs.timer(0) : rxjs.EMPTY); }), operators.distinctUntilChanged());
        };
        /**
         * Simple random temp cart id generator
         */
        MultiCartService.prototype.generateTempCartId = function () {
            var pseudoUuid = Math.random().toString(36).substr(2, 9);
            return "temp-" + pseudoUuid;
        };
        /**
         * Create or merge cart
         *
         * @param params Object with userId, oldCartId, toMergeCartGuid and extraData
         */
        MultiCartService.prototype.createCart = function (_a) {
            var userId = _a.userId, oldCartId = _a.oldCartId, toMergeCartGuid = _a.toMergeCartGuid, extraData = _a.extraData;
            // to support creating multiple carts at the same time we need to use different entity for every process
            // simple random uuid generator is used here for entity names
            var tempCartId = this.generateTempCartId();
            this.store.dispatch(new CreateCart({
                extraData: extraData,
                userId: userId,
                oldCartId: oldCartId,
                toMergeCartGuid: toMergeCartGuid,
                tempCartId: tempCartId,
            }));
            return this.getCartEntity(tempCartId);
        };
        /**
         * Merge provided cart to current user cart
         *
         * @param params Object with userId, cartId and extraData
         */
        MultiCartService.prototype.mergeToCurrentCart = function (_a) {
            var userId = _a.userId, cartId = _a.cartId, extraData = _a.extraData;
            var tempCartId = this.generateTempCartId();
            this.store.dispatch(new MergeCart({
                userId: userId,
                cartId: cartId,
                extraData: extraData,
                tempCartId: tempCartId,
            }));
        };
        /**
         * Load cart
         *
         * @param params Object with userId, cartId and extraData
         */
        MultiCartService.prototype.loadCart = function (_a) {
            var cartId = _a.cartId, userId = _a.userId, extraData = _a.extraData;
            this.store.dispatch(new LoadCart({
                userId: userId,
                cartId: cartId,
                extraData: extraData,
            }));
        };
        /**
         * Get cart entries as an observable
         * @param cartId
         */
        MultiCartService.prototype.getEntries = function (cartId) {
            return this.store.pipe(i1$2.select(getCartEntriesSelectorFactory(cartId)));
        };
        /**
         * Get last entry for specific product code from cart.
         * Needed to cover processes where multiple entries can share the same product code
         * (e.g. promotions or configurable products)
         *
         * @param cartId
         * @param productCode
         */
        MultiCartService.prototype.getLastEntry = function (cartId, productCode) {
            return this.store.pipe(i1$2.select(getCartEntriesSelectorFactory(cartId)), operators.map(function (entries) {
                var filteredEntries = entries.filter(function (entry) { return entry.product.code === productCode; });
                return filteredEntries
                    ? filteredEntries[filteredEntries.length - 1]
                    : undefined;
            }));
        };
        /**
         * Add entry to cart
         *
         * @param userId
         * @param cartId
         * @param productCode
         * @param quantity
         */
        MultiCartService.prototype.addEntry = function (userId, cartId, productCode, quantity) {
            this.store.dispatch(new CartAddEntry({
                userId: userId,
                cartId: cartId,
                productCode: productCode,
                quantity: quantity,
            }));
        };
        /**
         * Add multiple entries to cart
         *
         * @param userId
         * @param cartId
         * @param products Array with items (productCode and quantity)
         */
        MultiCartService.prototype.addEntries = function (userId, cartId, products) {
            var _this = this;
            products.forEach(function (product) {
                _this.store.dispatch(new CartAddEntry({
                    userId: userId,
                    cartId: cartId,
                    productCode: product.productCode,
                    quantity: product.quantity,
                }));
            });
        };
        /**
         * Remove entry from cart
         *
         * @param userId
         * @param cartId
         * @param entryNumber
         */
        MultiCartService.prototype.removeEntry = function (userId, cartId, entryNumber) {
            this.store.dispatch(new CartRemoveEntry({
                userId: userId,
                cartId: cartId,
                entryNumber: "" + entryNumber,
            }));
        };
        /**
         * Update entry in cart. For quantity = 0 it removes entry
         *
         * @param userId
         * @param cartId
         * @param entryNumber
         * @param quantity
         */
        MultiCartService.prototype.updateEntry = function (userId, cartId, entryNumber, quantity) {
            if (quantity > 0) {
                this.store.dispatch(new CartUpdateEntry({
                    userId: userId,
                    cartId: cartId,
                    entryNumber: "" + entryNumber,
                    quantity: quantity,
                }));
            }
            else {
                this.removeEntry(userId, cartId, entryNumber);
            }
        };
        /**
         * Get first entry from cart matching the specified product code
         *
         * @param cartId
         * @param productCode
         */
        MultiCartService.prototype.getEntry = function (cartId, productCode) {
            return this.store.pipe(i1$2.select(getCartEntrySelectorFactory(cartId, productCode)));
        };
        /**
         * Assign email to the cart
         *
         * @param cartId
         * @param userId
         * @param email
         */
        MultiCartService.prototype.assignEmail = function (cartId, userId, email) {
            this.store.dispatch(new AddEmailToCart({
                userId: userId,
                cartId: cartId,
                email: email,
            }));
        };
        /**
         * Delete cart
         *
         * @param cartId
         * @param userId
         */
        MultiCartService.prototype.deleteCart = function (cartId, userId) {
            this.store.dispatch(new DeleteCart({
                userId: userId,
                cartId: cartId,
            }));
        };
        return MultiCartService;
    }());
    MultiCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultiCartService_Factory() { return new MultiCartService(i0.ɵɵinject(i1$2.Store)); }, token: MultiCartService, providedIn: "root" });
    MultiCartService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    MultiCartService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    var ActiveCartService = /** @class */ (function () {
        function ActiveCartService(store, userIdService, multiCartService) {
            var _this = this;
            this.store = store;
            this.userIdService = userIdService;
            this.multiCartService = multiCartService;
            this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
            this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
            this.subscription = new rxjs.Subscription();
            this.userId = OCC_USER_ID_ANONYMOUS;
            this.activeCartId$ = this.store.pipe(i1$2.select(getActiveCartId), operators.filter(function (cartId) { return typeof cartId !== 'undefined'; }), operators.map(function (cartId) {
                if (!cartId) {
                    return OCC_CART_ID_CURRENT;
                }
                return cartId;
            }));
            this.cartSelector$ = this.activeCartId$.pipe(operators.switchMap(function (cartId) { return _this.multiCartService.getCartEntity(cartId); }));
            this.initActiveCart();
        }
        ActiveCartService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        ActiveCartService.prototype.initActiveCart = function () {
            var _this = this;
            this.subscription.add(rxjs.combineLatest([
                this.userIdService.getUserId(),
                this.activeCartId$.pipe(operators.auditTime(0)),
            ])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 1), userId = _b[0];
                return userId;
            }))
                .subscribe(function (userId) {
                _this.userId = userId;
                if (_this.userId !== OCC_USER_ID_ANONYMOUS) {
                    if (_this.isJustLoggedIn(userId)) {
                        _this.loadOrMerge(_this.cartId);
                    }
                }
                _this.previousUserId = userId;
            }));
            this.subscription.add(this.activeCartId$.subscribe(function (cartId) {
                _this.cartId = cartId;
            }));
            this.activeCart$ = this.cartSelector$.pipe(operators.withLatestFrom(this.activeCartId$), operators.map(function (_a) {
                var _b = __read(_a, 2), cartEntity = _b[0], activeCartId = _b[1];
                return {
                    cart: cartEntity.value,
                    cartId: activeCartId,
                    isStable: !cartEntity.loading && cartEntity.processesCount === 0,
                    loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
                };
            }), 
            // we want to emit empty carts even if those are not stable
            // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete
            // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart
            operators.filter(function (_a) {
                var isStable = _a.isStable, cart = _a.cart;
                return isStable || _this.isEmpty(cart);
            }), operators.tap(function (_a) {
                var cart = _a.cart, cartId = _a.cartId, loaded = _a.loaded, isStable = _a.isStable;
                if (isStable &&
                    _this.isEmpty(cart) &&
                    !loaded &&
                    !isTempCartId(cartId)) {
                    _this.load(cartId);
                }
            }), operators.map(function (_a) {
                var cart = _a.cart;
                return (cart ? cart : {});
            }), operators.tap(function (cart) {
                if (cart) {
                    _this.cartUser = cart.user;
                }
            }), operators.distinctUntilChanged(), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Returns active cart
         */
        ActiveCartService.prototype.getActive = function () {
            return this.activeCart$;
        };
        /**
         * Returns active cart id
         */
        ActiveCartService.prototype.getActiveCartId = function () {
            var _this = this;
            return this.activeCart$.pipe(operators.map(function (cart) { return getCartIdByUserId(cart, _this.userId); }), operators.distinctUntilChanged());
        };
        /**
         * Returns cart entries
         */
        ActiveCartService.prototype.getEntries = function () {
            var _this = this;
            return this.activeCartId$.pipe(operators.switchMap(function (cartId) { return _this.multiCartService.getEntries(cartId); }), operators.distinctUntilChanged());
        };
        /**
         * Returns last cart entry for provided product code.
         * Needed to cover processes where multiple entries can share the same product code
         * (e.g. promotions or configurable products)
         *
         * @param productCode
         */
        ActiveCartService.prototype.getLastEntry = function (productCode) {
            var _this = this;
            return this.activeCartId$.pipe(operators.switchMap(function (cartId) { return _this.multiCartService.getLastEntry(cartId, productCode); }), operators.distinctUntilChanged());
        };
        /**
         * Returns cart loading state
         */
        ActiveCartService.prototype.getLoading = function () {
            return this.cartSelector$.pipe(operators.map(function (cartEntity) { return cartEntity.loading; }), operators.distinctUntilChanged());
        };
        /**
         * Returns true when cart is stable (not loading and not pending processes on cart)
         */
        ActiveCartService.prototype.isStable = function () {
            var _this = this;
            // Debounce is used here, to avoid flickering when we switch between different cart entities.
            // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.
            // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.
            // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.
            return this.activeCartId$.pipe(operators.switchMap(function (cartId) { return _this.multiCartService.isStable(cartId); }), operators.debounce(function (state) { return (state ? rxjs.timer(0) : rxjs.EMPTY); }), operators.distinctUntilChanged());
        };
        ActiveCartService.prototype.loadOrMerge = function (cartId) {
            // for login user, whenever there's an existing cart, we will load the user
            // current cart and merge it into the existing cart
            if (!cartId || cartId === OCC_CART_ID_CURRENT) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: OCC_CART_ID_CURRENT,
                    extraData: {
                        active: true,
                    },
                });
            }
            else if (this.isGuestCart()) {
                this.guestCartMerge(cartId);
            }
            else if (this.userId !== this.previousUserId &&
                this.userId !== OCC_USER_ID_ANONYMOUS &&
                this.previousUserId !== OCC_USER_ID_ANONYMOUS) {
                // This case covers the case when you are logged in and then asm user logs in and you don't want to merge, but only load emulated user cart
                // Similarly when you are logged in as asm user and you logout and want to resume previous user session
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: cartId,
                    extraData: {
                        active: true,
                    },
                });
            }
            else {
                this.multiCartService.mergeToCurrentCart({
                    userId: this.userId,
                    cartId: cartId,
                    extraData: {
                        active: true,
                    },
                });
            }
        };
        ActiveCartService.prototype.load = function (cartId) {
            if (this.userId !== OCC_USER_ID_ANONYMOUS) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: cartId ? cartId : OCC_CART_ID_CURRENT,
                    extraData: {
                        active: true,
                    },
                });
            }
            else if (cartId && cartId !== OCC_CART_ID_CURRENT) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: cartId,
                    extraData: {
                        active: true,
                    },
                });
            }
        };
        ActiveCartService.prototype.addEntriesGuestMerge = function (cartEntries) {
            var _this = this;
            var entriesToAdd = cartEntries.map(function (entry) { return ({
                productCode: entry.product.code,
                quantity: entry.quantity,
            }); });
            this.requireLoadedCartForGuestMerge().subscribe(function (cartState) {
                _this.multiCartService.addEntries(_this.userId, getCartIdByUserId(cartState.value, _this.userId), entriesToAdd);
            });
        };
        ActiveCartService.prototype.requireLoadedCartForGuestMerge = function () {
            var _this = this;
            return this.requireLoadedCart(this.cartSelector$.pipe(operators.filter(function () { return !_this.isGuestCart(); })));
        };
        ActiveCartService.prototype.isCartCreating = function (cartState) {
            // cart creating is always represented with loading flags
            // when all loading flags are false it means that we restored wrong cart id
            // could happen on context change or reload right in the middle on cart create call
            return (isTempCartId(this.cartId) &&
                (cartState.loading || cartState.success || cartState.error));
        };
        ActiveCartService.prototype.requireLoadedCart = function (customCartSelector$) {
            var _this = this;
            // For guest cart merge we want to filter guest cart in the whole stream
            // We have to wait with load/create/addEntry after guest cart will be deleted.
            // That's why you can provide custom selector with this filter applied.
            var cartSelector$ = customCartSelector$
                ? customCartSelector$
                : this.cartSelector$;
            return cartSelector$.pipe(operators.filter(function (cartState) { return !cartState.loading; }), 
            // Avoid load/create call when there are new cart creating at the moment
            operators.filter(function (cartState) { return !_this.isCartCreating(cartState); }), operators.take(1), operators.switchMap(function (cartState) {
                // Try to load the cart, because it might have been created on another device between our login and add entry call
                if (_this.isEmpty(cartState.value) &&
                    _this.userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.load(undefined);
                }
                return cartSelector$;
            }), operators.filter(function (cartState) { return !cartState.loading; }), 
            // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty
            operators.filter(function (cartState) { return _this.userId === OCC_USER_ID_ANONYMOUS ||
                cartState.success ||
                cartState.error; }), operators.take(1), operators.switchMap(function (cartState) {
                if (_this.isEmpty(cartState.value)) {
                    _this.multiCartService.createCart({
                        userId: _this.userId,
                        extraData: {
                            active: true,
                        },
                    });
                }
                return cartSelector$;
            }), operators.filter(function (cartState) { return !cartState.loading; }), operators.filter(function (cartState) { return cartState.success || cartState.error; }), 
            // wait for active cart id to point to code/guid to avoid some work on temp cart entity
            operators.filter(function (cartState) { return !_this.isCartCreating(cartState); }), operators.filter(function (cartState) { return !_this.isEmpty(cartState.value); }), operators.take(1));
        };
        /**
         * Add entry to active cart
         *
         * @param productCode
         * @param quantity
         */
        ActiveCartService.prototype.addEntry = function (productCode, quantity) {
            var _this = this;
            this.requireLoadedCart().subscribe(function (cartState) {
                _this.multiCartService.addEntry(_this.userId, getCartIdByUserId(cartState.value, _this.userId), productCode, quantity);
            });
        };
        /**
         * Remove entry
         *
         * @param entry
         */
        ActiveCartService.prototype.removeEntry = function (entry) {
            this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
        };
        /**
         * Update entry
         *
         * @param entryNumber
         * @param quantity
         */
        ActiveCartService.prototype.updateEntry = function (entryNumber, quantity) {
            this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
        };
        /**
         * Returns cart entry
         *
         * @param productCode
         */
        ActiveCartService.prototype.getEntry = function (productCode) {
            var _this = this;
            return this.activeCartId$.pipe(operators.switchMap(function (cartId) { return _this.multiCartService.getEntry(cartId, productCode); }), operators.distinctUntilChanged());
        };
        /**
         * Assign email to cart
         *
         * @param email
         */
        ActiveCartService.prototype.addEmail = function (email) {
            this.multiCartService.assignEmail(this.cartId, this.userId, email);
        };
        /**
         * Get assigned user to cart
         */
        ActiveCartService.prototype.getAssignedUser = function () {
            return this.getActive().pipe(operators.map(function (cart) { return cart.user; }));
        };
        /**
         * Returns true for guest cart
         */
        ActiveCartService.prototype.isGuestCart = function () {
            return (this.cartUser &&
                (this.cartUser.name === OCC_USER_ID_GUEST ||
                    this.isEmail(this.cartUser.uid.split('|').slice(1).join('|'))));
        };
        /**
         * Add multiple entries to a cart
         *
         * @param cartEntries : list of entries to add (OrderEntry[])
         */
        ActiveCartService.prototype.addEntries = function (cartEntries) {
            var _this = this;
            cartEntries.forEach(function (entry) {
                _this.addEntry(entry.product.code, entry.quantity);
            });
        };
        ActiveCartService.prototype.isEmail = function (str) {
            if (str) {
                return str.match(EMAIL_PATTERN) ? true : false;
            }
            return false;
        };
        // TODO: Remove once backend is updated
        /**
         * Temporary method to merge guest cart with user cart because of backend limitation
         * This is for an edge case
         */
        ActiveCartService.prototype.guestCartMerge = function (cartId) {
            var _this = this;
            var cartEntries;
            this.getEntries()
                .pipe(operators.take(1))
                .subscribe(function (entries) {
                cartEntries = entries;
                _this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);
                _this.addEntriesGuestMerge(cartEntries);
            });
        };
        ActiveCartService.prototype.isEmpty = function (cart) {
            return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
        };
        ActiveCartService.prototype.isJustLoggedIn = function (userId) {
            return (this.previousUserId !== userId && // *just* logged in
                this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
            );
        };
        return ActiveCartService;
    }());
    ActiveCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActiveCartService_Factory() { return new ActiveCartService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(MultiCartService)); }, token: ActiveCartService, providedIn: "root" });
    ActiveCartService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ActiveCartService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: MultiCartService }
    ]; };

    (function (PageRobotsMeta) {
        PageRobotsMeta["INDEX"] = "INDEX";
        PageRobotsMeta["NOINDEX"] = "NOINDEX";
        PageRobotsMeta["FOLLOW"] = "FOLLOW";
        PageRobotsMeta["NOFOLLOW"] = "NOFOLLOW";
    })(exports.PageRobotsMeta || (exports.PageRobotsMeta = {}));

    var TranslationService = /** @class */ (function () {
        function TranslationService() {
        }
        return TranslationService;
    }());

    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`
     * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,
     * the more generic `ContentPageMetaResolver` is overriden by this resolver.
     *
     * The page title and robots are resolved in this implementation only.
     */
    var CheckoutPageMetaResolver = /** @class */ (function (_super) {
        __extends(CheckoutPageMetaResolver, _super);
        function CheckoutPageMetaResolver(translation, activeCartService) {
            var _this = _super.call(this) || this;
            _this.translation = translation;
            _this.activeCartService = activeCartService;
            _this.cart$ = _this.activeCartService.getActive();
            _this.pageType = exports.PageType.CONTENT_PAGE;
            _this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';
            return _this;
        }
        CheckoutPageMetaResolver.prototype.resolveTitle = function () {
            var _this = this;
            return this.cart$.pipe(operators.switchMap(function (c) { return _this.translation.translate('pageMetaResolver.checkout.title', {
                count: c.totalItems,
            }); }));
        };
        CheckoutPageMetaResolver.prototype.resolveRobots = function () {
            return rxjs.of([exports.PageRobotsMeta.NOFOLLOW, exports.PageRobotsMeta.NOINDEX]);
        };
        return CheckoutPageMetaResolver;
    }(PageMetaResolver));
    CheckoutPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutPageMetaResolver_Factory() { return new CheckoutPageMetaResolver(i0.ɵɵinject(TranslationService), i0.ɵɵinject(ActiveCartService)); }, token: CheckoutPageMetaResolver, providedIn: "root" });
    CheckoutPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutPageMetaResolver.ctorParameters = function () { return [
        { type: TranslationService },
        { type: ActiveCartService }
    ]; };

    var UserAddressAdapter = /** @class */ (function () {
        function UserAddressAdapter() {
        }
        return UserAddressAdapter;
    }());

    var UserAddressConnector = /** @class */ (function () {
        function UserAddressConnector(adapter) {
            this.adapter = adapter;
        }
        UserAddressConnector.prototype.getAll = function (userId) {
            return this.adapter.loadAll(userId);
        };
        UserAddressConnector.prototype.add = function (userId, address) {
            return this.adapter.add(userId, address);
        };
        UserAddressConnector.prototype.update = function (userId, addressId, address) {
            return this.adapter.update(userId, addressId, address);
        };
        UserAddressConnector.prototype.verify = function (userId, address) {
            return this.adapter.verify(userId, address);
        };
        UserAddressConnector.prototype.delete = function (userId, addressId) {
            return this.adapter.delete(userId, addressId);
        };
        return UserAddressConnector;
    }());
    UserAddressConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserAddressConnector_Factory() { return new UserAddressConnector(i0.ɵɵinject(UserAddressAdapter)); }, token: UserAddressConnector, providedIn: "root" });
    UserAddressConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserAddressConnector.ctorParameters = function () { return [
        { type: UserAddressAdapter }
    ]; };

    /**
     * @deprecated since 2.1, use normalizeHttpError instead
     */
    var UNKNOWN_ERROR = {
        error: 'unknown error',
    };
    var circularReplacer = function () {
        var seen = new WeakSet();
        return function (_key, value) {
            if (typeof value === 'object' && value !== null) {
                if (seen.has(value)) {
                    return;
                }
                seen.add(value);
            }
            return value;
        };
    };
    var ɵ0$b = circularReplacer;
    /**
     * @deprecated since 2.1, use normalizeHttpError instead
     */
    function makeErrorSerializable(error) {
        if (error instanceof Error) {
            return {
                message: error.message,
                type: error.name,
                reason: error.stack,
            };
        }
        if (error instanceof i1$4.HttpErrorResponse) {
            var serializableError = error.error;
            if (isObject(error.error)) {
                serializableError = JSON.stringify(error.error, circularReplacer());
            }
            return {
                message: error.message,
                error: serializableError,
                status: error.status,
                statusText: error.statusText,
                url: error.url,
            };
        }
        return isObject(error) ? UNKNOWN_ERROR : error;
    }

    var AddressVerificationEffect = /** @class */ (function () {
        function AddressVerificationEffect(actions$, userAddressConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAddressConnector = userAddressConnector;
            this.verifyAddress$ = this.actions$.pipe(i3.ofType(VERIFY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.userAddressConnector.verify(payload.userId, payload.address).pipe(operators.map(function (data) { return new VerifyAddressSuccess(data); }), operators.catchError(function (error) { return rxjs.of(new VerifyAddressFail(makeErrorSerializable(error))); })); }));
        }
        return AddressVerificationEffect;
    }());
    AddressVerificationEffect.decorators = [
        { type: i0.Injectable }
    ];
    AddressVerificationEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserAddressConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], AddressVerificationEffect.prototype, "verifyAddress$", void 0);

    var CardTypesEffects = /** @class */ (function () {
        function CardTypesEffects(actions$, checkoutPaymentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.loadCardTypes$ = this.actions$.pipe(i3.ofType(LOAD_CARD_TYPES), operators.switchMap(function () {
                return _this.checkoutPaymentConnector.getCardTypes().pipe(operators.map(function (cardTypes) { return new LoadCardTypesSuccess(cardTypes); }), operators.catchError(function (error) { return rxjs.of(new LoadCardTypesFail(makeErrorSerializable(error))); }));
            }));
        }
        return CardTypesEffects;
    }());
    CardTypesEffects.decorators = [
        { type: i0.Injectable }
    ];
    CardTypesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CheckoutPaymentConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], CardTypesEffects.prototype, "loadCardTypes$", void 0);

    var LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';
    var LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';
    var LOAD_BILLING_COUNTRIES_SUCCESS = '[User] Load Billing Countries Success';
    var LoadBillingCountries = /** @class */ (function () {
        function LoadBillingCountries() {
            this.type = LOAD_BILLING_COUNTRIES;
        }
        return LoadBillingCountries;
    }());
    var LoadBillingCountriesFail = /** @class */ (function () {
        function LoadBillingCountriesFail(payload) {
            this.payload = payload;
            this.type = LOAD_BILLING_COUNTRIES_FAIL;
        }
        return LoadBillingCountriesFail;
    }());
    var LoadBillingCountriesSuccess = /** @class */ (function () {
        function LoadBillingCountriesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_BILLING_COUNTRIES_SUCCESS;
        }
        return LoadBillingCountriesSuccess;
    }());

    var LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';
    var LOAD_CONSIGNMENT_TRACKING_FAIL = '[User] Load Consignment Tracking Fail';
    var LOAD_CONSIGNMENT_TRACKING_SUCCESS = '[User] Load Consignment Tracking Success';
    var CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';
    var LoadConsignmentTracking = /** @class */ (function () {
        function LoadConsignmentTracking(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING;
        }
        return LoadConsignmentTracking;
    }());
    var LoadConsignmentTrackingFail = /** @class */ (function () {
        function LoadConsignmentTrackingFail(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING_FAIL;
        }
        return LoadConsignmentTrackingFail;
    }());
    var LoadConsignmentTrackingSuccess = /** @class */ (function () {
        function LoadConsignmentTrackingSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;
        }
        return LoadConsignmentTrackingSuccess;
    }());
    var ClearConsignmentTracking = /** @class */ (function () {
        function ClearConsignmentTracking() {
            this.type = CLEAR_CONSIGNMENT_TRACKING;
        }
        return ClearConsignmentTracking;
    }());

    var USER_FEATURE = 'user';
    var UPDATE_EMAIL_PROCESS_ID = 'updateEmail';
    var UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';
    var UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';
    var REGISTER_USER_PROCESS_ID = 'registerUser';
    var REMOVE_USER_PROCESS_ID = 'removeUser';
    var GIVE_CONSENT_PROCESS_ID = 'giveConsent';
    var WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';
    var UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID = 'updateNotificationPreferences';
    var ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';
    var REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';
    var CANCEL_ORDER_PROCESS_ID = 'cancelOrder';
    var CANCEL_RETURN_PROCESS_ID = 'cancelReturn';
    var CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = 'cancelReplenishmentOrder';
    var USER_CONSENTS = '[User] User Consents';
    var USER_PAYMENT_METHODS = '[User] User Payment Methods';
    var USER_ORDERS = '[User] User Orders';
    var USER_ADDRESSES = '[User] User Addresses';
    var USER_RETURN_REQUESTS = '[User] Order Return Requests';
    var USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';
    var USER_ORDER_DETAILS = '[User] User Order Details';
    var USER_COST_CENTERS = '[User] User Cost Centers';
    var USER_REPLENISHMENT_ORDERS = '[User] User Replenishment Orders';
    var USER_REPLENISHMENT_ORDER_DETAILS = '[User] User Replenishment Order Details';
    var REGIONS = '[User] Regions';
    var CUSTOMER_COUPONS = '[User] Customer Coupons';
    var SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';
    var UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'unsubscribeCustomerCoupon';
    var CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';
    var NOTIFICATION_PREFERENCES = '[User] Notification Preferences';
    var PRODUCT_INTERESTS = '[User] Product Interests';

    function getProcessState() {
        return i1$2.createFeatureSelector(PROCESS_FEATURE);
    }

    function getProcessStateFactory(processId) {
        return i1$2.createSelector(getProcessState(), function (entityState) { return entityLoaderStateSelector(entityState, processId); });
    }
    function getProcessLoadingFactory(processId) {
        return i1$2.createSelector(getProcessStateFactory(processId), function (loaderState) { return loaderLoadingSelector(loaderState); });
    }
    function getProcessSuccessFactory(processId) {
        return i1$2.createSelector(getProcessStateFactory(processId), function (loaderState) { return loaderSuccessSelector(loaderState); });
    }
    function getProcessErrorFactory(processId) {
        return i1$2.createSelector(getProcessStateFactory(processId), function (loaderState) { return loaderErrorSelector(loaderState); });
    }

    var process_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getProcessStateFactory: getProcessStateFactory,
        getProcessLoadingFactory: getProcessLoadingFactory,
        getProcessSuccessFactory: getProcessSuccessFactory,
        getProcessErrorFactory: getProcessErrorFactory
    });

    var LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';
    var LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';
    var LOAD_CUSTOMER_COUPONS_SUCCESS = '[User] Load Customer Coupons Success';
    var RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';
    var SUBSCRIBE_CUSTOMER_COUPON = '[User] Subscribe Customer Notification Coupon';
    var SUBSCRIBE_CUSTOMER_COUPON_FAIL = '[User] Subscribe Customer Coupon Notification Fail';
    var SUBSCRIBE_CUSTOMER_COUPON_SUCCESS = '[User] Subscribe Customer Coupon Notification Success';
    var RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS = '[User] Reset Subscribe Customer Coupon Process';
    var UNSUBSCRIBE_CUSTOMER_COUPON = '[User] Unsubscribe Customer Notification Coupon';
    var UNSUBSCRIBE_CUSTOMER_COUPON_FAIL = '[User] Unsubscribe Customer Coupon Notification Fail';
    var UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS = '[User] Unsubscribe Customer Coupon Notification Success';
    var RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS = '[User] Reset Unsubscribe Customer Coupon Process';
    var CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';
    var CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';
    var CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';
    var LoadCustomerCoupons = /** @class */ (function (_super) {
        __extends(LoadCustomerCoupons, _super);
        function LoadCustomerCoupons(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS;
            return _this;
        }
        return LoadCustomerCoupons;
    }(LoaderLoadAction));
    var LoadCustomerCouponsFail = /** @class */ (function (_super) {
        __extends(LoadCustomerCouponsFail, _super);
        function LoadCustomerCouponsFail(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS_FAIL;
            return _this;
        }
        return LoadCustomerCouponsFail;
    }(LoaderFailAction));
    var LoadCustomerCouponsSuccess = /** @class */ (function (_super) {
        __extends(LoadCustomerCouponsSuccess, _super);
        function LoadCustomerCouponsSuccess(payload) {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.payload = payload;
            _this.type = LOAD_CUSTOMER_COUPONS_SUCCESS;
            return _this;
        }
        return LoadCustomerCouponsSuccess;
    }(LoaderSuccessAction));
    var ResetLoadCustomerCoupons = /** @class */ (function (_super) {
        __extends(ResetLoadCustomerCoupons, _super);
        function ResetLoadCustomerCoupons() {
            var _this = _super.call(this, CUSTOMER_COUPONS) || this;
            _this.type = RESET_LOAD_CUSTOMER_COUPONS;
            return _this;
        }
        return ResetLoadCustomerCoupons;
    }(LoaderResetAction));
    // Subscribe coupon notification actions
    var SubscribeCustomerCoupon = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCoupon, _super);
        function SubscribeCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON;
            return _this;
        }
        return SubscribeCustomerCoupon;
    }(EntityLoadAction));
    var SubscribeCustomerCouponFail = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCouponFail, _super);
        function SubscribeCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return SubscribeCustomerCouponFail;
    }(EntityFailAction));
    var SubscribeCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(SubscribeCustomerCouponSuccess, _super);
        function SubscribeCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return SubscribeCustomerCouponSuccess;
    }(EntitySuccessAction));
    var ResetSubscribeCustomerCouponProcess = /** @class */ (function (_super) {
        __extends(ResetSubscribeCustomerCouponProcess, _super);
        function ResetSubscribeCustomerCouponProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;
            return _this;
        }
        return ResetSubscribeCustomerCouponProcess;
    }(EntityLoaderResetAction));
    var UnsubscribeCustomerCoupon = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCoupon, _super);
        function UnsubscribeCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON;
            return _this;
        }
        return UnsubscribeCustomerCoupon;
    }(EntityLoadAction));
    var UnsubscribeCustomerCouponFail = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCouponFail, _super);
        function UnsubscribeCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return UnsubscribeCustomerCouponFail;
    }(EntityFailAction));
    var UnsubscribeCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(UnsubscribeCustomerCouponSuccess, _super);
        function UnsubscribeCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return UnsubscribeCustomerCouponSuccess;
    }(EntitySuccessAction));
    var ResetUnsubscribeCustomerCouponProcess = /** @class */ (function (_super) {
        __extends(ResetUnsubscribeCustomerCouponProcess, _super);
        function ResetUnsubscribeCustomerCouponProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;
            return _this;
        }
        return ResetUnsubscribeCustomerCouponProcess;
    }(EntityLoaderResetAction));
    var ClaimCustomerCoupon = /** @class */ (function (_super) {
        __extends(ClaimCustomerCoupon, _super);
        function ClaimCustomerCoupon(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON;
            return _this;
        }
        return ClaimCustomerCoupon;
    }(EntityLoadAction));
    var ClaimCustomerCouponFail = /** @class */ (function (_super) {
        __extends(ClaimCustomerCouponFail, _super);
        function ClaimCustomerCouponFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON_FAIL;
            return _this;
        }
        return ClaimCustomerCouponFail;
    }(EntityFailAction));
    var ClaimCustomerCouponSuccess = /** @class */ (function (_super) {
        __extends(ClaimCustomerCouponSuccess, _super);
        function ClaimCustomerCouponSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CLAIM_CUSTOMER_COUPON_SUCCESS;
            return _this;
        }
        return ClaimCustomerCouponSuccess;
    }(EntitySuccessAction));

    var LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';
    var LOAD_DELIVERY_COUNTRIES_FAIL = '[User] Load Delivery Countries Fail';
    var LOAD_DELIVERY_COUNTRIES_SUCCESS = '[User] Load Delivery Countries Success';
    var LoadDeliveryCountries = /** @class */ (function () {
        function LoadDeliveryCountries() {
            this.type = LOAD_DELIVERY_COUNTRIES;
        }
        return LoadDeliveryCountries;
    }());
    var LoadDeliveryCountriesFail = /** @class */ (function () {
        function LoadDeliveryCountriesFail(payload) {
            this.payload = payload;
            this.type = LOAD_DELIVERY_COUNTRIES_FAIL;
        }
        return LoadDeliveryCountriesFail;
    }());
    var LoadDeliveryCountriesSuccess = /** @class */ (function () {
        function LoadDeliveryCountriesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_DELIVERY_COUNTRIES_SUCCESS;
        }
        return LoadDeliveryCountriesSuccess;
    }());

    var FORGOT_PASSWORD_EMAIL_REQUEST = '[User] Forgot Password Email Request';
    var FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS = '[User] Forgot Password Email Request Success';
    var FORGOT_PASSWORD_EMAIL_REQUEST_FAIL = '[User] Forgot Password Email Request Fail';
    var ForgotPasswordEmailRequest = /** @class */ (function () {
        function ForgotPasswordEmailRequest(payload) {
            this.payload = payload;
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST;
        }
        return ForgotPasswordEmailRequest;
    }());
    var ForgotPasswordEmailRequestFail = /** @class */ (function () {
        function ForgotPasswordEmailRequestFail(payload) {
            this.payload = payload;
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;
        }
        return ForgotPasswordEmailRequestFail;
    }());
    var ForgotPasswordEmailRequestSuccess = /** @class */ (function () {
        function ForgotPasswordEmailRequestSuccess() {
            this.type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;
        }
        return ForgotPasswordEmailRequestSuccess;
    }());

    var LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
    var LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
    var LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
    var UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
    var UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
    var UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
    var RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
    var CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
    var LoadNotificationPreferences = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferences, _super);
        function LoadNotificationPreferences(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return LoadNotificationPreferences;
    }(LoaderLoadAction));
    var LoadNotificationPreferencesFail = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferencesFail, _super);
        function LoadNotificationPreferencesFail(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
            return _this;
        }
        return LoadNotificationPreferencesFail;
    }(LoaderFailAction));
    var LoadNotificationPreferencesSuccess = /** @class */ (function (_super) {
        __extends(LoadNotificationPreferencesSuccess, _super);
        function LoadNotificationPreferencesSuccess(payload) {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.payload = payload;
            _this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
            return _this;
        }
        return LoadNotificationPreferencesSuccess;
    }(LoaderSuccessAction));
    var UpdateNotificationPreferences = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferences, _super);
        function UpdateNotificationPreferences(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return UpdateNotificationPreferences;
    }(EntityLoadAction));
    var UpdateNotificationPreferencesFail = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferencesFail, _super);
        function UpdateNotificationPreferencesFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
            return _this;
        }
        return UpdateNotificationPreferencesFail;
    }(EntityFailAction));
    var UpdateNotificationPreferencesSuccess = /** @class */ (function (_super) {
        __extends(UpdateNotificationPreferencesSuccess, _super);
        function UpdateNotificationPreferencesSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
            return _this;
        }
        return UpdateNotificationPreferencesSuccess;
    }(EntitySuccessAction));
    var ResetNotificationPreferences = /** @class */ (function (_super) {
        __extends(ResetNotificationPreferences, _super);
        function ResetNotificationPreferences() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
            _this.type = RESET_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return ResetNotificationPreferences;
    }(EntityLoaderResetAction));
    var ClearNotificationPreferences = /** @class */ (function (_super) {
        __extends(ClearNotificationPreferences, _super);
        function ClearNotificationPreferences() {
            var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
            _this.type = CLEAR_NOTIFICATION_PREFERENCES;
            return _this;
        }
        return ClearNotificationPreferences;
    }(LoaderResetAction));

    var LOAD_ORDER_DETAILS = '[User] Load Order Details';
    var LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
    var LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
    var CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
    var CANCEL_ORDER = '[User] Cancel Order';
    var CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
    var CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
    var RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
    var LoadOrderDetails = /** @class */ (function (_super) {
        __extends(LoadOrderDetails, _super);
        function LoadOrderDetails(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS;
            return _this;
        }
        return LoadOrderDetails;
    }(LoaderLoadAction));
    var LoadOrderDetailsFail = /** @class */ (function (_super) {
        __extends(LoadOrderDetailsFail, _super);
        function LoadOrderDetailsFail(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS_FAIL;
            return _this;
        }
        return LoadOrderDetailsFail;
    }(LoaderFailAction));
    var LoadOrderDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderDetailsSuccess, _super);
        function LoadOrderDetailsSuccess(payload) {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_DETAILS_SUCCESS;
            return _this;
        }
        return LoadOrderDetailsSuccess;
    }(LoaderSuccessAction));
    var ClearOrderDetails = /** @class */ (function (_super) {
        __extends(ClearOrderDetails, _super);
        function ClearOrderDetails() {
            var _this = _super.call(this, USER_ORDER_DETAILS) || this;
            _this.type = CLEAR_ORDER_DETAILS;
            return _this;
        }
        return ClearOrderDetails;
    }(LoaderResetAction));
    var CancelOrder = /** @class */ (function (_super) {
        __extends(CancelOrder, _super);
        function CancelOrder(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER;
            return _this;
        }
        return CancelOrder;
    }(EntityLoadAction));
    var CancelOrderFail = /** @class */ (function (_super) {
        __extends(CancelOrderFail, _super);
        function CancelOrderFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_FAIL;
            return _this;
        }
        return CancelOrderFail;
    }(EntityFailAction));
    var CancelOrderSuccess = /** @class */ (function (_super) {
        __extends(CancelOrderSuccess, _super);
        function CancelOrderSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.type = CANCEL_ORDER_SUCCESS;
            return _this;
        }
        return CancelOrderSuccess;
    }(EntitySuccessAction));
    var ResetCancelOrderProcess = /** @class */ (function (_super) {
        __extends(ResetCancelOrderProcess, _super);
        function ResetCancelOrderProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
            _this.type = RESET_CANCEL_ORDER_PROCESS;
            return _this;
        }
        return ResetCancelOrderProcess;
    }(EntityLoaderResetAction));

    var CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';
    var CREATE_ORDER_RETURN_REQUEST_FAIL = '[User] Create Order Return Request Fail';
    var CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[User] Create Order Return Request Success';
    var LOAD_ORDER_RETURN_REQUEST = '[User] Load Order Return Request details';
    var LOAD_ORDER_RETURN_REQUEST_FAIL = '[User] Load Order Return Request details Fail';
    var LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[User] Load Order Return Request details Success';
    var CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';
    var CANCEL_ORDER_RETURN_REQUEST_FAIL = '[User] Cancel Order Return Request Fail';
    var CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[User] Cancel Order Return Request Success';
    var LOAD_ORDER_RETURN_REQUEST_LIST = '[User] Load User Order Return Request List';
    var LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[User] Load User Order Return Request List Fail';
    var LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[User] Load User Order Return Request List Success';
    var CLEAR_ORDER_RETURN_REQUEST = '[User] Clear Order Return Request Details';
    var CLEAR_ORDER_RETURN_REQUEST_LIST = '[User] Clear Order Return Request List';
    var RESET_CANCEL_RETURN_PROCESS = '[User] Reset Cancel Return Request Process';
    var CreateOrderReturnRequest = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequest, _super);
        function CreateOrderReturnRequest(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST;
            return _this;
        }
        return CreateOrderReturnRequest;
    }(LoaderLoadAction));
    var CreateOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequestFail, _super);
        function CreateOrderReturnRequestFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return CreateOrderReturnRequestFail;
    }(LoaderFailAction));
    var CreateOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(CreateOrderReturnRequestSuccess, _super);
        function CreateOrderReturnRequestSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return CreateOrderReturnRequestSuccess;
    }(LoaderSuccessAction));
    var LoadOrderReturnRequest = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequest, _super);
        function LoadOrderReturnRequest(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST;
            return _this;
        }
        return LoadOrderReturnRequest;
    }(LoaderLoadAction));
    var LoadOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestFail, _super);
        function LoadOrderReturnRequestFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return LoadOrderReturnRequestFail;
    }(LoaderFailAction));
    var LoadOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestSuccess, _super);
        function LoadOrderReturnRequestSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return LoadOrderReturnRequestSuccess;
    }(LoaderSuccessAction));
    var CancelOrderReturnRequest = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequest, _super);
        function CancelOrderReturnRequest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_RETURN_REQUEST;
            return _this;
        }
        return CancelOrderReturnRequest;
    }(EntityLoadAction));
    var CancelOrderReturnRequestFail = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequestFail, _super);
        function CancelOrderReturnRequestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
            return _this;
        }
        return CancelOrderReturnRequestFail;
    }(EntityFailAction));
    var CancelOrderReturnRequestSuccess = /** @class */ (function (_super) {
        __extends(CancelOrderReturnRequestSuccess, _super);
        function CancelOrderReturnRequestSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
            return _this;
        }
        return CancelOrderReturnRequestSuccess;
    }(EntitySuccessAction));
    var LoadOrderReturnRequestList = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestList, _super);
        function LoadOrderReturnRequestList(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
            return _this;
        }
        return LoadOrderReturnRequestList;
    }(LoaderLoadAction));
    var LoadOrderReturnRequestListFail = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestListFail, _super);
        function LoadOrderReturnRequestListFail(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
            return _this;
        }
        return LoadOrderReturnRequestListFail;
    }(LoaderFailAction));
    var LoadOrderReturnRequestListSuccess = /** @class */ (function (_super) {
        __extends(LoadOrderReturnRequestListSuccess, _super);
        function LoadOrderReturnRequestListSuccess(payload) {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
            return _this;
        }
        return LoadOrderReturnRequestListSuccess;
    }(LoaderSuccessAction));
    var ClearOrderReturnRequest = /** @class */ (function (_super) {
        __extends(ClearOrderReturnRequest, _super);
        function ClearOrderReturnRequest() {
            var _this = _super.call(this, USER_RETURN_REQUEST_DETAILS) || this;
            _this.type = CLEAR_ORDER_RETURN_REQUEST;
            return _this;
        }
        return ClearOrderReturnRequest;
    }(LoaderResetAction));
    var ClearOrderReturnRequestList = /** @class */ (function (_super) {
        __extends(ClearOrderReturnRequestList, _super);
        function ClearOrderReturnRequestList() {
            var _this = _super.call(this, USER_RETURN_REQUESTS) || this;
            _this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
            return _this;
        }
        return ClearOrderReturnRequestList;
    }(LoaderResetAction));
    var ResetCancelReturnProcess = /** @class */ (function (_super) {
        __extends(ResetCancelReturnProcess, _super);
        function ResetCancelReturnProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID) || this;
            _this.type = RESET_CANCEL_RETURN_PROCESS;
            return _this;
        }
        return ResetCancelReturnProcess;
    }(EntityLoaderResetAction));

    var LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';
    var LOAD_USER_PAYMENT_METHODS_FAIL = '[User] Load User Payment Methods Fail';
    var LOAD_USER_PAYMENT_METHODS_SUCCESS = '[User] Load User Payment Methods Success';
    var SET_DEFAULT_USER_PAYMENT_METHOD = '[User] Set Default User Payment Method';
    var SET_DEFAULT_USER_PAYMENT_METHOD_FAIL = '[User] Set Default User Payment Method Fail';
    var SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS = '[User] Set Default User Payment Method Success';
    var DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';
    var DELETE_USER_PAYMENT_METHOD_FAIL = '[User] Delete User Payment Method Fail';
    var DELETE_USER_PAYMENT_METHOD_SUCCESS = '[User] Delete User  Payment Method Success';
    var LoadUserPaymentMethods = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethods, _super);
        function LoadUserPaymentMethods(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS;
            return _this;
        }
        return LoadUserPaymentMethods;
    }(LoaderLoadAction));
    var LoadUserPaymentMethodsFail = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethodsFail, _super);
        function LoadUserPaymentMethodsFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS_FAIL;
            return _this;
        }
        return LoadUserPaymentMethodsFail;
    }(LoaderFailAction));
    var LoadUserPaymentMethodsSuccess = /** @class */ (function (_super) {
        __extends(LoadUserPaymentMethodsSuccess, _super);
        function LoadUserPaymentMethodsSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_PAYMENT_METHODS_SUCCESS;
            return _this;
        }
        return LoadUserPaymentMethodsSuccess;
    }(LoaderSuccessAction));
    var SetDefaultUserPaymentMethod = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethod, _super);
        function SetDefaultUserPaymentMethod(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD;
            return _this;
        }
        return SetDefaultUserPaymentMethod;
    }(LoaderLoadAction));
    var SetDefaultUserPaymentMethodFail = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethodFail, _super);
        function SetDefaultUserPaymentMethodFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;
            return _this;
        }
        return SetDefaultUserPaymentMethodFail;
    }(LoaderFailAction));
    var SetDefaultUserPaymentMethodSuccess = /** @class */ (function (_super) {
        __extends(SetDefaultUserPaymentMethodSuccess, _super);
        function SetDefaultUserPaymentMethodSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;
            return _this;
        }
        return SetDefaultUserPaymentMethodSuccess;
    }(LoaderSuccessAction));
    var DeleteUserPaymentMethod = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethod, _super);
        function DeleteUserPaymentMethod(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD;
            return _this;
        }
        return DeleteUserPaymentMethod;
    }(LoaderLoadAction));
    var DeleteUserPaymentMethodFail = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethodFail, _super);
        function DeleteUserPaymentMethodFail(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD_FAIL;
            return _this;
        }
        return DeleteUserPaymentMethodFail;
    }(LoaderFailAction));
    var DeleteUserPaymentMethodSuccess = /** @class */ (function (_super) {
        __extends(DeleteUserPaymentMethodSuccess, _super);
        function DeleteUserPaymentMethodSuccess(payload) {
            var _this = _super.call(this, USER_PAYMENT_METHODS) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_PAYMENT_METHOD_SUCCESS;
            return _this;
        }
        return DeleteUserPaymentMethodSuccess;
    }(LoaderSuccessAction));

    var LOAD_PRODUCT_INTERESTS = 'Load Product Interests';
    var LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';
    var LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';
    var REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';
    var REMOVE_PRODUCT_INTEREST_SUCCESS = 'Remove Product Interest Success';
    var REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';
    var ADD_PRODUCT_INTEREST = 'Add Product Interest';
    var ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';
    var ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';
    var ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';
    var REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';
    var CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';
    var LoadProductInterests = /** @class */ (function (_super) {
        __extends(LoadProductInterests, _super);
        function LoadProductInterests(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS;
            return _this;
        }
        return LoadProductInterests;
    }(LoaderLoadAction));
    var LoadProductInterestsFail = /** @class */ (function (_super) {
        __extends(LoadProductInterestsFail, _super);
        function LoadProductInterestsFail(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS_FAIL;
            return _this;
        }
        return LoadProductInterestsFail;
    }(LoaderFailAction));
    var LoadProductInterestsSuccess = /** @class */ (function (_super) {
        __extends(LoadProductInterestsSuccess, _super);
        function LoadProductInterestsSuccess(payload) {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_INTERESTS_SUCCESS;
            return _this;
        }
        return LoadProductInterestsSuccess;
    }(LoaderSuccessAction));
    var RemoveProductInterest = /** @class */ (function (_super) {
        __extends(RemoveProductInterest, _super);
        function RemoveProductInterest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST;
            return _this;
        }
        return RemoveProductInterest;
    }(EntityLoadAction));
    var RemoveProductInterestSuccess = /** @class */ (function (_super) {
        __extends(RemoveProductInterestSuccess, _super);
        function RemoveProductInterestSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST_SUCCESS;
            return _this;
        }
        return RemoveProductInterestSuccess;
    }(EntitySuccessAction));
    var RemoveProductInterestFail = /** @class */ (function (_super) {
        __extends(RemoveProductInterestFail, _super);
        function RemoveProductInterestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REMOVE_PRODUCT_INTEREST_FAIL;
            return _this;
        }
        return RemoveProductInterestFail;
    }(EntityFailAction));
    var AddProductInterest = /** @class */ (function (_super) {
        __extends(AddProductInterest, _super);
        function AddProductInterest(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST;
            return _this;
        }
        return AddProductInterest;
    }(EntityLoadAction));
    var AddProductInterestSuccess = /** @class */ (function (_super) {
        __extends(AddProductInterestSuccess, _super);
        function AddProductInterestSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST_SUCCESS;
            return _this;
        }
        return AddProductInterestSuccess;
    }(EntitySuccessAction));
    var AddProductInterestFail = /** @class */ (function (_super) {
        __extends(AddProductInterestFail, _super);
        function AddProductInterestFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = ADD_PRODUCT_INTEREST_FAIL;
            return _this;
        }
        return AddProductInterestFail;
    }(EntityFailAction));
    var ResetAddInterestState = /** @class */ (function (_super) {
        __extends(ResetAddInterestState, _super);
        function ResetAddInterestState() {
            var _this = _super.call(this, PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID) || this;
            _this.type = ADD_PRODUCT_INTEREST_RESET;
            return _this;
        }
        return ResetAddInterestState;
    }(EntityLoaderResetAction));
    var ResetRemoveInterestState = /** @class */ (function (_super) {
        __extends(ResetRemoveInterestState, _super);
        function ResetRemoveInterestState() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID) || this;
            _this.type = REMOVE_PRODUCT_INTEREST_RESET;
            return _this;
        }
        return ResetRemoveInterestState;
    }(EntityLoaderResetAction));
    var ClearProductInterests = /** @class */ (function (_super) {
        __extends(ClearProductInterests, _super);
        function ClearProductInterests() {
            var _this = _super.call(this, PRODUCT_INTERESTS) || this;
            _this.type = CLEAR_PRODUCT_INTERESTS;
            return _this;
        }
        return ClearProductInterests;
    }(LoaderResetAction));

    var LOAD_REGIONS = '[User] Load Regions';
    var LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';
    var LOAD_REGIONS_FAIL = '[User] Load Regions Fail';
    var CLEAR_REGIONS = '[User] Clear Regions';
    var LoadRegions = /** @class */ (function (_super) {
        __extends(LoadRegions, _super);
        function LoadRegions(payload) {
            var _this = _super.call(this, REGIONS) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS;
            return _this;
        }
        return LoadRegions;
    }(LoaderLoadAction));
    var LoadRegionsFail = /** @class */ (function (_super) {
        __extends(LoadRegionsFail, _super);
        function LoadRegionsFail(payload) {
            var _this = _super.call(this, REGIONS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS_FAIL;
            return _this;
        }
        return LoadRegionsFail;
    }(LoaderFailAction));
    var LoadRegionsSuccess = /** @class */ (function (_super) {
        __extends(LoadRegionsSuccess, _super);
        function LoadRegionsSuccess(payload) {
            var _this = _super.call(this, REGIONS) || this;
            _this.payload = payload;
            _this.type = LOAD_REGIONS_SUCCESS;
            return _this;
        }
        return LoadRegionsSuccess;
    }(LoaderSuccessAction));
    var ClearRegions = /** @class */ (function () {
        function ClearRegions() {
            this.type = CLEAR_REGIONS;
        }
        return ClearRegions;
    }());

    var LOAD_REPLENISHMENT_ORDER_DETAILS = '[User] Load Replenishment Order Details';
    var LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS = '[User] Load Replenishment Order Details Success';
    var LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL = '[User] Load Replenishment Order Details Fail';
    var ClEAR_REPLENISHMENT_ORDER_DETAILS = '[User] Clear Replenishment Order Details';
    var CANCEL_REPLENISHMENT_ORDER = '[User] Cancel Replenishment Order';
    var CANCEL_REPLENISHMENT_ORDER_SUCCESS = '[User] Cancel Replenishment Order Success';
    var CANCEL_REPLENISHMENT_ORDER_FAIL = '[User] Cancel Replenishment Order Fail';
    var CLEAR_CANCEL_REPLENISHMENT_ORDER = '[User] Clear Cancel Replenishment Order';
    var LoadReplenishmentOrderDetails = /** @class */ (function (_super) {
        __extends(LoadReplenishmentOrderDetails, _super);
        function LoadReplenishmentOrderDetails(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_REPLENISHMENT_ORDER_DETAILS;
            return _this;
        }
        return LoadReplenishmentOrderDetails;
    }(LoaderLoadAction));
    var LoadReplenishmentOrderDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadReplenishmentOrderDetailsSuccess, _super);
        function LoadReplenishmentOrderDetailsSuccess(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDER_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;
            return _this;
        }
        return LoadReplenishmentOrderDetailsSuccess;
    }(LoaderSuccessAction));
    var LoadReplenishmentOrderDetailsFail = /** @class */ (function (_super) {
        __extends(LoadReplenishmentOrderDetailsFail, _super);
        function LoadReplenishmentOrderDetailsFail(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDER_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;
            return _this;
        }
        return LoadReplenishmentOrderDetailsFail;
    }(LoaderFailAction));
    var ClearReplenishmentOrderDetails = /** @class */ (function (_super) {
        __extends(ClearReplenishmentOrderDetails, _super);
        function ClearReplenishmentOrderDetails() {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDER_DETAILS) || this;
            _this.type = ClEAR_REPLENISHMENT_ORDER_DETAILS;
            return _this;
        }
        return ClearReplenishmentOrderDetails;
    }(LoaderResetAction));
    var CancelReplenishmentOrder = /** @class */ (function (_super) {
        __extends(CancelReplenishmentOrder, _super);
        function CancelReplenishmentOrder(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_REPLENISHMENT_ORDER;
            return _this;
        }
        return CancelReplenishmentOrder;
    }(EntityLoadAction));
    var CancelReplenishmentOrderSuccess = /** @class */ (function (_super) {
        __extends(CancelReplenishmentOrderSuccess, _super);
        function CancelReplenishmentOrderSuccess(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;
            return _this;
        }
        return CancelReplenishmentOrderSuccess;
    }(EntitySuccessAction));
    var CancelReplenishmentOrderFail = /** @class */ (function (_super) {
        __extends(CancelReplenishmentOrderFail, _super);
        function CancelReplenishmentOrderFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = CANCEL_REPLENISHMENT_ORDER_FAIL;
            return _this;
        }
        return CancelReplenishmentOrderFail;
    }(EntityFailAction));
    var ClearCancelReplenishmentOrder = /** @class */ (function (_super) {
        __extends(ClearCancelReplenishmentOrder, _super);
        function ClearCancelReplenishmentOrder() {
            var _this = _super.call(this, PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID) || this;
            _this.type = CLEAR_CANCEL_REPLENISHMENT_ORDER;
            return _this;
        }
        return ClearCancelReplenishmentOrder;
    }(EntityLoaderResetAction));

    var RESET_PASSWORD = '[User] Reset Password';
    var RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';
    var RESET_PASSWORD_FAIL = '[User] Reset Password Fail';
    var ResetPassword = /** @class */ (function () {
        function ResetPassword(payload) {
            this.payload = payload;
            this.type = RESET_PASSWORD;
        }
        return ResetPassword;
    }());
    var ResetPasswordFail = /** @class */ (function () {
        function ResetPasswordFail(payload) {
            this.payload = payload;
            this.type = RESET_PASSWORD_FAIL;
        }
        return ResetPasswordFail;
    }());
    var ResetPasswordSuccess = /** @class */ (function () {
        function ResetPasswordSuccess() {
            this.type = RESET_PASSWORD_SUCCESS;
        }
        return ResetPasswordSuccess;
    }());

    var LOAD_TITLES = '[User] Load Tiltes';
    var LOAD_TITLES_FAIL = '[User] Load Titles Fail';
    var LOAD_TITLES_SUCCESS = '[User] Load Titles Success';
    var LoadTitles = /** @class */ (function () {
        function LoadTitles() {
            this.type = LOAD_TITLES;
        }
        return LoadTitles;
    }());
    var LoadTitlesFail = /** @class */ (function () {
        function LoadTitlesFail(payload) {
            this.payload = payload;
            this.type = LOAD_TITLES_FAIL;
        }
        return LoadTitlesFail;
    }());
    var LoadTitlesSuccess = /** @class */ (function () {
        function LoadTitlesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_TITLES_SUCCESS;
        }
        return LoadTitlesSuccess;
    }());

    var UPDATE_EMAIL = '[User] Update Email';
    var UPDATE_EMAIL_ERROR = '[User] Update Email Error';
    var UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';
    var RESET_EMAIL = '[User] Reset Email';
    var UpdateEmailAction = /** @class */ (function (_super) {
        __extends(UpdateEmailAction, _super);
        function UpdateEmailAction(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_EMAIL;
            return _this;
        }
        return UpdateEmailAction;
    }(EntityLoadAction));
    var UpdateEmailSuccessAction = /** @class */ (function (_super) {
        __extends(UpdateEmailSuccessAction, _super);
        function UpdateEmailSuccessAction(newUid) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.newUid = newUid;
            _this.type = UPDATE_EMAIL_SUCCESS;
            return _this;
        }
        return UpdateEmailSuccessAction;
    }(EntitySuccessAction));
    var UpdateEmailErrorAction = /** @class */ (function (_super) {
        __extends(UpdateEmailErrorAction, _super);
        function UpdateEmailErrorAction(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_EMAIL_ERROR;
            return _this;
        }
        return UpdateEmailErrorAction;
    }(EntityFailAction));
    var ResetUpdateEmailAction = /** @class */ (function (_super) {
        __extends(ResetUpdateEmailAction, _super);
        function ResetUpdateEmailAction() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID) || this;
            _this.type = RESET_EMAIL;
            return _this;
        }
        return ResetUpdateEmailAction;
    }(EntityLoaderResetAction));

    var UPDATE_PASSWORD = '[User] Update Password';
    var UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';
    var UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';
    var UPDATE_PASSWORD_RESET = '[User] Reset Update Password Process State';
    var UpdatePassword = /** @class */ (function (_super) {
        __extends(UpdatePassword, _super);
        function UpdatePassword(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_PASSWORD;
            return _this;
        }
        return UpdatePassword;
    }(EntityLoadAction));
    var UpdatePasswordFail = /** @class */ (function (_super) {
        __extends(UpdatePasswordFail, _super);
        function UpdatePasswordFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_PASSWORD_FAIL;
            return _this;
        }
        return UpdatePasswordFail;
    }(EntityFailAction));
    var UpdatePasswordSuccess = /** @class */ (function (_super) {
        __extends(UpdatePasswordSuccess, _super);
        function UpdatePasswordSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.type = UPDATE_PASSWORD_SUCCESS;
            return _this;
        }
        return UpdatePasswordSuccess;
    }(EntitySuccessAction));
    var UpdatePasswordReset = /** @class */ (function (_super) {
        __extends(UpdatePasswordReset, _super);
        function UpdatePasswordReset() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID) || this;
            _this.type = UPDATE_PASSWORD_RESET;
            return _this;
        }
        return UpdatePasswordReset;
    }(EntityLoaderResetAction));

    var LOAD_USER_ADDRESSES = '[User] Load User Addresses';
    var LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';
    var LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';
    var ADD_USER_ADDRESS = '[User] Add User Address';
    var ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';
    var ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';
    var UPDATE_USER_ADDRESS = '[User] Update User Address';
    var UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';
    var UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';
    var DELETE_USER_ADDRESS = '[User] Delete User Address';
    var DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';
    var DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';
    var LoadUserAddresses = /** @class */ (function (_super) {
        __extends(LoadUserAddresses, _super);
        function LoadUserAddresses(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES;
            return _this;
        }
        return LoadUserAddresses;
    }(LoaderLoadAction));
    var LoadUserAddressesFail = /** @class */ (function (_super) {
        __extends(LoadUserAddressesFail, _super);
        function LoadUserAddressesFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES_FAIL;
            return _this;
        }
        return LoadUserAddressesFail;
    }(LoaderFailAction));
    var LoadUserAddressesSuccess = /** @class */ (function (_super) {
        __extends(LoadUserAddressesSuccess, _super);
        function LoadUserAddressesSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ADDRESSES_SUCCESS;
            return _this;
        }
        return LoadUserAddressesSuccess;
    }(LoaderSuccessAction));
    // Adding address actions
    var AddUserAddress = /** @class */ (function (_super) {
        __extends(AddUserAddress, _super);
        function AddUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS;
            return _this;
        }
        return AddUserAddress;
    }(LoaderLoadAction));
    var AddUserAddressFail = /** @class */ (function (_super) {
        __extends(AddUserAddressFail, _super);
        function AddUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS_FAIL;
            return _this;
        }
        return AddUserAddressFail;
    }(LoaderFailAction));
    var AddUserAddressSuccess = /** @class */ (function (_super) {
        __extends(AddUserAddressSuccess, _super);
        function AddUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = ADD_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return AddUserAddressSuccess;
    }(LoaderSuccessAction));
    // Updating address actions
    var UpdateUserAddress = /** @class */ (function (_super) {
        __extends(UpdateUserAddress, _super);
        function UpdateUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS;
            return _this;
        }
        return UpdateUserAddress;
    }(LoaderLoadAction));
    var UpdateUserAddressFail = /** @class */ (function (_super) {
        __extends(UpdateUserAddressFail, _super);
        function UpdateUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS_FAIL;
            return _this;
        }
        return UpdateUserAddressFail;
    }(LoaderFailAction));
    var UpdateUserAddressSuccess = /** @class */ (function (_super) {
        __extends(UpdateUserAddressSuccess, _super);
        function UpdateUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return UpdateUserAddressSuccess;
    }(LoaderSuccessAction));
    // Deleting address actions
    var DeleteUserAddress = /** @class */ (function (_super) {
        __extends(DeleteUserAddress, _super);
        function DeleteUserAddress(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS;
            return _this;
        }
        return DeleteUserAddress;
    }(LoaderLoadAction));
    var DeleteUserAddressFail = /** @class */ (function (_super) {
        __extends(DeleteUserAddressFail, _super);
        function DeleteUserAddressFail(payload) {
            var _this = _super.call(this, USER_ADDRESSES, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS_FAIL;
            return _this;
        }
        return DeleteUserAddressFail;
    }(LoaderFailAction));
    var DeleteUserAddressSuccess = /** @class */ (function (_super) {
        __extends(DeleteUserAddressSuccess, _super);
        function DeleteUserAddressSuccess(payload) {
            var _this = _super.call(this, USER_ADDRESSES) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_ADDRESS_SUCCESS;
            return _this;
        }
        return DeleteUserAddressSuccess;
    }(LoaderSuccessAction));

    var LOAD_USER_CONSENTS = '[User] Load User Consents';
    var LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';
    var LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';
    var RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';
    var GIVE_USER_CONSENT = '[User] Give User Consent';
    var GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';
    var GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';
    var RESET_GIVE_USER_CONSENT_PROCESS = '[User] Reset Give User Consent Process';
    var TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';
    var WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';
    var WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';
    var WITHDRAW_USER_CONSENT_SUCCESS = '[User] Withdraw User Consent Success';
    var RESET_WITHDRAW_USER_CONSENT_PROCESS = '[User] Reset Withdraw User Consent Process';
    var LoadUserConsents = /** @class */ (function (_super) {
        __extends(LoadUserConsents, _super);
        function LoadUserConsents(payload) {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS;
            return _this;
        }
        return LoadUserConsents;
    }(LoaderLoadAction));
    var LoadUserConsentsFail = /** @class */ (function (_super) {
        __extends(LoadUserConsentsFail, _super);
        function LoadUserConsentsFail(payload) {
            var _this = _super.call(this, USER_CONSENTS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS_FAIL;
            return _this;
        }
        return LoadUserConsentsFail;
    }(LoaderFailAction));
    var LoadUserConsentsSuccess = /** @class */ (function (_super) {
        __extends(LoadUserConsentsSuccess, _super);
        function LoadUserConsentsSuccess(payload) {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_CONSENTS_SUCCESS;
            return _this;
        }
        return LoadUserConsentsSuccess;
    }(LoaderSuccessAction));
    var ResetLoadUserConsents = /** @class */ (function (_super) {
        __extends(ResetLoadUserConsents, _super);
        function ResetLoadUserConsents() {
            var _this = _super.call(this, USER_CONSENTS) || this;
            _this.type = RESET_LOAD_USER_CONSENTS;
            return _this;
        }
        return ResetLoadUserConsents;
    }(LoaderResetAction));
    var GiveUserConsent = /** @class */ (function (_super) {
        __extends(GiveUserConsent, _super);
        function GiveUserConsent(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = GIVE_USER_CONSENT;
            return _this;
        }
        return GiveUserConsent;
    }(EntityLoadAction));
    var GiveUserConsentFail = /** @class */ (function (_super) {
        __extends(GiveUserConsentFail, _super);
        function GiveUserConsentFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload) || this;
            _this.type = GIVE_USER_CONSENT_FAIL;
            return _this;
        }
        return GiveUserConsentFail;
    }(EntityFailAction));
    var GiveUserConsentSuccess = /** @class */ (function (_super) {
        __extends(GiveUserConsentSuccess, _super);
        function GiveUserConsentSuccess(consentTemplate) {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.consentTemplate = consentTemplate;
            _this.type = GIVE_USER_CONSENT_SUCCESS;
            return _this;
        }
        return GiveUserConsentSuccess;
    }(EntitySuccessAction));
    var ResetGiveUserConsentProcess = /** @class */ (function (_super) {
        __extends(ResetGiveUserConsentProcess, _super);
        function ResetGiveUserConsentProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
            _this.type = RESET_GIVE_USER_CONSENT_PROCESS;
            return _this;
        }
        return ResetGiveUserConsentProcess;
    }(EntityLoaderResetAction));
    var TransferAnonymousConsent = /** @class */ (function () {
        function TransferAnonymousConsent(payload) {
            this.payload = payload;
            this.type = TRANSFER_ANONYMOUS_CONSENT;
        }
        return TransferAnonymousConsent;
    }());
    var WithdrawUserConsent = /** @class */ (function (_super) {
        __extends(WithdrawUserConsent, _super);
        function WithdrawUserConsent(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = WITHDRAW_USER_CONSENT;
            return _this;
        }
        return WithdrawUserConsent;
    }(EntityLoadAction));
    var WithdrawUserConsentFail = /** @class */ (function (_super) {
        __extends(WithdrawUserConsentFail, _super);
        function WithdrawUserConsentFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload) || this;
            _this.type = WITHDRAW_USER_CONSENT_FAIL;
            return _this;
        }
        return WithdrawUserConsentFail;
    }(EntityFailAction));
    var WithdrawUserConsentSuccess = /** @class */ (function (_super) {
        __extends(WithdrawUserConsentSuccess, _super);
        function WithdrawUserConsentSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.type = WITHDRAW_USER_CONSENT_SUCCESS;
            return _this;
        }
        return WithdrawUserConsentSuccess;
    }(EntitySuccessAction));
    var ResetWithdrawUserConsentProcess = /** @class */ (function (_super) {
        __extends(ResetWithdrawUserConsentProcess, _super);
        function ResetWithdrawUserConsentProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
            _this.type = RESET_WITHDRAW_USER_CONSENT_PROCESS;
            return _this;
        }
        return ResetWithdrawUserConsentProcess;
    }(EntityLoaderResetAction));

    var LOAD_ACTIVE_COST_CENTERS = '[User] Load Active CostCenters';
    var LOAD_ACTIVE_COST_CENTERS_FAIL = '[User] Load Active CostCenters Fail';
    var LOAD_ACTIVE_COST_CENTERS_SUCCESS = '[User] Load Active CostCenters Success';
    var LoadActiveCostCenters = /** @class */ (function (_super) {
        __extends(LoadActiveCostCenters, _super);
        function LoadActiveCostCenters(payload) {
            var _this = _super.call(this, USER_COST_CENTERS) || this;
            _this.payload = payload;
            _this.type = LOAD_ACTIVE_COST_CENTERS;
            return _this;
        }
        return LoadActiveCostCenters;
    }(LoaderLoadAction));
    var LoadActiveCostCentersFail = /** @class */ (function (_super) {
        __extends(LoadActiveCostCentersFail, _super);
        function LoadActiveCostCentersFail(payload) {
            var _this = _super.call(this, USER_COST_CENTERS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_ACTIVE_COST_CENTERS_FAIL;
            return _this;
        }
        return LoadActiveCostCentersFail;
    }(LoaderFailAction));
    var LoadActiveCostCentersSuccess = /** @class */ (function (_super) {
        __extends(LoadActiveCostCentersSuccess, _super);
        function LoadActiveCostCentersSuccess(payload) {
            var _this = _super.call(this, USER_COST_CENTERS) || this;
            _this.payload = payload;
            _this.type = LOAD_ACTIVE_COST_CENTERS_SUCCESS;
            return _this;
        }
        return LoadActiveCostCentersSuccess;
    }(LoaderSuccessAction));

    var LOAD_USER_DETAILS = '[User] Load User Details';
    var LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';
    var LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';
    var UPDATE_USER_DETAILS = '[User] Update User Details';
    var UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';
    var UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';
    var RESET_USER_DETAILS = '[User] Reset User Details';
    var LoadUserDetails = /** @class */ (function () {
        function LoadUserDetails(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS;
        }
        return LoadUserDetails;
    }());
    var LoadUserDetailsFail = /** @class */ (function () {
        function LoadUserDetailsFail(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS_FAIL;
        }
        return LoadUserDetailsFail;
    }());
    var LoadUserDetailsSuccess = /** @class */ (function () {
        function LoadUserDetailsSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_USER_DETAILS_SUCCESS;
        }
        return LoadUserDetailsSuccess;
    }());
    var UpdateUserDetails = /** @class */ (function (_super) {
        __extends(UpdateUserDetails, _super);
        function UpdateUserDetails(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_DETAILS;
            return _this;
        }
        return UpdateUserDetails;
    }(EntityLoadAction));
    var UpdateUserDetailsFail = /** @class */ (function (_super) {
        __extends(UpdateUserDetailsFail, _super);
        function UpdateUserDetailsFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_DETAILS_FAIL;
            return _this;
        }
        return UpdateUserDetailsFail;
    }(EntityFailAction));
    var UpdateUserDetailsSuccess = /** @class */ (function (_super) {
        __extends(UpdateUserDetailsSuccess, _super);
        function UpdateUserDetailsSuccess(userUpdates) {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.userUpdates = userUpdates;
            _this.type = UPDATE_USER_DETAILS_SUCCESS;
            return _this;
        }
        return UpdateUserDetailsSuccess;
    }(EntitySuccessAction));
    var ResetUpdateUserDetails = /** @class */ (function (_super) {
        __extends(ResetUpdateUserDetails, _super);
        function ResetUpdateUserDetails() {
            var _this = _super.call(this, PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID) || this;
            _this.type = RESET_USER_DETAILS;
            return _this;
        }
        return ResetUpdateUserDetails;
    }(EntityLoaderResetAction));

    var CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';
    var ClearUserMiscsData = /** @class */ (function () {
        function ClearUserMiscsData() {
            this.type = CLEAR_USER_MISCS_DATA;
        }
        return ClearUserMiscsData;
    }());

    var LOAD_USER_ORDERS = '[User] Load User Orders';
    var LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';
    var LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';
    var CLEAR_USER_ORDERS = '[User] Clear User Orders';
    var LoadUserOrders = /** @class */ (function (_super) {
        __extends(LoadUserOrders, _super);
        function LoadUserOrders(payload) {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS;
            return _this;
        }
        return LoadUserOrders;
    }(LoaderLoadAction));
    var LoadUserOrdersFail = /** @class */ (function (_super) {
        __extends(LoadUserOrdersFail, _super);
        function LoadUserOrdersFail(payload) {
            var _this = _super.call(this, USER_ORDERS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS_FAIL;
            return _this;
        }
        return LoadUserOrdersFail;
    }(LoaderFailAction));
    var LoadUserOrdersSuccess = /** @class */ (function (_super) {
        __extends(LoadUserOrdersSuccess, _super);
        function LoadUserOrdersSuccess(payload) {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_ORDERS_SUCCESS;
            return _this;
        }
        return LoadUserOrdersSuccess;
    }(LoaderSuccessAction));
    var ClearUserOrders = /** @class */ (function (_super) {
        __extends(ClearUserOrders, _super);
        function ClearUserOrders() {
            var _this = _super.call(this, USER_ORDERS) || this;
            _this.type = CLEAR_USER_ORDERS;
            return _this;
        }
        return ClearUserOrders;
    }(LoaderResetAction));

    var REGISTER_USER = '[User] Register User';
    var REGISTER_USER_FAIL = '[User] Register User Fail';
    var REGISTER_USER_SUCCESS = '[User] Register User Success';
    var RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
    var REGISTER_GUEST = '[User] Register Guest';
    var REGISTER_GUEST_FAIL = '[User] Register Guest Fail';
    var REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';
    var REMOVE_USER = '[User] Remove User';
    var REMOVE_USER_FAIL = '[User] Remove User Fail';
    var REMOVE_USER_SUCCESS = '[User] Remove User Success';
    var REMOVE_USER_RESET = '[User] Reset Remove User Process State';
    var RegisterUser = /** @class */ (function (_super) {
        __extends(RegisterUser, _super);
        function RegisterUser(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REGISTER_USER;
            return _this;
        }
        return RegisterUser;
    }(EntityLoadAction));
    var RegisterUserFail = /** @class */ (function (_super) {
        __extends(RegisterUserFail, _super);
        function RegisterUserFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REGISTER_USER_FAIL;
            return _this;
        }
        return RegisterUserFail;
    }(EntityFailAction));
    var RegisterUserSuccess = /** @class */ (function (_super) {
        __extends(RegisterUserSuccess, _super);
        function RegisterUserSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.type = REGISTER_USER_SUCCESS;
            return _this;
        }
        return RegisterUserSuccess;
    }(EntitySuccessAction));
    var ResetRegisterUserProcess = /** @class */ (function (_super) {
        __extends(ResetRegisterUserProcess, _super);
        function ResetRegisterUserProcess() {
            var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
            _this.type = RESET_REGISTER_USER_PROCESS;
            return _this;
        }
        return ResetRegisterUserProcess;
    }(EntityLoaderResetAction));
    var RegisterGuest = /** @class */ (function () {
        function RegisterGuest(payload) {
            this.payload = payload;
            this.type = REGISTER_GUEST;
        }
        return RegisterGuest;
    }());
    var RegisterGuestFail = /** @class */ (function () {
        function RegisterGuestFail(payload) {
            this.payload = payload;
            this.type = REGISTER_GUEST_FAIL;
        }
        return RegisterGuestFail;
    }());
    var RegisterGuestSuccess = /** @class */ (function () {
        function RegisterGuestSuccess() {
            this.type = REGISTER_GUEST_SUCCESS;
        }
        return RegisterGuestSuccess;
    }());
    var RemoveUser = /** @class */ (function (_super) {
        __extends(RemoveUser, _super);
        function RemoveUser(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = REMOVE_USER;
            return _this;
        }
        return RemoveUser;
    }(EntityLoadAction));
    var RemoveUserFail = /** @class */ (function (_super) {
        __extends(RemoveUserFail, _super);
        function RemoveUserFail(payload) {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = REMOVE_USER_FAIL;
            return _this;
        }
        return RemoveUserFail;
    }(EntityFailAction));
    var RemoveUserSuccess = /** @class */ (function (_super) {
        __extends(RemoveUserSuccess, _super);
        function RemoveUserSuccess() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.type = REMOVE_USER_SUCCESS;
            return _this;
        }
        return RemoveUserSuccess;
    }(EntitySuccessAction));
    var RemoveUserReset = /** @class */ (function (_super) {
        __extends(RemoveUserReset, _super);
        function RemoveUserReset() {
            var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
            _this.type = REMOVE_USER_RESET;
            return _this;
        }
        return RemoveUserReset;
    }(EntityLoaderResetAction));

    var LOAD_USER_REPLENISHMENT_ORDERS = '[User] Load User Replenishment Orders';
    var LOAD_USER_REPLENISHMENT_ORDERS_FAIL = '[User] Load User Replenishment Orders Fail';
    var LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS = '[User] Load User Replenishment Orders Success';
    var CLEAR_USER_REPLENISHMENT_ORDERS = '[User] Clear User Replenishment Orders';
    var LoadUserReplenishmentOrders = /** @class */ (function (_super) {
        __extends(LoadUserReplenishmentOrders, _super);
        function LoadUserReplenishmentOrders(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_REPLENISHMENT_ORDERS;
            return _this;
        }
        return LoadUserReplenishmentOrders;
    }(LoaderLoadAction));
    var LoadUserReplenishmentOrdersFail = /** @class */ (function (_super) {
        __extends(LoadUserReplenishmentOrdersFail, _super);
        function LoadUserReplenishmentOrdersFail(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDERS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;
            return _this;
        }
        return LoadUserReplenishmentOrdersFail;
    }(LoaderFailAction));
    var LoadUserReplenishmentOrdersSuccess = /** @class */ (function (_super) {
        __extends(LoadUserReplenishmentOrdersSuccess, _super);
        function LoadUserReplenishmentOrdersSuccess(payload) {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDERS) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;
            return _this;
        }
        return LoadUserReplenishmentOrdersSuccess;
    }(LoaderSuccessAction));
    var ClearUserReplenishmentOrders = /** @class */ (function (_super) {
        __extends(ClearUserReplenishmentOrders, _super);
        function ClearUserReplenishmentOrders() {
            var _this = _super.call(this, USER_REPLENISHMENT_ORDERS) || this;
            _this.type = CLEAR_USER_REPLENISHMENT_ORDERS;
            return _this;
        }
        return ClearUserReplenishmentOrders;
    }(LoaderResetAction));

    var userGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_BILLING_COUNTRIES: LOAD_BILLING_COUNTRIES,
        LOAD_BILLING_COUNTRIES_FAIL: LOAD_BILLING_COUNTRIES_FAIL,
        LOAD_BILLING_COUNTRIES_SUCCESS: LOAD_BILLING_COUNTRIES_SUCCESS,
        LoadBillingCountries: LoadBillingCountries,
        LoadBillingCountriesFail: LoadBillingCountriesFail,
        LoadBillingCountriesSuccess: LoadBillingCountriesSuccess,
        LOAD_CONSIGNMENT_TRACKING: LOAD_CONSIGNMENT_TRACKING,
        LOAD_CONSIGNMENT_TRACKING_FAIL: LOAD_CONSIGNMENT_TRACKING_FAIL,
        LOAD_CONSIGNMENT_TRACKING_SUCCESS: LOAD_CONSIGNMENT_TRACKING_SUCCESS,
        CLEAR_CONSIGNMENT_TRACKING: CLEAR_CONSIGNMENT_TRACKING,
        LoadConsignmentTracking: LoadConsignmentTracking,
        LoadConsignmentTrackingFail: LoadConsignmentTrackingFail,
        LoadConsignmentTrackingSuccess: LoadConsignmentTrackingSuccess,
        ClearConsignmentTracking: ClearConsignmentTracking,
        LOAD_CUSTOMER_COUPONS: LOAD_CUSTOMER_COUPONS,
        LOAD_CUSTOMER_COUPONS_FAIL: LOAD_CUSTOMER_COUPONS_FAIL,
        LOAD_CUSTOMER_COUPONS_SUCCESS: LOAD_CUSTOMER_COUPONS_SUCCESS,
        RESET_LOAD_CUSTOMER_COUPONS: RESET_LOAD_CUSTOMER_COUPONS,
        SUBSCRIBE_CUSTOMER_COUPON: SUBSCRIBE_CUSTOMER_COUPON,
        SUBSCRIBE_CUSTOMER_COUPON_FAIL: SUBSCRIBE_CUSTOMER_COUPON_FAIL,
        SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: SUBSCRIBE_CUSTOMER_COUPON_SUCCESS,
        RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS: RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS,
        UNSUBSCRIBE_CUSTOMER_COUPON: UNSUBSCRIBE_CUSTOMER_COUPON,
        UNSUBSCRIBE_CUSTOMER_COUPON_FAIL: UNSUBSCRIBE_CUSTOMER_COUPON_FAIL,
        UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS,
        RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS: RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS,
        CLAIM_CUSTOMER_COUPON: CLAIM_CUSTOMER_COUPON,
        CLAIM_CUSTOMER_COUPON_FAIL: CLAIM_CUSTOMER_COUPON_FAIL,
        CLAIM_CUSTOMER_COUPON_SUCCESS: CLAIM_CUSTOMER_COUPON_SUCCESS,
        LoadCustomerCoupons: LoadCustomerCoupons,
        LoadCustomerCouponsFail: LoadCustomerCouponsFail,
        LoadCustomerCouponsSuccess: LoadCustomerCouponsSuccess,
        ResetLoadCustomerCoupons: ResetLoadCustomerCoupons,
        SubscribeCustomerCoupon: SubscribeCustomerCoupon,
        SubscribeCustomerCouponFail: SubscribeCustomerCouponFail,
        SubscribeCustomerCouponSuccess: SubscribeCustomerCouponSuccess,
        ResetSubscribeCustomerCouponProcess: ResetSubscribeCustomerCouponProcess,
        UnsubscribeCustomerCoupon: UnsubscribeCustomerCoupon,
        UnsubscribeCustomerCouponFail: UnsubscribeCustomerCouponFail,
        UnsubscribeCustomerCouponSuccess: UnsubscribeCustomerCouponSuccess,
        ResetUnsubscribeCustomerCouponProcess: ResetUnsubscribeCustomerCouponProcess,
        ClaimCustomerCoupon: ClaimCustomerCoupon,
        ClaimCustomerCouponFail: ClaimCustomerCouponFail,
        ClaimCustomerCouponSuccess: ClaimCustomerCouponSuccess,
        LOAD_DELIVERY_COUNTRIES: LOAD_DELIVERY_COUNTRIES,
        LOAD_DELIVERY_COUNTRIES_FAIL: LOAD_DELIVERY_COUNTRIES_FAIL,
        LOAD_DELIVERY_COUNTRIES_SUCCESS: LOAD_DELIVERY_COUNTRIES_SUCCESS,
        LoadDeliveryCountries: LoadDeliveryCountries,
        LoadDeliveryCountriesFail: LoadDeliveryCountriesFail,
        LoadDeliveryCountriesSuccess: LoadDeliveryCountriesSuccess,
        FORGOT_PASSWORD_EMAIL_REQUEST: FORGOT_PASSWORD_EMAIL_REQUEST,
        FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS: FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS,
        FORGOT_PASSWORD_EMAIL_REQUEST_FAIL: FORGOT_PASSWORD_EMAIL_REQUEST_FAIL,
        ForgotPasswordEmailRequest: ForgotPasswordEmailRequest,
        ForgotPasswordEmailRequestFail: ForgotPasswordEmailRequestFail,
        ForgotPasswordEmailRequestSuccess: ForgotPasswordEmailRequestSuccess,
        LOAD_NOTIFICATION_PREFERENCES: LOAD_NOTIFICATION_PREFERENCES,
        LOAD_NOTIFICATION_PREFERENCES_FAIL: LOAD_NOTIFICATION_PREFERENCES_FAIL,
        LOAD_NOTIFICATION_PREFERENCES_SUCCESS: LOAD_NOTIFICATION_PREFERENCES_SUCCESS,
        UPDATE_NOTIFICATION_PREFERENCES: UPDATE_NOTIFICATION_PREFERENCES,
        UPDATE_NOTIFICATION_PREFERENCES_FAIL: UPDATE_NOTIFICATION_PREFERENCES_FAIL,
        UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: UPDATE_NOTIFICATION_PREFERENCES_SUCCESS,
        RESET_NOTIFICATION_PREFERENCES: RESET_NOTIFICATION_PREFERENCES,
        CLEAR_NOTIFICATION_PREFERENCES: CLEAR_NOTIFICATION_PREFERENCES,
        LoadNotificationPreferences: LoadNotificationPreferences,
        LoadNotificationPreferencesFail: LoadNotificationPreferencesFail,
        LoadNotificationPreferencesSuccess: LoadNotificationPreferencesSuccess,
        UpdateNotificationPreferences: UpdateNotificationPreferences,
        UpdateNotificationPreferencesFail: UpdateNotificationPreferencesFail,
        UpdateNotificationPreferencesSuccess: UpdateNotificationPreferencesSuccess,
        ResetNotificationPreferences: ResetNotificationPreferences,
        ClearNotificationPreferences: ClearNotificationPreferences,
        LOAD_ORDER_DETAILS: LOAD_ORDER_DETAILS,
        LOAD_ORDER_DETAILS_FAIL: LOAD_ORDER_DETAILS_FAIL,
        LOAD_ORDER_DETAILS_SUCCESS: LOAD_ORDER_DETAILS_SUCCESS,
        CLEAR_ORDER_DETAILS: CLEAR_ORDER_DETAILS,
        CANCEL_ORDER: CANCEL_ORDER,
        CANCEL_ORDER_FAIL: CANCEL_ORDER_FAIL,
        CANCEL_ORDER_SUCCESS: CANCEL_ORDER_SUCCESS,
        RESET_CANCEL_ORDER_PROCESS: RESET_CANCEL_ORDER_PROCESS,
        LoadOrderDetails: LoadOrderDetails,
        LoadOrderDetailsFail: LoadOrderDetailsFail,
        LoadOrderDetailsSuccess: LoadOrderDetailsSuccess,
        ClearOrderDetails: ClearOrderDetails,
        CancelOrder: CancelOrder,
        CancelOrderFail: CancelOrderFail,
        CancelOrderSuccess: CancelOrderSuccess,
        ResetCancelOrderProcess: ResetCancelOrderProcess,
        CREATE_ORDER_RETURN_REQUEST: CREATE_ORDER_RETURN_REQUEST,
        CREATE_ORDER_RETURN_REQUEST_FAIL: CREATE_ORDER_RETURN_REQUEST_FAIL,
        CREATE_ORDER_RETURN_REQUEST_SUCCESS: CREATE_ORDER_RETURN_REQUEST_SUCCESS,
        LOAD_ORDER_RETURN_REQUEST: LOAD_ORDER_RETURN_REQUEST,
        LOAD_ORDER_RETURN_REQUEST_FAIL: LOAD_ORDER_RETURN_REQUEST_FAIL,
        LOAD_ORDER_RETURN_REQUEST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_SUCCESS,
        CANCEL_ORDER_RETURN_REQUEST: CANCEL_ORDER_RETURN_REQUEST,
        CANCEL_ORDER_RETURN_REQUEST_FAIL: CANCEL_ORDER_RETURN_REQUEST_FAIL,
        CANCEL_ORDER_RETURN_REQUEST_SUCCESS: CANCEL_ORDER_RETURN_REQUEST_SUCCESS,
        LOAD_ORDER_RETURN_REQUEST_LIST: LOAD_ORDER_RETURN_REQUEST_LIST,
        LOAD_ORDER_RETURN_REQUEST_LIST_FAIL: LOAD_ORDER_RETURN_REQUEST_LIST_FAIL,
        LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS,
        CLEAR_ORDER_RETURN_REQUEST: CLEAR_ORDER_RETURN_REQUEST,
        CLEAR_ORDER_RETURN_REQUEST_LIST: CLEAR_ORDER_RETURN_REQUEST_LIST,
        RESET_CANCEL_RETURN_PROCESS: RESET_CANCEL_RETURN_PROCESS,
        CreateOrderReturnRequest: CreateOrderReturnRequest,
        CreateOrderReturnRequestFail: CreateOrderReturnRequestFail,
        CreateOrderReturnRequestSuccess: CreateOrderReturnRequestSuccess,
        LoadOrderReturnRequest: LoadOrderReturnRequest,
        LoadOrderReturnRequestFail: LoadOrderReturnRequestFail,
        LoadOrderReturnRequestSuccess: LoadOrderReturnRequestSuccess,
        CancelOrderReturnRequest: CancelOrderReturnRequest,
        CancelOrderReturnRequestFail: CancelOrderReturnRequestFail,
        CancelOrderReturnRequestSuccess: CancelOrderReturnRequestSuccess,
        LoadOrderReturnRequestList: LoadOrderReturnRequestList,
        LoadOrderReturnRequestListFail: LoadOrderReturnRequestListFail,
        LoadOrderReturnRequestListSuccess: LoadOrderReturnRequestListSuccess,
        ClearOrderReturnRequest: ClearOrderReturnRequest,
        ClearOrderReturnRequestList: ClearOrderReturnRequestList,
        ResetCancelReturnProcess: ResetCancelReturnProcess,
        LOAD_USER_PAYMENT_METHODS: LOAD_USER_PAYMENT_METHODS,
        LOAD_USER_PAYMENT_METHODS_FAIL: LOAD_USER_PAYMENT_METHODS_FAIL,
        LOAD_USER_PAYMENT_METHODS_SUCCESS: LOAD_USER_PAYMENT_METHODS_SUCCESS,
        SET_DEFAULT_USER_PAYMENT_METHOD: SET_DEFAULT_USER_PAYMENT_METHOD,
        SET_DEFAULT_USER_PAYMENT_METHOD_FAIL: SET_DEFAULT_USER_PAYMENT_METHOD_FAIL,
        SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS: SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS,
        DELETE_USER_PAYMENT_METHOD: DELETE_USER_PAYMENT_METHOD,
        DELETE_USER_PAYMENT_METHOD_FAIL: DELETE_USER_PAYMENT_METHOD_FAIL,
        DELETE_USER_PAYMENT_METHOD_SUCCESS: DELETE_USER_PAYMENT_METHOD_SUCCESS,
        LoadUserPaymentMethods: LoadUserPaymentMethods,
        LoadUserPaymentMethodsFail: LoadUserPaymentMethodsFail,
        LoadUserPaymentMethodsSuccess: LoadUserPaymentMethodsSuccess,
        SetDefaultUserPaymentMethod: SetDefaultUserPaymentMethod,
        SetDefaultUserPaymentMethodFail: SetDefaultUserPaymentMethodFail,
        SetDefaultUserPaymentMethodSuccess: SetDefaultUserPaymentMethodSuccess,
        DeleteUserPaymentMethod: DeleteUserPaymentMethod,
        DeleteUserPaymentMethodFail: DeleteUserPaymentMethodFail,
        DeleteUserPaymentMethodSuccess: DeleteUserPaymentMethodSuccess,
        LOAD_PRODUCT_INTERESTS: LOAD_PRODUCT_INTERESTS,
        LOAD_PRODUCT_INTERESTS_FAIL: LOAD_PRODUCT_INTERESTS_FAIL,
        LOAD_PRODUCT_INTERESTS_SUCCESS: LOAD_PRODUCT_INTERESTS_SUCCESS,
        REMOVE_PRODUCT_INTEREST: REMOVE_PRODUCT_INTEREST,
        REMOVE_PRODUCT_INTEREST_SUCCESS: REMOVE_PRODUCT_INTEREST_SUCCESS,
        REMOVE_PRODUCT_INTEREST_FAIL: REMOVE_PRODUCT_INTEREST_FAIL,
        ADD_PRODUCT_INTEREST: ADD_PRODUCT_INTEREST,
        ADD_PRODUCT_INTEREST_FAIL: ADD_PRODUCT_INTEREST_FAIL,
        ADD_PRODUCT_INTEREST_SUCCESS: ADD_PRODUCT_INTEREST_SUCCESS,
        ADD_PRODUCT_INTEREST_RESET: ADD_PRODUCT_INTEREST_RESET,
        REMOVE_PRODUCT_INTEREST_RESET: REMOVE_PRODUCT_INTEREST_RESET,
        CLEAR_PRODUCT_INTERESTS: CLEAR_PRODUCT_INTERESTS,
        LoadProductInterests: LoadProductInterests,
        LoadProductInterestsFail: LoadProductInterestsFail,
        LoadProductInterestsSuccess: LoadProductInterestsSuccess,
        RemoveProductInterest: RemoveProductInterest,
        RemoveProductInterestSuccess: RemoveProductInterestSuccess,
        RemoveProductInterestFail: RemoveProductInterestFail,
        AddProductInterest: AddProductInterest,
        AddProductInterestSuccess: AddProductInterestSuccess,
        AddProductInterestFail: AddProductInterestFail,
        ResetAddInterestState: ResetAddInterestState,
        ResetRemoveInterestState: ResetRemoveInterestState,
        ClearProductInterests: ClearProductInterests,
        LOAD_REGIONS: LOAD_REGIONS,
        LOAD_REGIONS_SUCCESS: LOAD_REGIONS_SUCCESS,
        LOAD_REGIONS_FAIL: LOAD_REGIONS_FAIL,
        CLEAR_REGIONS: CLEAR_REGIONS,
        LoadRegions: LoadRegions,
        LoadRegionsFail: LoadRegionsFail,
        LoadRegionsSuccess: LoadRegionsSuccess,
        ClearRegions: ClearRegions,
        LOAD_REPLENISHMENT_ORDER_DETAILS: LOAD_REPLENISHMENT_ORDER_DETAILS,
        LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS: LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS,
        LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL: LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL,
        ClEAR_REPLENISHMENT_ORDER_DETAILS: ClEAR_REPLENISHMENT_ORDER_DETAILS,
        CANCEL_REPLENISHMENT_ORDER: CANCEL_REPLENISHMENT_ORDER,
        CANCEL_REPLENISHMENT_ORDER_SUCCESS: CANCEL_REPLENISHMENT_ORDER_SUCCESS,
        CANCEL_REPLENISHMENT_ORDER_FAIL: CANCEL_REPLENISHMENT_ORDER_FAIL,
        CLEAR_CANCEL_REPLENISHMENT_ORDER: CLEAR_CANCEL_REPLENISHMENT_ORDER,
        LoadReplenishmentOrderDetails: LoadReplenishmentOrderDetails,
        LoadReplenishmentOrderDetailsSuccess: LoadReplenishmentOrderDetailsSuccess,
        LoadReplenishmentOrderDetailsFail: LoadReplenishmentOrderDetailsFail,
        ClearReplenishmentOrderDetails: ClearReplenishmentOrderDetails,
        CancelReplenishmentOrder: CancelReplenishmentOrder,
        CancelReplenishmentOrderSuccess: CancelReplenishmentOrderSuccess,
        CancelReplenishmentOrderFail: CancelReplenishmentOrderFail,
        ClearCancelReplenishmentOrder: ClearCancelReplenishmentOrder,
        RESET_PASSWORD: RESET_PASSWORD,
        RESET_PASSWORD_SUCCESS: RESET_PASSWORD_SUCCESS,
        RESET_PASSWORD_FAIL: RESET_PASSWORD_FAIL,
        ResetPassword: ResetPassword,
        ResetPasswordFail: ResetPasswordFail,
        ResetPasswordSuccess: ResetPasswordSuccess,
        LOAD_TITLES: LOAD_TITLES,
        LOAD_TITLES_FAIL: LOAD_TITLES_FAIL,
        LOAD_TITLES_SUCCESS: LOAD_TITLES_SUCCESS,
        LoadTitles: LoadTitles,
        LoadTitlesFail: LoadTitlesFail,
        LoadTitlesSuccess: LoadTitlesSuccess,
        UPDATE_EMAIL: UPDATE_EMAIL,
        UPDATE_EMAIL_ERROR: UPDATE_EMAIL_ERROR,
        UPDATE_EMAIL_SUCCESS: UPDATE_EMAIL_SUCCESS,
        RESET_EMAIL: RESET_EMAIL,
        UpdateEmailAction: UpdateEmailAction,
        UpdateEmailSuccessAction: UpdateEmailSuccessAction,
        UpdateEmailErrorAction: UpdateEmailErrorAction,
        ResetUpdateEmailAction: ResetUpdateEmailAction,
        UPDATE_PASSWORD: UPDATE_PASSWORD,
        UPDATE_PASSWORD_FAIL: UPDATE_PASSWORD_FAIL,
        UPDATE_PASSWORD_SUCCESS: UPDATE_PASSWORD_SUCCESS,
        UPDATE_PASSWORD_RESET: UPDATE_PASSWORD_RESET,
        UpdatePassword: UpdatePassword,
        UpdatePasswordFail: UpdatePasswordFail,
        UpdatePasswordSuccess: UpdatePasswordSuccess,
        UpdatePasswordReset: UpdatePasswordReset,
        LOAD_USER_ADDRESSES: LOAD_USER_ADDRESSES,
        LOAD_USER_ADDRESSES_FAIL: LOAD_USER_ADDRESSES_FAIL,
        LOAD_USER_ADDRESSES_SUCCESS: LOAD_USER_ADDRESSES_SUCCESS,
        ADD_USER_ADDRESS: ADD_USER_ADDRESS,
        ADD_USER_ADDRESS_FAIL: ADD_USER_ADDRESS_FAIL,
        ADD_USER_ADDRESS_SUCCESS: ADD_USER_ADDRESS_SUCCESS,
        UPDATE_USER_ADDRESS: UPDATE_USER_ADDRESS,
        UPDATE_USER_ADDRESS_FAIL: UPDATE_USER_ADDRESS_FAIL,
        UPDATE_USER_ADDRESS_SUCCESS: UPDATE_USER_ADDRESS_SUCCESS,
        DELETE_USER_ADDRESS: DELETE_USER_ADDRESS,
        DELETE_USER_ADDRESS_FAIL: DELETE_USER_ADDRESS_FAIL,
        DELETE_USER_ADDRESS_SUCCESS: DELETE_USER_ADDRESS_SUCCESS,
        LoadUserAddresses: LoadUserAddresses,
        LoadUserAddressesFail: LoadUserAddressesFail,
        LoadUserAddressesSuccess: LoadUserAddressesSuccess,
        AddUserAddress: AddUserAddress,
        AddUserAddressFail: AddUserAddressFail,
        AddUserAddressSuccess: AddUserAddressSuccess,
        UpdateUserAddress: UpdateUserAddress,
        UpdateUserAddressFail: UpdateUserAddressFail,
        UpdateUserAddressSuccess: UpdateUserAddressSuccess,
        DeleteUserAddress: DeleteUserAddress,
        DeleteUserAddressFail: DeleteUserAddressFail,
        DeleteUserAddressSuccess: DeleteUserAddressSuccess,
        LOAD_USER_CONSENTS: LOAD_USER_CONSENTS,
        LOAD_USER_CONSENTS_SUCCESS: LOAD_USER_CONSENTS_SUCCESS,
        LOAD_USER_CONSENTS_FAIL: LOAD_USER_CONSENTS_FAIL,
        RESET_LOAD_USER_CONSENTS: RESET_LOAD_USER_CONSENTS,
        GIVE_USER_CONSENT: GIVE_USER_CONSENT,
        GIVE_USER_CONSENT_FAIL: GIVE_USER_CONSENT_FAIL,
        GIVE_USER_CONSENT_SUCCESS: GIVE_USER_CONSENT_SUCCESS,
        RESET_GIVE_USER_CONSENT_PROCESS: RESET_GIVE_USER_CONSENT_PROCESS,
        TRANSFER_ANONYMOUS_CONSENT: TRANSFER_ANONYMOUS_CONSENT,
        WITHDRAW_USER_CONSENT: WITHDRAW_USER_CONSENT,
        WITHDRAW_USER_CONSENT_FAIL: WITHDRAW_USER_CONSENT_FAIL,
        WITHDRAW_USER_CONSENT_SUCCESS: WITHDRAW_USER_CONSENT_SUCCESS,
        RESET_WITHDRAW_USER_CONSENT_PROCESS: RESET_WITHDRAW_USER_CONSENT_PROCESS,
        LoadUserConsents: LoadUserConsents,
        LoadUserConsentsFail: LoadUserConsentsFail,
        LoadUserConsentsSuccess: LoadUserConsentsSuccess,
        ResetLoadUserConsents: ResetLoadUserConsents,
        GiveUserConsent: GiveUserConsent,
        GiveUserConsentFail: GiveUserConsentFail,
        GiveUserConsentSuccess: GiveUserConsentSuccess,
        ResetGiveUserConsentProcess: ResetGiveUserConsentProcess,
        TransferAnonymousConsent: TransferAnonymousConsent,
        WithdrawUserConsent: WithdrawUserConsent,
        WithdrawUserConsentFail: WithdrawUserConsentFail,
        WithdrawUserConsentSuccess: WithdrawUserConsentSuccess,
        ResetWithdrawUserConsentProcess: ResetWithdrawUserConsentProcess,
        LOAD_ACTIVE_COST_CENTERS: LOAD_ACTIVE_COST_CENTERS,
        LOAD_ACTIVE_COST_CENTERS_FAIL: LOAD_ACTIVE_COST_CENTERS_FAIL,
        LOAD_ACTIVE_COST_CENTERS_SUCCESS: LOAD_ACTIVE_COST_CENTERS_SUCCESS,
        LoadActiveCostCenters: LoadActiveCostCenters,
        LoadActiveCostCentersFail: LoadActiveCostCentersFail,
        LoadActiveCostCentersSuccess: LoadActiveCostCentersSuccess,
        LOAD_USER_DETAILS: LOAD_USER_DETAILS,
        LOAD_USER_DETAILS_FAIL: LOAD_USER_DETAILS_FAIL,
        LOAD_USER_DETAILS_SUCCESS: LOAD_USER_DETAILS_SUCCESS,
        UPDATE_USER_DETAILS: UPDATE_USER_DETAILS,
        UPDATE_USER_DETAILS_FAIL: UPDATE_USER_DETAILS_FAIL,
        UPDATE_USER_DETAILS_SUCCESS: UPDATE_USER_DETAILS_SUCCESS,
        RESET_USER_DETAILS: RESET_USER_DETAILS,
        LoadUserDetails: LoadUserDetails,
        LoadUserDetailsFail: LoadUserDetailsFail,
        LoadUserDetailsSuccess: LoadUserDetailsSuccess,
        UpdateUserDetails: UpdateUserDetails,
        UpdateUserDetailsFail: UpdateUserDetailsFail,
        UpdateUserDetailsSuccess: UpdateUserDetailsSuccess,
        ResetUpdateUserDetails: ResetUpdateUserDetails,
        CLEAR_USER_MISCS_DATA: CLEAR_USER_MISCS_DATA,
        ClearUserMiscsData: ClearUserMiscsData,
        LOAD_USER_ORDERS: LOAD_USER_ORDERS,
        LOAD_USER_ORDERS_FAIL: LOAD_USER_ORDERS_FAIL,
        LOAD_USER_ORDERS_SUCCESS: LOAD_USER_ORDERS_SUCCESS,
        CLEAR_USER_ORDERS: CLEAR_USER_ORDERS,
        LoadUserOrders: LoadUserOrders,
        LoadUserOrdersFail: LoadUserOrdersFail,
        LoadUserOrdersSuccess: LoadUserOrdersSuccess,
        ClearUserOrders: ClearUserOrders,
        REGISTER_USER: REGISTER_USER,
        REGISTER_USER_FAIL: REGISTER_USER_FAIL,
        REGISTER_USER_SUCCESS: REGISTER_USER_SUCCESS,
        RESET_REGISTER_USER_PROCESS: RESET_REGISTER_USER_PROCESS,
        REGISTER_GUEST: REGISTER_GUEST,
        REGISTER_GUEST_FAIL: REGISTER_GUEST_FAIL,
        REGISTER_GUEST_SUCCESS: REGISTER_GUEST_SUCCESS,
        REMOVE_USER: REMOVE_USER,
        REMOVE_USER_FAIL: REMOVE_USER_FAIL,
        REMOVE_USER_SUCCESS: REMOVE_USER_SUCCESS,
        REMOVE_USER_RESET: REMOVE_USER_RESET,
        RegisterUser: RegisterUser,
        RegisterUserFail: RegisterUserFail,
        RegisterUserSuccess: RegisterUserSuccess,
        ResetRegisterUserProcess: ResetRegisterUserProcess,
        RegisterGuest: RegisterGuest,
        RegisterGuestFail: RegisterGuestFail,
        RegisterGuestSuccess: RegisterGuestSuccess,
        RemoveUser: RemoveUser,
        RemoveUserFail: RemoveUserFail,
        RemoveUserSuccess: RemoveUserSuccess,
        RemoveUserReset: RemoveUserReset,
        LOAD_USER_REPLENISHMENT_ORDERS: LOAD_USER_REPLENISHMENT_ORDERS,
        LOAD_USER_REPLENISHMENT_ORDERS_FAIL: LOAD_USER_REPLENISHMENT_ORDERS_FAIL,
        LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS,
        CLEAR_USER_REPLENISHMENT_ORDERS: CLEAR_USER_REPLENISHMENT_ORDERS,
        LoadUserReplenishmentOrders: LoadUserReplenishmentOrders,
        LoadUserReplenishmentOrdersFail: LoadUserReplenishmentOrdersFail,
        LoadUserReplenishmentOrdersSuccess: LoadUserReplenishmentOrdersSuccess,
        ClearUserReplenishmentOrders: ClearUserReplenishmentOrders
    });

    /**
     *
     * Withdraw from the source observable when notifier emits a value
     *
     * Withdraw will result in resubscribing to the source observable
     * Operator is useful to kill ongoing emission transformation on notifier emission
     *
     * @param notifier
     */
    function withdrawOn(notifier) {
        return function (source) { return notifier.pipe(operators.startWith(undefined), operators.switchMapTo(source)); };
    }

    var CheckoutEffects = /** @class */ (function () {
        function CheckoutEffects(actions$, checkoutDeliveryConnector, checkoutPaymentConnector, checkoutCostCenterConnector, checkoutConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutDeliveryConnector = checkoutDeliveryConnector;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.checkoutCostCenterConnector = checkoutCostCenterConnector;
            this.checkoutConnector = checkoutConnector;
            this.contextChange$ = this.actions$.pipe(i3.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.addDeliveryAddress$ = this.actions$.pipe(i3.ofType(ADD_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.checkoutDeliveryConnector
                .createAddress(payload.userId, payload.cartId, payload.address)
                .pipe(operators.mergeMap(function (address) {
                address['titleCode'] = payload.address.titleCode;
                if (payload.address.region && payload.address.region.isocodeShort) {
                    Object.assign(address.region, {
                        isocodeShort: payload.address.region.isocodeShort,
                    });
                }
                if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                    return [
                        new SetDeliveryAddress({
                            userId: payload.userId,
                            cartId: payload.cartId,
                            address: address,
                        }),
                    ];
                }
                else {
                    return [
                        new LoadUserAddresses(payload.userId),
                        new SetDeliveryAddress({
                            userId: payload.userId,
                            cartId: payload.cartId,
                            address: address,
                        }),
                    ];
                }
            }), operators.catchError(function (error) { return rxjs.of(new AddDeliveryAddressFail(normalizeHttpError(error))); })); }), withdrawOn(this.contextChange$));
            this.setDeliveryAddress$ = this.actions$.pipe(i3.ofType(SET_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .setAddress(payload.userId, payload.cartId, payload.address.id)
                    .pipe(operators.mergeMap(function () { return [
                    new SetDeliveryAddressSuccess(payload.address),
                    new ClearCheckoutDeliveryMode({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                    new ClearSupportedDeliveryModes(),
                    new ResetLoadSupportedDeliveryModesProcess(),
                    new LoadSupportedDeliveryModes({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.of(new SetDeliveryAddressFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.loadSupportedDeliveryModes$ = this.actions$.pipe(i3.ofType(LOAD_SUPPORTED_DELIVERY_MODES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .getSupportedModes(payload.userId, payload.cartId)
                    .pipe(operators.map(function (data) {
                    return new LoadSupportedDeliveryModesSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new LoadSupportedDeliveryModesFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.clearCheckoutMiscsDataOnLanguageChange$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE), operators.mergeMap(function () { return [
                new ResetLoadSupportedDeliveryModesProcess(),
                new ResetLoadPaymentTypesProcess(),
                new CheckoutClearMiscsData(),
            ]; }));
            this.clearDeliveryModesOnCurrencyChange$ = this.actions$.pipe(i3.ofType(CURRENCY_CHANGE), operators.map(function () { return new ClearSupportedDeliveryModes(); }));
            this.clearCheckoutDataOnLogout$ = this.actions$.pipe(i3.ofType(LOGOUT), operators.map(function () { return new ClearCheckoutData(); }));
            this.clearCheckoutDataOnLogin$ = this.actions$.pipe(i3.ofType(LOGIN), operators.map(function () { return new ClearCheckoutData(); }));
            this.setDeliveryMode$ = this.actions$.pipe(i3.ofType(SET_DELIVERY_MODE), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .setMode(payload.userId, payload.cartId, payload.selectedModeId)
                    .pipe(operators.mergeMap(function () {
                    return [
                        new SetDeliveryModeSuccess(payload.selectedModeId),
                        new LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new SetDeliveryModeFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.createPaymentDetails$ = this.actions$.pipe(i3.ofType(CREATE_PAYMENT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                // get information for creating a subscription directly with payment provider
                return _this.checkoutPaymentConnector
                    .create(payload.userId, payload.cartId, payload.paymentDetails)
                    .pipe(operators.mergeMap(function (details) {
                    if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                        return [new CreatePaymentDetailsSuccess(details)];
                    }
                    else {
                        return [
                            new LoadUserPaymentMethods(payload.userId),
                            new CreatePaymentDetailsSuccess(details),
                        ];
                    }
                }), operators.catchError(function (error) { return rxjs.of(new CreatePaymentDetailsFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.setPaymentDetails$ = this.actions$.pipe(i3.ofType(SET_PAYMENT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutPaymentConnector
                    .set(payload.userId, payload.cartId, payload.paymentDetails.id)
                    .pipe(operators.map(function () { return new SetPaymentDetailsSuccess(payload.paymentDetails); }), operators.catchError(function (error) { return rxjs.of(new SetPaymentDetailsFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.placeOrder$ = this.actions$.pipe(i3.ofType(PLACE_ORDER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutConnector
                    .placeOrder(payload.userId, payload.cartId, payload.termsChecked)
                    .pipe(operators.switchMap(function (data) { return [
                    new RemoveCart({ cartId: payload.cartId }),
                    new PlaceOrderSuccess(data),
                ]; }), operators.catchError(function (error) { return rxjs.of(new PlaceOrderFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.loadCheckoutDetails$ = this.actions$.pipe(i3.ofType(LOAD_CHECKOUT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutConnector
                    .loadCheckoutDetails(payload.userId, payload.cartId)
                    .pipe(operators.map(function (data) { return new LoadCheckoutDetailsSuccess(data); }), operators.catchError(function (error) { return rxjs.of(new LoadCheckoutDetailsFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.reloadDetailsOnMergeCart$ = this.actions$.pipe(i3.ofType(MERGE_CART_SUCCESS), operators.map(function (action) { return action.payload; }), operators.map(function (payload) {
                return new LoadCheckoutDetails({
                    userId: payload.userId,
                    cartId: payload.cartId,
                });
            }));
            this.clearCheckoutDeliveryAddress$ = this.actions$.pipe(i3.ofType(CLEAR_CHECKOUT_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.filter(function (payload) { return Boolean(payload.cartId); }), operators.switchMap(function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)
                    .pipe(operators.map(function () { return new ClearCheckoutDeliveryAddressSuccess(); }), operators.catchError(function (error) { return rxjs.of(new ClearCheckoutDeliveryAddressFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
            this.clearCheckoutDeliveryMode$ = this.actions$.pipe(i3.ofType(CLEAR_CHECKOUT_DELIVERY_MODE), operators.map(function (action) { return action.payload; }), operators.filter(function (payload) { return Boolean(payload.cartId); }), operators.concatMap(function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryMode(payload.userId, payload.cartId)
                    .pipe(operators.map(function () { return new ClearCheckoutDeliveryModeSuccess(Object.assign({}, payload)); }), operators.catchError(function (error) { return rxjs.from([
                    new ClearCheckoutDeliveryModeFail(Object.assign(Object.assign({}, payload), { error: normalizeHttpError(error) })),
                    new LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]); }));
            }), withdrawOn(this.contextChange$));
            this.setCostCenter$ = this.actions$.pipe(i3.ofType(SET_COST_CENTER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.checkoutCostCenterConnector
                    .setCostCenter(payload.userId, payload.cartId, payload.costCenterId)
                    .pipe(operators.mergeMap(function (_data) { return [
                    new LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                    new SetCostCenterSuccess(payload.costCenterId),
                    new ClearCheckoutDeliveryAddress({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.of(new SetCostCenterFail(normalizeHttpError(error))); }));
            }), withdrawOn(this.contextChange$));
        }
        return CheckoutEffects;
    }());
    CheckoutEffects.decorators = [
        { type: i0.Injectable }
    ];
    CheckoutEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CheckoutDeliveryConnector },
        { type: CheckoutPaymentConnector },
        { type: CheckoutCostCenterConnector },
        { type: CheckoutConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "addDeliveryAddress$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "setDeliveryAddress$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "loadSupportedDeliveryModes$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutMiscsDataOnLanguageChange$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearDeliveryModesOnCurrencyChange$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDataOnLogout$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDataOnLogin$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "setDeliveryMode$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "createPaymentDetails$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "setPaymentDetails$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "placeOrder$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "loadCheckoutDetails$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "reloadDetailsOnMergeCart$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDeliveryAddress$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDeliveryMode$", void 0);
    __decorate([
        i3.Effect()
    ], CheckoutEffects.prototype, "setCostCenter$", void 0);

    var PaymentTypesEffects = /** @class */ (function () {
        function PaymentTypesEffects(actions$, paymentTypeConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.paymentTypeConnector = paymentTypeConnector;
            this.loadPaymentTypes$ = this.actions$.pipe(i3.ofType(LOAD_PAYMENT_TYPES), operators.switchMap(function () {
                return _this.paymentTypeConnector.getPaymentTypes().pipe(operators.map(function (paymentTypes) { return new LoadPaymentTypesSuccess(paymentTypes); }), operators.catchError(function (error) { return rxjs.of(new LoadPaymentTypesFail(normalizeHttpError(error))); }));
            }));
            this.setPaymentType$ = this.actions$.pipe(i3.ofType(SET_PAYMENT_TYPE), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.paymentTypeConnector
                    .setPaymentType(payload.userId, payload.cartId, payload.typeCode, payload.poNumber)
                    .pipe(operators.mergeMap(function (data) {
                    return [
                        new LoadCartSuccess({
                            cart: data,
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                        new ClearCheckoutData(),
                        new SetPaymentTypeSuccess(data),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new SetPaymentTypeFail(normalizeHttpError(error))); }));
            }));
        }
        return PaymentTypesEffects;
    }());
    PaymentTypesEffects.decorators = [
        { type: i0.Injectable }
    ];
    PaymentTypesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: PaymentTypeConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], PaymentTypesEffects.prototype, "loadPaymentTypes$", void 0);
    __decorate([
        i3.Effect()
    ], PaymentTypesEffects.prototype, "setPaymentType$", void 0);

    var ReplenishmentOrderEffects = /** @class */ (function () {
        function ReplenishmentOrderEffects(actions$, checkoutReplOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutReplOrderConnector = checkoutReplOrderConnector;
            this.scheduleReplenishmentOrder$ = this.actions$.pipe(i3.ofType(SCHEDULE_REPLENISHMENT_ORDER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutReplOrderConnector
                    .scheduleReplenishmentOrder(payload.cartId, payload.scheduleReplenishmentForm, payload.termsChecked, payload.userId)
                    .pipe(operators.switchMap(function (data) { return [
                    new RemoveCart({ cartId: payload.cartId }),
                    new ScheduleReplenishmentOrderSuccess(data),
                ]; }), operators.catchError(function (error) { return rxjs.of(new ScheduleReplenishmentOrderFail(normalizeHttpError(error))); }));
            }));
        }
        return ReplenishmentOrderEffects;
    }());
    ReplenishmentOrderEffects.decorators = [
        { type: i0.Injectable }
    ];
    ReplenishmentOrderEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CheckoutReplenishmentOrderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ReplenishmentOrderEffects.prototype, "scheduleReplenishmentOrder$", void 0);

    var effects$1 = [
        CheckoutEffects,
        AddressVerificationEffect,
        CardTypesEffects,
        PaymentTypesEffects,
        ReplenishmentOrderEffects,
    ];

    var initialState = {
        results: {},
    };
    function reducer(state, action) {
        if (state === void 0) { state = initialState; }
        switch (action.type) {
            case VERIFY_ADDRESS_SUCCESS: {
                var results = action.payload;
                return Object.assign(Object.assign({}, state), { results: results });
            }
            case VERIFY_ADDRESS_FAIL: {
                return Object.assign(Object.assign({}, state), { results: 'FAIL' });
            }
            case CLEAR_ADDRESS_VERIFICATION_RESULTS: {
                return Object.assign(Object.assign({}, state), { results: {} });
            }
        }
        return state;
    }
    var getAddressVerificationResults = function (state) { return state.results; };

    var initialState$1 = {
        entities: {},
    };
    function reducer$1(state, action) {
        if (state === void 0) { state = initialState$1; }
        switch (action.type) {
            case LOAD_CARD_TYPES_SUCCESS: {
                var cardTypes = action.payload;
                var entities = cardTypes.reduce(function (cardTypesEntities, name) {
                    var _a;
                    return Object.assign(Object.assign({}, cardTypesEntities), (_a = {}, _a[name.code] = name, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return initialState$1;
            }
        }
        return state;
    }
    var getCardTypesEntites = function (state) { return state.entities; };

    var initialState$2 = {
        poNumber: { po: undefined, costCenter: undefined },
        address: {},
        deliveryMode: {
            supported: {},
            selected: '',
        },
        paymentDetails: {},
        orderDetails: {},
    };
    function reducer$2(state, action) {
        if (state === void 0) { state = initialState$2; }
        switch (action.type) {
            case SET_PAYMENT_TYPE_SUCCESS: {
                var cart = action.payload;
                return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { po: cart.purchaseOrderNumber }) });
            }
            case SET_COST_CENTER_SUCCESS: {
                return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { costCenter: action.payload }) });
            }
            case ADD_DELIVERY_ADDRESS_SUCCESS:
            case SET_DELIVERY_ADDRESS_SUCCESS: {
                var address = action.payload;
                return Object.assign(Object.assign({}, state), { address: address });
            }
            case LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {
                var supportedModes = action.payload;
                if (!supportedModes) {
                    return state;
                }
                var supported = supportedModes.reduce(function (modes, mode) {
                    var _a;
                    return Object.assign(Object.assign({}, modes), (_a = {}, _a[mode.code] = mode, _a));
                }, Object.assign({}, state.deliveryMode.supported));
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: supported }) });
            }
            case SET_DELIVERY_MODE_SUCCESS: {
                var selected = action.payload;
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: selected }) });
            }
            case CREATE_PAYMENT_DETAILS_SUCCESS:
            case SET_PAYMENT_DETAILS_SUCCESS: {
                return Object.assign(Object.assign({}, state), { paymentDetails: action.payload });
            }
            case CREATE_PAYMENT_DETAILS_FAIL: {
                var paymentDetails = action.payload;
                if (paymentDetails['hasError']) {
                    return Object.assign(Object.assign({}, state), { paymentDetails: paymentDetails });
                }
                return state;
            }
            case PLACE_ORDER_SUCCESS:
            case SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: {
                var orderDetails = action.payload;
                return Object.assign(Object.assign({}, state), { orderDetails: orderDetails });
            }
            case CLEAR_CHECKOUT_DATA: {
                return initialState$2;
            }
            case CLEAR_CHECKOUT_STEP: {
                var stepNumber = action.payload;
                switch (stepNumber) {
                    case 1: {
                        return Object.assign(Object.assign({}, state), { address: {} });
                    }
                    case 2: {
                        return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {}, selected: '' }) });
                    }
                    case 3: {
                        return Object.assign(Object.assign({}, state), { paymentDetails: {} });
                    }
                }
                return state;
            }
            case CLEAR_SUPPORTED_DELIVERY_MODES:
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {} }) });
            }
            case LOAD_CHECKOUT_DETAILS_SUCCESS: {
                return Object.assign(Object.assign({}, state), { address: action.payload.deliveryAddress, deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: action.payload.deliveryMode && action.payload.deliveryMode.code }), paymentDetails: action.payload.paymentInfo });
            }
            case CLEAR_CHECKOUT_DELIVERY_ADDRESS: {
                return Object.assign(Object.assign({}, state), { address: {} });
            }
            case CLEAR_CHECKOUT_DELIVERY_MODE: {
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: '' }) });
            }
        }
        return state;
    }

    var initialState$3 = {
        selected: exports.ORDER_TYPE.PLACE_ORDER,
    };
    function reducer$3(state, action) {
        if (state === void 0) { state = initialState$3; }
        switch (action.type) {
            case SET_ORDER_TYPE: {
                return Object.assign(Object.assign({}, state), { selected: action.payload });
            }
            case CLEAR_CHECKOUT_DATA: {
                return initialState$3;
            }
            default: {
                return state;
            }
        }
    }

    var initialState$4 = {
        entities: {},
        selected: undefined,
    };
    function reducer$4(state, action) {
        if (state === void 0) { state = initialState$4; }
        switch (action.type) {
            case LOAD_PAYMENT_TYPES_SUCCESS: {
                var paymentTypes = action.payload;
                var entities = paymentTypes.reduce(function (paymentTypesEntities, name) {
                    var _a;
                    return Object.assign(Object.assign({}, paymentTypesEntities), (_a = {}, _a[name.code] = name, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case SET_PAYMENT_TYPE_SUCCESS: {
                return Object.assign(Object.assign({}, state), { selected: action.payload.paymentType.code });
            }
            case CLEAR_CHECKOUT_DATA: {
                return Object.assign(Object.assign({}, state), { selected: undefined });
            }
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return initialState$4;
            }
        }
        return state;
    }
    var getPaymentTypesEntites = function (state) { return state.entities; };
    var getSelectedPaymentType = function (state) { return state.selected; };

    function getReducers$1() {
        return {
            steps: loaderReducer(CHECKOUT_DETAILS, reducer$2),
            cardTypes: reducer$1,
            addressVerification: reducer,
            paymentTypes: reducer$4,
            orderType: reducer$3,
        };
    }
    var reducerToken$1 = new i0.InjectionToken('CheckoutReducers');
    var reducerProvider$1 = {
        provide: reducerToken$1,
        useFactory: getReducers$1,
    };

    var CheckoutStoreModule = /** @class */ (function () {
        function CheckoutStoreModule() {
        }
        return CheckoutStoreModule;
    }());
    CheckoutStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$2.StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken$1),
                        i3.EffectsModule.forFeature(effects$1),
                    ],
                    providers: [reducerProvider$1],
                },] }
    ];

    var CheckoutModule = /** @class */ (function () {
        function CheckoutModule() {
        }
        CheckoutModule.forRoot = function () {
            return {
                ngModule: CheckoutModule,
                providers: [
                    {
                        provide: PageMetaResolver,
                        useExisting: CheckoutPageMetaResolver,
                        multi: true,
                    },
                ],
            };
        };
        return CheckoutModule;
    }());
    CheckoutModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CheckoutStoreModule, CheckoutEventModule],
                },] }
    ];

    var getDeliveryAddressSelector = function (state) { return state.address; };
    var ɵ0$c = getDeliveryAddressSelector;
    var getDeliveryModeSelector = function (state) { return state.deliveryMode; };
    var ɵ1$7 = getDeliveryModeSelector;
    var getPaymentDetailsSelector = function (state) { return state.paymentDetails; };
    var ɵ2$4 = getPaymentDetailsSelector;
    var getOrderDetailsSelector = function (state) { return state.orderDetails; };
    var ɵ3$3 = getOrderDetailsSelector;
    var getCheckoutState = i1$2.createFeatureSelector(CHECKOUT_FEATURE);
    var ɵ4$1 = function (checkoutState) { return checkoutState.steps; };
    var getCheckoutStepsState = i1$2.createSelector(getCheckoutState, ɵ4$1);
    var ɵ5 = function (state) { return loaderValueSelector(state); };
    var getCheckoutSteps = i1$2.createSelector(getCheckoutStepsState, ɵ5);
    var getDeliveryAddress = i1$2.createSelector(getCheckoutSteps, getDeliveryAddressSelector);
    var getDeliveryMode = i1$2.createSelector(getCheckoutSteps, getDeliveryModeSelector);
    var ɵ6 = function (deliveryMode) {
        return (deliveryMode &&
            Object.keys(deliveryMode.supported).map(function (code) { return deliveryMode.supported[code]; }));
    };
    var getSupportedDeliveryModes = i1$2.createSelector(getDeliveryMode, ɵ6);
    var ɵ7 = function (deliveryMode) {
        return deliveryMode && deliveryMode.selected;
    };
    var getSelectedDeliveryModeCode = i1$2.createSelector(getDeliveryMode, ɵ7);
    var ɵ8 = function (deliveryMode) {
        if (deliveryMode.selected !== '') {
            if (Object.keys(deliveryMode.supported).length === 0) {
                return null;
            }
            return deliveryMode.supported[deliveryMode.selected];
        }
    };
    var getSelectedDeliveryMode = i1$2.createSelector(getDeliveryMode, ɵ8);
    var getPaymentDetails = i1$2.createSelector(getCheckoutSteps, getPaymentDetailsSelector);
    var getCheckoutOrderDetails = i1$2.createSelector(getCheckoutSteps, getOrderDetailsSelector);
    var ɵ9 = function (state) { return loaderSuccessSelector(state) &&
        !loaderLoadingSelector(state); };
    var getCheckoutDetailsLoaded = i1$2.createSelector(getCheckoutStepsState, ɵ9);
    var ɵ10 = function (state) { return state.poNumber.po; };
    var getPoNumer = i1$2.createSelector(getCheckoutSteps, ɵ10);
    var ɵ11 = function (state) { return state.poNumber.costCenter; };
    var getCostCenter = i1$2.createSelector(getCheckoutSteps, ɵ11);

    var ɵ0$d = function (state) { return state.addressVerification; };
    var getAddressVerificationResultsState = i1$2.createSelector(getCheckoutState, ɵ0$d);
    var getAddressVerificationResults$1 = i1$2.createSelector(getAddressVerificationResultsState, getAddressVerificationResults);

    var ɵ0$e = function (state) { return state.cardTypes; };
    var getCardTypesState = i1$2.createSelector(getCheckoutState, ɵ0$e);
    var getCardTypesEntites$1 = i1$2.createSelector(getCardTypesState, getCardTypesEntites);
    var ɵ1$8 = function (entites) {
        return Object.keys(entites).map(function (code) { return entites[code]; });
    };
    var getAllCardTypes = i1$2.createSelector(getCardTypesEntites$1, ɵ1$8);

    var getSelectedOrderTypeSelector = function (state) { return state.selected; };
    var ɵ0$f = function (state) { return state.orderType; };
    var getOrderTypesState = i1$2.createSelector(getCheckoutState, ɵ0$f);
    var getSelectedOrderType = i1$2.createSelector(getOrderTypesState, getSelectedOrderTypeSelector);

    var ɵ0$g = function (state) { return state.paymentTypes; };
    var getPaymentTypesState = i1$2.createSelector(getCheckoutState, ɵ0$g);
    var getPaymentTypesEntites$1 = i1$2.createSelector(getPaymentTypesState, getPaymentTypesEntites);
    var ɵ1$9 = function (entites) {
        return Object.keys(entites).map(function (code) { return entites[code]; });
    };
    var getAllPaymentTypes = i1$2.createSelector(getPaymentTypesEntites$1, ɵ1$9);
    var getSelectedPaymentType$1 = i1$2.createSelector(getPaymentTypesState, getSelectedPaymentType);

    var checkoutGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAddressVerificationResultsState: getAddressVerificationResultsState,
        getAddressVerificationResults: getAddressVerificationResults$1,
        ɵ0: ɵ0$d,
        getCardTypesState: getCardTypesState,
        getCardTypesEntites: getCardTypesEntites$1,
        getAllCardTypes: getAllCardTypes,
        ɵ1: ɵ1$8,
        getCheckoutState: getCheckoutState,
        getCheckoutStepsState: getCheckoutStepsState,
        getCheckoutSteps: getCheckoutSteps,
        getDeliveryAddress: getDeliveryAddress,
        getDeliveryMode: getDeliveryMode,
        getSupportedDeliveryModes: getSupportedDeliveryModes,
        getSelectedDeliveryModeCode: getSelectedDeliveryModeCode,
        getSelectedDeliveryMode: getSelectedDeliveryMode,
        getPaymentDetails: getPaymentDetails,
        getCheckoutOrderDetails: getCheckoutOrderDetails,
        getCheckoutDetailsLoaded: getCheckoutDetailsLoaded,
        getPoNumer: getPoNumer,
        getCostCenter: getCostCenter,
        ɵ2: ɵ2$4,
        ɵ3: ɵ3$3,
        ɵ4: ɵ4$1,
        ɵ5: ɵ5,
        ɵ6: ɵ6,
        ɵ7: ɵ7,
        ɵ8: ɵ8,
        ɵ9: ɵ9,
        ɵ10: ɵ10,
        ɵ11: ɵ11,
        getSelectedOrderTypeSelector: getSelectedOrderTypeSelector,
        getOrderTypesState: getOrderTypesState,
        getSelectedOrderType: getSelectedOrderType,
        getPaymentTypesState: getPaymentTypesState,
        getPaymentTypesEntites: getPaymentTypesEntites$1,
        getAllPaymentTypes: getAllPaymentTypes,
        getSelectedPaymentType: getSelectedPaymentType$1
    });

    var CheckoutCostCenterService = /** @class */ (function () {
        function CheckoutCostCenterService(checkoutStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Set cost center to cart
         * @param costCenterId : cost center id
         */
        CheckoutCostCenterService.prototype.setCostCenter = function (costCenterId) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {
                    _this.checkoutStore.dispatch(new SetCostCenter({
                        userId: userId,
                        cartId: cartId,
                        costCenterId: costCenterId,
                    }));
                }
            });
        };
        /**
         * Get cost center id from cart
         */
        CheckoutCostCenterService.prototype.getCostCenter = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$2.select(getCostCenter)),
            ]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 1), cart = _b[0];
                return Boolean(cart);
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], costCenterId = _b[1];
                if (costCenterId === undefined && cart.costCenter) {
                    costCenterId = cart.costCenter.code;
                    _this.checkoutStore.dispatch(new SetCostCenterSuccess(cart.costCenter.code));
                }
                return costCenterId;
            }));
        };
        return CheckoutCostCenterService;
    }());
    CheckoutCostCenterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutCostCenterService_Factory() { return new CheckoutCostCenterService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ActiveCartService), i0.ɵɵinject(UserIdService)); }, token: CheckoutCostCenterService, providedIn: "root" });
    CheckoutCostCenterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutCostCenterService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ActiveCartService },
        { type: UserIdService }
    ]; };

    var CheckoutDeliveryService = /** @class */ (function () {
        function CheckoutDeliveryService(checkoutStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get supported delivery modes
         */
        CheckoutDeliveryService.prototype.getSupportedDeliveryModes = function () {
            var _this = this;
            return this.checkoutStore.pipe(i1$2.select(getSupportedDeliveryModes), operators.withLatestFrom(this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)))), operators.tap(function (_a) {
                var _b = __read(_a, 2), loadingState = _b[1];
                if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                    _this.loadSupportedDeliveryModes();
                }
            }), operators.pluck(0), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Get selected delivery mode
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryMode = function () {
            return this.checkoutStore.pipe(i1$2.select(getSelectedDeliveryMode));
        };
        /**
         * Get selected delivery mode code
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryModeCode = function () {
            return this.checkoutStore.pipe(i1$2.select(getSelectedDeliveryModeCode));
        };
        /**
         * Get delivery address
         */
        CheckoutDeliveryService.prototype.getDeliveryAddress = function () {
            return this.checkoutStore.pipe(i1$2.select(getDeliveryAddress));
        };
        /**
         * Get status about successfully set Delivery Address
         */
        CheckoutDeliveryService.prototype.getSetDeliveryAddressProcess = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Address
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryAddressProcess = function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryAddressProcess());
        };
        /**
         * Get status about of set Delivery Mode process
         */
        CheckoutDeliveryService.prototype.getSetDeliveryModeProcess = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Mode
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryModeProcess = function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryModeProcess());
        };
        /**
         * Clear info about process of setting Supported Delivery Modes
         */
        CheckoutDeliveryService.prototype.resetLoadSupportedDeliveryModesProcess = function () {
            this.checkoutStore.dispatch(new ResetLoadSupportedDeliveryModesProcess());
        };
        /**
         * Get status about of set supported Delivery Modes process
         */
        CheckoutDeliveryService.prototype.getLoadSupportedDeliveryModeProcess = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear supported delivery modes loaded in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryModes = function () {
            this.checkoutStore.dispatch(new ClearSupportedDeliveryModes());
        };
        /**
         * Get address verification results
         */
        CheckoutDeliveryService.prototype.getAddressVerificationResults = function () {
            return this.checkoutStore.pipe(i1$2.select(getAddressVerificationResults$1), operators.filter(function (results) { return Object.keys(results).length !== 0; }));
        };
        /**
         * Create and set a delivery address using the address param
         * @param address : the Address to be created and set
         */
        CheckoutDeliveryService.prototype.createAndSetAddress = function (address) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new AddDeliveryAddress({
                        userId: userId_1,
                        cartId: cartId_1,
                        address: address,
                    }));
                }
            }
        };
        /**
         * Load supported delivery modes
         */
        CheckoutDeliveryService.prototype.loadSupportedDeliveryModes = function () {
            if (this.actionAllowed()) {
                var userId_2;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_2 = occUserId); })
                    .unsubscribe();
                var cartId_2;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_2 = activeCartId); })
                    .unsubscribe();
                if (userId_2 && cartId_2) {
                    this.checkoutStore.dispatch(new LoadSupportedDeliveryModes({
                        userId: userId_2,
                        cartId: cartId_2,
                    }));
                }
            }
        };
        /**
         * Set delivery mode
         * @param mode : The delivery mode to be set
         */
        CheckoutDeliveryService.prototype.setDeliveryMode = function (mode) {
            if (this.actionAllowed()) {
                var userId_3;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_3 = occUserId); })
                    .unsubscribe();
                var cartId_3;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_3 = activeCartId); })
                    .unsubscribe();
                if (userId_3 && cartId_3) {
                    this.checkoutStore.dispatch(new SetDeliveryMode({
                        userId: userId_3,
                        cartId: cartId_3,
                        selectedModeId: mode,
                    }));
                }
            }
        };
        /**
         * Verifies the address
         * @param address : the address to be verified
         */
        CheckoutDeliveryService.prototype.verifyAddress = function (address) {
            if (this.actionAllowed()) {
                var userId_4;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_4 = occUserId); })
                    .unsubscribe();
                if (userId_4) {
                    this.checkoutStore.dispatch(new VerifyAddress({
                        userId: userId_4,
                        address: address,
                    }));
                }
            }
        };
        /**
         * Set delivery address
         * @param address : The address to be set
         */
        CheckoutDeliveryService.prototype.setDeliveryAddress = function (address) {
            if (this.actionAllowed()) {
                var userId_5;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_5 = occUserId); })
                    .unsubscribe();
                var cartId_4;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_4 = activeCartId); })
                    .unsubscribe();
                if (cartId_4 && userId_5) {
                    this.checkoutStore.dispatch(new SetDeliveryAddress({
                        userId: userId_5,
                        cartId: cartId_4,
                        address: address,
                    }));
                }
            }
        };
        /**
         * Clear address verification results
         */
        CheckoutDeliveryService.prototype.clearAddressVerificationResults = function () {
            this.checkoutStore.dispatch(new ClearAddressVerificationResults());
        };
        /**
         * Clear address already setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryAddress = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId = activeCartId); })
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new ClearCheckoutDeliveryAddress({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Clear selected delivery mode setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryMode = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId = activeCartId); })
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new ClearCheckoutDeliveryMode({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Clear address and delivery mode already setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryDetails = function () {
            this.clearCheckoutDeliveryAddress();
            this.clearCheckoutDeliveryMode();
            this.clearCheckoutDeliveryModes();
        };
        CheckoutDeliveryService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutDeliveryService;
    }());
    CheckoutDeliveryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutDeliveryService_Factory() { return new CheckoutDeliveryService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ActiveCartService), i0.ɵɵinject(UserIdService)); }, token: CheckoutDeliveryService, providedIn: "root" });
    CheckoutDeliveryService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutDeliveryService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ActiveCartService },
        { type: UserIdService }
    ]; };

    var CheckoutPaymentService = /** @class */ (function () {
        function CheckoutPaymentService(checkoutStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get card types
         */
        CheckoutPaymentService.prototype.getCardTypes = function () {
            return this.checkoutStore.pipe(i1$2.select(getAllCardTypes));
        };
        /**
         * Get payment details
         */
        CheckoutPaymentService.prototype.getPaymentDetails = function () {
            return this.checkoutStore.pipe(i1$2.select(getPaymentDetails));
        };
        /**
         * Get status about set Payment Details process
         */
        CheckoutPaymentService.prototype.getSetPaymentDetailsResultProcess = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Payment Details
         */
        CheckoutPaymentService.prototype.resetSetPaymentDetailsProcess = function () {
            this.checkoutStore.dispatch(new ResetSetPaymentDetailsProcess());
        };
        /**
         * Load the supported card types
         */
        CheckoutPaymentService.prototype.loadSupportedCardTypes = function () {
            this.checkoutStore.dispatch(new LoadCardTypes());
        };
        /**
         * Create payment details using the given paymentDetails param
         * @param paymentDetails: the PaymentDetails to be created
         */
        CheckoutPaymentService.prototype.createPaymentDetails = function (paymentDetails) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new CreatePaymentDetails({
                        userId: userId_1,
                        cartId: cartId_1,
                        paymentDetails: paymentDetails,
                    }));
                }
            }
        };
        /**
         * Set payment details
         * @param paymentDetails : the PaymentDetails to be set
         */
        CheckoutPaymentService.prototype.setPaymentDetails = function (paymentDetails) {
            if (this.actionAllowed()) {
                var userId_2;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_2 = occUserId); })
                    .unsubscribe();
                var cart_1;
                this.activeCartService
                    .getActive()
                    .subscribe(function (activeCart) { return (cart_1 = activeCart); })
                    .unsubscribe();
                if (userId_2 && cart_1) {
                    this.checkoutStore.dispatch(new SetPaymentDetails({
                        userId: userId_2,
                        cartId: cart_1.code,
                        paymentDetails: paymentDetails,
                    }));
                }
            }
        };
        /**
         * Sets payment loading to true without having the flicker issue (GH-3102)
         */
        CheckoutPaymentService.prototype.paymentProcessSuccess = function () {
            this.checkoutStore.dispatch(new PaymentProcessSuccess());
        };
        CheckoutPaymentService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutPaymentService;
    }());
    CheckoutPaymentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutPaymentService_Factory() { return new CheckoutPaymentService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ActiveCartService), i0.ɵɵinject(UserIdService)); }, token: CheckoutPaymentService, providedIn: "root" });
    CheckoutPaymentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutPaymentService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ActiveCartService },
        { type: UserIdService }
    ]; };

    var CheckoutService = /** @class */ (function () {
        function CheckoutService(checkoutStore, userIdService, activeCartService) {
            this.checkoutStore = checkoutStore;
            this.userIdService = userIdService;
            this.activeCartService = activeCartService;
        }
        /**
         * Places an order
         */
        CheckoutService.prototype.placeOrder = function (termsChecked) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new PlaceOrder({
                        userId: userId_1,
                        cartId: cartId_1,
                        termsChecked: termsChecked,
                    }));
                }
            }
        };
        /**
         * Schedule a replenishment order
         */
        CheckoutService.prototype.scheduleReplenishmentOrder = function (scheduleReplenishmentForm, termsChecked) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.invokeWithUserId(function (userId) {
                if (Boolean(cartId) &&
                    Boolean(userId) &&
                    userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.checkoutStore.dispatch(new ScheduleReplenishmentOrder({
                        cartId: cartId,
                        scheduleReplenishmentForm: scheduleReplenishmentForm,
                        termsChecked: termsChecked,
                        userId: userId,
                    }));
                }
            });
        };
        /**
         * Returns the place or schedule replenishment order's loading flag
         */
        CheckoutService.prototype.getPlaceOrderLoading = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the place or schedule replenishment order's success flag
         */
        CheckoutService.prototype.getPlaceOrderSuccess = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the place or schedule replenishment order's error flag
         */
        CheckoutService.prototype.getPlaceOrderError = function () {
            return this.checkoutStore.pipe(i1$2.select(getProcessErrorFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Resets the place or schedule replenishment order's processing state
         */
        CheckoutService.prototype.clearPlaceOrderState = function () {
            this.checkoutStore.dispatch(new ClearPlaceOrder());
        };
        /**
         * Clear checkout data
         */
        CheckoutService.prototype.clearCheckoutData = function () {
            this.checkoutStore.dispatch(new ClearCheckoutData());
        };
        /**
         * Clear checkout step
         * @param stepNumber : the step number to be cleared
         */
        CheckoutService.prototype.clearCheckoutStep = function (stepNumber) {
            this.checkoutStore.dispatch(new ClearCheckoutStep(stepNumber));
        };
        /**
         * Load checkout details data
         * @param cartId : string Cart ID of loaded cart
         */
        CheckoutService.prototype.loadCheckoutDetails = function (cartId) {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            if (userId) {
                this.checkoutStore.dispatch(new LoadCheckoutDetails({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Get status of checkout details loaded
         */
        CheckoutService.prototype.getCheckoutDetailsLoaded = function () {
            return this.checkoutStore.pipe(i1$2.select(getCheckoutDetailsLoaded));
        };
        /**
         * Get order details
         */
        CheckoutService.prototype.getOrderDetails = function () {
            return this.checkoutStore.pipe(i1$2.select(getCheckoutOrderDetails));
        };
        /**
         * Set checkout order type
         * @param orderType : an enum of types of order we are placing
         */
        CheckoutService.prototype.setOrderType = function (orderType) {
            this.checkoutStore.dispatch(new SetOrderType(orderType));
        };
        /**
         * Get current checkout order type
         */
        CheckoutService.prototype.getCurrentOrderType = function () {
            return this.checkoutStore.pipe(i1$2.select(getSelectedOrderType));
        };
        CheckoutService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutService;
    }());
    CheckoutService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutService_Factory() { return new CheckoutService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(ActiveCartService)); }, token: CheckoutService, providedIn: "root" });
    CheckoutService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CheckoutService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: ActiveCartService }
    ]; };

    var PaymentTypeService = /** @class */ (function () {
        function PaymentTypeService(checkoutStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get payment types
         */
        PaymentTypeService.prototype.getPaymentTypes = function () {
            var _this = this;
            return this.checkoutStore.pipe(i1$2.select(getAllPaymentTypes), operators.withLatestFrom(this.checkoutStore.pipe(i1$2.select(getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID)))), operators.tap(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], loadingState = _b[1];
                if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                    _this.loadPaymentTypes();
                }
            }), operators.pluck(0), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Load the supported payment types
         */
        PaymentTypeService.prototype.loadPaymentTypes = function () {
            this.checkoutStore.dispatch(new LoadPaymentTypes());
        };
        /**
         * Set payment type to cart
         * @param typeCode
         * @param poNumber : purchase order number
         */
        PaymentTypeService.prototype.setPaymentType = function (typeCode, poNumber) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {
                    _this.checkoutStore.dispatch(new SetPaymentType({
                        userId: userId,
                        cartId: cartId,
                        typeCode: typeCode,
                        poNumber: poNumber,
                    }));
                }
            });
        };
        /**
         * Get the selected payment type
         */
        PaymentTypeService.prototype.getSelectedPaymentType = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$2.select(getSelectedPaymentType$1)),
            ]).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], selected = _b[1];
                if (selected === undefined) {
                    // in b2b, cart always has paymentType (default value 'CARD')
                    if (cart && cart.paymentType) {
                        _this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));
                    }
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), selected = _b[1];
                return selected;
            }));
        };
        /**
         * Get whether the selected payment type is "ACCOUNT" payment
         */
        PaymentTypeService.prototype.isAccountPayment = function () {
            return this.getSelectedPaymentType().pipe(operators.map(function (selected) { return selected === exports.B2BPaymentTypeEnum.ACCOUNT_PAYMENT; }));
        };
        /**
         * Get PO Number
         */
        PaymentTypeService.prototype.getPoNumber = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$2.select(getPoNumer)),
            ]).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], po = _b[1];
                if (po === undefined && cart && cart.purchaseOrderNumber) {
                    _this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], po = _b[1];
                return po;
            }));
        };
        return PaymentTypeService;
    }());
    PaymentTypeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaymentTypeService_Factory() { return new PaymentTypeService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ActiveCartService), i0.ɵɵinject(UserIdService)); }, token: PaymentTypeService, providedIn: "root" });
    PaymentTypeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PaymentTypeService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ActiveCartService },
        { type: UserIdService }
    ]; };

    var OccCheckoutReplenishmentOrderAdapter = /** @class */ (function () {
        function OccCheckoutReplenishmentOrderAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCheckoutReplenishmentOrderAdapter.prototype.scheduleReplenishmentOrder = function (cartId, scheduleReplenishmentForm, termsChecked, userId) {
            scheduleReplenishmentForm = this.converter.convert(scheduleReplenishmentForm, REPLENISHMENT_ORDER_FORM_SERIALIZER);
            var headers = new i1$4.HttpHeaders().set('Content-Type', 'application/json');
            var params = new i1$4.HttpParams()
                .set('cartId', cartId)
                .set('termsChecked', termsChecked.toString());
            return this.http
                .post(this.occEndpoints.getUrl('scheduleReplenishmentOrder', {
                userId: userId,
            }), scheduleReplenishmentForm, { headers: headers, params: params })
                .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));
        };
        return OccCheckoutReplenishmentOrderAdapter;
    }());
    OccCheckoutReplenishmentOrderAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutReplenishmentOrderAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    // To be changed to a more optimised params after ticket: C3PO-1076
    var CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';
    var CARTS_ENDPOINT = '/carts/';
    var OccCheckoutAdapter = /** @class */ (function () {
        function OccCheckoutAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCheckoutAdapter.prototype.getEndpoint = function (userId, subEndpoint) {
            var orderEndpoint = 'users/' + userId + subEndpoint;
            return this.occEndpoints.getEndpoint(orderEndpoint);
        };
        OccCheckoutAdapter.prototype.placeOrder = function (userId, cartId, termsChecked) {
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            var params = new i1$4.HttpParams()
                .set('cartId', cartId)
                .set('termsChecked', termsChecked.toString());
            return this.http
                .post(this.occEndpoints.getUrl('placeOrder', { userId: userId }), {}, { headers: headers, params: params })
                .pipe(this.converter.pipeable(ORDER_NORMALIZER));
        };
        OccCheckoutAdapter.prototype.loadCheckoutDetails = function (userId, cartId) {
            var url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;
            var params = new i1$4.HttpParams({
                fromString: "fields=" + CHECKOUT_PARAMS,
            });
            return this.http.get(url, { params: params });
        };
        OccCheckoutAdapter.prototype.clearCheckoutDeliveryAddress = function (userId, cartId) {
            var url = "" + this.getEndpoint(userId, CARTS_ENDPOINT) + cartId + "/addresses/delivery";
            return this.http.delete(url);
        };
        OccCheckoutAdapter.prototype.clearCheckoutDeliveryMode = function (userId, cartId) {
            var url = "" + this.getEndpoint(userId, CARTS_ENDPOINT) + cartId + "/deliverymode";
            return this.http.delete(url);
        };
        return OccCheckoutAdapter;
    }());
    OccCheckoutAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCheckoutAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var CheckoutOccModule = /** @class */ (function () {
        function CheckoutOccModule() {
        }
        return CheckoutOccModule;
    }());
    CheckoutOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccCheckoutConfig),
                        {
                            provide: CheckoutAdapter,
                            useClass: OccCheckoutAdapter,
                        },
                        { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },
                        {
                            provide: CheckoutDeliveryAdapter,
                            useClass: OccCheckoutDeliveryAdapter,
                        },
                        {
                            provide: CheckoutPaymentAdapter,
                            useClass: OccCheckoutPaymentAdapter,
                        },
                        {
                            provide: PaymentTypeAdapter,
                            useClass: OccCheckoutPaymentTypeAdapter,
                        },
                        {
                            provide: CheckoutCostCenterAdapter,
                            useClass: OccCheckoutCostCenterAdapter,
                        },
                        {
                            provide: CheckoutReplenishmentOrderAdapter,
                            useClass: OccCheckoutReplenishmentOrderAdapter,
                        },
                        {
                            provide: REPLENISHMENT_ORDER_NORMALIZER,
                            useExisting: OccReplenishmentOrderNormalizer,
                            multi: true,
                        },
                        {
                            provide: REPLENISHMENT_ORDER_FORM_SERIALIZER,
                            useExisting: OccReplenishmentOrderFormSerializer,
                            multi: true,
                        },
                    ],
                },] }
    ];

    var CMS_PAGE_NORMALIZER = new i0.InjectionToken('CmsPageNormalizer');

    var OccCmsPageAdapter = /** @class */ (function () {
        function OccCmsPageAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.headers = new i1$4.HttpHeaders().set('Content-Type', 'application/json');
        }
        OccCmsPageAdapter.prototype.load = function (pageContext, fields) {
            // load page by Id
            if (pageContext.type === undefined) {
                return this.http
                    .get(this.occEndpoints.getUrl('page', {
                    id: pageContext.id,
                }, { fields: fields ? fields : 'DEFAULT' }), {
                    headers: this.headers,
                })
                    .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));
            }
            // load page by PageContext
            var httpParams = this.getPagesRequestParams(pageContext);
            return this.http
                .get(this.getPagesEndpoint(httpParams, fields), {
                headers: this.headers,
            })
                .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));
        };
        OccCmsPageAdapter.prototype.getPagesEndpoint = function (params, fields) {
            fields = fields ? fields : 'DEFAULT';
            return this.occEndpoints.getUrl('pages', {}, Object.assign({ fields: fields }, params));
        };
        OccCmsPageAdapter.prototype.getPagesRequestParams = function (pageContext) {
            var httpParams = {};
            // smartedit preview page is loaded by previewToken which added by interceptor
            if (pageContext.id !== 'smartedit-preview') {
                httpParams = { pageType: pageContext.type };
                if (pageContext.type === exports.PageType.CONTENT_PAGE) {
                    httpParams['pageLabelOrId'] = pageContext.id;
                }
                else {
                    httpParams['code'] = pageContext.id;
                }
            }
            return httpParams;
        };
        return OccCmsPageAdapter;
    }());
    OccCmsPageAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCmsPageAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var CMS_COMPONENT_NORMALIZER = new i0.InjectionToken('CmsComponentNormalizer');

    var OccCmsComponentAdapter = /** @class */ (function () {
        function OccCmsComponentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.headers = new i1$4.HttpHeaders().set('Content-Type', 'application/json');
        }
        OccCmsComponentAdapter.prototype.load = function (id, pageContext) {
            return this.http
                .get(this.getComponentEndPoint(id, pageContext), {
                headers: this.headers,
            })
                .pipe(this.converter.pipeable(CMS_COMPONENT_NORMALIZER));
        };
        OccCmsComponentAdapter.prototype.findComponentsByIds = function (ids, pageContext, fields, currentPage, pageSize, sort) {
            if (fields === void 0) { fields = 'DEFAULT'; }
            if (currentPage === void 0) { currentPage = 0; }
            if (pageSize === void 0) { pageSize = ids.length; }
            var requestParams = Object.assign(Object.assign({}, this.getContextParams(pageContext)), this.getPaginationParams(currentPage, pageSize, sort));
            requestParams['componentIds'] = ids.toString();
            return this.http
                .get(this.getComponentsEndpoint(requestParams, fields), {
                headers: this.headers,
            })
                .pipe(operators.pluck('component'), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
        };
        OccCmsComponentAdapter.prototype.findComponentsByIdsLegacy = function (ids, pageContext, fields, currentPage, pageSize, sort) {
            if (fields === void 0) { fields = 'DEFAULT'; }
            if (currentPage === void 0) { currentPage = 0; }
            if (pageSize === void 0) { pageSize = ids.length; }
            var idList = { idList: ids };
            var requestParams = Object.assign(Object.assign({}, this.getContextParams(pageContext)), this.getPaginationParams(currentPage, pageSize, sort));
            return this.http
                .post(this.getComponentsEndpoint(requestParams, fields), idList, {
                headers: this.headers,
            })
                .pipe(operators.pluck('component'), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
        };
        OccCmsComponentAdapter.prototype.getComponentEndPoint = function (id, pageContext) {
            return this.occEndpoints.getUrl('component', { id: id }, this.getContextParams(pageContext));
        };
        OccCmsComponentAdapter.prototype.getComponentsEndpoint = function (requestParams, fields) {
            return this.occEndpoints.getUrl('components', {}, Object.assign({ fields: fields }, requestParams));
        };
        OccCmsComponentAdapter.prototype.getPaginationParams = function (currentPage, pageSize, sort) {
            var requestParams = {};
            if (currentPage !== undefined) {
                requestParams['currentPage'] = currentPage.toString();
            }
            if (pageSize !== undefined) {
                requestParams['pageSize'] = pageSize.toString();
            }
            if (sort !== undefined) {
                requestParams['sort'] = sort;
            }
            return requestParams;
        };
        OccCmsComponentAdapter.prototype.getContextParams = function (pageContext) {
            var requestParams = {};
            switch (pageContext.type) {
                case exports.PageType.PRODUCT_PAGE: {
                    requestParams = { productCode: pageContext.id };
                    break;
                }
                case exports.PageType.CATEGORY_PAGE: {
                    requestParams = { categoryCode: pageContext.id };
                    break;
                }
                case exports.PageType.CATALOG_PAGE: {
                    requestParams = { catalogCode: pageContext.id };
                    break;
                }
            }
            return requestParams;
        };
        return OccCmsComponentAdapter;
    }());
    OccCmsComponentAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCmsComponentAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
    var CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
    (function (DeferLoadingStrategy) {
        /** Defers loading of DOM elements until element is near/in the users view port */
        DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
        /** Renders the DOM instantly without being concerned with the view port */
        DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
    })(exports.DeferLoadingStrategy || (exports.DeferLoadingStrategy = {}));
    var CmsConfig = /** @class */ (function (_super) {
        __extends(CmsConfig, _super);
        function CmsConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CmsConfig;
    }(OccConfig));
    CmsConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsConfig_Factory() { return i0.ɵɵinject(Config); }, token: CmsConfig, providedIn: "root" });
    CmsConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var OccCmsPageNormalizer = /** @class */ (function () {
        function OccCmsPageNormalizer() {
        }
        OccCmsPageNormalizer.prototype.convert = function (source, target) {
            if (target === void 0) { target = {}; }
            this.normalizePageData(source, target);
            this.normalizePageSlotData(source, target);
            this.normalizePageComponentData(source, target);
            this.normalizeComponentData(source, target);
            return target;
        };
        OccCmsPageNormalizer.prototype.normalizePageData = function (source, target) {
            target.page = {
                loadTime: Date.now(),
                name: source.name,
                type: source.typeCode,
                title: source.title,
                pageId: source.uid,
                template: source.template,
                slots: {},
                properties: source.properties,
                label: source.label,
            };
        };
        OccCmsPageNormalizer.prototype.normalizePageSlotData = function (source, target) {
            var e_1, _a;
            if (!Array.isArray(source.contentSlots.contentSlot)) {
                source.contentSlots.contentSlot = [source.contentSlots.contentSlot];
            }
            try {
                for (var _b = __values(source.contentSlots.contentSlot), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var slot = _c.value;
                    target.page.slots[slot.position] = {
                        components: [],
                        properties: slot.properties,
                    };
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        OccCmsPageNormalizer.prototype.normalizePageComponentData = function (source, target) {
            var e_2, _a, e_3, _b;
            try {
                for (var _c = __values(source.contentSlots.contentSlot), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    if (slot.components.component &&
                        Array.isArray(slot.components.component)) {
                        try {
                            for (var _e = (e_3 = void 0, __values(slot.components.component)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                var comp = {
                                    uid: component.uid,
                                    typeCode: component.typeCode,
                                    properties: component.properties,
                                };
                                if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {
                                    comp.flexType = component.flexType;
                                }
                                else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {
                                    comp.flexType = component.uid;
                                }
                                else {
                                    comp.flexType = component.typeCode;
                                }
                                target.page.slots[slot.position].components.push(comp);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        OccCmsPageNormalizer.prototype.normalizeComponentData = function (source, target) {
            var e_4, _a, e_5, _b;
            target.components = [];
            try {
                for (var _c = __values(source.contentSlots.contentSlot), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    if (slot.components.component &&
                        Array.isArray(slot.components.component)) {
                        try {
                            for (var _e = (e_5 = void 0, __values(slot.components.component)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                // we dont put properties into component state
                                if (component.properties) {
                                    component.properties = undefined;
                                }
                                target.components.push(component);
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        };
        return OccCmsPageNormalizer;
    }());
    OccCmsPageNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccCmsPageNormalizer_Factory() { return new OccCmsPageNormalizer(); }, token: OccCmsPageNormalizer, providedIn: "root" });
    OccCmsPageNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /**
     * Abstract class that can be used to implement custom loader logic
     * in order to load CMS structure from third-party CMS system.
     */
    var CmsPageAdapter = /** @class */ (function () {
        function CmsPageAdapter() {
        }
        return CmsPageAdapter;
    }());

    var CmsComponentAdapter = /** @class */ (function () {
        function CmsComponentAdapter() {
        }
        return CmsComponentAdapter;
    }());

    var CmsOccModule = /** @class */ (function () {
        function CmsOccModule() {
        }
        return CmsOccModule;
    }());
    CmsOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        {
                            provide: CmsPageAdapter,
                            useClass: OccCmsPageAdapter,
                        },
                        {
                            provide: CMS_PAGE_NORMALIZER,
                            useExisting: OccCmsPageNormalizer,
                            multi: true,
                        },
                        {
                            provide: CmsComponentAdapter,
                            useClass: OccCmsComponentAdapter,
                        },
                    ],
                },] }
    ];

    var OccCostCenterNormalizer = /** @class */ (function () {
        function OccCostCenterNormalizer() {
        }
        OccCostCenterNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign(Object.assign({}, source), { active: this.normalizeBoolean(source.active) });
            }
            return target;
        };
        /**
         * Returns the boolean value for a string property that is supposed
         * to be of type boolean.
         */
        OccCostCenterNormalizer.prototype.normalizeBoolean = function (property) {
            return typeof property === 'string' ? property === 'true' : property;
        };
        return OccCostCenterNormalizer;
    }());
    OccCostCenterNormalizer.decorators = [
        { type: i0.Injectable }
    ];

    var OccCostCenterSerializer = /** @class */ (function () {
        function OccCostCenterSerializer() {
        }
        OccCostCenterSerializer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign(Object.assign({}, source), { activeFlag: source.active });
                delete target.active;
            }
            return target;
        };
        return OccCostCenterSerializer;
    }());
    OccCostCenterSerializer.decorators = [
        { type: i0.Injectable }
    ];

    var COST_CENTER_NORMALIZER = new i0.InjectionToken('CostCenterNormalizer');
    var COST_CENTERS_NORMALIZER = new i0.InjectionToken('CostCentersListNormalizer');
    var COST_CENTER_SERIALIZER = new i0.InjectionToken('CostCenterSerializer');

    var OccCostCenterListNormalizer = /** @class */ (function () {
        function OccCostCenterListNormalizer(converter) {
            this.converter = converter;
        }
        OccCostCenterListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign(Object.assign({}, source), { values: source.costCenters.map(function (costCenter) { return (Object.assign({}, _this.converter.convert(costCenter, COST_CENTER_NORMALIZER))); }) });
            }
            return target;
        };
        return OccCostCenterListNormalizer;
    }());
    OccCostCenterListNormalizer.decorators = [
        { type: i0.Injectable }
    ];
    OccCostCenterListNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var FeaturesConfig = /** @class */ (function () {
        function FeaturesConfig() {
        }
        return FeaturesConfig;
    }());
    FeaturesConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeaturesConfig_Factory() { return i0.ɵɵinject(Config); }, token: FeaturesConfig, providedIn: "root" });
    FeaturesConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    function isFeatureConfig(config) {
        return typeof config === 'object' && config.features;
    }
    function isInLevel(level, version) {
        if (level === '*') {
            return true;
        }
        var levelParts = level.split('.');
        var versionParts = version.split('.');
        for (var i = 0; i < versionParts.length; i++) {
            var versionNumberPart = Number(versionParts[i]);
            var levelNumberPart = Number(levelParts[i]) || 0;
            if (versionNumberPart !== levelNumberPart) {
                return levelNumberPart > versionNumberPart;
            }
        }
        return true;
    }
    function isFeatureLevel(config, level) {
        if (isFeatureConfig(config)) {
            return level[0] === '!'
                ? !isInLevel(config.features.level, level.substr(1, level.length))
                : isInLevel(config.features.level, level);
        }
    }
    function isFeatureEnabled(config, feature) {
        if (isFeatureConfig(config)) {
            var featureConfig = feature[0] === '!'
                ? config.features[feature.substr(1, feature.length)]
                : config.features[feature];
            var result = typeof featureConfig === 'string'
                ? isFeatureLevel(config, featureConfig)
                : featureConfig;
            return feature[0] === '!' ? !result : result;
        }
    }

    var FeatureConfigService = /** @class */ (function () {
        function FeatureConfigService(config) {
            this.config = config;
        }
        FeatureConfigService.prototype.isLevel = function (version) {
            return isFeatureLevel(this.config, version);
        };
        FeatureConfigService.prototype.isEnabled = function (feature) {
            return isFeatureEnabled(this.config, feature);
        };
        return FeatureConfigService;
    }());
    FeatureConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeatureConfigService_Factory() { return new FeatureConfigService(i0.ɵɵinject(FeaturesConfig)); }, token: FeatureConfigService, providedIn: "root" });
    FeatureConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    FeatureConfigService.ctorParameters = function () { return [
        { type: FeaturesConfig }
    ]; };

    var FeatureLevelDirective = /** @class */ (function () {
        function FeatureLevelDirective(templateRef, viewContainer, featureConfig) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.featureConfig = featureConfig;
            this.hasView = false;
        }
        Object.defineProperty(FeatureLevelDirective.prototype, "cxFeatureLevel", {
            set: function (level) {
                if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {
                    this.viewContainer.createEmbeddedView(this.templateRef);
                    this.hasView = true;
                }
                else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {
                    this.viewContainer.clear();
                    this.hasView = false;
                }
            },
            enumerable: false,
            configurable: true
        });
        return FeatureLevelDirective;
    }());
    FeatureLevelDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cxFeatureLevel]',
                },] }
    ];
    FeatureLevelDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: FeatureConfigService }
    ]; };
    FeatureLevelDirective.propDecorators = {
        cxFeatureLevel: [{ type: i0.Input }]
    };

    var FeatureDirective = /** @class */ (function () {
        function FeatureDirective(templateRef, viewContainer, featureConfig) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.featureConfig = featureConfig;
            this.hasView = false;
        }
        Object.defineProperty(FeatureDirective.prototype, "cxFeature", {
            set: function (feature) {
                if (this.featureConfig.isEnabled(feature) && !this.hasView) {
                    this.viewContainer.createEmbeddedView(this.templateRef);
                    this.hasView = true;
                }
                else if (!this.featureConfig.isEnabled(feature) && this.hasView) {
                    this.viewContainer.clear();
                    this.hasView = false;
                }
            },
            enumerable: false,
            configurable: true
        });
        return FeatureDirective;
    }());
    FeatureDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[cxFeature]',
                },] }
    ];
    FeatureDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: FeatureConfigService }
    ]; };
    FeatureDirective.propDecorators = {
        cxFeature: [{ type: i0.Input }]
    };

    var FeaturesConfigModule = /** @class */ (function () {
        function FeaturesConfigModule() {
        }
        FeaturesConfigModule.forRoot = function (defaultLevel) {
            return {
                ngModule: FeaturesConfigModule,
                providers: [
                    provideDefaultConfig({
                        features: {
                            level: defaultLevel || '*',
                        },
                    }),
                ],
            };
        };
        return FeaturesConfigModule;
    }());
    FeaturesConfigModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [FeatureLevelDirective, FeatureDirective],
                    exports: [FeatureLevelDirective, FeatureDirective],
                },] }
    ];

    var ConfigurationService = /** @class */ (function () {
        function ConfigurationService(rootConfig, defaultConfig, unifiedInjector, config) {
            this.rootConfig = rootConfig;
            this.defaultConfig = defaultConfig;
            this.unifiedInjector = unifiedInjector;
            this.ambientDefaultConfig = {};
            this.ambientConfig = {};
            this.config = config;
            this.unifiedConfig$ = new rxjs.BehaviorSubject(config);
            // We need to use subscription to propagate changes to the config from the beginning.
            // It will be possible to make it lazy, when we drop this compatibility feature
            // in the future.
            this.subscription = this.feedUnifiedConfig().subscribe();
        }
        ConfigurationService.prototype.feedUnifiedConfig = function () {
            var _this = this;
            var configChunks$ = this.unifiedInjector.get(ConfigChunk, []);
            var defaultConfigChunks$ = this.unifiedInjector.get(DefaultConfigChunk, []);
            return rxjs.zip(configChunks$, defaultConfigChunks$).pipe(
            // we don't need result from the root injector
            operators.skip(1), operators.tap(function (_a) {
                var _b = __read(_a, 2), configChunks = _b[0], defaultConfigChunks = _b[1];
                return _this.processConfig(configChunks, defaultConfigChunks);
            }));
        };
        ConfigurationService.prototype.processConfig = function (configChunks, defaultConfigChunks) {
            if (defaultConfigChunks === null || defaultConfigChunks === void 0 ? void 0 : defaultConfigChunks.length) {
                deepMerge.apply(void 0, __spread([this.ambientDefaultConfig], defaultConfigChunks));
            }
            if (configChunks.length) {
                deepMerge.apply(void 0, __spread([this.ambientConfig], configChunks));
            }
            if (configChunks.length || defaultConfigChunks.length) {
                this.emitUnifiedConfig();
            }
        };
        ConfigurationService.prototype.emitUnifiedConfig = function () {
            var newConfig = deepMerge({}, this.defaultConfig, this.ambientDefaultConfig, this.ambientConfig, this.rootConfig);
            this.unifiedConfig$.next(newConfig);
            // compatibility mechanism, can be disabled with feature toggle
            if (!isFeatureEnabled(this.config, 'disableConfigUpdates')) {
                deepMerge(this.config, newConfig);
            }
        };
        ConfigurationService.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.unifiedConfig$.complete();
        };
        return ConfigurationService;
    }());
    ConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(i0.ɵɵinject(RootConfig), i0.ɵɵinject(DefaultConfig), i0.ɵɵinject(UnifiedInjector), i0.ɵɵinject(Config)); }, token: ConfigurationService, providedIn: "root" });
    ConfigurationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConfigurationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [RootConfig,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [DefaultConfig,] }] },
        { type: UnifiedInjector },
        { type: undefined, decorators: [{ type: i0.Inject, args: [Config,] }] }
    ]; };

    var ConfigModule = /** @class */ (function () {
        // To make sure ConfigurationService will be instantiated, we inject it into
        // module constructor
        function ConfigModule(_configurationService) {
        }
        /**
         * Import ConfigModule and contribute config to the global configuration
         *
         * To provide default configuration in libraries provideDefaultConfig should be used instead.
         *
         * @param config Config object to merge with the global configuration
         */
        ConfigModule.withConfig = function (config) {
            return {
                ngModule: ConfigModule,
                providers: [provideConfig(config)],
            };
        };
        /**
         * Import ConfigModule and contribute config to the global configuration using factory function
         *
         * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.
         *
         * @param configFactory Factory function that will generate configuration
         * @param deps Optional dependencies to factory function
         */
        ConfigModule.withConfigFactory = function (configFactory, deps) {
            return {
                ngModule: ConfigModule,
                providers: [provideConfigFactory(configFactory, deps)],
            };
        };
        /**
         * Module with providers, should be imported only once, if possible, at the root of the app.
         *
         * @param config
         */
        ConfigModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ConfigModule,
                providers: [provideConfig(config)],
            };
        };
        return ConfigModule;
    }());
    ConfigModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];
    ConfigModule.ctorParameters = function () { return [
        { type: ConfigurationService }
    ]; };

    var defaultOccCostCentersConfig = {
        backend: {
            occ: {
                endpoints: {
                    getActiveCostCenters: '/costcenters?fields=DEFAULT,unit(BASIC,addresses(DEFAULT))',
                },
            },
        },
    };

    var CostCenterOccModule = /** @class */ (function () {
        function CostCenterOccModule() {
        }
        return CostCenterOccModule;
    }());
    CostCenterOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, ConfigModule.withConfig(defaultOccCostCentersConfig)],
                    providers: [
                        {
                            provide: COST_CENTERS_NORMALIZER,
                            useClass: OccCostCenterListNormalizer,
                            multi: true,
                        },
                        {
                            provide: COST_CENTER_NORMALIZER,
                            useClass: OccCostCenterNormalizer,
                            multi: true,
                        },
                        {
                            provide: COST_CENTER_SERIALIZER,
                            useClass: OccCostCenterSerializer,
                            multi: true,
                        },
                    ],
                },] }
    ];

    var ProductImageNormalizer = /** @class */ (function () {
        function ProductImageNormalizer(config) {
            this.config = config;
        }
        ProductImageNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.images) {
                target.images = this.normalize(source.images);
            }
            return target;
        };
        /**
         * @desc
         * Creates the image structure we'd like to have. Instead of
         * having a single list with all images despite type and format
         * we create a proper structure. With that we can do:
         * - images.primary.thumnail.url
         * - images.GALLERY[0].thumnail.url
         */
        ProductImageNormalizer.prototype.normalize = function (source) {
            var e_1, _a;
            var images = {};
            if (source) {
                try {
                    for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
                        var image = source_1_1.value;
                        var isList = image.hasOwnProperty('galleryIndex');
                        if (!images.hasOwnProperty(image.imageType)) {
                            images[image.imageType] = isList ? [] : {};
                        }
                        var imageContainer = void 0;
                        if (isList && !images[image.imageType][image.galleryIndex]) {
                            images[image.imageType][image.galleryIndex] = {};
                        }
                        if (isList) {
                            imageContainer = images[image.imageType][image.galleryIndex];
                        }
                        else {
                            imageContainer = images[image.imageType];
                        }
                        var targetImage = Object.assign({}, image);
                        targetImage.url = this.normalizeImageUrl(targetImage.url);
                        imageContainer[image.format] = targetImage;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return images;
        };
        /**
         * Traditionally, in an on-prem world, medias and other backend related calls
         * are hosted at the same platform, but in a cloud setup, applications are are
         * typically distributed cross different environments. For media, we use the
         * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`
         * if none provided.
         */
        ProductImageNormalizer.prototype.normalizeImageUrl = function (url) {
            if (new RegExp(/^(http|data:image|\/\/)/i).test(url)) {
                return url;
            }
            return ((this.config.backend.media.baseUrl ||
                this.config.backend.occ.baseUrl ||
                '') + url);
        };
        return ProductImageNormalizer;
    }());
    ProductImageNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductImageNormalizer_Factory() { return new ProductImageNormalizer(i0.ɵɵinject(OccConfig)); }, token: ProductImageNormalizer, providedIn: "root" });
    ProductImageNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ProductImageNormalizer.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };

    var ProductReferenceNormalizer = /** @class */ (function () {
        function ProductReferenceNormalizer() {
        }
        ProductReferenceNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.productReferences) {
                target.productReferences = this.normalize(source.productReferences);
            }
            return target;
        };
        /**
         * @desc
         * Creates the reference structure we'd like to have. Instead of
         * having a single list with all references we create a proper structure.
         * With that we have a semantic API for the clients
         * - product.references.SIMILAR[0].code
         */
        ProductReferenceNormalizer.prototype.normalize = function (source) {
            var e_1, _a;
            var references = {};
            if (source) {
                try {
                    for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
                        var reference = source_1_1.value;
                        if (!references.hasOwnProperty(reference.referenceType)) {
                            references[reference.referenceType] = [];
                        }
                        references[reference.referenceType].push(reference);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return references;
        };
        return ProductReferenceNormalizer;
    }());
    ProductReferenceNormalizer.decorators = [
        { type: i0.Injectable }
    ];

    var OccProductSearchPageNormalizer = /** @class */ (function () {
        function OccProductSearchPageNormalizer(converterService) {
            this.converterService = converterService;
            /**
             * Specifies the minimal number of top values in case
             * non have been setup by the business.
             */
            this.DEFAULT_TOP_VALUES = 6;
        }
        OccProductSearchPageNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === void 0) { target = {}; }
            target = Object.assign(Object.assign({}, target), source);
            this.normalizeFacets(target);
            if (source.products) {
                target.products = source.products.map(function (product) { return _this.converterService.convert(product, PRODUCT_NORMALIZER); });
            }
            return target;
        };
        OccProductSearchPageNormalizer.prototype.normalizeFacets = function (target) {
            this.normalizeFacetValues(target);
            this.normalizeUselessFacets(target);
        };
        /**
         * The (current) backend returns facets with values that do not contribute
         * to the facet navigation much, as the number in the result list will not get
         * behavior, see https://jira.hybris.com/browse/CS-427.
         *
         * As long as this is not in place, we manually filter the facet from the list;
         * any facet that does not have a count < the total results will be dropped from
         * the facets.
         */
        OccProductSearchPageNormalizer.prototype.normalizeUselessFacets = function (target) {
            if (target.facets) {
                target.facets = target.facets.filter(function (facet) {
                    return (!target.pagination ||
                        !target.pagination.totalResults ||
                        ((!facet.hasOwnProperty('visible') || facet.visible) &&
                            facet.values &&
                            facet.values.find(function (value) {
                                return (value.selected || value.count < target.pagination.totalResults);
                            })));
                });
            }
        };
        /*
         * In case there are so-called `topValues` given for the facet values,
         * values are obsolete.
         *
         * `topValues` is a feature in Adaptive Search which can limit a large
         * amount of facet values to a small set (5 by default). As long as the backend
         * provides all facet values AND topValues, we normalize the data to not bother
         * the UI with this specific feature.
         */
        OccProductSearchPageNormalizer.prototype.normalizeFacetValues = function (target) {
            var _this = this;
            if (target.facets) {
                target.facets = target.facets.map(function (facetSource) {
                    var topValues = facetSource.topValues, facetTarget = __rest(facetSource, ["topValues"]);
                    facetTarget.topValueCount =
                        (topValues === null || topValues === void 0 ? void 0 : topValues.length) > 0 ? topValues.length : _this.DEFAULT_TOP_VALUES;
                    return facetTarget;
                });
            }
        };
        return OccProductSearchPageNormalizer;
    }());
    OccProductSearchPageNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccProductSearchPageNormalizer_Factory() { return new OccProductSearchPageNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccProductSearchPageNormalizer, providedIn: "root" });
    OccProductSearchPageNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccProductSearchPageNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var OccProductReferencesListNormalizer = /** @class */ (function () {
        function OccProductReferencesListNormalizer(converter) {
            this.converter = converter;
        }
        OccProductReferencesListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === void 0) { target = []; }
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source && source.references) {
                target = source.references.map(function (reference) { return (Object.assign(Object.assign({}, reference), { target: _this.converter.convert(reference.target, PRODUCT_NORMALIZER) })); });
                return target;
            }
        };
        return OccProductReferencesListNormalizer;
    }());
    OccProductReferencesListNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccProductReferencesListNormalizer_Factory() { return new OccProductReferencesListNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccProductReferencesListNormalizer, providedIn: "root" });
    OccProductReferencesListNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccProductReferencesListNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var ProductNameNormalizer = /** @class */ (function () {
        function ProductNameNormalizer(config) {
            this.config = config;
        }
        ProductNameNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.name) {
                target.name = this.normalize(source.name);
                target.nameHtml = source.name;
            }
            return target;
        };
        ProductNameNormalizer.prototype.normalize = function (name) {
            return name.replace(/<[^>]*>/g, '');
        };
        return ProductNameNormalizer;
    }());
    ProductNameNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductNameNormalizer_Factory() { return new ProductNameNormalizer(i0.ɵɵinject(OccConfig)); }, token: ProductNameNormalizer, providedIn: "root" });
    ProductNameNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ProductNameNormalizer.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };

    var PRODUCT_REFERENCES_NORMALIZER = new i0.InjectionToken('ProductReferencesListNormalizer');

    var OccProductReferencesAdapter = /** @class */ (function () {
        function OccProductReferencesAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccProductReferencesAdapter.prototype.load = function (productCode, referenceType, pageSize) {
            return this.http
                .get(this.getEndpoint(productCode, referenceType, pageSize))
                .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));
        };
        OccProductReferencesAdapter.prototype.getEndpoint = function (code, reference, pageSize) {
            return this.occEndpoints.getUrl('productReferences', {
                productCode: code,
            }, { referenceType: reference, pageSize: pageSize });
        };
        return OccProductReferencesAdapter;
    }());
    OccProductReferencesAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccProductReferencesAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var PRODUCT_REVIEW_NORMALIZER = new i0.InjectionToken('ProductReviewNormalizer');
    var PRODUCT_REVIEW_SERIALIZER = new i0.InjectionToken('ProductReviewSerializer');

    var OccProductReviewsAdapter = /** @class */ (function () {
        function OccProductReviewsAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccProductReviewsAdapter.prototype.load = function (productCode, maxCount) {
            return this.http
                .get(this.getEndpoint(productCode, maxCount))
                .pipe(operators.pluck('reviews'), this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER));
        };
        OccProductReviewsAdapter.prototype.post = function (productCode, review) {
            review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            var body = new URLSearchParams();
            body.append('headline', review.headline);
            body.append('comment', review.comment);
            body.append('rating', review.rating.toString());
            body.append('alias', review.alias);
            return this.http.post(this.getEndpoint(productCode), body.toString(), {
                headers: headers,
            });
        };
        OccProductReviewsAdapter.prototype.getEndpoint = function (code, maxCount) {
            return this.occEndpoints.getUrl('productReviews', {
                productCode: code,
            }, { maxCount: maxCount });
        };
        return OccProductReviewsAdapter;
    }());
    OccProductReviewsAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccProductReviewsAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var PRODUCT_SEARCH_PAGE_NORMALIZER = new i0.InjectionToken('ProductSearchPageNormalizer');
    var PRODUCT_SUGGESTION_NORMALIZER = new i0.InjectionToken('ProductSuggestionNormalizer');

    var DEFAULT_SEARCH_CONFIG = {
        pageSize: 20,
    };
    var OccProductSearchAdapter = /** @class */ (function () {
        function OccProductSearchAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccProductSearchAdapter.prototype.search = function (query, searchConfig) {
            if (searchConfig === void 0) { searchConfig = DEFAULT_SEARCH_CONFIG; }
            return this.http
                .get(this.getSearchEndpoint(query, searchConfig))
                .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));
        };
        OccProductSearchAdapter.prototype.loadSuggestions = function (term, pageSize) {
            if (pageSize === void 0) { pageSize = 3; }
            return this.http
                .get(this.getSuggestionEndpoint(term, pageSize.toString()))
                .pipe(operators.pluck('suggestions'), this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER));
        };
        OccProductSearchAdapter.prototype.getSearchEndpoint = function (query, searchConfig) {
            return this.occEndpoints.getUrl('productSearch', {}, Object.assign({ query: query }, searchConfig));
        };
        OccProductSearchAdapter.prototype.getSuggestionEndpoint = function (term, max) {
            return this.occEndpoints.getUrl('productSuggestions', {}, { term: term, max: max });
        };
        return OccProductSearchAdapter;
    }());
    OccProductSearchAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccProductSearchAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    /**
     * Merge occ fields parameters
     *
     * @param fields Fields definition as string or object
     */
    function mergeFields(fields) {
        var parsedFields = fields.map(function (f) { return typeof f === 'string' ? parseFields(f) : f; });
        var mergedFields = optimizeFields(deepMerge.apply(void 0, __spread([{}], parsedFields)));
        return stringifyFields(mergedFields);
    }
    /**
     * Optimize fields definition by removing not needed groups
     *
     * @param fields
     */
    function optimizeFields(fields) {
        if (fields === void 0) { fields = {}; }
        var keys = Object.keys(fields);
        if (keys.includes('FULL')) {
            delete fields['DEFAULT'];
            delete fields['BASIC'];
        }
        else if (keys.includes('DEFAULT')) {
            delete fields['BASIC'];
        }
        Object.keys(fields).forEach(function (key) {
            fields[key] = optimizeFields(fields[key]);
        });
        return fields;
    }
    /**
     * Parse string field definition to an AST object
     *
     * @param fields Fields string definition
     * @param startIndex Used for recurrence
     */
    function parseFields(fields, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        var parsedFields = {};
        var i = startIndex;
        while (i < fields.length) {
            if (fields[i] === ',') {
                if (i > startIndex) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = {};
                }
                startIndex = i + 1;
            }
            else if (fields[i] === '(') {
                var subFields = parseFields(fields, i + 1);
                if (Array.isArray(subFields)) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];
                    startIndex = subFields[1];
                    i = startIndex - 1;
                }
                else {
                    return parsedFields;
                }
            }
            else if (fields[i] === ')') {
                if (i > startIndex) {
                    parsedFields[fields.substr(startIndex, i - startIndex)] = {};
                }
                return [parsedFields, i + 1];
            }
            i++;
        }
        if (startIndex < fields.length) {
            parsedFields[fields.substr(startIndex, i - startIndex)] = {};
        }
        return parsedFields;
    }
    /**
     * Convert AST object fields definition to string representation
     *
     * @param fields
     */
    function stringifyFields(fields) {
        return Object.keys(fields)
            .map(function (key) {
            var subFields = stringifyFields(fields[key]);
            return subFields ? key + "(" + subFields + ")" : key;
        })
            .join(',');
    }
    /**
     * Extract part of the object described by fields definition
     *
     * @param data
     * @param fields
     */
    function extractFields(data, fields) {
        var parsedFields = typeof fields === 'string' ? parseFields(fields) : fields;
        return getObjectPart(data, parsedFields);
    }
    function getObjectPart(data, fields) {
        if (!isObject(data)) {
            return data;
        }
        var keys = Object.keys(fields);
        if (keys.length === 0 ||
            // we should not extract parts of the object with ambiguous fields definitions
            keys.find(function (el) { return el === 'BASIC' || el === 'DEFAULT' || el === 'FULL'; })) {
            return data;
        }
        var result = {};
        keys.forEach(function (key) {
            if (data.hasOwnProperty(key)) {
                result[key] = getObjectPart(data[key], fields[key]);
            }
        });
        return result;
    }

    /**
     * Helper service for optimizing endpoint calls to occ backend
     */
    var OccFieldsService = /** @class */ (function () {
        function OccFieldsService(http) {
            this.http = http;
            this.FIELDS_PARAM = 'fields';
        }
        /**
         * Merge similar occ endpoints calls by merging fields parameter
         *
         * We assume that different scopes are defined by different fields parameters,
         * so we are grouping all requests with the same urls (except fields definition)
         * and merging into one request with fields that will satisfy all separate ones.
         *
         * @param models
         */
        OccFieldsService.prototype.getOptimalUrlGroups = function (models) {
            var e_1, _a, e_2, _b;
            var groupedByUrls = {};
            try {
                for (var models_1 = __values(models), models_1_1 = models_1.next(); !models_1_1.done; models_1_1 = models_1.next()) {
                    var model = models_1_1.value;
                    var _c = __read(this.splitFields(model.url), 2), urlPart = _c[0], fields = _c[1];
                    if (!groupedByUrls[urlPart]) {
                        groupedByUrls[urlPart] = {};
                    }
                    model.fields = fields ? parseFields(fields) : {};
                    groupedByUrls[urlPart][model.scopedData.scope] = model;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var mergedUrls = {};
            try {
                for (var _d = __values(Object.entries(groupedByUrls)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var _f = __read(_e.value, 2), url = _f[0], group = _f[1];
                    var urlWithFields = this.getUrlWithFields(url, Object.values(group).map(function (lo) { return lo.fields; }));
                    mergedUrls[urlWithFields] = group;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return mergedUrls;
        };
        /**
         * Extract fields parameter from occ endpoint url
         *
         * @param urlWithFields
         */
        OccFieldsService.prototype.splitFields = function (urlWithFields) {
            var _this = this;
            var _a = __read(urlWithFields.split('?'), 2), url = _a[0], params = _a[1];
            var paramsMap = {};
            if (params) {
                params.split('&').map(function (param) {
                    var keyValue = param.split('=');
                    paramsMap[keyValue[0]] = keyValue[1];
                });
            }
            var nonFieldsParams = Object.keys(paramsMap)
                .sort()
                .reduce(function (id, par) {
                if (par !== _this.FIELDS_PARAM) {
                    id.push(paramsMap[par] ? par + "=" + paramsMap[par] : par);
                }
                return id;
            }, []);
            var nonFields = nonFieldsParams.join('&');
            return [
                nonFields ? url + "?" + nonFields : url,
                paramsMap[this.FIELDS_PARAM],
            ];
        };
        /**
         * Combine url with field parameters
         *
         * @param url
         * @param fields
         */
        OccFieldsService.prototype.getUrlWithFields = function (url, fields) {
            var mergedFields = mergeFields(fields);
            if (mergedFields) {
                url += url.includes('?') ? '&' : '?';
                url += this.FIELDS_PARAM + "=" + mergedFields;
            }
            return url;
        };
        return OccFieldsService;
    }());
    OccFieldsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccFieldsService_Factory() { return new OccFieldsService(i0.ɵɵinject(i1$4.HttpClient)); }, token: OccFieldsService, providedIn: "root" });
    OccFieldsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OccFieldsService.ctorParameters = function () { return [
        { type: i1$4.HttpClient }
    ]; };

    var OccRequestsOptimizerService = /** @class */ (function () {
        function OccRequestsOptimizerService(http, occFields) {
            this.http = http;
            this.occFields = occFields;
        }
        /**
         * Optimize occ endpoint calls merging requests to the same url by merging field parameters
         *
         * @param scopedDataWithUrls
         * @param dataFactory
         */
        OccRequestsOptimizerService.prototype.scopedDataLoad = function (scopedDataWithUrls, dataFactory) {
            var _this = this;
            var result = [];
            if (!dataFactory) {
                dataFactory = function (url) { return _this.http.get(url); };
            }
            var mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);
            Object.entries(mergedUrls).forEach(function (_a) {
                var _b = __read(_a, 2), url = _b[0], groupedModelsSet = _b[1];
                var groupedModels = Object.values(groupedModelsSet);
                if (groupedModels.length === 1) {
                    // only one scope for url, we can pass the data straightaway
                    result.push(Object.assign(Object.assign({}, groupedModels[0].scopedData), { data$: dataFactory(url) }));
                }
                else {
                    // multiple scopes per url
                    // we have to split the model per each scope
                    var data$_1 = dataFactory(url).pipe(operators.shareReplay(1));
                    groupedModels.forEach(function (modelData) {
                        result.push(Object.assign(Object.assign({}, modelData.scopedData), { data$: data$_1.pipe(operators.map(function (data) { return extractFields(data, modelData.fields); })) }));
                    });
                }
            });
            return result;
        };
        return OccRequestsOptimizerService;
    }());
    OccRequestsOptimizerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccRequestsOptimizerService_Factory() { return new OccRequestsOptimizerService(i0.ɵɵinject(i1$4.HttpClient), i0.ɵɵinject(OccFieldsService)); }, token: OccRequestsOptimizerService, providedIn: "root" });
    OccRequestsOptimizerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OccRequestsOptimizerService.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccFieldsService }
    ]; };

    var OccProductAdapter = /** @class */ (function () {
        function OccProductAdapter(http, occEndpoints, converter, requestsOptimizer) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
            this.requestsOptimizer = requestsOptimizer;
        }
        OccProductAdapter.prototype.load = function (productCode, scope) {
            return this.http
                .get(this.getEndpoint(productCode, scope))
                .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));
        };
        OccProductAdapter.prototype.loadMany = function (products) {
            var _this = this;
            var scopedDataWithUrls = products.map(function (model) { return ({
                scopedData: model,
                url: _this.getEndpoint(model.code, model.scope),
            }); });
            return this.requestsOptimizer
                .scopedDataLoad(scopedDataWithUrls)
                .map(function (scopedProduct) { return (Object.assign(Object.assign({}, scopedProduct), { data$: scopedProduct.data$.pipe(_this.converter.pipeable(PRODUCT_NORMALIZER)) })); });
        };
        OccProductAdapter.prototype.getEndpoint = function (code, scope) {
            return this.occEndpoints.getUrl('product', {
                productCode: code,
            }, undefined, scope);
        };
        return OccProductAdapter;
    }());
    OccProductAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccProductAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService },
        { type: OccRequestsOptimizerService }
    ]; };

    var ProductAdapter = /** @class */ (function () {
        function ProductAdapter() {
        }
        return ProductAdapter;
    }());

    var ProductReferencesAdapter = /** @class */ (function () {
        function ProductReferencesAdapter() {
        }
        return ProductReferencesAdapter;
    }());

    var ProductReviewsAdapter = /** @class */ (function () {
        function ProductReviewsAdapter() {
        }
        return ProductReviewsAdapter;
    }());

    var ProductSearchAdapter = /** @class */ (function () {
        function ProductSearchAdapter() {
        }
        return ProductSearchAdapter;
    }());

    (function (ProductScope) {
        ProductScope["LIST"] = "list";
        ProductScope["DETAILS"] = "details";
        ProductScope["ATTRIBUTES"] = "attributes";
        ProductScope["VARIANTS"] = "variants";
    })(exports.ProductScope || (exports.ProductScope = {}));

    var defaultOccProductConfig = {
        backend: {
            occ: {
                endpoints: {
                    product: {
                        default: 'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',
                        list: 'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',
                        details: 'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',
                        attributes: 'products/${productCode}?fields=classifications',
                        variants: 'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',
                    },
                    productReviews: 'products/${productCode}/reviews',
                    // Uncomment this when occ gets configured
                    // productReferences:
                    //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',
                    productReferences: 'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',
                    // tslint:disable:max-line-length
                    productSearch: 'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',
                    // tslint:enable
                    productSuggestions: 'products/suggestions',
                },
            },
            loadingScopes: {
                product: {
                    details: {
                        include: [exports.ProductScope.LIST, exports.ProductScope.VARIANTS],
                    },
                },
            },
        },
    };

    var ProductOccModule = /** @class */ (function () {
        function ProductOccModule() {
        }
        return ProductOccModule;
    }());
    ProductOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccProductConfig),
                        {
                            provide: ProductAdapter,
                            useClass: OccProductAdapter,
                        },
                        {
                            provide: PRODUCT_NORMALIZER,
                            useExisting: ProductImageNormalizer,
                            multi: true,
                        },
                        {
                            provide: PRODUCT_NORMALIZER,
                            useExisting: ProductNameNormalizer,
                            multi: true,
                        },
                        {
                            provide: ProductReferencesAdapter,
                            useClass: OccProductReferencesAdapter,
                        },
                        {
                            provide: PRODUCT_REFERENCES_NORMALIZER,
                            useExisting: OccProductReferencesListNormalizer,
                            multi: true,
                        },
                        {
                            provide: ProductSearchAdapter,
                            useClass: OccProductSearchAdapter,
                        },
                        {
                            provide: PRODUCT_SEARCH_PAGE_NORMALIZER,
                            useExisting: OccProductSearchPageNormalizer,
                            multi: true,
                        },
                        {
                            provide: ProductReviewsAdapter,
                            useClass: OccProductReviewsAdapter,
                        },
                    ],
                },] }
    ];

    var LANGUAGE_NORMALIZER = new i0.InjectionToken('LanguageNormalizer');
    var CURRENCY_NORMALIZER = new i0.InjectionToken('CurrencyNormalizer');
    var COUNTRY_NORMALIZER = new i0.InjectionToken('CountryNormalizer');
    var REGION_NORMALIZER = new i0.InjectionToken('RegionNormalizer');

    var OccSiteAdapter = /** @class */ (function () {
        function OccSiteAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        OccSiteAdapter.prototype.loadLanguages = function () {
            return this.http
                .get(this.occEndpointsService.getUrl('languages'))
                .pipe(operators.map(function (languageList) { return languageList.languages; }), this.converterService.pipeableMany(LANGUAGE_NORMALIZER));
        };
        OccSiteAdapter.prototype.loadCurrencies = function () {
            return this.http
                .get(this.occEndpointsService.getUrl('currencies'))
                .pipe(operators.map(function (currencyList) { return currencyList.currencies; }), this.converterService.pipeableMany(CURRENCY_NORMALIZER));
        };
        OccSiteAdapter.prototype.loadCountries = function (type) {
            return this.http
                .get(this.occEndpointsService.getUrl('countries', undefined, type ? { type: type } : undefined))
                .pipe(operators.map(function (countryList) { return countryList.countries; }), this.converterService.pipeableMany(COUNTRY_NORMALIZER));
        };
        OccSiteAdapter.prototype.loadRegions = function (countryIsoCode) {
            return this.http
                .get(this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode }))
                .pipe(operators.map(function (regionList) { return regionList.regions; }), this.converterService.pipeableMany(REGION_NORMALIZER));
        };
        OccSiteAdapter.prototype.loadBaseSite = function () {
            var baseUrl = this.occEndpointsService.getBaseEndpoint();
            var urlSplits = baseUrl.split('/');
            var activeSite = urlSplits.pop();
            var url = urlSplits.join('/') + '/basesites';
            var params = new i1$4.HttpParams({
                fromString: 'fields=FULL',
            });
            return this.http
                .get(url, { params: params })
                .pipe(operators.map(function (siteList) {
                return siteList.baseSites.find(function (site) { return site.uid === activeSite; });
            }));
        };
        return OccSiteAdapter;
    }());
    OccSiteAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccSiteAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var SiteAdapter = /** @class */ (function () {
        function SiteAdapter() {
        }
        return SiteAdapter;
    }());

    var defaultOccSiteContextConfig = {
        backend: {
            occ: {
                endpoints: {
                    languages: 'languages',
                    currencies: 'currencies',
                    countries: 'countries',
                    regions: 'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',
                },
            },
        },
    };

    /**
     * Facade that provides easy access to curreny state, actions and selectors.
     */
    var CurrencyService = /** @class */ (function () {
        function CurrencyService(store, winRef, config) {
            this.store = store;
            this.config = config;
            this.sessionStorage = winRef.sessionStorage;
        }
        /**
         * Represents all the currencies supported by the current store.
         */
        CurrencyService.prototype.getAll = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getAllCurrencies), operators.tap(function (currencies) {
                if (!currencies) {
                    _this.store.dispatch(new LoadCurrencies());
                }
            }), operators.filter(function (currenies) { return Boolean(currenies); }));
        };
        /**
         * Represents the isocode of the active currency.
         */
        CurrencyService.prototype.getActive = function () {
            return this.store.pipe(i1$2.select(getActiveCurrency), operators.filter(function (active) { return Boolean(active); }));
        };
        /**
         * Sets the active language.
         */
        CurrencyService.prototype.setActive = function (isocode) {
            var _this = this;
            return this.store
                .pipe(i1$2.select(getActiveCurrency), operators.take(1))
                .subscribe(function (activeCurrency) {
                if (activeCurrency !== isocode) {
                    _this.store.dispatch(new SetActiveCurrency(isocode));
                }
            });
        };
        /**
         * Initials the active currency. The active currency is either given
         * by the last visit (stored in session storage) or by the
         * default session currency of the store.
         */
        CurrencyService.prototype.initialize = function () {
            var value;
            this.getActive()
                .subscribe(function (val) { return (value = val); })
                .unsubscribe();
            if (value) {
                // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)
                return;
            }
            var sessionCurrency = this.sessionStorage && this.sessionStorage.getItem('currency');
            if (sessionCurrency &&
                getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(sessionCurrency)) {
                this.setActive(sessionCurrency);
            }
            else {
                this.setActive(getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID));
            }
        };
        return CurrencyService;
    }());
    CurrencyService.decorators = [
        { type: i0.Injectable }
    ];
    CurrencyService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: WindowRef },
        { type: SiteContextConfig }
    ]; };

    /**
     * Facade that provides easy access to language state, actions and selectors.
     */
    var LanguageService = /** @class */ (function () {
        function LanguageService(store, winRef, config) {
            this.store = store;
            this.config = config;
            this.sessionStorage = winRef.sessionStorage;
        }
        /**
         * Represents all the languages supported by the current store.
         */
        LanguageService.prototype.getAll = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getAllLanguages), operators.tap(function (languages) {
                if (!languages) {
                    _this.store.dispatch(new LoadLanguages());
                }
            }), operators.filter(function (languages) { return Boolean(languages); }));
        };
        /**
         * Represents the isocode of the active language.
         */
        LanguageService.prototype.getActive = function () {
            return this.store.pipe(i1$2.select(getActiveLanguage), operators.filter(function (active) { return Boolean(active); }));
        };
        /**
         * Sets the active language.
         */
        LanguageService.prototype.setActive = function (isocode) {
            var _this = this;
            return this.store
                .pipe(i1$2.select(getActiveLanguage), operators.take(1))
                .subscribe(function (activeLanguage) {
                if (activeLanguage !== isocode) {
                    _this.store.dispatch(new SetActiveLanguage(isocode));
                }
            });
        };
        /**
         * Initials the active language. The active language is either given
         * by the last visit (stored in session storage) or by the
         * default session language of the store.
         */
        LanguageService.prototype.initialize = function () {
            var value;
            this.getActive()
                .subscribe(function (val) { return (value = val); })
                .unsubscribe();
            if (value) {
                // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)
                return;
            }
            var sessionLanguage = this.sessionStorage && this.sessionStorage.getItem('language');
            if (sessionLanguage &&
                getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(sessionLanguage)) {
                this.setActive(sessionLanguage);
            }
            else {
                this.setActive(getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID));
            }
        };
        return LanguageService;
    }());
    LanguageService.decorators = [
        { type: i0.Injectable }
    ];
    LanguageService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: WindowRef },
        { type: SiteContextConfig }
    ]; };

    var SiteContextInterceptor = /** @class */ (function () {
        function SiteContextInterceptor(languageService, currencyService, occEndpoints, config) {
            var _this = this;
            this.languageService = languageService;
            this.currencyService = currencyService;
            this.occEndpoints = occEndpoints;
            this.config = config;
            this.activeLang = getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID);
            this.activeCurr = getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID);
            this.languageService
                .getActive()
                .subscribe(function (data) { return (_this.activeLang = data); });
            this.currencyService.getActive().subscribe(function (data) {
                _this.activeCurr = data;
            });
        }
        SiteContextInterceptor.prototype.intercept = function (request, next) {
            if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setParams: {
                        lang: this.activeLang,
                        curr: this.activeCurr,
                    },
                });
            }
            return next.handle(request);
        };
        return SiteContextInterceptor;
    }());
    SiteContextInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteContextInterceptor_Factory() { return new SiteContextInterceptor(i0.ɵɵinject(LanguageService), i0.ɵɵinject(CurrencyService), i0.ɵɵinject(OccEndpointsService), i0.ɵɵinject(SiteContextConfig)); }, token: SiteContextInterceptor, providedIn: "root" });
    SiteContextInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    SiteContextInterceptor.ctorParameters = function () { return [
        { type: LanguageService },
        { type: CurrencyService },
        { type: OccEndpointsService },
        { type: SiteContextConfig }
    ]; };

    var SiteContextOccModule = /** @class */ (function () {
        function SiteContextOccModule() {
        }
        return SiteContextOccModule;
    }());
    SiteContextOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccSiteContextConfig),
                        {
                            provide: SiteAdapter,
                            useClass: OccSiteAdapter,
                        },
                        {
                            provide: i1$4.HTTP_INTERCEPTORS,
                            useExisting: SiteContextInterceptor,
                            multi: true,
                        },
                    ],
                },] }
    ];

    var StoreFinderAdapter = /** @class */ (function () {
        function StoreFinderAdapter() {
        }
        return StoreFinderAdapter;
    }());

    var defaultOccStoreFinderConfig = {
        backend: {
            occ: {
                endpoints: {
                    store: 'stores/${storeId}?fields=FULL',
                    stores: 'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',
                    storescounts: 'stores/storescounts',
                },
            },
        },
    };

    var StoreFinderConnector = /** @class */ (function () {
        function StoreFinderConnector(adapter) {
            this.adapter = adapter;
        }
        StoreFinderConnector.prototype.search = function (query, searchConfig, longitudeLatitude, radius) {
            return this.adapter.search(query, searchConfig, longitudeLatitude, radius);
        };
        StoreFinderConnector.prototype.getCounts = function () {
            return this.adapter.loadCounts();
        };
        StoreFinderConnector.prototype.get = function (storeId) {
            return this.adapter.load(storeId);
        };
        return StoreFinderConnector;
    }());
    StoreFinderConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreFinderConnector_Factory() { return new StoreFinderConnector(i0.ɵɵinject(StoreFinderAdapter)); }, token: StoreFinderConnector, providedIn: "root" });
    StoreFinderConnector.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    StoreFinderConnector.ctorParameters = function () { return [
        { type: StoreFinderAdapter }
    ]; };

    var POINT_OF_SERVICE_NORMALIZER = new i0.InjectionToken('PointOfServiceNormalizer');
    var STORE_FINDER_SEARCH_PAGE_NORMALIZER = new i0.InjectionToken('StoreFinderSearchPageNormalizer');
    var STORE_COUNT_NORMALIZER = new i0.InjectionToken('StoreCountNormalizer');

    var OccStoreFinderAdapter = /** @class */ (function () {
        function OccStoreFinderAdapter(http, occEndpointsService, converterService) {
            this.http = http;
            this.occEndpointsService = occEndpointsService;
            this.converterService = converterService;
        }
        OccStoreFinderAdapter.prototype.search = function (query, searchConfig, longitudeLatitude, radius) {
            return this.callOccFindStores(query, searchConfig, longitudeLatitude, radius).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));
        };
        OccStoreFinderAdapter.prototype.loadCounts = function () {
            return this.http
                .get(this.occEndpointsService.getUrl('storescounts'))
                .pipe(operators.map(function (_a) {
                var countriesAndRegionsStoreCount = _a.countriesAndRegionsStoreCount;
                return countriesAndRegionsStoreCount;
            }), this.converterService.pipeableMany(STORE_COUNT_NORMALIZER));
        };
        OccStoreFinderAdapter.prototype.load = function (storeId) {
            return this.http
                .get(this.occEndpointsService.getUrl('store', { storeId: storeId }))
                .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));
        };
        OccStoreFinderAdapter.prototype.callOccFindStores = function (query, searchConfig, longitudeLatitude, radius) {
            var params = {};
            if (longitudeLatitude) {
                params['longitude'] = String(longitudeLatitude.longitude);
                params['latitude'] = String(longitudeLatitude.latitude);
                params['radius'] = String(radius);
            }
            else {
                params['query'] = query;
            }
            if (searchConfig.pageSize) {
                params['pageSize'] = String(searchConfig.pageSize);
            }
            if (searchConfig.currentPage) {
                params['currentPage'] = String(searchConfig.currentPage);
            }
            if (searchConfig.sort) {
                params['sort'] = searchConfig.sort;
            }
            return this.http.get(this.occEndpointsService.getUrl('stores', undefined, params));
        };
        return OccStoreFinderAdapter;
    }());
    OccStoreFinderAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccStoreFinderAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var StoreFinderOccModule = /** @class */ (function () {
        function StoreFinderOccModule() {
        }
        return StoreFinderOccModule;
    }());
    StoreFinderOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        provideDefaultConfig(defaultOccStoreFinderConfig),
                        { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },
                    ],
                },] }
    ];

    var AnonymousConsentNormalizer = /** @class */ (function () {
        function AnonymousConsentNormalizer(anonymousConsentsService) {
            this.anonymousConsentsService = anonymousConsentsService;
        }
        AnonymousConsentNormalizer.prototype.convert = function (source, target) {
            if (target === void 0) { target = []; }
            target = this.anonymousConsentsService.decodeAndDeserialize(source);
            return target;
        };
        return AnonymousConsentNormalizer;
    }());
    AnonymousConsentNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentNormalizer_Factory() { return new AnonymousConsentNormalizer(i0.ɵɵinject(AnonymousConsentsService)); }, token: AnonymousConsentNormalizer, providedIn: "root" });
    AnonymousConsentNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AnonymousConsentNormalizer.ctorParameters = function () { return [
        { type: AnonymousConsentsService }
    ]; };

    var OccReturnRequestNormalizer = /** @class */ (function () {
        function OccReturnRequestNormalizer(converter) {
            this.converter = converter;
        }
        OccReturnRequestNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.returnEntries) {
                target.returnEntries = source.returnEntries.map(function (entry) { return (Object.assign(Object.assign({}, entry), { orderEntry: _this.convertOrderEntry(entry.orderEntry) })); });
            }
            return target;
        };
        OccReturnRequestNormalizer.prototype.convertOrderEntry = function (source) {
            return Object.assign(Object.assign({}, source), { product: this.converter.convert(source.product, PRODUCT_NORMALIZER) });
        };
        return OccReturnRequestNormalizer;
    }());
    OccReturnRequestNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccReturnRequestNormalizer_Factory() { return new OccReturnRequestNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccReturnRequestNormalizer, providedIn: "root" });
    OccReturnRequestNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccReturnRequestNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var OccUserInterestsNormalizer = /** @class */ (function () {
        function OccUserInterestsNormalizer(converter) {
            this.converter = converter;
        }
        OccUserInterestsNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source && source.results) {
                target.results = source.results.map(function (result) { return (Object.assign(Object.assign({}, result), { product: _this.converter.convert(result.product, PRODUCT_NORMALIZER) })); });
            }
            return target;
        };
        return OccUserInterestsNormalizer;
    }());
    OccUserInterestsNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccUserInterestsNormalizer_Factory() { return new OccUserInterestsNormalizer(i0.ɵɵinject(ConverterService)); }, token: OccUserInterestsNormalizer, providedIn: "root" });
    OccUserInterestsNormalizer.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccUserInterestsNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var ANONYMOUS_CONSENT_NORMALIZER = new i0.InjectionToken('AnonymousConsentNormalizer');

    var CONSENT_TEMPLATE_NORMALIZER = new i0.InjectionToken('ConsentTemplateNormalizer');

    var OccAnonymousConsentTemplatesAdapter = /** @class */ (function () {
        function OccAnonymousConsentTemplatesAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccAnonymousConsentTemplatesAdapter.prototype.loadAnonymousConsentTemplates = function () {
            var url = this.occEndpoints.getUrl('anonymousConsentTemplates');
            return this.http.get(url).pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), operators.map(function (consentList) { return consentList.consentTemplates; }), this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER));
        };
        OccAnonymousConsentTemplatesAdapter.prototype.loadAnonymousConsents = function () {
            // using the endpoint that doesn't set caching headers
            var url = this.occEndpoints.getUrl('anonymousConsentTemplates');
            return this.http
                .head(url, { observe: 'response' })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), operators.map(function (response) { return response.headers.get(ANONYMOUS_CONSENTS_HEADER); }), this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER));
        };
        return OccAnonymousConsentTemplatesAdapter;
    }());
    OccAnonymousConsentTemplatesAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccAnonymousConsentTemplatesAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new i0.InjectionToken('CustomerCouponSearchResultNormalizer');

    var OccCustomerCouponAdapter = /** @class */ (function () {
        function OccCustomerCouponAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCustomerCouponAdapter.prototype.getCustomerCoupons = function (userId, pageSize, currentPage, sort) {
            // Currently OCC only supports calls for customer coupons in case of logged users
            if (userId === OCC_USER_ID_ANONYMOUS) {
                return rxjs.of({});
            }
            var url = this.occEndpoints.getUrl('customerCoupons', { userId: userId });
            var params = new i1$4.HttpParams().set('sort', sort ? sort : 'startDate:asc');
            if (pageSize) {
                params = params.set('pageSize', pageSize.toString());
            }
            if (currentPage) {
                params = params.set('currentPage', currentPage.toString());
            }
            var headers = this.newHttpHeader();
            return this.http
                .get(url, { headers: headers, params: params })
                .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));
        };
        OccCustomerCouponAdapter.prototype.turnOffNotification = function (userId, couponCode) {
            var url = this.occEndpoints.getUrl('couponNotification', {
                userId: userId,
                couponCode: couponCode,
            });
            var headers = this.newHttpHeader();
            return this.http.delete(url, { headers: headers });
        };
        OccCustomerCouponAdapter.prototype.turnOnNotification = function (userId, couponCode) {
            var url = this.occEndpoints.getUrl('couponNotification', {
                userId: userId,
                couponCode: couponCode,
            });
            var headers = this.newHttpHeader();
            return this.http.post(url, { headers: headers });
        };
        OccCustomerCouponAdapter.prototype.claimCustomerCoupon = function (userId, couponCode) {
            var url = this.occEndpoints.getUrl('claimCoupon', {
                userId: userId,
                couponCode: couponCode,
            });
            var headers = this.newHttpHeader();
            return this.http.post(url, { headers: headers });
        };
        OccCustomerCouponAdapter.prototype.newHttpHeader = function () {
            return new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
        };
        return OccCustomerCouponAdapter;
    }());
    OccCustomerCouponAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccCustomerCouponAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var OccUserAddressAdapter = /** @class */ (function () {
        function OccUserAddressAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserAddressAdapter.prototype.loadAll = function (userId) {
            var url = this.occEndpoints.getUrl('addresses', { userId: userId });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .get(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), operators.map(function (addressList) { return addressList.addresses; }), this.converter.pipeableMany(ADDRESS_NORMALIZER));
        };
        OccUserAddressAdapter.prototype.add = function (userId, address) {
            var url = this.occEndpoints.getUrl('addresses', { userId: userId });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .post(url, address, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserAddressAdapter.prototype.update = function (userId, addressId, address) {
            var url = this.occEndpoints.getUrl('addressDetail', {
                userId: userId,
                addressId: addressId,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .patch(url, address, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserAddressAdapter.prototype.verify = function (userId, address) {
            var url = this.occEndpoints.getUrl('addressVerification', { userId: userId });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            address = this.converter.convert(address, ADDRESS_SERIALIZER);
            return this.http
                .post(url, address, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER));
        };
        OccUserAddressAdapter.prototype.delete = function (userId, addressId) {
            var url = this.occEndpoints.getUrl('addressDetail', {
                userId: userId,
                addressId: addressId,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccUserAddressAdapter;
    }());
    OccUserAddressAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserAddressAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var OccUserConsentAdapter = /** @class */ (function () {
        function OccUserConsentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserConsentAdapter.prototype.loadConsents = function (userId) {
            var url = this.occEndpoints.getUrl('consentTemplates', { userId: userId });
            var headers = new i1$4.HttpHeaders({ 'Cache-Control': 'no-cache' });
            return this.http
                .get(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), operators.map(function (consentList) { return consentList.consentTemplates; }), this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER));
        };
        OccUserConsentAdapter.prototype.giveConsent = function (userId, consentTemplateId, consentTemplateVersion) {
            var url = this.occEndpoints.getUrl('consents', { userId: userId });
            var httpParams = new i1$4.HttpParams()
                .set('consentTemplateId', consentTemplateId)
                .set('consentTemplateVersion', consentTemplateVersion.toString());
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache',
            });
            return this.http
                .post(url, httpParams, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER));
        };
        OccUserConsentAdapter.prototype.withdrawConsent = function (userId, consentCode) {
            var headers = new i1$4.HttpHeaders({
                'Cache-Control': 'no-cache',
            });
            var url = this.occEndpoints.getUrl('consentDetail', {
                userId: userId,
                consentId: consentCode,
            });
            return this.http.delete(url, { headers: headers });
        };
        return OccUserConsentAdapter;
    }());
    OccUserConsentAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserConsentAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var PRODUCT_INTERESTS_NORMALIZER = new i0.InjectionToken('ProductInterestsNormalizer');

    var headers = new i1$4.HttpHeaders({
        'Content-Type': 'application/json',
    });
    var OccUserInterestsAdapter = /** @class */ (function () {
        function OccUserInterestsAdapter(http, occEndpoints, config, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.config = config;
            this.converter = converter;
        }
        OccUserInterestsAdapter.prototype.getInterests = function (userId, pageSize, currentPage, sort, productCode, notificationType) {
            var params = new i1$4.HttpParams().set('sort', sort ? sort : 'name:asc');
            if (pageSize) {
                params = params.set('pageSize', pageSize.toString());
            }
            if (currentPage) {
                params = params.set('currentPage', currentPage.toString());
            }
            if (productCode) {
                params = params.set('productCode', productCode);
            }
            if (notificationType) {
                params = params.set('notificationType', notificationType.toString());
            }
            return this.http
                .get(this.occEndpoints.getUrl('getProductInterests', { userId: userId }), {
                headers: headers,
                params: params,
            })
                .pipe(this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER), operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserInterestsAdapter.prototype.removeInterest = function (userId, item) {
            var _this = this;
            var r = [];
            item.productInterestEntry.forEach(function (entry) {
                var params = new i1$4.HttpParams()
                    .set('productCode', item.product.code)
                    .set('notificationType', entry.interestType);
                r.push(_this.http
                    .delete(_this.occEndpoints.getUrl('productInterests', { userId: userId }), {
                    params: params,
                })
                    .pipe(operators.catchError(function (error) { return rxjs.throwError(error); })));
            });
            return rxjs.forkJoin(r);
        };
        OccUserInterestsAdapter.prototype.addInterest = function (userId, productCode, notificationType) {
            var params = new i1$4.HttpParams()
                .set('productCode', productCode)
                .set('notificationType', notificationType.toString());
            return this.http
                .post(this.occEndpoints.getUrl('productInterests', { userId: userId }), {}, {
                headers: headers,
                params: params,
            })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccUserInterestsAdapter;
    }());
    OccUserInterestsAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserInterestsAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: OccConfig },
        { type: ConverterService }
    ]; };

    var NOTIFICATION_PREFERENCE_SERIALIZER = new i0.InjectionToken('NotificationPreferenceSerializer');
    var NOTIFICATION_PREFERENCE_NORMALIZER = new i0.InjectionToken('NotificationPreferenceNormalizer');

    var UserNotificationPreferenceAdapter = /** @class */ (function () {
        function UserNotificationPreferenceAdapter() {
        }
        return UserNotificationPreferenceAdapter;
    }());

    var UserNotificationPreferenceConnector = /** @class */ (function () {
        function UserNotificationPreferenceConnector(adapter) {
            this.adapter = adapter;
        }
        UserNotificationPreferenceConnector.prototype.loadAll = function (userId) {
            return this.adapter.loadAll(userId);
        };
        UserNotificationPreferenceConnector.prototype.update = function (userId, preferences) {
            return this.adapter.update(userId, preferences);
        };
        return UserNotificationPreferenceConnector;
    }());
    UserNotificationPreferenceConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserNotificationPreferenceConnector_Factory() { return new UserNotificationPreferenceConnector(i0.ɵɵinject(UserNotificationPreferenceAdapter)); }, token: UserNotificationPreferenceConnector, providedIn: "root" });
    UserNotificationPreferenceConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserNotificationPreferenceConnector.ctorParameters = function () { return [
        { type: UserNotificationPreferenceAdapter }
    ]; };

    var headers$1 = new i1$4.HttpHeaders({
        'Content-Type': 'application/json',
    });
    var OccUserNotificationPreferenceAdapter = /** @class */ (function () {
        function OccUserNotificationPreferenceAdapter(http, converter, occEndpoints) {
            this.http = http;
            this.converter = converter;
            this.occEndpoints = occEndpoints;
        }
        OccUserNotificationPreferenceAdapter.prototype.loadAll = function (userId) {
            return this.http
                .get(this.occEndpoints.getUrl('notificationPreference', { userId: userId }), {
                headers: headers$1,
            })
                .pipe(operators.map(function (list) { return list.preferences; }), this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER), operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserNotificationPreferenceAdapter.prototype.update = function (userId, preferences) {
            preferences = this.converter.convert(preferences, NOTIFICATION_PREFERENCE_SERIALIZER);
            return this.http
                .patch(this.occEndpoints.getUrl('notificationPreference', { userId: userId }), { preferences: preferences }, { headers: headers$1 })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccUserNotificationPreferenceAdapter;
    }());
    OccUserNotificationPreferenceAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserNotificationPreferenceAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: ConverterService },
        { type: OccEndpointsService }
    ]; };

    var ORDER_HISTORY_NORMALIZER = new i0.InjectionToken('OrderHistoryNormalizer');
    var CONSIGNMENT_TRACKING_NORMALIZER = new i0.InjectionToken('ConsignmentTrackingNormalizer');
    var ORDER_RETURN_REQUEST_NORMALIZER = new i0.InjectionToken('OrderReturnRequestNormalizer');
    var ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new i0.InjectionToken('OrderReturnRequestInputSerializer');
    var ORDER_RETURNS_NORMALIZER = new i0.InjectionToken('OrderReturnsNormalizer');

    var OccUserOrderAdapter = /** @class */ (function () {
        function OccUserOrderAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserOrderAdapter.prototype.load = function (userId, orderCode) {
            var url = this.occEndpoints.getUrl('orderDetail', {
                userId: userId,
                orderId: orderCode,
            });
            var headers = new i1$4.HttpHeaders();
            if (userId === OCC_USER_ID_ANONYMOUS) {
                headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            }
            return this.http
                .get(url, { headers: headers })
                .pipe(this.converter.pipeable(ORDER_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.loadHistory = function (userId, pageSize, currentPage, sort) {
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            var url = this.occEndpoints.getUrl('orderHistory', { userId: userId }, params);
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.getConsignmentTracking = function (orderCode, consignmentCode, userId) {
            if (userId === void 0) { userId = OCC_USER_ID_CURRENT; }
            var url = this.occEndpoints.getUrl('consignmentTracking', {
                userId: userId,
                orderCode: orderCode,
                consignmentCode: consignmentCode,
            });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.cancel = function (userId, orderCode, cancelRequestInput) {
            var url = this.occEndpoints.getUrl('cancelOrder', {
                userId: userId,
                orderId: orderCode,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .post(url, cancelRequestInput, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserOrderAdapter.prototype.createReturnRequest = function (userId, returnRequestInput) {
            var url = this.occEndpoints.getUrl('returnOrder', {
                userId: userId,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            returnRequestInput = this.converter.convert(returnRequestInput, ORDER_RETURN_REQUEST_INPUT_SERIALIZER);
            return this.http.post(url, returnRequestInput, { headers: headers }).pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.loadReturnRequestList = function (userId, pageSize, currentPage, sort) {
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            var url = this.occEndpoints.getUrl('orderReturns', { userId: userId }, params);
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.loadReturnRequestDetail = function (userId, returnRequestCode) {
            var url = this.occEndpoints.getUrl('orderReturnDetail', {
                userId: userId,
                returnRequestCode: returnRequestCode,
            });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
        };
        OccUserOrderAdapter.prototype.cancelReturnRequest = function (userId, returnRequestCode, returnRequestModification) {
            var url = this.occEndpoints.getUrl('cancelReturn', {
                userId: userId,
                returnRequestCode: returnRequestCode,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .patch(url, returnRequestModification, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccUserOrderAdapter;
    }());
    OccUserOrderAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserOrderAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var OccUserPaymentAdapter = /** @class */ (function () {
        function OccUserPaymentAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserPaymentAdapter.prototype.loadAll = function (userId) {
            var url = this.occEndpoints.getUrl('paymentDetailsAll', { userId: userId }) + '?saved=true';
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .get(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }), operators.map(function (methodList) { return methodList.payments; }), this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER));
        };
        OccUserPaymentAdapter.prototype.delete = function (userId, paymentMethodID) {
            var url = this.occEndpoints.getUrl('paymentDetail', {
                userId: userId,
                paymentDetailId: paymentMethodID,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .delete(url, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        OccUserPaymentAdapter.prototype.setDefault = function (userId, paymentMethodID) {
            var url = this.occEndpoints.getUrl('paymentDetail', {
                userId: userId,
                paymentDetailId: paymentMethodID,
            });
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            return this.http
                .patch(url, 
            // TODO: Remove billingAddress property
            { billingAddress: { titleCode: 'mr' }, defaultPayment: true }, { headers: headers })
                .pipe(operators.catchError(function (error) { return rxjs.throwError(error); }));
        };
        return OccUserPaymentAdapter;
    }());
    OccUserPaymentAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserPaymentAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var REPLENISHMENT_ORDER_HISTORY_NORMALIZER = new i0.InjectionToken('ReplenishmentOrderHistoryNormalizer');

    var OccUserReplenishmentOrderAdapter = /** @class */ (function () {
        function OccUserReplenishmentOrderAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserReplenishmentOrderAdapter.prototype.load = function (userId, replenishmentOrderCode) {
            return this.http
                .get(this.occEndpoints.getUrl('replenishmentOrderDetails', {
                userId: userId,
                replenishmentOrderCode: replenishmentOrderCode,
            }))
                .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));
        };
        OccUserReplenishmentOrderAdapter.prototype.loadReplenishmentDetailsHistory = function (userId, replenishmentOrderCode, pageSize, currentPage, sort) {
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            return this.http
                .get(this.occEndpoints.getUrl('replenishmentOrderDetailsHistory', {
                userId: userId,
                replenishmentOrderCode: replenishmentOrderCode,
            }, params))
                .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
        };
        OccUserReplenishmentOrderAdapter.prototype.cancelReplenishmentOrder = function (userId, replenishmentOrderCode) {
            var headers = new i1$4.HttpHeaders().set('Content-Type', 'application/json');
            return this.http
                .patch(this.occEndpoints.getUrl('cancelReplenishmentOrder', {
                userId: userId,
                replenishmentOrderCode: replenishmentOrderCode,
            }), {}, { headers: headers })
                .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));
        };
        OccUserReplenishmentOrderAdapter.prototype.loadHistory = function (userId, pageSize, currentPage, sort) {
            var params = {};
            if (pageSize) {
                params['pageSize'] = pageSize.toString();
            }
            if (currentPage) {
                params['currentPage'] = currentPage.toString();
            }
            if (sort) {
                params['sort'] = sort.toString();
            }
            var url = this.occEndpoints.getUrl('replenishmentOrderHistory', { userId: userId }, params);
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_HISTORY_NORMALIZER));
        };
        return OccUserReplenishmentOrderAdapter;
    }());
    OccUserReplenishmentOrderAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserReplenishmentOrderAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var USER_NORMALIZER = new i0.InjectionToken('UserNormalizer');
    var USER_SERIALIZER = new i0.InjectionToken('UserSerializer');
    var USER_SIGN_UP_SERIALIZER = new i0.InjectionToken('UserSignUpSerializer');
    var TITLE_NORMALIZER = new i0.InjectionToken('TitleNormalizer');

    var OccUserAdapter = /** @class */ (function () {
        function OccUserAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserAdapter.prototype.load = function (userId) {
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            return this.http
                .get(url)
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        OccUserAdapter.prototype.update = function (userId, user) {
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            user = this.converter.convert(user, USER_SERIALIZER);
            return this.http.patch(url, user);
        };
        OccUserAdapter.prototype.register = function (user) {
            var url = this.occEndpoints.getUrl('userRegister');
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);
            return this.http
                .post(url, user, { headers: headers })
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        OccUserAdapter.prototype.registerGuest = function (guid, password) {
            var url = this.occEndpoints.getUrl('userRegister');
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            var httpParams = new i1$4.HttpParams()
                .set('guid', guid)
                .set('password', password);
            return this.http
                .post(url, httpParams, { headers: headers })
                .pipe(this.converter.pipeable(USER_NORMALIZER));
        };
        OccUserAdapter.prototype.requestForgotPasswordEmail = function (userEmailAddress) {
            var url = this.occEndpoints.getUrl('userForgotPassword');
            var httpParams = new i1$4.HttpParams().set('userId', userEmailAddress);
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            return this.http.post(url, httpParams, { headers: headers });
        };
        OccUserAdapter.prototype.resetPassword = function (token, newPassword) {
            var url = this.occEndpoints.getUrl('userResetPassword');
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/json',
            });
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
            return this.http.post(url, { token: token, newPassword: newPassword }, { headers: headers });
        };
        OccUserAdapter.prototype.updateEmail = function (userId, currentPassword, newUserId) {
            var url = this.occEndpoints.getUrl('userUpdateLoginId', { userId: userId });
            var httpParams = new i1$4.HttpParams()
                .set('password', currentPassword)
                .set('newLogin', newUserId);
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        OccUserAdapter.prototype.updatePassword = function (userId, oldPassword, newPassword) {
            var url = this.occEndpoints.getUrl('userUpdatePassword', { userId: userId });
            var httpParams = new i1$4.HttpParams()
                .set('old', oldPassword)
                .set('new', newPassword);
            var headers = new i1$4.HttpHeaders({
                'Content-Type': 'application/x-www-form-urlencoded',
            });
            return this.http.put(url, httpParams, { headers: headers });
        };
        OccUserAdapter.prototype.remove = function (userId) {
            var url = this.occEndpoints.getUrl('user', { userId: userId });
            return this.http.delete(url);
        };
        OccUserAdapter.prototype.loadTitles = function () {
            var url = this.occEndpoints.getUrl('titles');
            return this.http.get(url).pipe(operators.map(function (titleList) { return titleList.titles; }), this.converter.pipeableMany(TITLE_NORMALIZER));
        };
        return OccUserAdapter;
    }());
    OccUserAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var AnonymousConsentTemplatesAdapter = /** @class */ (function () {
        function AnonymousConsentTemplatesAdapter() {
        }
        return AnonymousConsentTemplatesAdapter;
    }());

    var UserConsentAdapter = /** @class */ (function () {
        function UserConsentAdapter() {
        }
        return UserConsentAdapter;
    }());

    var UserCostCenterAdapter = /** @class */ (function () {
        function UserCostCenterAdapter() {
        }
        return UserCostCenterAdapter;
    }());

    var CustomerCouponAdapter = /** @class */ (function () {
        function CustomerCouponAdapter() {
        }
        return CustomerCouponAdapter;
    }());

    var UserInterestsAdapter = /** @class */ (function () {
        function UserInterestsAdapter() {
        }
        return UserInterestsAdapter;
    }());

    var UserOrderAdapter = /** @class */ (function () {
        function UserOrderAdapter() {
        }
        return UserOrderAdapter;
    }());

    var UserPaymentAdapter = /** @class */ (function () {
        function UserPaymentAdapter() {
        }
        return UserPaymentAdapter;
    }());

    var UserReplenishmentOrderAdapter = /** @class */ (function () {
        function UserReplenishmentOrderAdapter() {
        }
        return UserReplenishmentOrderAdapter;
    }());

    var UserReplenishmentOrderConnector = /** @class */ (function () {
        function UserReplenishmentOrderConnector(adapter) {
            this.adapter = adapter;
        }
        UserReplenishmentOrderConnector.prototype.load = function (userId, replenishmentOrderCode) {
            return this.adapter.load(userId, replenishmentOrderCode);
        };
        UserReplenishmentOrderConnector.prototype.loadReplenishmentDetailsHistory = function (userId, replenishmentOrderCode, pageSize, currentPage, sort) {
            return this.adapter.loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort);
        };
        UserReplenishmentOrderConnector.prototype.cancelReplenishmentOrder = function (userId, replenishmentOrderCode) {
            return this.adapter.cancelReplenishmentOrder(userId, replenishmentOrderCode);
        };
        UserReplenishmentOrderConnector.prototype.loadHistory = function (userId, pageSize, currentPage, sort) {
            return this.adapter.loadHistory(userId, pageSize, currentPage, sort);
        };
        return UserReplenishmentOrderConnector;
    }());
    UserReplenishmentOrderConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserReplenishmentOrderConnector_Factory() { return new UserReplenishmentOrderConnector(i0.ɵɵinject(UserReplenishmentOrderAdapter)); }, token: UserReplenishmentOrderConnector, providedIn: "root" });
    UserReplenishmentOrderConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserReplenishmentOrderConnector.ctorParameters = function () { return [
        { type: UserReplenishmentOrderAdapter }
    ]; };

    var UserAdapter = /** @class */ (function () {
        function UserAdapter() {
        }
        return UserAdapter;
    }());

    var OccAddressListNormalizer = /** @class */ (function () {
        function OccAddressListNormalizer(converter) {
            this.converter = converter;
        }
        OccAddressListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign(Object.assign({}, source), { values: source.addresses.map(function (address) { return (Object.assign({}, _this.converter.convert(address, ADDRESS_NORMALIZER))); }) });
            }
            return target;
        };
        return OccAddressListNormalizer;
    }());
    OccAddressListNormalizer.decorators = [
        { type: i0.Injectable }
    ];
    OccAddressListNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };

    var defaultOccUserConfig = {
        backend: {
            occ: {
                endpoints: {
                    // tslint:disable:max-line-length
                    user: 'users/${userId}',
                    userRegister: 'users',
                    userForgotPassword: 'forgottenpasswordtokens',
                    userResetPassword: 'resetpassword',
                    userUpdateLoginId: 'users/${userId}/login',
                    userUpdatePassword: 'users/${userId}/password',
                    titles: 'titles',
                    paymentDetailsAll: 'users/${userId}/paymentdetails',
                    paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',
                    orderHistory: 'users/${userId}/orders',
                    orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',
                    anonymousConsentTemplates: 'users/anonymous/consenttemplates',
                    consentTemplates: 'users/${userId}/consenttemplates',
                    consents: 'users/${userId}/consents',
                    consentDetail: 'users/${userId}/consents/${consentId}',
                    addresses: 'users/${userId}/addresses',
                    addressDetail: 'users/${userId}/addresses/${addressId}',
                    addressVerification: 'users/${userId}/addresses/verification',
                    consignmentTracking: 'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',
                    customerCoupons: 'users/${userId}/customercoupons',
                    claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',
                    couponNotification: 'users/${userId}/customercoupons/${couponCode}/notification',
                    notificationPreference: 'users/${userId}/notificationpreferences',
                    productInterests: 'users/${userId}/productinterests',
                    getProductInterests: 'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',
                    cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',
                    returnOrder: 'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',
                    orderReturns: 'users/${userId}/orderReturns?fields=BASIC',
                    orderReturnDetail: 'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',
                    cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',
                },
            },
        },
    };

    var OccUserCostCenterAdapter = /** @class */ (function () {
        function OccUserCostCenterAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserCostCenterAdapter.prototype.loadActiveList = function (userId) {
            return this.http
                .get(this.getCostCentersEndpoint(userId))
                .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
        };
        OccUserCostCenterAdapter.prototype.getCostCentersEndpoint = function (userId, params) {
            return this.occEndpoints.getUrl('getActiveCostCenters', { userId: userId }, params);
        };
        return OccUserCostCenterAdapter;
    }());
    OccUserCostCenterAdapter.decorators = [
        { type: i0.Injectable }
    ];
    OccUserCostCenterAdapter.ctorParameters = function () { return [
        { type: i1$4.HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };

    var UserOccModule = /** @class */ (function () {
        function UserOccModule() {
        }
        return UserOccModule;
    }());
    UserOccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccUserConfig),
                        { provide: UserAdapter, useClass: OccUserAdapter },
                        { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },
                        { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },
                        {
                            provide: AnonymousConsentTemplatesAdapter,
                            useClass: OccAnonymousConsentTemplatesAdapter,
                        },
                        {
                            provide: UserPaymentAdapter,
                            useClass: OccUserPaymentAdapter,
                        },
                        { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },
                        { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },
                        {
                            provide: UserNotificationPreferenceAdapter,
                            useClass: OccUserNotificationPreferenceAdapter,
                        },
                        { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },
                        { provide: UserCostCenterAdapter, useClass: OccUserCostCenterAdapter },
                        {
                            provide: PRODUCT_INTERESTS_NORMALIZER,
                            useExisting: OccUserInterestsNormalizer,
                            multi: true,
                        },
                        {
                            provide: ORDER_RETURN_REQUEST_NORMALIZER,
                            useExisting: OccReturnRequestNormalizer,
                            multi: true,
                        },
                        {
                            provide: ANONYMOUS_CONSENT_NORMALIZER,
                            useExisting: AnonymousConsentNormalizer,
                            multi: true,
                        },
                        {
                            provide: ADDRESS_LIST_NORMALIZER,
                            useExisting: OccAddressListNormalizer,
                            multi: true,
                        },
                        {
                            provide: UserReplenishmentOrderAdapter,
                            useClass: OccUserReplenishmentOrderAdapter,
                        },
                    ],
                },] }
    ];

    var JavaRegExpConverter = /** @class */ (function () {
        function JavaRegExpConverter() {
            /**
             * Pattern that extracts modifiers from the Java regexp.
             *
             * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:
             * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`
             * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`
             * - or multiple combined:  `(?iu)PATTERN`
             * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)
             *
             * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:
             *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)
             *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)
             *    3. the rest of the regexp, i.e. `PATTERN`
             */
            this.EXTRACT_JAVA_REGEXP_MODIFIERS = /^(\(\?([a-z]+)\))?(.*)/;
        }
        /**
         * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers
         * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)
         *
         * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!
         * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.
         *
         * See differences between Java and Javascript regexps:
         * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax
         * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features
         */
        JavaRegExpConverter.prototype.toJsRegExp = function (javaSyntax) {
            var parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);
            if (!parts) {
                return null;
            }
            var _a = __read(parts, 4), modifiers = _a[2], jsSyntax = _a[3];
            try {
                return new RegExp(jsSyntax, modifiers);
            }
            catch (error) {
                if (i0.isDevMode()) {
                    console.warn("WARNING: Could not convert Java regexp into Javascript. Original regexp: " + javaSyntax + " \nMessage: " + error);
                }
                return null;
            }
        };
        return JavaRegExpConverter;
    }());
    JavaRegExpConverter.ɵprov = i0.ɵɵdefineInjectable({ factory: function JavaRegExpConverter_Factory() { return new JavaRegExpConverter(); }, token: JavaRegExpConverter, providedIn: "root" });
    JavaRegExpConverter.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /**
     * The url of the server request when running SSR
     * */
    var SERVER_REQUEST_URL = new i0.InjectionToken('SERVER_REQUEST_URL');
    /**
     * The url of the server request host when running SSR
     * */
    var SERVER_REQUEST_ORIGIN = new i0.InjectionToken('SERVER_REQUEST_ORIGIN');

    var OccLoadedConfigConverter = /** @class */ (function () {
        function OccLoadedConfigConverter(javaRegExpConverter) {
            this.javaRegExpConverter = javaRegExpConverter;
        }
        OccLoadedConfigConverter.prototype.fromOccBaseSites = function (baseSites, currentUrl) {
            var _this = this;
            var baseSite = baseSites.find(function (site) { return _this.isCurrentBaseSite(site, currentUrl); });
            if (!baseSite) {
                throw this.getError("Current url (" + currentUrl + ") doesn't match with any of url patterns of any base site.");
            }
            // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.
            var baseStore = baseSite.stores && baseSite.stores[0];
            if (!baseStore) {
                throw this.getError("Current base site (" + baseSite.uid + ") doesn't have any base store.");
            }
            return {
                baseSite: baseSite.uid,
                languages: this.getIsoCodes(baseStore.languages, baseSite.defaultLanguage || baseStore.defaultLanguage),
                currencies: this.getIsoCodes(baseStore.currencies, baseStore.defaultCurrency),
                urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),
            };
        };
        OccLoadedConfigConverter.prototype.toSiteContextConfig = function (_a) {
            var _b;
            var baseSite = _a.baseSite, languages = _a.languages, currencies = _a.currencies, urlEncodingAttributes = _a.urlParameters;
            var result = {
                context: (_b = {
                        urlParameters: urlEncodingAttributes
                    },
                    _b[BASE_SITE_CONTEXT_ID] = [baseSite],
                    _b[LANGUAGE_CONTEXT_ID] = languages,
                    _b[CURRENCY_CONTEXT_ID] = currencies,
                    _b),
            };
            return result;
        };
        OccLoadedConfigConverter.prototype.toI18nConfig = function (_a) {
            var languages = _a.languages;
            return { i18n: { fallbackLang: languages[0] } };
        };
        OccLoadedConfigConverter.prototype.isCurrentBaseSite = function (site, currentUrl) {
            var _this = this;
            var index = (site.urlPatterns || []).findIndex(function (javaRegexp) {
                var jsRegexp = _this.javaRegExpConverter.toJsRegExp(javaRegexp);
                if (jsRegexp) {
                    var result = jsRegexp.test(currentUrl);
                    return result;
                }
            });
            return index !== -1;
        };
        /**
         * Returns an array of url encoded site context parameters.
         *
         * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
         */
        OccLoadedConfigConverter.prototype.getUrlParams = function (params) {
            var STOREFRONT_PARAM = 'storefront';
            return (params || []).map(function (param) { return param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param; });
        };
        /**
         * Returns iso codes in a array, where the first element is the default iso code.
         */
        OccLoadedConfigConverter.prototype.getIsoCodes = function (elements, defaultElement) {
            var result = this.moveToFirst(elements, function (el) { return el.isocode === defaultElement.isocode; }).map(function (el) { return el.isocode; });
            return result;
        };
        /**
         * Moves to the start of the array the first element that satisfies the given predicate.
         *
         * @param array array to modify
         * @param predicate function called on elements
         */
        OccLoadedConfigConverter.prototype.moveToFirst = function (array, predicate) {
            array = __spread(array);
            var index = array.findIndex(predicate);
            if (index !== -1) {
                var _a = __read(array.splice(index, 1), 1), el = _a[0];
                array.unshift(el);
            }
            return array;
        };
        OccLoadedConfigConverter.prototype.getError = function (message) {
            return new Error("Error: Cannot get base site config! " + message);
        };
        return OccLoadedConfigConverter;
    }());
    OccLoadedConfigConverter.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccLoadedConfigConverter_Factory() { return new OccLoadedConfigConverter(i0.ɵɵinject(JavaRegExpConverter)); }, token: OccLoadedConfigConverter, providedIn: "root" });
    OccLoadedConfigConverter.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccLoadedConfigConverter.ctorParameters = function () { return [
        { type: JavaRegExpConverter }
    ]; };

    var OccSitesConfigLoader = /** @class */ (function () {
        function OccSitesConfigLoader(config, http) {
            this.config = config;
            this.http = http;
            this.endpoint = 'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';
        }
        Object.defineProperty(OccSitesConfigLoader.prototype, "baseEndpoint", {
            get: function () {
                return ((this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OccSitesConfigLoader.prototype, "url", {
            get: function () {
                return "" + this.baseEndpoint + this.endpoint;
            },
            enumerable: false,
            configurable: true
        });
        OccSitesConfigLoader.prototype.load = function () {
            if (!this.config || !this.config.backend || !this.config.backend.occ) {
                return rxjs.throwError(new Error("Missing config for OCC backend!"));
            }
            return this.http
                .get(this.url)
                .pipe(operators.map(function (_a) {
                var baseSites = _a.baseSites;
                return baseSites;
            }));
        };
        return OccSitesConfigLoader;
    }());
    OccSitesConfigLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccSitesConfigLoader_Factory() { return new OccSitesConfigLoader(i0.ɵɵinject(OccConfig), i0.ɵɵinject(i1$4.HttpClient)); }, token: OccSitesConfigLoader, providedIn: "root" });
    OccSitesConfigLoader.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccSitesConfigLoader.ctorParameters = function () { return [
        { type: OccConfig },
        { type: i1$4.HttpClient }
    ]; };

    var EXTERNAL_CONFIG_TRANSFER_ID = i5.makeStateKey('cx-external-config');
    var OccConfigLoaderService = /** @class */ (function () {
        function OccConfigLoaderService(platform, document, config, sitesConfigLoader, converter, transferState, serverRequestUrl) {
            this.platform = platform;
            this.document = document;
            this.config = config;
            this.sitesConfigLoader = sitesConfigLoader;
            this.converter = converter;
            this.transferState = transferState;
            this.serverRequestUrl = serverRequestUrl;
        }
        Object.defineProperty(OccConfigLoaderService.prototype, "currentUrl", {
            get: function () {
                if (i1.isPlatformBrowser(this.platform)) {
                    return this.document.location.href;
                }
                if (this.serverRequestUrl) {
                    return this.serverRequestUrl;
                }
                if (i0.isDevMode()) {
                    console.error("Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR");
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Initializes the Spartacus config asynchronously basing on the external config
         */
        OccConfigLoaderService.prototype.loadConfig = function () {
            var _this = this;
            return this.get()
                .pipe(operators.tap(function (externalConfig) { return _this.transfer(externalConfig); }), operators.map(function (externalConfig) { return deepMerge.apply(void 0, __spread([{}], _this.getConfigChunks(externalConfig))); }))
                .toPromise();
        };
        /**
         * Returns the external config
         */
        OccConfigLoaderService.prototype.get = function () {
            var rehydratedExternalConfig = this.rehydrate();
            return rehydratedExternalConfig
                ? rxjs.of(rehydratedExternalConfig)
                : this.load();
        };
        /**
         * Loads the external config from backend
         */
        OccConfigLoaderService.prototype.load = function () {
            var _this = this;
            return this.sitesConfigLoader
                .load()
                .pipe(operators.map(function (baseSites) { return _this.converter.fromOccBaseSites(baseSites, _this.currentUrl); }));
        };
        /**
         * Tries to rehydrate external config in the browser from SSR
         */
        OccConfigLoaderService.prototype.rehydrate = function () {
            if (this.transferState && i1.isPlatformBrowser(this.platform)) {
                return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);
            }
        };
        /**
         * Transfers the given external config in SSR to the browser
         *
         * @param externalConfig
         */
        OccConfigLoaderService.prototype.transfer = function (externalConfig) {
            if (this.transferState &&
                i1.isPlatformServer(this.platform) &&
                externalConfig) {
                this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);
            }
        };
        OccConfigLoaderService.prototype.getConfigChunks = function (externalConfig) {
            var chunks = [this.converter.toSiteContextConfig(externalConfig)];
            if (this.shouldReturnI18nChunk()) {
                chunks.push(this.converter.toI18nConfig(externalConfig));
            }
            return chunks;
        };
        OccConfigLoaderService.prototype.shouldReturnI18nChunk = function () {
            var fallbackLangExists = typeof (this.config &&
                this.config.i18n &&
                this.config.i18n.fallbackLang) !== 'undefined';
            if (fallbackLangExists && i0.isDevMode()) {
                console.warn("There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.");
            }
            return !fallbackLangExists;
        };
        return OccConfigLoaderService;
    }());
    OccConfigLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccConfigLoaderService_Factory() { return new OccConfigLoaderService(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(Config), i0.ɵɵinject(OccSitesConfigLoader), i0.ɵɵinject(OccLoadedConfigConverter), i0.ɵɵinject(i5.TransferState, 8), i0.ɵɵinject(SERVER_REQUEST_URL, 8)); }, token: OccConfigLoaderService, providedIn: "root" });
    OccConfigLoaderService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccConfigLoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [Config,] }] },
        { type: OccSitesConfigLoader },
        { type: OccLoadedConfigConverter },
        { type: i5.TransferState, decorators: [{ type: i0.Optional }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [SERVER_REQUEST_URL,] }] }
    ]; };

    /**
     * Initializes the Spartacus config asynchronously basing on the external config
     */
    function initConfig(configLoader, config) {
        /**
         * Load config for `context` from backend only when there is no static config for `context.baseSite`
         */
        if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {
            return {
                scopes: ['context', 'i18n.fallbackLang'],
                configFactory: function () { return configLoader.loadConfig(); },
            };
        }
        return null;
    }
    /**
     * Re-provides the external config chunk given before Angular bootstrap
     */
    var OccConfigLoaderModule = /** @class */ (function () {
        function OccConfigLoaderModule() {
        }
        OccConfigLoaderModule.forRoot = function () {
            return {
                ngModule: OccConfigLoaderModule,
                providers: [
                    {
                        provide: CONFIG_INITIALIZER,
                        useFactory: initConfig,
                        deps: [OccConfigLoaderService, SiteContextConfig],
                        multi: true,
                    },
                ],
            };
        };
        return OccConfigLoaderModule;
    }());
    OccConfigLoaderModule.decorators = [
        { type: i0.NgModule }
    ];

    var OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';
    var OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';
    var MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';
    var MEDIA_BASE_URL_META_TAG_PLACEHOLDER = 'MEDIA_BACKEND_BASE_URL_VALUE';
    function occServerConfigFromMetaTagFactory(meta) {
        var baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);
        return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER
            ? { backend: { occ: { baseUrl: baseUrl } } }
            : {};
    }
    function mediaServerConfigFromMetaTagFactory(meta) {
        var baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);
        return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER
            ? { backend: { media: { baseUrl: baseUrl } } }
            : {};
    }
    function getMetaTagContent(name, meta) {
        var metaTag = meta.getTag("name=\"" + name + "\"");
        return metaTag && metaTag.content;
    }
    function provideConfigFromMetaTags() {
        return [
            provideConfigFactory(occServerConfigFromMetaTagFactory, [i5.Meta]),
            provideConfigFactory(mediaServerConfigFromMetaTagFactory, [i5.Meta]),
        ];
    }

    var defaultOccConfig = {
        backend: {
            occ: {
                prefix: '/rest/v2/',
            },
            media: {},
        },
    };

    function occConfigValidator(config) {
        if (config.backend === undefined ||
            config.backend.occ === undefined ||
            config.backend.occ.baseUrl === undefined) {
            return 'Please configure backend.occ.baseUrl before using storefront library!';
        }
    }

    /**
     * Http interceptor to add cookies to all cross-site requests.
     */
    var WithCredentialsInterceptor = /** @class */ (function () {
        function WithCredentialsInterceptor(config) {
            this.config = config;
        }
        /**
         * Intercepts each request and adds the `withCredential` flag to it
         * if it hasn't been added already.
         */
        WithCredentialsInterceptor.prototype.intercept = function (request, next) {
            if (this.requiresWithCredentials(request)) {
                request = request.clone({
                    withCredentials: true,
                });
            }
            return next.handle(request);
        };
        /**
         * indicates whether the request should use the WithCredentials flag.
         */
        WithCredentialsInterceptor.prototype.requiresWithCredentials = function (request) {
            var _a, _b;
            return (((_a = this.occConfig) === null || _a === void 0 ? void 0 : _a.useWithCredentials) &&
                request.url.indexOf((_b = this.occConfig) === null || _b === void 0 ? void 0 : _b.prefix) > -1);
        };
        Object.defineProperty(WithCredentialsInterceptor.prototype, "occConfig", {
            get: function () {
                return this.config.backend.occ;
            },
            enumerable: false,
            configurable: true
        });
        return WithCredentialsInterceptor;
    }());
    WithCredentialsInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function WithCredentialsInterceptor_Factory() { return new WithCredentialsInterceptor(i0.ɵɵinject(OccConfig)); }, token: WithCredentialsInterceptor, providedIn: "root" });
    WithCredentialsInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    WithCredentialsInterceptor.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };

    (function (Occ) {
        /**
         * Defines values for PriceType.
         * Possible values include: 'BUY', 'FROM'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: PriceType = <PriceType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var PriceType;
        (function (PriceType) {
            PriceType["BUY"] = "BUY";
            PriceType["FROM"] = "FROM";
        })(PriceType = Occ.PriceType || (Occ.PriceType = {}));
        /**
         * Defines values for ImageType.
         * Possible values include: 'PRIMARY', 'GALLERY'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: ImageType = <ImageType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var ImageType;
        (function (ImageType) {
            ImageType["PRIMARY"] = "PRIMARY";
            ImageType["GALLERY"] = "GALLERY";
        })(ImageType = Occ.ImageType || (Occ.ImageType = {}));
        /**
         * Defines values for Fields.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields = <Fields>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields;
        (function (Fields) {
            Fields["BASIC"] = "BASIC";
            Fields["DEFAULT"] = "DEFAULT";
            Fields["FULL"] = "FULL";
        })(Fields = Occ.Fields || (Occ.Fields = {}));
        /**
         * Defines values for Fields1.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields1 = <Fields1>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields1;
        (function (Fields1) {
            Fields1["BASIC"] = "BASIC";
            Fields1["DEFAULT"] = "DEFAULT";
            Fields1["FULL"] = "FULL";
        })(Fields1 = Occ.Fields1 || (Occ.Fields1 = {}));
        /**
         * Defines values for Fields2.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields2 = <Fields2>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields2;
        (function (Fields2) {
            Fields2["BASIC"] = "BASIC";
            Fields2["DEFAULT"] = "DEFAULT";
            Fields2["FULL"] = "FULL";
        })(Fields2 = Occ.Fields2 || (Occ.Fields2 = {}));
        /**
         * Defines values for Fields3.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields3 = <Fields3>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields3;
        (function (Fields3) {
            Fields3["BASIC"] = "BASIC";
            Fields3["DEFAULT"] = "DEFAULT";
            Fields3["FULL"] = "FULL";
        })(Fields3 = Occ.Fields3 || (Occ.Fields3 = {}));
        /**
         * Defines values for Fields4.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields4 = <Fields4>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields4;
        (function (Fields4) {
            Fields4["BASIC"] = "BASIC";
            Fields4["DEFAULT"] = "DEFAULT";
            Fields4["FULL"] = "FULL";
        })(Fields4 = Occ.Fields4 || (Occ.Fields4 = {}));
        /**
         * Defines values for Fields5.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields5 = <Fields5>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields5;
        (function (Fields5) {
            Fields5["BASIC"] = "BASIC";
            Fields5["DEFAULT"] = "DEFAULT";
            Fields5["FULL"] = "FULL";
        })(Fields5 = Occ.Fields5 || (Occ.Fields5 = {}));
        /**
         * Defines values for Fields6.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields6 = <Fields6>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields6;
        (function (Fields6) {
            Fields6["BASIC"] = "BASIC";
            Fields6["DEFAULT"] = "DEFAULT";
            Fields6["FULL"] = "FULL";
        })(Fields6 = Occ.Fields6 || (Occ.Fields6 = {}));
        /**
         * Defines values for PageType.
         * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',
         * 'CatalogPage'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: PageType = <PageType>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var PageType;
        (function (PageType) {
            PageType["CONTENT_PAGE"] = "ContentPage";
            PageType["PRODUCT_PAGE"] = "ProductPage";
            PageType["CATEGORY_PAGE"] = "CategoryPage";
            PageType["CATALOG_PAGE"] = "CatalogPage";
        })(PageType = Occ.PageType || (Occ.PageType = {}));
        /**
         * Defines values for Fields7.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields7 = <Fields7>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields7;
        (function (Fields7) {
            Fields7["BASIC"] = "BASIC";
            Fields7["DEFAULT"] = "DEFAULT";
            Fields7["FULL"] = "FULL";
        })(Fields7 = Occ.Fields7 || (Occ.Fields7 = {}));
        /**
         * Defines values for Fields8.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields8 = <Fields8>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields8;
        (function (Fields8) {
            Fields8["BASIC"] = "BASIC";
            Fields8["DEFAULT"] = "DEFAULT";
            Fields8["FULL"] = "FULL";
        })(Fields8 = Occ.Fields8 || (Occ.Fields8 = {}));
        /**
         * Defines values for Fields9.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields9 = <Fields9>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields9;
        (function (Fields9) {
            Fields9["BASIC"] = "BASIC";
            Fields9["DEFAULT"] = "DEFAULT";
            Fields9["FULL"] = "FULL";
        })(Fields9 = Occ.Fields9 || (Occ.Fields9 = {}));
        /**
         * Defines values for Fields10.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields10 = <Fields10>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields10;
        (function (Fields10) {
            Fields10["BASIC"] = "BASIC";
            Fields10["DEFAULT"] = "DEFAULT";
            Fields10["FULL"] = "FULL";
        })(Fields10 = Occ.Fields10 || (Occ.Fields10 = {}));
        /**
         * Defines values for Fields11.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields11 = <Fields11>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields11;
        (function (Fields11) {
            Fields11["BASIC"] = "BASIC";
            Fields11["DEFAULT"] = "DEFAULT";
            Fields11["FULL"] = "FULL";
        })(Fields11 = Occ.Fields11 || (Occ.Fields11 = {}));
        /**
         * Defines values for Fields12.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields12 = <Fields12>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields12;
        (function (Fields12) {
            Fields12["BASIC"] = "BASIC";
            Fields12["DEFAULT"] = "DEFAULT";
            Fields12["FULL"] = "FULL";
        })(Fields12 = Occ.Fields12 || (Occ.Fields12 = {}));
        /**
         * Defines values for Fields13.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields13 = <Fields13>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields13;
        (function (Fields13) {
            Fields13["BASIC"] = "BASIC";
            Fields13["DEFAULT"] = "DEFAULT";
            Fields13["FULL"] = "FULL";
        })(Fields13 = Occ.Fields13 || (Occ.Fields13 = {}));
        /**
         * Defines values for Fields14.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields14 = <Fields14>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields14;
        (function (Fields14) {
            Fields14["BASIC"] = "BASIC";
            Fields14["DEFAULT"] = "DEFAULT";
            Fields14["FULL"] = "FULL";
        })(Fields14 = Occ.Fields14 || (Occ.Fields14 = {}));
        /**
         * Defines values for Fields15.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields15 = <Fields15>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields15;
        (function (Fields15) {
            Fields15["BASIC"] = "BASIC";
            Fields15["DEFAULT"] = "DEFAULT";
            Fields15["FULL"] = "FULL";
        })(Fields15 = Occ.Fields15 || (Occ.Fields15 = {}));
        /**
         * Defines values for Fields16.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields16 = <Fields16>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields16;
        (function (Fields16) {
            Fields16["BASIC"] = "BASIC";
            Fields16["DEFAULT"] = "DEFAULT";
            Fields16["FULL"] = "FULL";
        })(Fields16 = Occ.Fields16 || (Occ.Fields16 = {}));
        /**
         * Defines values for SortEnum.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: SortEnum = <SortEnum>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var SortEnum;
        (function (SortEnum) {
            SortEnum["BASIC"] = "BASIC";
            SortEnum["DEFAULT"] = "DEFAULT";
            SortEnum["FULL"] = "FULL";
        })(SortEnum = Occ.SortEnum || (Occ.SortEnum = {}));
        /**
         * Defines values for Fields17.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields17 = <Fields17>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields17;
        (function (Fields17) {
            Fields17["BASIC"] = "BASIC";
            Fields17["DEFAULT"] = "DEFAULT";
            Fields17["FULL"] = "FULL";
        })(Fields17 = Occ.Fields17 || (Occ.Fields17 = {}));
        /**
         * Defines values for Fields18.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields18 = <Fields18>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields18;
        (function (Fields18) {
            Fields18["BASIC"] = "BASIC";
            Fields18["DEFAULT"] = "DEFAULT";
            Fields18["FULL"] = "FULL";
        })(Fields18 = Occ.Fields18 || (Occ.Fields18 = {}));
        /**
         * Defines values for Fields19.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields19 = <Fields19>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields19;
        (function (Fields19) {
            Fields19["BASIC"] = "BASIC";
            Fields19["DEFAULT"] = "DEFAULT";
            Fields19["FULL"] = "FULL";
        })(Fields19 = Occ.Fields19 || (Occ.Fields19 = {}));
        /**
         * Defines values for Fields20.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields20 = <Fields20>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields20;
        (function (Fields20) {
            Fields20["BASIC"] = "BASIC";
            Fields20["DEFAULT"] = "DEFAULT";
            Fields20["FULL"] = "FULL";
        })(Fields20 = Occ.Fields20 || (Occ.Fields20 = {}));
        /**
         * Defines values for Fields21.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields21 = <Fields21>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields21;
        (function (Fields21) {
            Fields21["BASIC"] = "BASIC";
            Fields21["DEFAULT"] = "DEFAULT";
            Fields21["FULL"] = "FULL";
        })(Fields21 = Occ.Fields21 || (Occ.Fields21 = {}));
        /**
         * Defines values for Fields22.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields22 = <Fields22>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields22;
        (function (Fields22) {
            Fields22["BASIC"] = "BASIC";
            Fields22["DEFAULT"] = "DEFAULT";
            Fields22["FULL"] = "FULL";
        })(Fields22 = Occ.Fields22 || (Occ.Fields22 = {}));
        /**
         * Defines values for Fields23.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields23 = <Fields23>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields23;
        (function (Fields23) {
            Fields23["BASIC"] = "BASIC";
            Fields23["DEFAULT"] = "DEFAULT";
            Fields23["FULL"] = "FULL";
        })(Fields23 = Occ.Fields23 || (Occ.Fields23 = {}));
        /**
         * Defines values for Fields24.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields24 = <Fields24>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields24;
        (function (Fields24) {
            Fields24["BASIC"] = "BASIC";
            Fields24["DEFAULT"] = "DEFAULT";
            Fields24["FULL"] = "FULL";
        })(Fields24 = Occ.Fields24 || (Occ.Fields24 = {}));
        /**
         * Defines values for Fields25.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields25 = <Fields25>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields25;
        (function (Fields25) {
            Fields25["BASIC"] = "BASIC";
            Fields25["DEFAULT"] = "DEFAULT";
            Fields25["FULL"] = "FULL";
        })(Fields25 = Occ.Fields25 || (Occ.Fields25 = {}));
        /**
         * Defines values for Fields26.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields26 = <Fields26>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields26;
        (function (Fields26) {
            Fields26["BASIC"] = "BASIC";
            Fields26["DEFAULT"] = "DEFAULT";
            Fields26["FULL"] = "FULL";
        })(Fields26 = Occ.Fields26 || (Occ.Fields26 = {}));
        /**
         * Defines values for Fields27.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields27 = <Fields27>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields27;
        (function (Fields27) {
            Fields27["BASIC"] = "BASIC";
            Fields27["DEFAULT"] = "DEFAULT";
            Fields27["FULL"] = "FULL";
        })(Fields27 = Occ.Fields27 || (Occ.Fields27 = {}));
        /**
         * Defines values for Fields28.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields28 = <Fields28>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields28;
        (function (Fields28) {
            Fields28["BASIC"] = "BASIC";
            Fields28["DEFAULT"] = "DEFAULT";
            Fields28["FULL"] = "FULL";
        })(Fields28 = Occ.Fields28 || (Occ.Fields28 = {}));
        /**
         * Defines values for Fields29.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields29 = <Fields29>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields29;
        (function (Fields29) {
            Fields29["BASIC"] = "BASIC";
            Fields29["DEFAULT"] = "DEFAULT";
            Fields29["FULL"] = "FULL";
        })(Fields29 = Occ.Fields29 || (Occ.Fields29 = {}));
        /**
         * Defines values for Fields30.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields30 = <Fields30>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields30;
        (function (Fields30) {
            Fields30["BASIC"] = "BASIC";
            Fields30["DEFAULT"] = "DEFAULT";
            Fields30["FULL"] = "FULL";
        })(Fields30 = Occ.Fields30 || (Occ.Fields30 = {}));
        /**
         * Defines values for Fields31.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields31 = <Fields31>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields31;
        (function (Fields31) {
            Fields31["BASIC"] = "BASIC";
            Fields31["DEFAULT"] = "DEFAULT";
            Fields31["FULL"] = "FULL";
        })(Fields31 = Occ.Fields31 || (Occ.Fields31 = {}));
        /**
         * Defines values for Fields32.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields32 = <Fields32>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields32;
        (function (Fields32) {
            Fields32["BASIC"] = "BASIC";
            Fields32["DEFAULT"] = "DEFAULT";
            Fields32["FULL"] = "FULL";
        })(Fields32 = Occ.Fields32 || (Occ.Fields32 = {}));
        /**
         * Defines values for Fields33.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields33 = <Fields33>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields33;
        (function (Fields33) {
            Fields33["BASIC"] = "BASIC";
            Fields33["DEFAULT"] = "DEFAULT";
            Fields33["FULL"] = "FULL";
        })(Fields33 = Occ.Fields33 || (Occ.Fields33 = {}));
        /**
         * Defines values for Fields34.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields34 = <Fields34>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields34;
        (function (Fields34) {
            Fields34["BASIC"] = "BASIC";
            Fields34["DEFAULT"] = "DEFAULT";
            Fields34["FULL"] = "FULL";
        })(Fields34 = Occ.Fields34 || (Occ.Fields34 = {}));
        /**
         * Defines values for Fields35.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields35 = <Fields35>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields35;
        (function (Fields35) {
            Fields35["BASIC"] = "BASIC";
            Fields35["DEFAULT"] = "DEFAULT";
            Fields35["FULL"] = "FULL";
        })(Fields35 = Occ.Fields35 || (Occ.Fields35 = {}));
        /**
         * Defines values for Fields36.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields36 = <Fields36>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields36;
        (function (Fields36) {
            Fields36["BASIC"] = "BASIC";
            Fields36["DEFAULT"] = "DEFAULT";
            Fields36["FULL"] = "FULL";
        })(Fields36 = Occ.Fields36 || (Occ.Fields36 = {}));
        /**
         * Defines values for Fields37.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields37 = <Fields37>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields37;
        (function (Fields37) {
            Fields37["BASIC"] = "BASIC";
            Fields37["DEFAULT"] = "DEFAULT";
            Fields37["FULL"] = "FULL";
        })(Fields37 = Occ.Fields37 || (Occ.Fields37 = {}));
        /**
         * Defines values for Fields38.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields38 = <Fields38>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields38;
        (function (Fields38) {
            Fields38["BASIC"] = "BASIC";
            Fields38["DEFAULT"] = "DEFAULT";
            Fields38["FULL"] = "FULL";
        })(Fields38 = Occ.Fields38 || (Occ.Fields38 = {}));
        /**
         * Defines values for Fields39.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields39 = <Fields39>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields39;
        (function (Fields39) {
            Fields39["BASIC"] = "BASIC";
            Fields39["DEFAULT"] = "DEFAULT";
            Fields39["FULL"] = "FULL";
        })(Fields39 = Occ.Fields39 || (Occ.Fields39 = {}));
        /**
         * Defines values for Fields40.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields40 = <Fields40>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields40;
        (function (Fields40) {
            Fields40["BASIC"] = "BASIC";
            Fields40["DEFAULT"] = "DEFAULT";
            Fields40["FULL"] = "FULL";
        })(Fields40 = Occ.Fields40 || (Occ.Fields40 = {}));
        /**
         * Defines values for Fields41.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields41 = <Fields41>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields41;
        (function (Fields41) {
            Fields41["BASIC"] = "BASIC";
            Fields41["DEFAULT"] = "DEFAULT";
            Fields41["FULL"] = "FULL";
        })(Fields41 = Occ.Fields41 || (Occ.Fields41 = {}));
        /**
         * Defines values for Fields42.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields42 = <Fields42>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields42;
        (function (Fields42) {
            Fields42["BASIC"] = "BASIC";
            Fields42["DEFAULT"] = "DEFAULT";
            Fields42["FULL"] = "FULL";
        })(Fields42 = Occ.Fields42 || (Occ.Fields42 = {}));
        /**
         * Defines values for Fields43.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields43 = <Fields43>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields43;
        (function (Fields43) {
            Fields43["BASIC"] = "BASIC";
            Fields43["DEFAULT"] = "DEFAULT";
            Fields43["FULL"] = "FULL";
        })(Fields43 = Occ.Fields43 || (Occ.Fields43 = {}));
        /**
         * Defines values for Fields44.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields44 = <Fields44>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields44;
        (function (Fields44) {
            Fields44["BASIC"] = "BASIC";
            Fields44["DEFAULT"] = "DEFAULT";
            Fields44["FULL"] = "FULL";
        })(Fields44 = Occ.Fields44 || (Occ.Fields44 = {}));
        /**
         * Defines values for Fields45.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields45 = <Fields45>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields45;
        (function (Fields45) {
            Fields45["BASIC"] = "BASIC";
            Fields45["DEFAULT"] = "DEFAULT";
            Fields45["FULL"] = "FULL";
        })(Fields45 = Occ.Fields45 || (Occ.Fields45 = {}));
        /**
         * Defines values for Fields46.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields46 = <Fields46>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields46;
        (function (Fields46) {
            Fields46["BASIC"] = "BASIC";
            Fields46["DEFAULT"] = "DEFAULT";
            Fields46["FULL"] = "FULL";
        })(Fields46 = Occ.Fields46 || (Occ.Fields46 = {}));
        /**
         * Defines values for Fields47.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields47 = <Fields47>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields47;
        (function (Fields47) {
            Fields47["BASIC"] = "BASIC";
            Fields47["DEFAULT"] = "DEFAULT";
            Fields47["FULL"] = "FULL";
        })(Fields47 = Occ.Fields47 || (Occ.Fields47 = {}));
        /**
         * Defines values for Fields48.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields48 = <Fields48>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields48;
        (function (Fields48) {
            Fields48["BASIC"] = "BASIC";
            Fields48["DEFAULT"] = "DEFAULT";
            Fields48["FULL"] = "FULL";
        })(Fields48 = Occ.Fields48 || (Occ.Fields48 = {}));
        /**
         * Defines values for Fields49.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields49 = <Fields49>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields49;
        (function (Fields49) {
            Fields49["BASIC"] = "BASIC";
            Fields49["DEFAULT"] = "DEFAULT";
            Fields49["FULL"] = "FULL";
        })(Fields49 = Occ.Fields49 || (Occ.Fields49 = {}));
        /**
         * Defines values for Fields50.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields50 = <Fields50>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields50;
        (function (Fields50) {
            Fields50["BASIC"] = "BASIC";
            Fields50["DEFAULT"] = "DEFAULT";
            Fields50["FULL"] = "FULL";
        })(Fields50 = Occ.Fields50 || (Occ.Fields50 = {}));
        /**
         * Defines values for Fields51.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields51 = <Fields51>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields51;
        (function (Fields51) {
            Fields51["BASIC"] = "BASIC";
            Fields51["DEFAULT"] = "DEFAULT";
            Fields51["FULL"] = "FULL";
        })(Fields51 = Occ.Fields51 || (Occ.Fields51 = {}));
        /**
         * Defines values for Fields52.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields52 = <Fields52>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields52;
        (function (Fields52) {
            Fields52["BASIC"] = "BASIC";
            Fields52["DEFAULT"] = "DEFAULT";
            Fields52["FULL"] = "FULL";
        })(Fields52 = Occ.Fields52 || (Occ.Fields52 = {}));
        /**
         * Defines values for Fields53.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields53 = <Fields53>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields53;
        (function (Fields53) {
            Fields53["BASIC"] = "BASIC";
            Fields53["DEFAULT"] = "DEFAULT";
            Fields53["FULL"] = "FULL";
        })(Fields53 = Occ.Fields53 || (Occ.Fields53 = {}));
        /**
         * Defines values for Fields54.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields54 = <Fields54>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields54;
        (function (Fields54) {
            Fields54["BASIC"] = "BASIC";
            Fields54["DEFAULT"] = "DEFAULT";
            Fields54["FULL"] = "FULL";
        })(Fields54 = Occ.Fields54 || (Occ.Fields54 = {}));
        /**
         * Defines values for Fields55.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields55 = <Fields55>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields55;
        (function (Fields55) {
            Fields55["BASIC"] = "BASIC";
            Fields55["DEFAULT"] = "DEFAULT";
            Fields55["FULL"] = "FULL";
        })(Fields55 = Occ.Fields55 || (Occ.Fields55 = {}));
        /**
         * Defines values for Fields56.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields56 = <Fields56>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields56;
        (function (Fields56) {
            Fields56["BASIC"] = "BASIC";
            Fields56["DEFAULT"] = "DEFAULT";
            Fields56["FULL"] = "FULL";
        })(Fields56 = Occ.Fields56 || (Occ.Fields56 = {}));
        /**
         * Defines values for Fields57.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields57 = <Fields57>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields57;
        (function (Fields57) {
            Fields57["BASIC"] = "BASIC";
            Fields57["DEFAULT"] = "DEFAULT";
            Fields57["FULL"] = "FULL";
        })(Fields57 = Occ.Fields57 || (Occ.Fields57 = {}));
        /**
         * Defines values for Fields58.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields58 = <Fields58>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields58;
        (function (Fields58) {
            Fields58["BASIC"] = "BASIC";
            Fields58["DEFAULT"] = "DEFAULT";
            Fields58["FULL"] = "FULL";
        })(Fields58 = Occ.Fields58 || (Occ.Fields58 = {}));
        /**
         * Defines values for Fields59.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields59 = <Fields59>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields59;
        (function (Fields59) {
            Fields59["BASIC"] = "BASIC";
            Fields59["DEFAULT"] = "DEFAULT";
            Fields59["FULL"] = "FULL";
        })(Fields59 = Occ.Fields59 || (Occ.Fields59 = {}));
        /**
         * Defines values for Fields60.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields60 = <Fields60>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields60;
        (function (Fields60) {
            Fields60["BASIC"] = "BASIC";
            Fields60["DEFAULT"] = "DEFAULT";
            Fields60["FULL"] = "FULL";
        })(Fields60 = Occ.Fields60 || (Occ.Fields60 = {}));
        /**
         * Defines values for Fields61.
         * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Fields61 = <Fields61>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Fields61;
        (function (Fields61) {
            Fields61["BASIC"] = "BASIC";
            Fields61["DEFAULT"] = "DEFAULT";
            Fields61["FULL"] = "FULL";
        })(Fields61 = Occ.Fields61 || (Occ.Fields61 = {}));
        /**
         * Defines values for Type.
         * Possible values include: 'all', 'product', 'order'
         * There could be more values for this enum apart from the ones defined here.If
         * you want to set a value that is not from the known values then you can do
         * the following:
         * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
         * @readonly
         * @enum {string}
         */
        var Type;
        (function (Type) {
            Type["All"] = "all";
            Type["Product"] = "product";
            Type["Order"] = "order";
        })(Type = Occ.Type || (Occ.Type = {}));
        var CONSENT_STATUS;
        (function (CONSENT_STATUS) {
            CONSENT_STATUS["ANONYMOUS_CONSENT_GIVEN"] = "GIVEN";
            CONSENT_STATUS["ANONYMOUS_CONSENT_WITHDRAWN"] = "WITHDRAWN";
        })(CONSENT_STATUS = Occ.CONSENT_STATUS || (Occ.CONSENT_STATUS = {}));
        var NotificationType;
        (function (NotificationType) {
            NotificationType["BACK_IN_STOCK"] = "BACK_IN_STOCK";
        })(NotificationType = Occ.NotificationType || (Occ.NotificationType = {}));
        var Period;
        (function (Period) {
            Period["DAY"] = "DAY";
            Period["WEEK"] = "WEEK";
            Period["MONTH"] = "MONTH";
            Period["QUARTER"] = "QUARTER";
            Period["YEAR"] = "YEAR";
        })(Period = Occ.Period || (Occ.Period = {}));
        var DaysOfWeek;
        (function (DaysOfWeek) {
            DaysOfWeek["MONDAY"] = "MONDAY";
            DaysOfWeek["TUESDAY"] = "TUESDAY";
            DaysOfWeek["WEDNESDAY"] = "WEDNESDAY";
            DaysOfWeek["THURSDAY"] = "THURSDAY";
            DaysOfWeek["FRIDAY"] = "FRIDAY";
            DaysOfWeek["SATURDAY"] = "SATURDAY";
            DaysOfWeek["SUNDAY"] = "SUNDAY";
        })(DaysOfWeek = Occ.DaysOfWeek || (Occ.DaysOfWeek = {}));
        var OrderApprovalDecisionValue;
        (function (OrderApprovalDecisionValue) {
            OrderApprovalDecisionValue["APPROVE"] = "APPROVE";
            OrderApprovalDecisionValue["REJECT"] = "REJECT";
        })(OrderApprovalDecisionValue = Occ.OrderApprovalDecisionValue || (Occ.OrderApprovalDecisionValue = {}));
    })(exports.Occ || (exports.Occ = {}));

    var ConfigValidatorToken = new i0.InjectionToken('ConfigurationValidator');
    /**
     * Use to probide config validation at app bootstrap (when all config chunks are merged)
     *
     * @param configValidator
     */
    function provideConfigValidator(configValidator) {
        return {
            provide: ConfigValidatorToken,
            useValue: configValidator,
            multi: true,
        };
    }
    function validateConfig(config, configValidators) {
        var e_1, _a;
        try {
            for (var configValidators_1 = __values(configValidators), configValidators_1_1 = configValidators_1.next(); !configValidators_1_1.done; configValidators_1_1 = configValidators_1.next()) {
                var validate = configValidators_1_1.value;
                var warning = validate(config);
                if (warning) {
                    console.warn(warning);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configValidators_1_1 && !configValidators_1_1.done && (_a = configValidators_1.return)) _a.call(configValidators_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }

    var OccModule = /** @class */ (function () {
        function OccModule() {
        }
        OccModule.forRoot = function () {
            return {
                ngModule: OccModule,
                providers: [
                    {
                        provide: i1$4.HTTP_INTERCEPTORS,
                        useExisting: WithCredentialsInterceptor,
                        multi: true,
                    },
                    provideDefaultConfig(defaultOccConfig),
                    provideConfigValidator(occConfigValidator),
                ],
            };
        };
        return OccModule;
    }());
    OccModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        AsmOccModule,
                        CmsOccModule,
                        CartOccModule,
                        CheckoutOccModule,
                        ProductOccModule,
                        SiteContextOccModule,
                        StoreFinderOccModule,
                        UserOccModule,
                        OccConfigLoaderModule.forRoot(),
                        CostCenterOccModule,
                    ],
                },] }
    ];

    var LoadingScopesService = /** @class */ (function () {
        function LoadingScopesService(config) {
            this.config = config;
        }
        /**
         * Aims to expand scopes based on loading scopes config.
         *
         * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']
         *
         * If scope data overlaps with each other, the data should be merged in the order of scopes provided,
         * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.
         * It should apply also to implicit scopes (that are included by configuration).
         *
         * @param model
         * @param scopes
         */
        LoadingScopesService.prototype.expand = function (model, scopes) {
            var e_1, _a;
            var scopesConfig = this.config &&
                this.config.backend &&
                this.config.backend.loadingScopes &&
                this.config.backend.loadingScopes[model];
            if (scopesConfig) {
                var expandedScopes = __spread(scopes);
                var i = expandedScopes.length;
                while (i > 0) {
                    i--;
                    var includedScopes = scopesConfig[expandedScopes[i]] &&
                        scopesConfig[expandedScopes[i]].include;
                    if (includedScopes) {
                        try {
                            for (var includedScopes_1 = (e_1 = void 0, __values(includedScopes)), includedScopes_1_1 = includedScopes_1.next(); !includedScopes_1_1.done; includedScopes_1_1 = includedScopes_1.next()) {
                                var includedScope = includedScopes_1_1.value;
                                if (!expandedScopes.includes(includedScope)) {
                                    expandedScopes.splice(i, 0, includedScope);
                                    i++;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (includedScopes_1_1 && !includedScopes_1_1.done && (_a = includedScopes_1.return)) _a.call(includedScopes_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                }
                return expandedScopes;
            }
            return scopes;
        };
        /**
         * Return maxAge for product scope in milliseconds
         *
         * @param model
         * @param scope
         */
        LoadingScopesService.prototype.getMaxAge = function (model, scope) {
            var scopesConfig = this.config &&
                this.config.backend &&
                this.config.backend.loadingScopes &&
                this.config.backend.loadingScopes[model];
            return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;
        };
        return LoadingScopesService;
    }());
    LoadingScopesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoadingScopesService_Factory() { return new LoadingScopesService(i0.ɵɵinject(OccConfig)); }, token: LoadingScopesService, providedIn: "root" });
    LoadingScopesService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    LoadingScopesService.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };

    var AnonymousConsentsConfig = /** @class */ (function (_super) {
        __extends(AnonymousConsentsConfig, _super);
        function AnonymousConsentsConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AnonymousConsentsConfig;
    }(OccConfig));
    AnonymousConsentsConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentsConfig_Factory() { return i0.ɵɵinject(Config); }, token: AnonymousConsentsConfig, providedIn: "root" });
    AnonymousConsentsConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var AnonymousConsentsInterceptor = /** @class */ (function () {
        function AnonymousConsentsInterceptor(anonymousConsentsService, authService, occEndpoints, config) {
            this.anonymousConsentsService = anonymousConsentsService;
            this.authService = authService;
            this.occEndpoints = occEndpoints;
            this.config = config;
        }
        AnonymousConsentsInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            return this.anonymousConsentsService.getConsents().pipe(operators.take(1), operators.withLatestFrom(this.authService.isUserLoggedIn()), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), consents = _b[0], isUserLoggedIn = _b[1];
                if (!_this.isOccUrl(request.url)) {
                    return next.handle(request);
                }
                var clonedRequest = _this.handleRequest(consents, request);
                return next.handle(clonedRequest).pipe(operators.tap(function (event) {
                    if (event instanceof i1$4.HttpResponse &&
                        event.url.startsWith(_this.occEndpoints.getUrl('anonymousConsentTemplates'))) {
                        _this.handleResponse(isUserLoggedIn, event.headers.get(ANONYMOUS_CONSENTS_HEADER), consents);
                    }
                }));
            }));
        };
        AnonymousConsentsInterceptor.prototype.handleResponse = function (isUserLoggedIn, newRawConsents, previousConsents) {
            if (!isUserLoggedIn && newRawConsents) {
                var newConsents = [];
                newConsents = this.anonymousConsentsService.decodeAndDeserialize(newRawConsents);
                newConsents = this.giveRequiredConsents(newConsents);
                if (this.anonymousConsentsService.consentsUpdated(newConsents, previousConsents)) {
                    this.anonymousConsentsService.setConsents(newConsents);
                }
            }
        };
        AnonymousConsentsInterceptor.prototype.handleRequest = function (consents, request) {
            var _a;
            if (!consents) {
                return request;
            }
            var rawConsents = this.anonymousConsentsService.serializeAndEncode(consents);
            return request.clone({
                setHeaders: (_a = {},
                    _a[ANONYMOUS_CONSENTS_HEADER] = rawConsents,
                    _a),
            });
        };
        AnonymousConsentsInterceptor.prototype.isOccUrl = function (url) {
            return url.includes(this.occEndpoints.getBaseEndpoint());
        };
        AnonymousConsentsInterceptor.prototype.giveRequiredConsents = function (consents) {
            var e_1, _a;
            var givenConsents = __spread(consents);
            if (Boolean(this.config.anonymousConsents) &&
                Boolean(this.config.anonymousConsents.requiredConsents)) {
                try {
                    for (var givenConsents_1 = __values(givenConsents), givenConsents_1_1 = givenConsents_1.next(); !givenConsents_1_1.done; givenConsents_1_1 = givenConsents_1.next()) {
                        var consent = givenConsents_1_1.value;
                        if (this.config.anonymousConsents.requiredConsents.includes(consent.templateCode)) {
                            consent.consentState = exports.ANONYMOUS_CONSENT_STATUS.GIVEN;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (givenConsents_1_1 && !givenConsents_1_1.done && (_a = givenConsents_1.return)) _a.call(givenConsents_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return givenConsents;
        };
        return AnonymousConsentsInterceptor;
    }());
    AnonymousConsentsInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentsInterceptor_Factory() { return new AnonymousConsentsInterceptor(i0.ɵɵinject(AnonymousConsentsService), i0.ɵɵinject(AuthService), i0.ɵɵinject(OccEndpointsService), i0.ɵɵinject(AnonymousConsentsConfig)); }, token: AnonymousConsentsInterceptor, providedIn: "root" });
    AnonymousConsentsInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AnonymousConsentsInterceptor.ctorParameters = function () { return [
        { type: AnonymousConsentsService },
        { type: AuthService },
        { type: OccEndpointsService },
        { type: AnonymousConsentsConfig }
    ]; };

    var interceptors$2 = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: AnonymousConsentsInterceptor,
            multi: true,
        },
    ];

    var getUserState = i1$2.createFeatureSelector(USER_FEATURE);

    var ɵ0$h = function (state) { return state.billingCountries; };
    var getBillingCountriesState = i1$2.createSelector(getUserState, ɵ0$h);
    var ɵ1$a = function (state) { return state.entities; };
    var getBillingCountriesEntites = i1$2.createSelector(getBillingCountriesState, ɵ1$a);
    var ɵ2$5 = function (entites) { return Object.keys(entites).map(function (isocode) { return entites[isocode]; }); };
    var getAllBillingCountries = i1$2.createSelector(getBillingCountriesEntites, ɵ2$5);

    var ɵ0$i = function (state) { return state.consignmentTracking; };
    var getConsignmentTrackingState = i1$2.createSelector(getUserState, ɵ0$i);
    var ɵ1$b = function (state) { return state.tracking; };
    var getConsignmentTracking = i1$2.createSelector(getConsignmentTrackingState, ɵ1$b);

    var ɵ0$j = function (state) { return state.customerCoupons; };
    var getCustomerCouponsState = i1$2.createSelector(getUserState, ɵ0$j);
    var ɵ1$c = function (state) { return loaderSuccessSelector(state); };
    var getCustomerCouponsLoaded = i1$2.createSelector(getCustomerCouponsState, ɵ1$c);
    var ɵ2$6 = function (state) { return loaderLoadingSelector(state); };
    var getCustomerCouponsLoading = i1$2.createSelector(getCustomerCouponsState, ɵ2$6);
    var ɵ3$4 = function (state) { return loaderValueSelector(state); };
    var getCustomerCoupons = i1$2.createSelector(getCustomerCouponsState, ɵ3$4);

    var ɵ0$k = function (state) { return state.countries; };
    var getDeliveryCountriesState = i1$2.createSelector(getUserState, ɵ0$k);
    var ɵ1$d = function (state) { return state.entities; };
    var getDeliveryCountriesEntites = i1$2.createSelector(getDeliveryCountriesState, ɵ1$d);
    var ɵ2$7 = function (entites) { return Object.keys(entites).map(function (isocode) { return entites[isocode]; }); };
    var getAllDeliveryCountries = i1$2.createSelector(getDeliveryCountriesEntites, ɵ2$7);
    var countrySelectorFactory = function (isocode) { return i1$2.createSelector(getDeliveryCountriesEntites, function (entities) { return Object.keys(entities).length !== 0 ? entities[isocode] : null; }); };

    var ɵ0$l = function (state) { return state.notificationPreferences; };
    var getPreferencesLoaderState = i1$2.createSelector(getUserState, ɵ0$l);
    var ɵ1$e = function (state) { return loaderValueSelector(state); };
    var getPreferences = i1$2.createSelector(getPreferencesLoaderState, ɵ1$e);
    var ɵ2$8 = function (state) { return loaderValueSelector(state).filter(function (p) { return p.enabled; }); };
    var getEnabledPreferences = i1$2.createSelector(getPreferencesLoaderState, ɵ2$8);
    var ɵ3$5 = function (state) { return loaderLoadingSelector(state); };
    var getPreferencesLoading = i1$2.createSelector(getPreferencesLoaderState, ɵ3$5);

    var ɵ0$m = function (state) { return state.order; };
    var getOrderState = i1$2.createSelector(getUserState, ɵ0$m);
    var ɵ1$f = function (state) { return loaderValueSelector(state); };
    var getOrderDetails = i1$2.createSelector(getOrderState, ɵ1$f);

    var ɵ0$n = function (state) { return state.orderReturn; };
    var getOrderReturnRequestState = i1$2.createSelector(getUserState, ɵ0$n);
    var ɵ1$g = function (state) { return loaderValueSelector(state); };
    var getOrderReturnRequest = i1$2.createSelector(getOrderReturnRequestState, ɵ1$g);
    var ɵ2$9 = function (state) { return loaderLoadingSelector(state); };
    var getOrderReturnRequestLoading = i1$2.createSelector(getOrderReturnRequestState, ɵ2$9);
    var ɵ3$6 = function (state) { return loaderSuccessSelector(state) &&
        !loaderLoadingSelector(state); };
    var getOrderReturnRequestSuccess = i1$2.createSelector(getOrderReturnRequestState, ɵ3$6);
    var ɵ4$2 = function (state) { return state.orderReturnList; };
    var getOrderReturnRequestListState = i1$2.createSelector(getUserState, ɵ4$2);
    var ɵ5$1 = function (state) { return loaderValueSelector(state); };
    var getOrderReturnRequestList = i1$2.createSelector(getOrderReturnRequestListState, ɵ5$1);

    var ɵ0$o = function (state) { return state.payments; };
    var getPaymentMethodsState = i1$2.createSelector(getUserState, ɵ0$o);
    var ɵ1$h = function (state) { return loaderValueSelector(state); };
    var getPaymentMethods = i1$2.createSelector(getPaymentMethodsState, ɵ1$h);
    var ɵ2$a = function (state) { return loaderLoadingSelector(state); };
    var getPaymentMethodsLoading = i1$2.createSelector(getPaymentMethodsState, ɵ2$a);
    var ɵ3$7 = function (state) { return loaderSuccessSelector(state) &&
        !loaderLoadingSelector(state); };
    var getPaymentMethodsLoadedSuccess = i1$2.createSelector(getPaymentMethodsState, ɵ3$7);

    var ɵ0$p = function (state) { return state.productInterests; };
    var getInterestsState = i1$2.createSelector(getUserState, ɵ0$p);
    var ɵ1$i = function (state) { return loaderValueSelector(state); };
    var getInterests = i1$2.createSelector(getInterestsState, ɵ1$i);
    var ɵ2$b = function (state) { return loaderLoadingSelector(state); };
    var getInterestsLoading = i1$2.createSelector(getInterestsState, ɵ2$b);

    var ɵ0$q = function (state) { return state.regions; };
    var getRegionsLoaderState = i1$2.createSelector(getUserState, ɵ0$q);
    var ɵ1$j = function (state) {
        return loaderValueSelector(state).entities;
    };
    var getAllRegions = i1$2.createSelector(getRegionsLoaderState, ɵ1$j);
    var ɵ2$c = function (state) { return ({
        loaded: loaderSuccessSelector(state),
        loading: loaderLoadingSelector(state),
        regions: loaderValueSelector(state).entities,
        country: loaderValueSelector(state).country,
    }); };
    var getRegionsDataAndLoading = i1$2.createSelector(getRegionsLoaderState, ɵ2$c);
    var ɵ3$8 = function (state) { return loaderValueSelector(state).country; };
    var getRegionsCountry = i1$2.createSelector(getRegionsLoaderState, ɵ3$8);
    var ɵ4$3 = function (state) { return loaderLoadingSelector(state); };
    var getRegionsLoading = i1$2.createSelector(getRegionsLoaderState, ɵ4$3);
    var ɵ5$2 = function (state) { return loaderSuccessSelector(state); };
    var getRegionsLoaded = i1$2.createSelector(getRegionsLoaderState, ɵ5$2);

    var ɵ0$r = function (state) { return state.replenishmentOrder; };
    var getReplenishmentOrderState = i1$2.createSelector(getUserState, ɵ0$r);
    var ɵ1$k = function (state) { return loaderValueSelector(state); };
    var getReplenishmentOrderDetailsValue = i1$2.createSelector(getReplenishmentOrderState, ɵ1$k);
    var ɵ2$d = function (state) { return loaderLoadingSelector(state); };
    var getReplenishmentOrderDetailsLoading = i1$2.createSelector(getReplenishmentOrderState, ɵ2$d);
    var ɵ3$9 = function (state) { return loaderSuccessSelector(state); };
    var getReplenishmentOrderDetailsSuccess = i1$2.createSelector(getReplenishmentOrderState, ɵ3$9);
    var ɵ4$4 = function (state) { return loaderErrorSelector(state); };
    var getReplenishmentOrderDetailsError = i1$2.createSelector(getReplenishmentOrderState, ɵ4$4);

    var ɵ0$s = function (state) { return state.resetPassword; };
    var getResetPassword = i1$2.createSelector(getUserState, ɵ0$s);

    var ɵ0$t = function (state) { return state.titles; };
    var getTitlesState = i1$2.createSelector(getUserState, ɵ0$t);
    var ɵ1$l = function (state) { return state.entities; };
    var getTitlesEntites = i1$2.createSelector(getTitlesState, ɵ1$l);
    var ɵ2$e = function (entites) { return Object.keys(entites).map(function (code) { return entites[code]; }); };
    var getAllTitles = i1$2.createSelector(getTitlesEntites, ɵ2$e);
    var titleSelectorFactory = function (code) { return i1$2.createSelector(getTitlesEntites, function (entities) { return Object.keys(entities).length !== 0 ? entities[code] : null; }); };

    var ɵ0$u = function (state) { return state.addresses; };
    var getAddressesLoaderState = i1$2.createSelector(getUserState, ɵ0$u);
    var ɵ1$m = function (state) { return loaderValueSelector(state); };
    var getAddresses = i1$2.createSelector(getAddressesLoaderState, ɵ1$m);
    var ɵ2$f = function (state) { return loaderLoadingSelector(state); };
    var getAddressesLoading = i1$2.createSelector(getAddressesLoaderState, ɵ2$f);
    var ɵ3$a = function (state) { return loaderSuccessSelector(state) &&
        !loaderLoadingSelector(state); };
    var getAddressesLoadedSuccess = i1$2.createSelector(getAddressesLoaderState, ɵ3$a);

    var ɵ0$v = function (state) { return state.consents; };
    var getConsentsState = i1$2.createSelector(getUserState, ɵ0$v);
    var getConsentsValue = i1$2.createSelector(getConsentsState, loaderValueSelector);
    var getConsentByTemplateId = function (templateId) { return i1$2.createSelector(getConsentsValue, function (templates) { return templates.find(function (template) { return template.id === templateId; }); }); };
    var getConsentsLoading = i1$2.createSelector(getConsentsState, loaderLoadingSelector);
    var getConsentsSuccess = i1$2.createSelector(getConsentsState, loaderSuccessSelector);
    var getConsentsError = i1$2.createSelector(getConsentsState, loaderErrorSelector);

    var ɵ0$w = function (state) { return state.costCenters; };
    var getCostCentersState = i1$2.createSelector(getUserState, ɵ0$w);
    var ɵ1$n = function (state) { return loaderValueSelector(state); };
    var getCostCenters = i1$2.createSelector(getCostCentersState, ɵ1$n);

    var ɵ0$x = function (state) { return state.account; };
    var getDetailsState = i1$2.createSelector(getUserState, ɵ0$x);
    var ɵ1$o = function (state) { return state.details; };
    var getDetails = i1$2.createSelector(getDetailsState, ɵ1$o);

    var ɵ0$y = function (state) { return state.orders; };
    var getOrdersState = i1$2.createSelector(getUserState, ɵ0$y);
    var ɵ1$p = function (state) { return loaderSuccessSelector(state); };
    var getOrdersLoaded = i1$2.createSelector(getOrdersState, ɵ1$p);
    var ɵ2$g = function (state) { return loaderValueSelector(state); };
    var getOrders = i1$2.createSelector(getOrdersState, ɵ2$g);

    var ɵ0$z = function (state) { return state.replenishmentOrders; };
    var getReplenishmentOrdersState = i1$2.createSelector(getUserState, ɵ0$z);
    var ɵ1$q = function (state) { return loaderValueSelector(state); };
    var getReplenishmentOrders = i1$2.createSelector(getReplenishmentOrdersState, ɵ1$q);
    var ɵ2$h = function (state) { return loaderLoadingSelector(state); };
    var getReplenishmentOrdersLoading = i1$2.createSelector(getReplenishmentOrdersState, ɵ2$h);
    var ɵ3$b = function (state) { return loaderErrorSelector(state); };
    var getReplenishmentOrdersError = i1$2.createSelector(getReplenishmentOrdersState, ɵ3$b);
    var ɵ4$5 = function (state) { return loaderSuccessSelector(state); };
    var getReplenishmentOrdersSuccess = i1$2.createSelector(getReplenishmentOrdersState, ɵ4$5);

    var usersGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getBillingCountriesState: getBillingCountriesState,
        getBillingCountriesEntites: getBillingCountriesEntites,
        getAllBillingCountries: getAllBillingCountries,
        ɵ0: ɵ0$h,
        ɵ1: ɵ1$a,
        ɵ2: ɵ2$5,
        getConsignmentTrackingState: getConsignmentTrackingState,
        getConsignmentTracking: getConsignmentTracking,
        getCustomerCouponsState: getCustomerCouponsState,
        getCustomerCouponsLoaded: getCustomerCouponsLoaded,
        getCustomerCouponsLoading: getCustomerCouponsLoading,
        getCustomerCoupons: getCustomerCoupons,
        ɵ3: ɵ3$4,
        getDeliveryCountriesState: getDeliveryCountriesState,
        getDeliveryCountriesEntites: getDeliveryCountriesEntites,
        getAllDeliveryCountries: getAllDeliveryCountries,
        countrySelectorFactory: countrySelectorFactory,
        getUserState: getUserState,
        getPreferencesLoaderState: getPreferencesLoaderState,
        getPreferences: getPreferences,
        getEnabledPreferences: getEnabledPreferences,
        getPreferencesLoading: getPreferencesLoading,
        getOrderState: getOrderState,
        getOrderDetails: getOrderDetails,
        getOrderReturnRequestState: getOrderReturnRequestState,
        getOrderReturnRequest: getOrderReturnRequest,
        getOrderReturnRequestLoading: getOrderReturnRequestLoading,
        getOrderReturnRequestSuccess: getOrderReturnRequestSuccess,
        getOrderReturnRequestListState: getOrderReturnRequestListState,
        getOrderReturnRequestList: getOrderReturnRequestList,
        ɵ4: ɵ4$2,
        ɵ5: ɵ5$1,
        getPaymentMethodsState: getPaymentMethodsState,
        getPaymentMethods: getPaymentMethods,
        getPaymentMethodsLoading: getPaymentMethodsLoading,
        getPaymentMethodsLoadedSuccess: getPaymentMethodsLoadedSuccess,
        getInterestsState: getInterestsState,
        getInterests: getInterests,
        getInterestsLoading: getInterestsLoading,
        getRegionsLoaderState: getRegionsLoaderState,
        getAllRegions: getAllRegions,
        getRegionsDataAndLoading: getRegionsDataAndLoading,
        getRegionsCountry: getRegionsCountry,
        getRegionsLoading: getRegionsLoading,
        getRegionsLoaded: getRegionsLoaded,
        getReplenishmentOrderState: getReplenishmentOrderState,
        getReplenishmentOrderDetailsValue: getReplenishmentOrderDetailsValue,
        getReplenishmentOrderDetailsLoading: getReplenishmentOrderDetailsLoading,
        getReplenishmentOrderDetailsSuccess: getReplenishmentOrderDetailsSuccess,
        getReplenishmentOrderDetailsError: getReplenishmentOrderDetailsError,
        getResetPassword: getResetPassword,
        getTitlesState: getTitlesState,
        getTitlesEntites: getTitlesEntites,
        getAllTitles: getAllTitles,
        titleSelectorFactory: titleSelectorFactory,
        getAddressesLoaderState: getAddressesLoaderState,
        getAddresses: getAddresses,
        getAddressesLoading: getAddressesLoading,
        getAddressesLoadedSuccess: getAddressesLoadedSuccess,
        getConsentsState: getConsentsState,
        getConsentsValue: getConsentsValue,
        getConsentByTemplateId: getConsentByTemplateId,
        getConsentsLoading: getConsentsLoading,
        getConsentsSuccess: getConsentsSuccess,
        getConsentsError: getConsentsError,
        getCostCentersState: getCostCentersState,
        getCostCenters: getCostCenters,
        getDetailsState: getDetailsState,
        getDetails: getDetails,
        getOrdersState: getOrdersState,
        getOrdersLoaded: getOrdersLoaded,
        getOrders: getOrders,
        getReplenishmentOrdersState: getReplenishmentOrdersState,
        getReplenishmentOrders: getReplenishmentOrders,
        getReplenishmentOrdersLoading: getReplenishmentOrdersLoading,
        getReplenishmentOrdersError: getReplenishmentOrdersError,
        getReplenishmentOrdersSuccess: getReplenishmentOrdersSuccess
    });

    var UserConsentService = /** @class */ (function () {
        function UserConsentService(store, userIdService, authService) {
            this.store = store;
            this.userIdService = userIdService;
            this.authService = authService;
        }
        /**
         * Retrieves all consents.
         */
        UserConsentService.prototype.loadConsents = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadUserConsents(userId));
            });
        };
        /**
         * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.
         * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.
         */
        UserConsentService.prototype.getConsents = function (loadIfMissing) {
            var _this = this;
            if (loadIfMissing === void 0) { loadIfMissing = false; }
            return rxjs.iif(function () { return loadIfMissing; }, this.store.pipe(i1$2.select(getConsentsValue), operators.withLatestFrom(this.getConsentsResultLoading(), this.getConsentsResultSuccess()), operators.filter(function (_a) {
                var _b = __read(_a, 3), _templates = _b[0], loading = _b[1], _success = _b[2];
                return !loading;
            }), operators.tap(function (_a) {
                var _b = __read(_a, 3), templates = _b[0], _loading = _b[1], success = _b[2];
                if (!templates || templates.length === 0) {
                    // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response
                    if (!success) {
                        _this.loadConsents();
                    }
                }
            }), operators.filter(function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return Boolean(templates);
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), templates = _b[0], _loading = _b[1];
                return templates;
            })), this.store.pipe(i1$2.select(getConsentsValue)));
        };
        /**
         * Returns the consents loading flag
         */
        UserConsentService.prototype.getConsentsResultLoading = function () {
            return this.store.pipe(i1$2.select(getConsentsLoading));
        };
        /**
         * Returns the consents success flag
         */
        UserConsentService.prototype.getConsentsResultSuccess = function () {
            return this.store.pipe(i1$2.select(getConsentsSuccess));
        };
        /**
         * Returns the consents error flag
         */
        UserConsentService.prototype.getConsentsResultError = function () {
            return this.store.pipe(i1$2.select(getConsentsError));
        };
        /**
         * Resets the processing state for consent retrieval
         */
        UserConsentService.prototype.resetConsentsProcessState = function () {
            this.store.dispatch(new ResetLoadUserConsents());
        };
        /**
         * Returns the registered consent for the given template ID.
         *
         * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.
         *
         * @param templateId a template ID by which to filter the registered templates.
         */
        UserConsentService.prototype.getConsent = function (templateId) {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.filter(Boolean), operators.tap(function () { return _this.getConsents(true); }), operators.switchMap(function () { return _this.store.pipe(i1$2.select(getConsentByTemplateId(templateId))); }), operators.filter(function (template) { return Boolean(template); }), operators.map(function (template) { return template.currentConsent; }));
        };
        /**
         * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.
         * Otherwise, `false` is returned.
         *
         * @param consent to check
         */
        UserConsentService.prototype.isConsentGiven = function (consent) {
            return (Boolean(consent) &&
                Boolean(consent.consentGivenDate) &&
                !Boolean(consent.consentWithdrawnDate));
        };
        /**
         * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.
         * Otherwise, `false` is returned.
         *
         * @param consent to check
         */
        UserConsentService.prototype.isConsentWithdrawn = function (consent) {
            if (Boolean(consent)) {
                return Boolean(consent.consentWithdrawnDate);
            }
            return true;
        };
        /**
         * Give consent for specified consent template ID and version.
         * @param consentTemplateId a template ID for which to give a consent
         * @param consentTemplateVersion a template version for which to give a consent
         */
        UserConsentService.prototype.giveConsent = function (consentTemplateId, consentTemplateVersion) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new GiveUserConsent({
                    userId: userId,
                    consentTemplateId: consentTemplateId,
                    consentTemplateVersion: consentTemplateVersion,
                }));
            });
        };
        /**
         * Returns the give consent process loading flag
         */
        UserConsentService.prototype.getGiveConsentResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the give consent process success flag
         */
        UserConsentService.prototype.getGiveConsentResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the give consent process error flag
         */
        UserConsentService.prototype.getGiveConsentResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID)));
        };
        /**
         * Resents the give consent process flags
         */
        UserConsentService.prototype.resetGiveConsentProcessState = function () {
            return this.store.dispatch(new ResetGiveUserConsentProcess());
        };
        /**
         * Withdraw consent for the given `consentCode`
         * @param consentCode for which to withdraw the consent
         */
        UserConsentService.prototype.withdrawConsent = function (consentCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new WithdrawUserConsent({
                    userId: userId,
                    consentCode: consentCode,
                }));
            });
        };
        /**
         * Returns the withdraw consent process loading flag
         */
        UserConsentService.prototype.getWithdrawConsentResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the withdraw consent process success flag
         */
        UserConsentService.prototype.getWithdrawConsentResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Returns the withdraw consent process error flag
         */
        UserConsentService.prototype.getWithdrawConsentResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID)));
        };
        /**
         * Resets the process flags for withdraw consent
         */
        UserConsentService.prototype.resetWithdrawConsentProcessState = function () {
            return this.store.dispatch(new ResetWithdrawUserConsentProcess());
        };
        /**
         * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.
         * If the `hideTemplateIds` is empty, the provided `templateList` is returned.
         *
         * @param templateList a list of consent templates to filter
         * @param hideTemplateIds template IDs to hide
         */
        UserConsentService.prototype.filterConsentTemplates = function (templateList, hideTemplateIds) {
            var e_1, _a;
            if (hideTemplateIds === void 0) { hideTemplateIds = []; }
            if (hideTemplateIds.length === 0) {
                return templateList;
            }
            var updatedTemplateList = [];
            try {
                for (var templateList_1 = __values(templateList), templateList_1_1 = templateList_1.next(); !templateList_1_1.done; templateList_1_1 = templateList_1.next()) {
                    var template = templateList_1_1.value;
                    var show = !hideTemplateIds.includes(template.id);
                    if (show) {
                        updatedTemplateList.push(template);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (templateList_1_1 && !templateList_1_1.done && (_a = templateList_1.return)) _a.call(templateList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return updatedTemplateList;
        };
        return UserConsentService;
    }());
    UserConsentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserConsentService_Factory() { return new UserConsentService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(AuthService)); }, token: UserConsentService, providedIn: "root" });
    UserConsentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserConsentService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: AuthService }
    ]; };

    var AnonymousConsentTemplatesConnector = /** @class */ (function () {
        function AnonymousConsentTemplatesConnector(adapter) {
            this.adapter = adapter;
        }
        AnonymousConsentTemplatesConnector.prototype.loadAnonymousConsentTemplates = function () {
            return this.adapter.loadAnonymousConsentTemplates();
        };
        AnonymousConsentTemplatesConnector.prototype.loadAnonymousConsents = function () {
            return this.adapter.loadAnonymousConsents();
        };
        return AnonymousConsentTemplatesConnector;
    }());
    AnonymousConsentTemplatesConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentTemplatesConnector_Factory() { return new AnonymousConsentTemplatesConnector(i0.ɵɵinject(AnonymousConsentTemplatesAdapter)); }, token: AnonymousConsentTemplatesConnector, providedIn: "root" });
    AnonymousConsentTemplatesConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AnonymousConsentTemplatesConnector.ctorParameters = function () { return [
        { type: AnonymousConsentTemplatesAdapter }
    ]; };

    var AnonymousConsentsEffects = /** @class */ (function () {
        function AnonymousConsentsEffects(actions$, anonymousConsentTemplatesConnector, authService, anonymousConsentsConfig, anonymousConsentService, userConsentService, userIdService) {
            var _this = this;
            this.actions$ = actions$;
            this.anonymousConsentTemplatesConnector = anonymousConsentTemplatesConnector;
            this.authService = authService;
            this.anonymousConsentsConfig = anonymousConsentsConfig;
            this.anonymousConsentService = anonymousConsentService;
            this.userConsentService = userConsentService;
            this.userIdService = userIdService;
            this.checkConsentVersions$ = this.actions$.pipe(i3.ofType(ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS), operators.withLatestFrom(this.anonymousConsentService.getConsents()), operators.concatMap(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], currentConsents = _b[1];
                return _this.anonymousConsentTemplatesConnector
                    .loadAnonymousConsents()
                    .pipe(operators.map(function (newConsents) {
                    if (!newConsents) {
                        if (i0.isDevMode()) {
                            console.warn('No consents were loaded. Please check the Spartacus documentation as this could be a back-end configuration issue.');
                        }
                        return false;
                    }
                    var currentConsentVersions = currentConsents.map(function (consent) { return consent.templateVersion; });
                    var newConsentVersions = newConsents.map(function (consent) { return consent.templateVersion; });
                    return _this.detectUpdatedVersion(currentConsentVersions, newConsentVersions);
                }), operators.switchMap(function (updated) { return updated
                    ? rxjs.of(new LoadAnonymousConsentTemplates())
                    : rxjs.EMPTY; }), operators.catchError(function (error) { return rxjs.of(new LoadAnonymousConsentTemplatesFail(normalizeHttpError(error))); }));
            }));
            this.loadAnonymousConsentTemplates$ = this.actions$.pipe(i3.ofType(LOAD_ANONYMOUS_CONSENT_TEMPLATES), operators.withLatestFrom(this.anonymousConsentService.getTemplates()), operators.concatMap(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], currentConsentTemplates = _b[1];
                return _this.anonymousConsentTemplatesConnector
                    .loadAnonymousConsentTemplates()
                    .pipe(operators.mergeMap(function (newConsentTemplates) {
                    var updated = false;
                    if (currentConsentTemplates &&
                        currentConsentTemplates.length !== 0) {
                        updated = _this.anonymousConsentService.detectUpdatedTemplates(currentConsentTemplates, newConsentTemplates);
                    }
                    return [
                        new LoadAnonymousConsentTemplatesSuccess(newConsentTemplates),
                        new ToggleAnonymousConsentTemplatesUpdated(updated),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new LoadAnonymousConsentTemplatesFail(normalizeHttpError(error))); }));
            }));
            // TODO(#9416): This won't work with flow different than `Resource Owner Password Flow` which involves redirect (maybe in popup in will work)
            this.transferAnonymousConsentsToUser$ = this.actions$.pipe(i3.ofType(LOGIN), operators.filter(function () { return Boolean(_this.anonymousConsentsConfig.anonymousConsents); }), operators.withLatestFrom(this.actions$.pipe(i3.ofType(REGISTER_USER_SUCCESS))), operators.filter(function (_a) {
                var _b = __read(_a, 2), registerAction = _b[1];
                return Boolean(registerAction);
            }), operators.switchMap(function () { return _this.anonymousConsentService.getConsents().pipe(operators.withLatestFrom(_this.userIdService.getUserId(), _this.anonymousConsentService.getTemplates(), _this.authService.isUserLoggedIn()), operators.filter(function (_a) {
                var _b = __read(_a, 4), loggedIn = _b[3];
                return loggedIn;
            }), operators.concatMap(function (_a) {
                var e_1, _b, e_2, _c;
                var _d = __read(_a, 4), consents = _d[0], userId = _d[1], templates = _d[2], _loggedIn = _d[3];
                var actions = [];
                try {
                    for (var consents_1 = __values(consents), consents_1_1 = consents_1.next(); !consents_1_1.done; consents_1_1 = consents_1.next()) {
                        var consent = consents_1_1.value;
                        if (_this.anonymousConsentService.isConsentGiven(consent) &&
                            (!_this.anonymousConsentsConfig.anonymousConsents
                                .requiredConsents ||
                                !_this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(consent.templateCode))) {
                            try {
                                for (var templates_1 = (e_2 = void 0, __values(templates)), templates_1_1 = templates_1.next(); !templates_1_1.done; templates_1_1 = templates_1.next()) {
                                    var template = templates_1_1.value;
                                    if (template.id === consent.templateCode) {
                                        actions.push(new TransferAnonymousConsent({
                                            userId: userId,
                                            consentTemplateId: template.id,
                                            consentTemplateVersion: template.version,
                                        }));
                                        break;
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (templates_1_1 && !templates_1_1.done && (_c = templates_1.return)) _c.call(templates_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (consents_1_1 && !consents_1_1.done && (_b = consents_1.return)) _b.call(consents_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (actions.length > 0) {
                    return actions;
                }
                return rxjs.EMPTY;
            })); }));
            this.giveRequiredConsentsToUser$ = this.actions$.pipe(i3.ofType(LOGIN), operators.filter(function (action) { return Boolean(_this.anonymousConsentsConfig.anonymousConsents) &&
                Boolean(_this.anonymousConsentsConfig.anonymousConsents.requiredConsents) &&
                Boolean(action); }), operators.concatMap(function () { return _this.userConsentService.getConsentsResultSuccess().pipe(operators.withLatestFrom(_this.userIdService.getUserId(), _this.userConsentService.getConsents(), _this.authService.isUserLoggedIn()), operators.filter(function (_a) {
                var _b = __read(_a, 4), loggedIn = _b[3];
                return loggedIn;
            }), operators.tap(function (_a) {
                var _b = __read(_a, 4), loaded = _b[0], _userId = _b[1], _templates = _b[2], _loggedIn = _b[3];
                if (!loaded) {
                    _this.userConsentService.loadConsents();
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 4), _loaded = _b[0], userId = _b[1], templates = _b[2], _loggedIn = _b[3];
                return { userId: userId, templates: templates };
            }), operators.concatMap(function (_a) {
                var e_3, _b;
                var userId = _a.userId, templates = _a.templates;
                var actions = [];
                try {
                    for (var templates_2 = __values(templates), templates_2_1 = templates_2.next(); !templates_2_1.done; templates_2_1 = templates_2.next()) {
                        var template = templates_2_1.value;
                        if (_this.userConsentService.isConsentWithdrawn(template.currentConsent) &&
                            _this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(template.id)) {
                            actions.push(new GiveUserConsent({
                                userId: userId,
                                consentTemplateId: template.id,
                                consentTemplateVersion: template.version,
                            }));
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (templates_2_1 && !templates_2_1.done && (_b = templates_2.return)) _b.call(templates_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                if (actions.length > 0) {
                    return actions;
                }
                return rxjs.EMPTY;
            })); }));
        }
        /**
         * Compares the given versions and determines if there's a mismatch,
         * in which case `true` is returned.
         *
         * @param currentVersions versions of the current consents
         * @param newVersions versions of the new consents
         */
        AnonymousConsentsEffects.prototype.detectUpdatedVersion = function (currentVersions, newVersions) {
            if (currentVersions.length !== newVersions.length) {
                return true;
            }
            for (var i = 0; i < newVersions.length; i++) {
                if (currentVersions[i] !== newVersions[i]) {
                    return true;
                }
            }
            return false;
        };
        return AnonymousConsentsEffects;
    }());
    AnonymousConsentsEffects.decorators = [
        { type: i0.Injectable }
    ];
    AnonymousConsentsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: AnonymousConsentTemplatesConnector },
        { type: AuthService },
        { type: AnonymousConsentsConfig },
        { type: AnonymousConsentsService },
        { type: UserConsentService },
        { type: UserIdService }
    ]; };
    __decorate([
        i3.Effect()
    ], AnonymousConsentsEffects.prototype, "checkConsentVersions$", void 0);
    __decorate([
        i3.Effect()
    ], AnonymousConsentsEffects.prototype, "loadAnonymousConsentTemplates$", void 0);
    __decorate([
        i3.Effect()
    ], AnonymousConsentsEffects.prototype, "transferAnonymousConsentsToUser$", void 0);
    __decorate([
        i3.Effect()
    ], AnonymousConsentsEffects.prototype, "giveRequiredConsentsToUser$", void 0);

    var effects$2 = [AnonymousConsentsEffects];

    var SiteConnector = /** @class */ (function () {
        function SiteConnector(adapter) {
            this.adapter = adapter;
        }
        SiteConnector.prototype.getLanguages = function () {
            return this.adapter.loadLanguages();
        };
        SiteConnector.prototype.getCurrencies = function () {
            return this.adapter.loadCurrencies();
        };
        SiteConnector.prototype.getCountries = function (type) {
            return this.adapter.loadCountries(type);
        };
        SiteConnector.prototype.getRegions = function (countryIsoCode) {
            return this.adapter.loadRegions(countryIsoCode);
        };
        SiteConnector.prototype.getBaseSite = function () {
            return this.adapter.loadBaseSite();
        };
        return SiteConnector;
    }());
    SiteConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteConnector_Factory() { return new SiteConnector(i0.ɵɵinject(SiteAdapter)); }, token: SiteConnector, providedIn: "root" });
    SiteConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SiteConnector.ctorParameters = function () { return [
        { type: SiteAdapter }
    ]; };

    var ContextServiceMap = /** @class */ (function () {
        function ContextServiceMap() {
        }
        return ContextServiceMap;
    }());
    function serviceMapFactory() {
        var _a;
        return _a = {},
            _a[LANGUAGE_CONTEXT_ID] = LanguageService,
            _a[CURRENCY_CONTEXT_ID] = CurrencyService,
            _a[BASE_SITE_CONTEXT_ID] = BaseSiteService,
            _a;
    }
    var contextServiceMapProvider = {
        provide: ContextServiceMap,
        useFactory: serviceMapFactory,
    };

    function baseSiteConfigValidator(config) {
        if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {
            return 'Please configure context.parameters.baseSite before using storefront library!';
        }
    }

    function defaultSiteContextConfigFactory() {
        var _a;
        return {
            context: (_a = {},
                _a[LANGUAGE_CONTEXT_ID] = [
                    'en',
                    'de',
                    'ja',
                    'zh',
                    'ru',
                    'fr',
                    'tr',
                    'it',
                    'es',
                    'uk',
                    'pl',
                    'nl',
                    'hi',
                    'ar',
                    'pt',
                    'bn',
                    'pa',
                ],
                _a[CURRENCY_CONTEXT_ID] = [
                    'USD',
                    'EUR',
                    'JPY',
                    'GBP',
                    'AUD',
                    'CAD',
                    'CHF',
                    'CNY',
                    'SEK',
                    'NZD',
                    'MXN',
                    'SGD',
                    'HKD',
                    'NOK',
                    'KRW',
                    'TRY',
                    'RUB',
                    'INR',
                    'BRL',
                    'ZAR',
                ],
                _a),
        };
    }

    var SiteContextParamsService = /** @class */ (function () {
        function SiteContextParamsService(config, injector, serviceMap) {
            this.config = config;
            this.injector = injector;
            this.serviceMap = serviceMap;
        }
        SiteContextParamsService.prototype.getContextParameters = function () {
            if (this.config.context) {
                return Object.keys(this.config.context).filter(function (param) { return param !== 'urlParameters'; });
            }
            return [];
        };
        SiteContextParamsService.prototype.getUrlEncodingParameters = function () {
            return (this.config.context && this.config.context.urlParameters) || [];
        };
        SiteContextParamsService.prototype.getParamValues = function (param) {
            return getContextParameterValues(this.config, param);
        };
        SiteContextParamsService.prototype.getParamDefaultValue = function (param) {
            return getContextParameterDefault(this.config, param);
        };
        SiteContextParamsService.prototype.getSiteContextService = function (param) {
            if (this.serviceMap[param]) {
                return this.injector.get(this.serviceMap[param], null);
            }
        };
        SiteContextParamsService.prototype.getValue = function (param) {
            var value;
            var service = this.getSiteContextService(param);
            if (service) {
                service
                    .getActive()
                    .subscribe(function (val) { return (value = val); })
                    .unsubscribe();
            }
            return value !== undefined ? value : this.getParamDefaultValue(param);
        };
        SiteContextParamsService.prototype.setValue = function (param, value) {
            var service = this.getSiteContextService(param);
            if (service) {
                service.setActive(value);
            }
        };
        /**
         * Get active values for all provided context parameters
         *
         * @param params Context parameters
         *
         * @returns Observable emitting array of all passed active context values
         */
        SiteContextParamsService.prototype.getValues = function (params) {
            var _this = this;
            if (params.length === 0) {
                return rxjs.of([]);
            }
            return rxjs.combineLatest(params.map(function (param) { return _this.getSiteContextService(param)
                .getActive()
                .pipe(operators.distinctUntilChanged()); })).pipe(operators.filter(function (value) { return value.every(function (param) { return !!param; }); }));
        };
        return SiteContextParamsService;
    }());
    SiteContextParamsService.decorators = [
        { type: i0.Injectable }
    ];
    SiteContextParamsService.ctorParameters = function () { return [
        { type: SiteContextConfig },
        { type: i0.Injector },
        { type: ContextServiceMap }
    ]; };

    var UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts
    var SiteContextUrlSerializer = /** @class */ (function (_super) {
        __extends(SiteContextUrlSerializer, _super);
        function SiteContextUrlSerializer(siteContextParams) {
            var _this = _super.call(this) || this;
            _this.siteContextParams = siteContextParams;
            return _this;
        }
        Object.defineProperty(SiteContextUrlSerializer.prototype, "urlEncodingParameters", {
            get: function () {
                return this.siteContextParams.getUrlEncodingParameters();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SiteContextUrlSerializer.prototype, "hasContextInRoutes", {
            get: function () {
                return this.urlEncodingParameters.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        SiteContextUrlSerializer.prototype.parse = function (url) {
            if (this.hasContextInRoutes) {
                var urlWithParams = this.urlExtractContextParameters(url);
                var parsed = _super.prototype.parse.call(this, urlWithParams.url);
                this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);
                return parsed;
            }
            else {
                return _super.prototype.parse.call(this, url);
            }
        };
        SiteContextUrlSerializer.prototype.urlExtractContextParameters = function (url) {
            var _a = __read(url.match(UrlSplit), 3), urlPart = _a[1], queryPart = _a[2];
            var segments = urlPart.split('/');
            if (segments[0] === '') {
                segments.shift();
            }
            var params = {};
            var paramId = 0;
            var segmentId = 0;
            while (paramId < this.urlEncodingParameters.length &&
                segmentId < segments.length) {
                var paramName = this.urlEncodingParameters[paramId];
                var paramValues = this.siteContextParams.getParamValues(paramName);
                if (paramValues.includes(segments[segmentId])) {
                    params[paramName] = segments[segmentId];
                    segmentId++;
                }
                paramId++;
            }
            url = segments.slice(Object.keys(params).length).join('/') + queryPart;
            return { url: url, params: params };
        };
        SiteContextUrlSerializer.prototype.urlTreeIncludeContextParameters = function (urlTree, params) {
            urlTree.siteContext = params;
        };
        SiteContextUrlSerializer.prototype.serialize = function (tree) {
            var params = this.urlTreeExtractContextParameters(tree);
            var url = _super.prototype.serialize.call(this, tree);
            var serialized = this.urlIncludeContextParameters(url, params);
            return serialized;
        };
        SiteContextUrlSerializer.prototype.urlTreeExtractContextParameters = function (urlTree) {
            return urlTree.siteContext ? urlTree.siteContext : {};
        };
        SiteContextUrlSerializer.prototype.urlIncludeContextParameters = function (url, params) {
            var _this = this;
            var contextRoutePart = this.urlEncodingParameters
                .map(function (param) {
                return params[param]
                    ? params[param]
                    : _this.siteContextParams.getValue(param);
            })
                .join('/');
            return contextRoutePart + url;
        };
        return SiteContextUrlSerializer;
    }(i1$1.DefaultUrlSerializer));
    SiteContextUrlSerializer.decorators = [
        { type: i0.Injectable }
    ];
    SiteContextUrlSerializer.ctorParameters = function () { return [
        { type: SiteContextParamsService }
    ]; };

    var SiteContextRoutesHandler = /** @class */ (function () {
        function SiteContextRoutesHandler(siteContextParams, serializer, injector) {
            this.siteContextParams = siteContextParams;
            this.serializer = serializer;
            this.injector = injector;
            this.subscription = new rxjs.Subscription();
            this.contextValues = {};
            /**
             * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:
             * - `subscribeChanges` method triggers a navigation on update of site context state
             * - `subscribeRouting` method updates the site context state on navigation
             */
            this.isNavigating = false;
        }
        /**
         * Initializes the two-way synchronization between the site context state and the URL.
         */
        SiteContextRoutesHandler.prototype.init = function () {
            this.router = this.injector.get(i1$1.Router);
            this.location = this.injector.get(i1.Location);
            var routingParams = this.siteContextParams.getUrlEncodingParameters();
            if (routingParams.length) {
                this.setContextParamsFromRoute(this.location.path(true));
                this.subscribeChanges(routingParams);
                this.subscribeRouting();
            }
        };
        /**
         * After each change of the site context state, it modifies the current URL in place.
         * But it happens only for the parameters configured to be persisted in the URL.
         */
        SiteContextRoutesHandler.prototype.subscribeChanges = function (params) {
            var _this = this;
            params.forEach(function (param) {
                var service = _this.siteContextParams.getSiteContextService(param);
                if (service) {
                    _this.subscription.add(service.getActive().subscribe(function (value) {
                        if (!_this.isNavigating &&
                            _this.contextValues[param] &&
                            _this.contextValues[param] !== value) {
                            var parsed = _this.router.parseUrl(_this.router.url);
                            var serialized = _this.router.serializeUrl(parsed);
                            _this.location.replaceState(serialized);
                        }
                        _this.contextValues[param] = value;
                    }));
                }
            });
        };
        /**
         * After each Angular NavigationStart event it updates the site context state based on
         * site context params encoded in the anticipated URL.
         */
        SiteContextRoutesHandler.prototype.subscribeRouting = function () {
            var _this = this;
            this.subscription.add(this.router.events
                .pipe(operators.filter(function (event) { return event instanceof i1$1.NavigationStart ||
                event instanceof i1$1.NavigationEnd ||
                event instanceof i1$1.NavigationError ||
                event instanceof i1$1.NavigationCancel; }))
                .subscribe(function (event) {
                _this.isNavigating = event instanceof i1$1.NavigationStart;
                if (_this.isNavigating) {
                    _this.setContextParamsFromRoute(event.url);
                }
            }));
        };
        /**
         * Updates the site context state based on the context params encoded in the given URL
         *
         * @param url URL with encoded context params
         */
        SiteContextRoutesHandler.prototype.setContextParamsFromRoute = function (url) {
            var _this = this;
            var params = this.serializer.urlExtractContextParameters(url).params;
            Object.keys(params).forEach(function (param) { return _this.siteContextParams.setValue(param, params[param]); });
        };
        SiteContextRoutesHandler.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return SiteContextRoutesHandler;
    }());
    SiteContextRoutesHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteContextRoutesHandler_Factory() { return new SiteContextRoutesHandler(i0.ɵɵinject(SiteContextParamsService), i0.ɵɵinject(SiteContextUrlSerializer), i0.ɵɵinject(i0.INJECTOR)); }, token: SiteContextRoutesHandler, providedIn: "root" });
    SiteContextRoutesHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SiteContextRoutesHandler.ctorParameters = function () { return [
        { type: SiteContextParamsService },
        { type: SiteContextUrlSerializer },
        { type: i0.Injector }
    ]; };

    function initializeContext(baseSiteService, langService, currService, configInit, siteContextRoutesHandler) {
        var _this = this;
        return function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, configInit.getStableConfig('context')];
                    case 1:
                        _a.sent();
                        siteContextRoutesHandler.init();
                        baseSiteService.initialize();
                        langService.initialize();
                        currService.initialize();
                        return [2 /*return*/];
                }
            });
        }); };
    }
    var contextServiceProviders = [
        BaseSiteService,
        LanguageService,
        CurrencyService,
        {
            provide: i0.APP_INITIALIZER,
            useFactory: initializeContext,
            deps: [
                BaseSiteService,
                LanguageService,
                CurrencyService,
                ConfigInitializerService,
                SiteContextRoutesHandler,
            ],
            multi: true,
        },
    ];

    // functions below should not be exposed in public API:
    var siteContextParamsProviders = [
        SiteContextParamsService,
        SiteContextUrlSerializer,
        { provide: i1$1.UrlSerializer, useExisting: SiteContextUrlSerializer },
    ];

    var LanguagesEffects = /** @class */ (function () {
        function LanguagesEffects(actions$, siteConnector, winRef, state) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.winRef = winRef;
            this.state = state;
            this.loadLanguages$ = this.actions$.pipe(i3.ofType(LOAD_LANGUAGES), operators.exhaustMap(function () {
                return _this.siteConnector.getLanguages().pipe(operators.map(function (languages) { return new LoadLanguagesSuccess(languages); }), operators.catchError(function (error) { return rxjs.of(new LoadLanguagesFail(makeErrorSerializable(error))); }));
            }));
            this.persist$ = this.actions$.pipe(i3.ofType(SET_ACTIVE_LANGUAGE), operators.tap(function (action) {
                if (_this.winRef.sessionStorage) {
                    _this.winRef.sessionStorage.setItem('language', action.payload);
                }
            }), operators.switchMapTo(rxjs.NEVER));
            this.activateLanguage$ = this.state.select(getActiveLanguage).pipe(operators.bufferCount(2, 1), 
            // avoid dispatching `change` action when we're just setting the initial value:
            operators.filter(function (_a) {
                var _b = __read(_a, 1), previous = _b[0];
                return !!previous;
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), previous = _b[0], current = _b[1];
                return new LanguageChange({ previous: previous, current: current });
            }));
        }
        return LanguagesEffects;
    }());
    LanguagesEffects.decorators = [
        { type: i0.Injectable }
    ];
    LanguagesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector },
        { type: WindowRef },
        { type: i1$2.Store }
    ]; };
    __decorate([
        i3.Effect()
    ], LanguagesEffects.prototype, "loadLanguages$", void 0);
    __decorate([
        i3.Effect()
    ], LanguagesEffects.prototype, "persist$", void 0);
    __decorate([
        i3.Effect()
    ], LanguagesEffects.prototype, "activateLanguage$", void 0);

    var CurrenciesEffects = /** @class */ (function () {
        function CurrenciesEffects(actions$, siteConnector, winRef, state) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.winRef = winRef;
            this.state = state;
            this.loadCurrencies$ = this.actions$.pipe(i3.ofType(LOAD_CURRENCIES), operators.exhaustMap(function () {
                return _this.siteConnector.getCurrencies().pipe(operators.map(function (currencies) { return new LoadCurrenciesSuccess(currencies); }), operators.catchError(function (error) { return rxjs.of(new LoadCurrenciesFail(makeErrorSerializable(error))); }));
            }));
            this.persist$ = this.actions$.pipe(i3.ofType(SET_ACTIVE_CURRENCY), operators.tap(function (action) {
                if (_this.winRef.sessionStorage) {
                    _this.winRef.sessionStorage.setItem('currency', action.payload);
                }
            }), operators.switchMapTo(rxjs.NEVER));
            this.activateCurrency$ = this.state.select(getActiveCurrency).pipe(operators.bufferCount(2, 1), 
            // avoid dispatching `change` action when we're just setting the initial value:
            operators.filter(function (_a) {
                var _b = __read(_a, 1), previous = _b[0];
                return !!previous;
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), previous = _b[0], current = _b[1];
                return new CurrencyChange({ previous: previous, current: current });
            }));
        }
        return CurrenciesEffects;
    }());
    CurrenciesEffects.decorators = [
        { type: i0.Injectable }
    ];
    CurrenciesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector },
        { type: WindowRef },
        { type: i1$2.Store }
    ]; };
    __decorate([
        i3.Effect()
    ], CurrenciesEffects.prototype, "loadCurrencies$", void 0);
    __decorate([
        i3.Effect()
    ], CurrenciesEffects.prototype, "persist$", void 0);
    __decorate([
        i3.Effect()
    ], CurrenciesEffects.prototype, "activateCurrency$", void 0);

    var BaseSiteEffects = /** @class */ (function () {
        function BaseSiteEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadBaseSite$ = this.actions$.pipe(i3.ofType(LOAD_BASE_SITE), operators.exhaustMap(function () {
                return _this.siteConnector.getBaseSite().pipe(operators.map(function (baseSite) { return new LoadBaseSiteSuccess(baseSite); }), operators.catchError(function (error) { return rxjs.of(new LoadBaseSiteFail(makeErrorSerializable(error))); }));
            }));
        }
        return BaseSiteEffects;
    }());
    BaseSiteEffects.decorators = [
        { type: i0.Injectable }
    ];
    BaseSiteEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], BaseSiteEffects.prototype, "loadBaseSite$", void 0);

    var effects$3 = [
        LanguagesEffects,
        CurrenciesEffects,
        BaseSiteEffects,
    ];

    var initialState$5 = {
        details: {},
        activeSite: '',
    };
    function reducer$5(state, action) {
        if (state === void 0) { state = initialState$5; }
        switch (action.type) {
            case LOAD_BASE_SITE_SUCCESS: {
                return Object.assign(Object.assign({}, state), { details: action.payload });
            }
            case SET_ACTIVE_BASE_SITE: {
                return Object.assign(Object.assign({}, state), { activeSite: action.payload });
            }
        }
        return state;
    }

    var initialState$6 = {
        entities: null,
        activeCurrency: null,
    };
    function reducer$6(state, action) {
        if (state === void 0) { state = initialState$6; }
        switch (action.type) {
            case LOAD_CURRENCIES_SUCCESS: {
                var currencies = action.payload;
                var entities = currencies.reduce(function (currEntities, currency) {
                    var _a;
                    return Object.assign(Object.assign({}, currEntities), (_a = {}, _a[currency.isocode] = currency, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case SET_ACTIVE_CURRENCY: {
                var isocode = action.payload;
                return Object.assign(Object.assign({}, state), { activeCurrency: isocode });
            }
        }
        return state;
    }

    var initialState$7 = {
        entities: null,
        activeLanguage: null,
    };
    function reducer$7(state, action) {
        if (state === void 0) { state = initialState$7; }
        switch (action.type) {
            case LOAD_LANGUAGES_SUCCESS: {
                var languages = action.payload;
                var entities = languages.reduce(function (langEntities, language) {
                    var _a;
                    return Object.assign(Object.assign({}, langEntities), (_a = {}, _a[language.isocode] = language, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case SET_ACTIVE_LANGUAGE: {
                var isocode = action.payload;
                return Object.assign(Object.assign({}, state), { activeLanguage: isocode });
            }
        }
        return state;
    }

    function getReducers$2() {
        return {
            languages: reducer$7,
            currencies: reducer$6,
            baseSite: reducer$5,
        };
    }
    var reducerToken$2 = new i0.InjectionToken('SiteContextReducers');
    var reducerProvider$2 = {
        provide: reducerToken$2,
        useFactory: getReducers$2,
    };

    function siteContextStoreConfigFactory() {
        var _a;
        // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[SITE_CONTEXT_FEATURE] = exports.StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var SiteContextStoreModule = /** @class */ (function () {
        function SiteContextStoreModule() {
        }
        return SiteContextStoreModule;
    }());
    SiteContextStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$2.StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken$2),
                        i3.EffectsModule.forFeature(effects$3),
                    ],
                    providers: [
                        provideDefaultConfigFactory(siteContextStoreConfigFactory),
                        reducerProvider$2,
                    ],
                },] }
    ];

    // @dynamic
    var SiteContextModule = /** @class */ (function () {
        function SiteContextModule() {
        }
        SiteContextModule.forRoot = function () {
            return {
                ngModule: SiteContextModule,
                providers: __spread([
                    provideDefaultConfigFactory(defaultSiteContextConfigFactory),
                    contextServiceMapProvider
                ], contextServiceProviders, siteContextParamsProviders, [
                    provideConfigValidator(baseSiteConfigValidator),
                ]),
            };
        };
        return SiteContextModule;
    }());
    SiteContextModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [StateModule, SiteContextStoreModule],
                },] }
    ];

    var initialState$8 = false;
    function reducer$8(state, action) {
        if (state === void 0) { state = initialState$8; }
        switch (action.type) {
            case TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {
                return action.dismissed;
            }
        }
        return state;
    }

    var initialState$9 = false;
    function reducer$9(state, action) {
        if (state === void 0) { state = initialState$9; }
        switch (action.type) {
            case TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {
                return action.updated;
            }
        }
        return state;
    }

    var initialState$a = [];
    function toggleConsentStatus(consents, templateCode, status) {
        if (!consents) {
            return [];
        }
        return consents.map(function (consent) {
            if (consent.templateCode === templateCode) {
                consent = Object.assign(Object.assign({}, consent), { consentState: status });
            }
            return consent;
        });
    }
    function reducer$a(state, action) {
        if (state === void 0) { state = initialState$a; }
        switch (action.type) {
            case GIVE_ANONYMOUS_CONSENT: {
                return toggleConsentStatus(state, action.templateCode, exports.ANONYMOUS_CONSENT_STATUS.GIVEN);
            }
            case WITHDRAW_ANONYMOUS_CONSENT: {
                return toggleConsentStatus(state, action.templateCode, exports.ANONYMOUS_CONSENT_STATUS.WITHDRAWN);
            }
            case SET_ANONYMOUS_CONSENTS: {
                return action.payload;
            }
        }
        return state;
    }

    function getReducers$3() {
        return {
            templates: loaderReducer(ANONYMOUS_CONSENTS),
            consents: reducer$a,
            ui: i1$2.combineReducers({
                bannerDismissed: reducer$8,
                updated: reducer$9,
            }),
        };
    }
    var reducerToken$3 = new i0.InjectionToken('AnonymousConsentsReducers');
    var reducerProvider$3 = {
        provide: reducerToken$3,
        useFactory: getReducers$3,
    };
    function clearAnonymousConsentTemplates(reducer) {
        return function (state, action) {
            if (action.type === LOGOUT ||
                action.type === LANGUAGE_CHANGE) {
                state = Object.assign(Object.assign({}, state), { templates: undefined });
            }
            return reducer(state, action);
        };
    }
    var metaReducers = [
        clearAnonymousConsentTemplates,
    ];

    function anonymousConsentsStoreConfigFactory() {
        var _a;
        var config = {
            state: {
                storageSync: {
                    keys: (_a = {},
                        _a[ANONYMOUS_CONSENTS_STORE_FEATURE] = exports.StorageSyncType.LOCAL_STORAGE,
                        _a),
                },
            },
        };
        return config;
    }
    var AnonymousConsentsStoreModule = /** @class */ (function () {
        function AnonymousConsentsStoreModule() {
        }
        return AnonymousConsentsStoreModule;
    }());
    AnonymousConsentsStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken$3, {
                            metaReducers: metaReducers,
                        }),
                        i3.EffectsModule.forFeature(effects$2),
                    ],
                    providers: [
                        provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),
                        reducerProvider$3,
                    ],
                },] }
    ];

    var AnonymousConsentsModule = /** @class */ (function () {
        function AnonymousConsentsModule() {
        }
        AnonymousConsentsModule.forRoot = function () {
            return {
                ngModule: AnonymousConsentsModule,
                providers: __spread(interceptors$2, [
                    AnonymousConsentsService,
                    provideDefaultConfig(defaultAnonymousConsentsConfig),
                ]),
            };
        };
        return AnonymousConsentsModule;
    }());
    AnonymousConsentsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [AnonymousConsentsStoreModule],
                },] }
    ];

    var defaultAsmConfig = {
        asm: {
            agentSessionTimer: {
                startingDelayInSeconds: 600,
            },
            customerSearch: {
                maxResults: 20,
            },
        },
    };

    var UserService = /** @class */ (function () {
        function UserService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Returns a user
         */
        UserService.prototype.get = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getDetails), operators.tap(function (details) {
                if (Object.keys(details).length === 0) {
                    _this.load();
                }
            }));
        };
        /**
         * Loads the user's details
         */
        UserService.prototype.load = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadUserDetails(userId));
                }
            });
        };
        /**
         * Register a new user
         *
         * @param submitFormData as UserRegisterFormData
         */
        UserService.prototype.register = function (userRegisterFormData) {
            this.store.dispatch(new RegisterUser(userRegisterFormData));
        };
        /**
         * Register a new user from guest
         *
         * @param guid
         * @param password
         */
        UserService.prototype.registerGuest = function (guid, password) {
            this.store.dispatch(new RegisterGuest({ guid: guid, password: password }));
        };
        /**
         * Returns the register user process loading flag
         */
        UserService.prototype.getRegisterUserResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Returns the register user process success flag
         */
        UserService.prototype.getRegisterUserResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Returns the register user process error flag
         */
        UserService.prototype.getRegisterUserResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID)));
        };
        /**
         * Resets the register user process flags
         */
        UserService.prototype.resetRegisterUserProcessState = function () {
            return this.store.dispatch(new ResetRegisterUserProcess());
        };
        /**
         * Remove user account, that's also called close user's account
         */
        UserService.prototype.remove = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new RemoveUser(userId));
            });
        };
        /**
         * Returns the remove user loading flag
         */
        UserService.prototype.getRemoveUserResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Returns the remove user failure outcome.
         */
        UserService.prototype.getRemoveUserResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Returns the remove user process success outcome.
         */
        UserService.prototype.getRemoveUserResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID)));
        };
        /**
         * Resets the remove user process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         */
        UserService.prototype.resetRemoveUserProcessState = function () {
            this.store.dispatch(new RemoveUserReset());
        };
        /**
         * Returns titles.
         */
        UserService.prototype.getTitles = function () {
            var _this = this;
            return this.store.pipe(i1$2.select(getAllTitles), operators.tap(function (titles) {
                if (Object.keys(titles).length === 0) {
                    _this.loadTitles();
                }
            }));
        };
        /**
         * Retrieves titles
         */
        UserService.prototype.loadTitles = function () {
            this.store.dispatch(new LoadTitles());
        };
        /**
         * Return whether user's password is successfully reset
         */
        UserService.prototype.isPasswordReset = function () {
            return this.store.pipe(i1$2.select(getResetPassword));
        };
        /**
         * Updates the user's details
         * @param userDetails to be updated
         */
        UserService.prototype.updatePersonalDetails = function (userDetails) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdateUserDetails({
                    username: userId,
                    userDetails: userDetails,
                }));
            });
        };
        /**
         * Returns the update user's personal details loading flag
         */
        UserService.prototype.getUpdatePersonalDetailsResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Returns the update user's personal details error flag
         */
        UserService.prototype.getUpdatePersonalDetailsResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Returns the update user's personal details success flag
         */
        UserService.prototype.getUpdatePersonalDetailsResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
        };
        /**
         * Resets the update user details processing state
         */
        UserService.prototype.resetUpdatePersonalDetailsProcessingState = function () {
            this.store.dispatch(new ResetUpdateUserDetails());
        };
        /**
         * Reset new password.  Part of the forgot password flow.
         * @param token
         * @param password
         */
        UserService.prototype.resetPassword = function (token, password) {
            this.store.dispatch(new ResetPassword({ token: token, password: password }));
        };
        /*
         * Request an email to reset a forgotten password.
         */
        UserService.prototype.requestForgotPasswordEmail = function (userEmailAddress) {
            this.store.dispatch(new ForgotPasswordEmailRequest(userEmailAddress));
        };
        /**
         * Updates the user's email
         */
        UserService.prototype.updateEmail = function (password, newUid) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdateEmailAction({
                    uid: userId,
                    password: password,
                    newUid: newUid,
                }));
            });
        };
        /**
         * Returns the update user's email success flag
         */
        UserService.prototype.getUpdateEmailResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Returns the update user's email error flag
         */
        UserService.prototype.getUpdateEmailResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Returns the update user's email loading flag
         */
        UserService.prototype.getUpdateEmailResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID)));
        };
        /**
         * Resets the update user's email processing state
         */
        UserService.prototype.resetUpdateEmailResultState = function () {
            this.store.dispatch(new ResetUpdateEmailAction());
        };
        /**
         * Updates the password for the user
         * @param oldPassword the current password that will be changed
         * @param newPassword the new password
         */
        UserService.prototype.updatePassword = function (oldPassword, newPassword) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdatePassword({
                    userId: userId,
                    oldPassword: oldPassword,
                    newPassword: newPassword,
                }));
            });
        };
        /**
         * Returns the update password loading flag
         */
        UserService.prototype.getUpdatePasswordResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Returns the update password failure outcome.
         */
        UserService.prototype.getUpdatePasswordResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Returns the update password process success outcome.
         */
        UserService.prototype.getUpdatePasswordResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID)));
        };
        /**
         * Resets the update password process state. The state needs to be reset after the process
         * concludes, regardless if it's a success or an error
         */
        UserService.prototype.resetUpdatePasswordProcessState = function () {
            this.store.dispatch(new UpdatePasswordReset());
        };
        return UserService;
    }());
    UserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserService, providedIn: "root" });
    UserService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    UserService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    (function (TokenTarget) {
        TokenTarget["CSAgent"] = "CSAgent";
        TokenTarget["User"] = "User";
    })(exports.TokenTarget || (exports.TokenTarget = {}));
    /**
     * With AsmAuthStorageService apart from storing the token we also need to store
     * information for which user is the token (regular user or CS Agent).
     *
     * Overrides `AuthStorageService`.
     */
    var AsmAuthStorageService = /** @class */ (function (_super) {
        __extends(AsmAuthStorageService, _super);
        function AsmAuthStorageService() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this._tokenTarget$ = new rxjs.BehaviorSubject(exports.TokenTarget.User);
            return _this;
        }
        /**
         * Get target user for current auth token.
         *
         * @return observable with TokenTarget
         */
        AsmAuthStorageService.prototype.getTokenTarget = function () {
            return this._tokenTarget$;
        };
        /**
         * Set new token target.
         *
         * @param tokenTarget
         */
        AsmAuthStorageService.prototype.setTokenTarget = function (tokenTarget) {
            this._tokenTarget$.next(tokenTarget);
        };
        /**
         * Get token for previously user session, when it was interrupted by CS agent login.
         *
         * @return previously logged in user token.
         */
        AsmAuthStorageService.prototype.getEmulatedUserToken = function () {
            return this.emulatedUserToken;
        };
        /**
         * Save user token on CS agent login.
         *
         * @param token
         */
        AsmAuthStorageService.prototype.setEmulatedUserToken = function (token) {
            this.emulatedUserToken = token;
        };
        /**
         * Change token target to CS Agent.
         */
        AsmAuthStorageService.prototype.switchTokenTargetToCSAgent = function () {
            this._tokenTarget$.next(exports.TokenTarget.CSAgent);
        };
        /**
         * Change token target to user.
         */
        AsmAuthStorageService.prototype.switchTokenTargetToUser = function () {
            this._tokenTarget$.next(exports.TokenTarget.User);
        };
        /**
         * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.
         * Only available solution is to drop session we could restore, to avoid account hijack.
         */
        AsmAuthStorageService.prototype.clearEmulatedUserToken = function () {
            this.emulatedUserToken = undefined;
        };
        return AsmAuthStorageService;
    }(AuthStorageService));
    AsmAuthStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmAuthStorageService_Factory() { return new AsmAuthStorageService(); }, token: AsmAuthStorageService, providedIn: "root" });
    AsmAuthStorageService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var ASM_UI_UPDATE = '[Asm] UI Update';
    var AsmUiUpdate = /** @class */ (function () {
        function AsmUiUpdate(payload) {
            this.payload = payload;
            this.type = ASM_UI_UPDATE;
        }
        return AsmUiUpdate;
    }());

    var ASM_FEATURE = 'asm';
    var CUSTOMER_SEARCH_DATA = '[asm] Customer search data';

    var CUSTOMER_SEARCH = '[Asm] Customer Search';
    var CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';
    var CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';
    var CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';
    var CustomerSearch = /** @class */ (function (_super) {
        __extends(CustomerSearch, _super);
        function CustomerSearch(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH;
            return _this;
        }
        return CustomerSearch;
    }(LoaderLoadAction));
    var CustomerSearchFail = /** @class */ (function (_super) {
        __extends(CustomerSearchFail, _super);
        function CustomerSearchFail(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH_FAIL;
            return _this;
        }
        return CustomerSearchFail;
    }(LoaderFailAction));
    var CustomerSearchSuccess = /** @class */ (function (_super) {
        __extends(CustomerSearchSuccess, _super);
        function CustomerSearchSuccess(payload) {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.payload = payload;
            _this.type = CUSTOMER_SEARCH_SUCCESS;
            return _this;
        }
        return CustomerSearchSuccess;
    }(LoaderSuccessAction));
    var CustomerSearchReset = /** @class */ (function (_super) {
        __extends(CustomerSearchReset, _super);
        function CustomerSearchReset() {
            var _this = _super.call(this, CUSTOMER_SEARCH_DATA) || this;
            _this.type = CUSTOMER_SEARCH_RESET;
            return _this;
        }
        return CustomerSearchReset;
    }(LoaderResetAction));

    var LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';
    /**
     * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)
     */
    var LogoutCustomerSupportAgent = /** @class */ (function () {
        function LogoutCustomerSupportAgent() {
            this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;
        }
        return LogoutCustomerSupportAgent;
    }());

    var customerGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ASM_UI_UPDATE: ASM_UI_UPDATE,
        AsmUiUpdate: AsmUiUpdate,
        CUSTOMER_SEARCH: CUSTOMER_SEARCH,
        CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,
        CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,
        CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,
        CustomerSearch: CustomerSearch,
        CustomerSearchFail: CustomerSearchFail,
        CustomerSearchSuccess: CustomerSearchSuccess,
        CustomerSearchReset: CustomerSearchReset,
        LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,
        LogoutCustomerSupportAgent: LogoutCustomerSupportAgent
    });

    /**
     * Auth service for CS agent. Useful to login/logout agent, start emulation
     * or get information about the status of emulation.
     */
    var CsAgentAuthService = /** @class */ (function () {
        function CsAgentAuthService(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {
            this.authService = authService;
            this.authStorageService = authStorageService;
            this.userIdService = userIdService;
            this.oAuthLibWrapperService = oAuthLibWrapperService;
            this.store = store;
            this.userService = userService;
        }
        /**
         * Loads access token for a customer support agent.
         * @param userId
         * @param password
         */
        CsAgentAuthService.prototype.authorizeCustomerSupportAgent = function (userId, password) {
            return __awaiter(this, void 0, void 0, function () {
                var userToken, customerId_1, _a_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.authStorageService
                                .getToken()
                                .subscribe(function (token) { return (userToken = token); })
                                .unsubscribe();
                            this.authStorageService.switchTokenTargetToCSAgent();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password)];
                        case 2:
                            _b.sent();
                            this.userService
                                .get()
                                .subscribe(function (user) { return (customerId_1 = user === null || user === void 0 ? void 0 : user.customerId); })
                                .unsubscribe();
                            this.store.dispatch(new Logout());
                            if (Boolean(customerId_1)) {
                                // OCC specific user id handling. Customize when implementing different backend
                                this.userIdService.setUserId(customerId_1);
                                this.authStorageService.setEmulatedUserToken(userToken);
                                this.store.dispatch(new Login());
                            }
                            else {
                                // When we can't get the customerId just end all current sessions
                                this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);
                                this.authStorageService.clearEmulatedUserToken();
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            _a_1 = _b.sent();
                            this.authStorageService.switchTokenTargetToUser();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Starts an ASM customer emulation session.
         * A customer emulation session is stopped by calling logout().
         * @param customerId
         */
        CsAgentAuthService.prototype.startCustomerEmulationSession = function (customerId) {
            this.authStorageService.clearEmulatedUserToken();
            // OCC specific user id handling. Customize when implementing different backend
            this.store.dispatch(new Logout());
            this.userIdService.setUserId(customerId);
            this.store.dispatch(new Login());
        };
        /**
         * Check if CS agent is currently logged in.
         *
         * @returns observable emitting true when CS agent is logged in or false when not.
         */
        CsAgentAuthService.prototype.isCustomerSupportAgentLoggedIn = function () {
            return rxjs.combineLatest([
                this.authStorageService.getToken(),
                this.authStorageService.getTokenTarget(),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), token = _c[0], tokenTarget = _c[1];
                return Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === exports.TokenTarget.CSAgent);
            }));
        };
        /**
         * Utility function to determine if customer is emulated.
         *
         * @returns observable emitting true when there is active emulation session or false when not.
         */
        CsAgentAuthService.prototype.isCustomerEmulated = function () {
            return this.userIdService.isEmulated();
        };
        /**
         * Returns the customer support agent's token loading status
         */
        CsAgentAuthService.prototype.getCustomerSupportAgentTokenLoading = function () {
            // TODO(#8248): Create new loading state outside of store
            return rxjs.of(false);
        };
        /**
         * Logout a customer support agent.
         */
        CsAgentAuthService.prototype.logoutCustomerSupportAgent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var emulatedToken, isCustomerEmulated;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            emulatedToken = this.authStorageService.getEmulatedUserToken();
                            this.userIdService
                                .isEmulated()
                                .subscribe(function (emulated) { return (isCustomerEmulated = emulated); })
                                .unsubscribe();
                            return [4 /*yield*/, this.oAuthLibWrapperService.revokeAndLogout()];
                        case 1:
                            _b.sent();
                            this.store.dispatch(new LogoutCustomerSupportAgent());
                            this.authStorageService.setTokenTarget(exports.TokenTarget.User);
                            if (isCustomerEmulated && emulatedToken) {
                                this.store.dispatch(new Logout());
                                this.authStorageService.setToken(emulatedToken);
                                this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                                this.authStorageService.clearEmulatedUserToken();
                                this.store.dispatch(new Login());
                            }
                            else {
                                this.authService.logout();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        return CsAgentAuthService;
    }());
    CsAgentAuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CsAgentAuthService_Factory() { return new CsAgentAuthService(i0.ɵɵinject(AuthService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(UserIdService), i0.ɵɵinject(OAuthLibWrapperService), i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserService)); }, token: CsAgentAuthService, providedIn: "root" });
    CsAgentAuthService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CsAgentAuthService.ctorParameters = function () { return [
        { type: AuthService },
        { type: AsmAuthStorageService },
        { type: UserIdService },
        { type: OAuthLibWrapperService },
        { type: i1$2.Store },
        { type: UserService }
    ]; };

    /**
     * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)
     * in cases of normal user session and on customer emulation.
     */
    var AsmAuthHttpHeaderService = /** @class */ (function (_super) {
        __extends(AsmAuthHttpHeaderService, _super);
        function AsmAuthHttpHeaderService(authService, authStorageService, csAgentAuthService, oAuthLibWrapperService, routingService, globalMessageService, occEndpointsService) {
            var _this = _super.call(this, authService, authStorageService, oAuthLibWrapperService, routingService, occEndpointsService, globalMessageService) || this;
            _this.authService = authService;
            _this.authStorageService = authStorageService;
            _this.csAgentAuthService = csAgentAuthService;
            _this.oAuthLibWrapperService = oAuthLibWrapperService;
            _this.routingService = routingService;
            _this.globalMessageService = globalMessageService;
            _this.occEndpointsService = occEndpointsService;
            return _this;
        }
        /**
         * @override
         *
         * Checks if particular request should be handled by this service.
         */
        AsmAuthHttpHeaderService.prototype.shouldCatchError = function (request) {
            return (_super.prototype.shouldCatchError.call(this, request) || this.isCSAgentTokenRequest(request));
        };
        /**
         * @override
         *
         * Adds `Authorization` header to occ and CS agent requests.
         * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).
         */
        AsmAuthHttpHeaderService.prototype.alterRequest = function (request) {
            var hasAuthorizationHeader = !!this.getAuthorizationHeader(request);
            var isCSAgentRequest = this.isCSAgentTokenRequest(request);
            var req = _super.prototype.alterRequest.call(this, request);
            if (!hasAuthorizationHeader && isCSAgentRequest) {
                req = request.clone({
                    setHeaders: Object.assign({}, this.createAuthorizationHeader()),
                });
                return InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, req);
            }
            return req;
        };
        AsmAuthHttpHeaderService.prototype.isCSAgentTokenRequest = function (request) {
            var isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);
            return Boolean(isRequestWithCSAgentToken);
        };
        /**
         * @override
         *
         * On backend errors indicating expired `refresh_token` we need to logout
         * currently logged in user and CS agent.
         */
        AsmAuthHttpHeaderService.prototype.handleExpiredRefreshToken = function () {
            var _this = this;
            this.csAgentAuthService
                .isCustomerSupportAgentLoggedIn()
                .pipe(operators.take(1))
                .subscribe(function (csAgentLoggedIn) {
                if (csAgentLoggedIn) {
                    _this.csAgentAuthService.logoutCustomerSupportAgent();
                    _this.globalMessageService.add({
                        key: 'asm.csagentTokenExpired',
                    }, exports.GlobalMessageType.MSG_TYPE_ERROR);
                }
                else {
                    _super.prototype.handleExpiredRefreshToken.call(_this);
                }
            });
        };
        return AsmAuthHttpHeaderService;
    }(AuthHttpHeaderService));
    AsmAuthHttpHeaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmAuthHttpHeaderService_Factory() { return new AsmAuthHttpHeaderService(i0.ɵɵinject(AuthService), i0.ɵɵinject(AuthStorageService), i0.ɵɵinject(CsAgentAuthService), i0.ɵɵinject(OAuthLibWrapperService), i0.ɵɵinject(RoutingService), i0.ɵɵinject(GlobalMessageService), i0.ɵɵinject(OccEndpointsService)); }, token: AsmAuthHttpHeaderService, providedIn: "root" });
    AsmAuthHttpHeaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AsmAuthHttpHeaderService.ctorParameters = function () { return [
        { type: AuthService },
        { type: AuthStorageService },
        { type: CsAgentAuthService },
        { type: OAuthLibWrapperService },
        { type: RoutingService },
        { type: GlobalMessageService },
        { type: OccEndpointsService }
    ]; };

    var GlobalMessageConfig = /** @class */ (function () {
        function GlobalMessageConfig() {
        }
        return GlobalMessageConfig;
    }());
    GlobalMessageConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function GlobalMessageConfig_Factory() { return i0.ɵɵinject(Config); }, token: GlobalMessageConfig, providedIn: "root" });
    GlobalMessageConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var HttpResponseStatus;
    (function (HttpResponseStatus) {
        HttpResponseStatus[HttpResponseStatus["UNKNOWN"] = -1] = "UNKNOWN";
        HttpResponseStatus[HttpResponseStatus["BAD_REQUEST"] = 400] = "BAD_REQUEST";
        HttpResponseStatus[HttpResponseStatus["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
        HttpResponseStatus[HttpResponseStatus["FORBIDDEN"] = 403] = "FORBIDDEN";
        HttpResponseStatus[HttpResponseStatus["NOT_FOUND"] = 404] = "NOT_FOUND";
        HttpResponseStatus[HttpResponseStatus["CONFLICT"] = 409] = "CONFLICT";
        HttpResponseStatus[HttpResponseStatus["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
        HttpResponseStatus[HttpResponseStatus["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
        HttpResponseStatus[HttpResponseStatus["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    })(HttpResponseStatus || (HttpResponseStatus = {}));

    var HttpErrorHandler = /** @class */ (function () {
        function HttpErrorHandler(globalMessageService) {
            this.globalMessageService = globalMessageService;
        }
        /**
         * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status
         * a priority can be added to distinguish multiple handles for the same response status.
         */
        HttpErrorHandler.prototype.hasMatch = function (errorResponse) {
            return errorResponse.status === this.responseStatus;
        };
        return HttpErrorHandler;
    }());
    HttpErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpErrorHandler_Factory() { return new HttpErrorHandler(i0.ɵɵinject(GlobalMessageService)); }, token: HttpErrorHandler, providedIn: "root" });
    HttpErrorHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    HttpErrorHandler.ctorParameters = function () { return [
        { type: GlobalMessageService }
    ]; };

    var BadGatewayHandler = /** @class */ (function (_super) {
        __extends(BadGatewayHandler, _super);
        function BadGatewayHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.BAD_GATEWAY;
            return _this;
        }
        BadGatewayHandler.prototype.handleError = function () {
            this.globalMessageService.add({ key: 'httpHandlers.badGateway' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        BadGatewayHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return BadGatewayHandler;
    }(HttpErrorHandler));
    BadGatewayHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function BadGatewayHandler_Factory() { return new BadGatewayHandler(i0.ɵɵinject(GlobalMessageService)); }, token: BadGatewayHandler, providedIn: "root" });
    BadGatewayHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var OAUTH_ENDPOINT = '/authorizationserver/oauth/token';
    var BadRequestHandler = /** @class */ (function (_super) {
        __extends(BadRequestHandler, _super);
        function BadRequestHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.BAD_REQUEST;
            return _this;
        }
        BadRequestHandler.prototype.handleError = function (request, response) {
            this.handleBadPassword(request, response);
            this.handleBadLoginResponse(request, response);
            this.handleBadCartRequest(request, response);
            this.handleValidationError(request, response);
            this.handleVoucherOperationError(request, response);
        };
        BadRequestHandler.prototype.handleBadPassword = function (request, response) {
            var _a, _b, _c;
            if (((_a = response.url) === null || _a === void 0 ? void 0 : _a.includes(OAUTH_ENDPOINT)) &&
                ((_b = response.error) === null || _b === void 0 ? void 0 : _b.error) === 'invalid_grant' &&
                ((_c = request.body) === null || _c === void 0 ? void 0 : _c.get('grant_type')) === 'password') {
                this.globalMessageService.add({
                    key: 'httpHandlers.badRequestPleaseLoginAgain',
                    params: {
                        errorMessage: response.error.error_description || response.message || '',
                    },
                }, exports.GlobalMessageType.MSG_TYPE_ERROR);
                this.globalMessageService.remove(exports.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            }
        };
        BadRequestHandler.prototype.handleBadLoginResponse = function (_request, response) {
            var _this = this;
            this.getErrors(response)
                .filter(function (error) { return error.type === 'PasswordMismatchError'; })
                .forEach(function () {
                _this.globalMessageService.add({ key: 'httpHandlers.badRequestOldPasswordIncorrect' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
            });
        };
        BadRequestHandler.prototype.handleValidationError = function (_request, response) {
            var _this = this;
            this.getErrors(response)
                .filter(function (e) { return e.type === 'ValidationError'; })
                .forEach(function (error) {
                _this.globalMessageService.add({
                    key: "httpHandlers.validationErrors." + error.reason + "." + error.subject,
                }, exports.GlobalMessageType.MSG_TYPE_ERROR);
            });
        };
        BadRequestHandler.prototype.handleBadCartRequest = function (_request, response) {
            var _this = this;
            this.getErrors(response)
                .filter(function (e) { return isCartNotFoundError(e); })
                .forEach(function () {
                _this.globalMessageService.add({ key: 'httpHandlers.cartNotFound' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
            });
        };
        BadRequestHandler.prototype.handleVoucherOperationError = function (_request, response) {
            var _this = this;
            this.getErrors(response)
                .filter(function (e) { return e.message === 'coupon.invalid.code.provided' &&
                e.type === 'VoucherOperationError'; })
                .forEach(function () {
                _this.globalMessageService.add({ key: 'httpHandlers.invalidCodeProvided' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
            });
        };
        BadRequestHandler.prototype.getErrors = function (response) {
            var _a;
            return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter(function (error) { return error.type !== 'JaloObjectNoLongerValidError'; });
        };
        BadRequestHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return BadRequestHandler;
    }(HttpErrorHandler));
    BadRequestHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function BadRequestHandler_Factory() { return new BadRequestHandler(i0.ɵɵinject(GlobalMessageService)); }, token: BadRequestHandler, providedIn: "root" });
    BadRequestHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var ConflictHandler = /** @class */ (function (_super) {
        __extends(ConflictHandler, _super);
        function ConflictHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.CONFLICT;
            return _this;
        }
        ConflictHandler.prototype.handleError = function () {
            this.globalMessageService.add({ key: 'httpHandlers.conflict' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        ConflictHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return ConflictHandler;
    }(HttpErrorHandler));
    ConflictHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConflictHandler_Factory() { return new ConflictHandler(i0.ɵɵinject(GlobalMessageService)); }, token: ConflictHandler, providedIn: "root" });
    ConflictHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var ForbiddenHandler = /** @class */ (function (_super) {
        __extends(ForbiddenHandler, _super);
        function ForbiddenHandler(globalMessageService, authService, occEndpoints) {
            var _this = _super.call(this, globalMessageService) || this;
            _this.globalMessageService = globalMessageService;
            _this.authService = authService;
            _this.occEndpoints = occEndpoints;
            _this.responseStatus = HttpResponseStatus.FORBIDDEN;
            return _this;
        }
        ForbiddenHandler.prototype.handleError = function (request) {
            if (request.url.endsWith(this.occEndpoints.getUrl('user', { userId: 'current' }))) {
                this.authService.logout();
            }
            this.globalMessageService.add({ key: 'httpHandlers.forbidden' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        ForbiddenHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return ForbiddenHandler;
    }(HttpErrorHandler));
    ForbiddenHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ForbiddenHandler_Factory() { return new ForbiddenHandler(i0.ɵɵinject(GlobalMessageService), i0.ɵɵinject(AuthService), i0.ɵɵinject(OccEndpointsService)); }, token: ForbiddenHandler, providedIn: "root" });
    ForbiddenHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ForbiddenHandler.ctorParameters = function () { return [
        { type: GlobalMessageService },
        { type: AuthService },
        { type: OccEndpointsService }
    ]; };

    var GatewayTimeoutHandler = /** @class */ (function (_super) {
        __extends(GatewayTimeoutHandler, _super);
        function GatewayTimeoutHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;
            return _this;
        }
        GatewayTimeoutHandler.prototype.handleError = function () {
            this.globalMessageService.add({ key: 'httpHandlers.gatewayTimeout' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        GatewayTimeoutHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return GatewayTimeoutHandler;
    }(HttpErrorHandler));
    GatewayTimeoutHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function GatewayTimeoutHandler_Factory() { return new GatewayTimeoutHandler(i0.ɵɵinject(GlobalMessageService)); }, token: GatewayTimeoutHandler, providedIn: "root" });
    GatewayTimeoutHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var InternalServerErrorHandler = /** @class */ (function (_super) {
        __extends(InternalServerErrorHandler, _super);
        function InternalServerErrorHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;
            return _this;
        }
        InternalServerErrorHandler.prototype.handleError = function () {
            this.globalMessageService.add({ key: 'httpHandlers.internalServerError' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        InternalServerErrorHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return InternalServerErrorHandler;
    }(HttpErrorHandler));
    InternalServerErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function InternalServerErrorHandler_Factory() { return new InternalServerErrorHandler(i0.ɵɵinject(GlobalMessageService)); }, token: InternalServerErrorHandler, providedIn: "root" });
    InternalServerErrorHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var NotFoundHandler = /** @class */ (function (_super) {
        __extends(NotFoundHandler, _super);
        function NotFoundHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.NOT_FOUND;
            return _this;
        }
        // empty error handler to avoid we fallabck to the unknown error handler
        NotFoundHandler.prototype.handleError = function () { };
        NotFoundHandler.prototype.getPriority = function () {
            return -10 /* LOW */;
        };
        return NotFoundHandler;
    }(HttpErrorHandler));
    NotFoundHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotFoundHandler_Factory() { return new NotFoundHandler(i0.ɵɵinject(GlobalMessageService)); }, token: NotFoundHandler, providedIn: "root" });
    NotFoundHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /**
     * Unknown Error Handler works as an fallback, to handle errors that were
     * not handled by any other error handlers
     */
    var UnknownErrorHandler = /** @class */ (function (_super) {
        __extends(UnknownErrorHandler, _super);
        function UnknownErrorHandler() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.responseStatus = HttpResponseStatus.UNKNOWN;
            return _this;
        }
        /**
         * hasMatch always returns true, to mach all errors
         */
        UnknownErrorHandler.prototype.hasMatch = function (_errorResponse) {
            return true;
        };
        UnknownErrorHandler.prototype.handleError = function () {
            if (i0.isDevMode()) {
                console.warn("Unknown http response error: " + this.responseStatus);
            }
        };
        /**
         * Fallback priority assures that the handler is used as a last resort
         */
        UnknownErrorHandler.prototype.getPriority = function () {
            return -50 /* FALLBACK */;
        };
        return UnknownErrorHandler;
    }(HttpErrorHandler));
    UnknownErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function UnknownErrorHandler_Factory() { return new UnknownErrorHandler(i0.ɵɵinject(GlobalMessageService)); }, token: UnknownErrorHandler, providedIn: "root" });
    UnknownErrorHandler.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /**
     * Helper logic to resolve best matching Applicable
     *
     * Finding best match is a two step process:
     * 1. Find all matching applicables
     *    - all applicables for which hasMatch(...matchParams) will return true
     *    - all applicables without hasMatch method (implicit always match)
     * 2. Find the applicable with highest priority
     *    - applicable with highest getPriority(...priorityParams) will win
     *    - applicable without getPriority method is treated as Priotity.NORMAL or 0
     *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins
     *
     * @param applicables - array or applicable-like instancese
     * @param matchParams - array of parameters passed for hasMatch calls
     * @param priorityParams - array of parameters passed for getPriority calls
     */
    function resolveApplicable(applicables, matchParams, priorityParams) {
        if (matchParams === void 0) { matchParams = []; }
        if (priorityParams === void 0) { priorityParams = []; }
        var matchedApplicables = (applicables !== null && applicables !== void 0 ? applicables : []).filter(function (applicable) { return !applicable.hasMatch || applicable.hasMatch.apply(applicable, __spread(matchParams)); });
        if (matchedApplicables.length < 2) {
            return matchedApplicables[0];
        }
        var lastPriority = -Infinity;
        return matchedApplicables.reduce(function (acc, curr) {
            var currPriority = curr.getPriority
                ? curr.getPriority.apply(curr, __spread(priorityParams)) : 0 /* NORMAL */;
            if (lastPriority > currPriority) {
                return acc;
            }
            lastPriority = currPriority;
            return curr;
        }, undefined);
    }

    var HttpErrorInterceptor = /** @class */ (function () {
        function HttpErrorInterceptor(handlers) {
            this.handlers = handlers;
        }
        HttpErrorInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            return next.handle(request).pipe(operators.catchError(function (response) {
                if (response instanceof i1$4.HttpErrorResponse) {
                    _this.handleErrorResponse(request, response);
                    return rxjs.throwError(response);
                }
            }));
        };
        HttpErrorInterceptor.prototype.handleErrorResponse = function (request, response) {
            var handler = this.getResponseHandler(response);
            if (handler) {
                handler.handleError(request, response);
            }
        };
        /**
         * return the error handler that matches the `HttpResponseStatus` code.
         * If no handler is available, the UNKNOWN handler is returned.
         */
        HttpErrorInterceptor.prototype.getResponseHandler = function (response) {
            return resolveApplicable(this.handlers, [response]);
        };
        return HttpErrorInterceptor;
    }());
    HttpErrorInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpErrorInterceptor_Factory() { return new HttpErrorInterceptor(i0.ɵɵinject(HttpErrorHandler)); }, token: HttpErrorInterceptor, providedIn: "root" });
    HttpErrorInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    HttpErrorInterceptor.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: i0.Inject, args: [HttpErrorHandler,] }] }
    ]; };

    var errorHandlers = [
        {
            provide: HttpErrorHandler,
            useExisting: UnknownErrorHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: BadGatewayHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: BadRequestHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: ConflictHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: ForbiddenHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: GatewayTimeoutHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: InternalServerErrorHandler,
            multi: true,
        },
        {
            provide: HttpErrorHandler,
            useExisting: NotFoundHandler,
            multi: true,
        },
    ];
    var httpErrorInterceptors = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: HttpErrorInterceptor,
            multi: true,
        },
    ];

    var initialState$b = {
        entities: {},
    };
    function reducer$b(state, action) {
        var _a, _b, _c, _d;
        if (state === void 0) { state = initialState$b; }
        switch (action.type) {
            case ADD_MESSAGE: {
                var message = action.payload;
                if (state.entities[message.type] === undefined) {
                    return Object.assign(Object.assign({}, state), { entities: Object.assign(Object.assign({}, state.entities), (_a = {}, _a[message.type] = [message.text], _a)) });
                }
                else {
                    var currentMessages = state.entities[message.type];
                    return Object.assign(Object.assign({}, state), { entities: Object.assign(Object.assign({}, state.entities), (_b = {}, _b[message.type] = __spread(currentMessages, [message.text]), _b)) });
                }
            }
            case REMOVE_MESSAGE: {
                var msgType = action.payload.type;
                var msgIndex = action.payload.index;
                if (Object.keys(state.entities).length === 0 ||
                    !state.entities[msgType]) {
                    return state;
                }
                var messages = __spread(state.entities[msgType]);
                messages.splice(msgIndex, 1);
                return Object.assign(Object.assign({}, state), { entities: Object.assign(Object.assign({}, state.entities), (_c = {}, _c[msgType] = messages, _c)) });
            }
            case REMOVE_MESSAGES_BY_TYPE: {
                var entities = Object.assign(Object.assign({}, state.entities), (_d = {}, _d[action.payload] = [], _d));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
        }
        return state;
    }

    function getReducers$4() {
        return reducer$b;
    }
    var reducerToken$4 = new i0.InjectionToken('GlobalMessageReducers');
    var reducerProvider$4 = {
        provide: reducerToken$4,
        useFactory: getReducers$4,
    };

    var GlobalMessageStoreModule = /** @class */ (function () {
        function GlobalMessageStoreModule() {
        }
        return GlobalMessageStoreModule;
    }());
    GlobalMessageStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        StateModule,
                        i1$2.StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken$4),
                    ],
                    providers: [reducerProvider$4],
                },] }
    ];

    function shallowEqualObjects(objA, objB) {
        if (objA === objB) {
            return true;
        }
        if (!objA || !objB) {
            return false;
        }
        var aKeys = Object.keys(objA);
        var bKeys = Object.keys(objB);
        var aKeysLen = aKeys.length;
        var bKeysLen = bKeys.length;
        if (aKeysLen !== bKeysLen) {
            return false;
        }
        for (var i = 0; i < aKeysLen; i++) {
            var key = aKeys[i];
            if (objA[key] !== objB[key]) {
                return false;
            }
        }
        return true;
    }
    function deepEqualObjects(objA, objB) {
        if (objA === objB) {
            return true; // if both objA and objB are null or undefined and exactly the same
        }
        else if (!(objA instanceof Object) || !(objB instanceof Object)) {
            return false; // if they are not strictly equal, they both need to be Objects
        }
        else if (objA.constructor !== objB.constructor) {
            // they must have the exact same prototype chain, the closest we can do is
            // test their constructor.
            return false;
        }
        else {
            for (var key in objA) {
                if (!objA.hasOwnProperty(key)) {
                    continue; // other properties were tested using objA.constructor === y.constructor
                }
                if (!objB.hasOwnProperty(key)) {
                    return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined
                }
                if (objA[key] === objB[key]) {
                    continue; // if they have the same strict value or identity then they are equal
                }
                if (typeof objA[key] !== 'object') {
                    return false; // Numbers, Strings, Functions, Booleans must be strictly equal
                }
                if (!deepEqualObjects(objA[key], objB[key])) {
                    return false;
                }
            }
            for (var key in objB) {
                if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
                    return false;
                }
            }
            return true;
        }
    }
    function countOfDeepEqualObjects(obj, arr) {
        return arr.reduce(function (acc, curr) {
            if (deepEqualObjects(obj, curr)) {
                acc++;
            }
            return acc;
        }, 0);
    }
    function indexOfFirstOccurrence(obj, arr) {
        for (var index = 0; index < arr.length; index++) {
            if (deepEqualObjects(arr[index], obj)) {
                return index;
            }
        }
    }

    var GlobalMessageEffect = /** @class */ (function () {
        function GlobalMessageEffect(actions$, store, config, platformId) {
            var _this = this;
            this.actions$ = actions$;
            this.store = store;
            this.config = config;
            this.platformId = platformId;
            this.removeDuplicated$ = this.actions$.pipe(i3.ofType(ADD_MESSAGE), operators.pluck('payload'), operators.switchMap(function (message) { return rxjs.of(message.text).pipe(operators.withLatestFrom(_this.store.pipe(i1$2.select(getGlobalMessageEntitiesByType(message.type)))), operators.filter(function (_a) {
                var _b = __read(_a, 2), text = _b[0], messages = _b[1];
                return countOfDeepEqualObjects(text, messages) > 1;
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), text = _b[0], messages = _b[1];
                return new RemoveMessage({
                    type: message.type,
                    index: indexOfFirstOccurrence(text, messages),
                });
            })); }));
            this.hideAfterDelay$ = i1.isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR
                ? this.actions$.pipe(i3.ofType(ADD_MESSAGE), operators.pluck('payload'), operators.concatMap(function (message) {
                    var config = _this.config.globalMessages[message.type];
                    return _this.store.pipe(i1$2.select(getGlobalMessageCountByType(message.type)), operators.take(1), operators.filter(function (count) { return ((config && config.timeout !== undefined) || message.timeout) &&
                        count &&
                        count > 0; }), operators.delay(message.timeout || config.timeout), operators.switchMap(function () { return rxjs.of(new RemoveMessage({
                        type: message.type,
                        index: 0,
                    })); }));
                }))
                : rxjs.EMPTY;
        }
        return GlobalMessageEffect;
    }());
    GlobalMessageEffect.decorators = [
        { type: i0.Injectable }
    ];
    GlobalMessageEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: i1$2.Store },
        { type: GlobalMessageConfig },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };
    __decorate([
        i3.Effect()
    ], GlobalMessageEffect.prototype, "removeDuplicated$", void 0);
    __decorate([
        i3.Effect()
    ], GlobalMessageEffect.prototype, "hideAfterDelay$", void 0);

    function defaultGlobalMessageConfigFactory() {
        var _a;
        return {
            globalMessages: (_a = {},
                _a[exports.GlobalMessageType.MSG_TYPE_CONFIRMATION] = {
                    timeout: 3000,
                },
                _a[exports.GlobalMessageType.MSG_TYPE_INFO] = {
                    timeout: 3000,
                },
                _a[exports.GlobalMessageType.MSG_TYPE_ERROR] = {
                    timeout: 7000,
                },
                _a[exports.GlobalMessageType.MSG_TYPE_WARNING] = {
                    timeout: 7000,
                },
                _a),
        };
    }

    var GlobalMessageModule = /** @class */ (function () {
        function GlobalMessageModule() {
        }
        GlobalMessageModule.forRoot = function () {
            return {
                ngModule: GlobalMessageModule,
                providers: __spread(errorHandlers, httpErrorInterceptors),
            };
        };
        return GlobalMessageModule;
    }());
    GlobalMessageModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        GlobalMessageStoreModule,
                        i3.EffectsModule.forFeature([GlobalMessageEffect]),
                    ],
                    providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],
                },] }
    ];

    /**
     * Version of AuthService that is working for both user na CS agent.
     * Overrides AuthService when ASM module is enabled.
     */
    var AsmAuthService = /** @class */ (function (_super_1) {
        __extends(AsmAuthService, _super_1);
        function AsmAuthService(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, globalMessageService, routingService) {
            var _this = _super_1.call(this, store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService) || this;
            _this.store = store;
            _this.userIdService = userIdService;
            _this.oAuthLibWrapperService = oAuthLibWrapperService;
            _this.authStorageService = authStorageService;
            _this.authRedirectService = authRedirectService;
            _this.globalMessageService = globalMessageService;
            _this.routingService = routingService;
            return _this;
        }
        AsmAuthService.prototype.canUserLogin = function () {
            var tokenTarget;
            var token;
            this.authStorageService
                .getToken()
                .subscribe(function (tok) { return (token = tok); })
                .unsubscribe();
            this.authStorageService
                .getTokenTarget()
                .subscribe(function (tokTarget) { return (tokenTarget = tokTarget); })
                .unsubscribe();
            return !(Boolean(token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === exports.TokenTarget.CSAgent);
        };
        AsmAuthService.prototype.warnAboutLoggedCSAgent = function () {
            this.globalMessageService.add({
                key: 'asm.auth.agentLoggedInError',
            }, exports.GlobalMessageType.MSG_TYPE_ERROR);
        };
        /**
         * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.
         * @param userId
         * @param password
         */
        AsmAuthService.prototype.loginWithCredentials = function (userId, password) {
            var _super = Object.create(null, {
                loginWithCredentials: { get: function () { return _super_1.prototype.loginWithCredentials; } }
            });
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.canUserLogin()) return [3 /*break*/, 2];
                            return [4 /*yield*/, _super.loginWithCredentials.call(this, userId, password)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            this.warnAboutLoggedCSAgent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.
         */
        AsmAuthService.prototype.loginWithRedirect = function () {
            if (this.canUserLogin()) {
                _super_1.prototype.loginWithRedirect.call(this);
                return true;
            }
            else {
                this.warnAboutLoggedCSAgent();
                return false;
            }
        };
        /**
         * Revokes tokens and clears state for logged user (tokens, userId).
         * To perform logout it is best to use `logout` method. Use this method with caution.
         */
        AsmAuthService.prototype.coreLogout = function () {
            var _this = this;
            return this.userIdService
                .isEmulated()
                .pipe(operators.take(1), operators.switchMap(function (isEmulated) {
                if (isEmulated) {
                    _this.authStorageService.clearEmulatedUserToken();
                    _this.userIdService.clearUserId();
                    _this.store.dispatch(new Logout());
                    return rxjs.of(true);
                }
                else {
                    return rxjs.from(_super_1.prototype.coreLogout.call(_this));
                }
            }))
                .toPromise();
        };
        /**
         * Returns `true` if user is logged in or being emulated.
         */
        AsmAuthService.prototype.isUserLoggedIn = function () {
            return rxjs.combineLatest([
                this.authStorageService.getToken(),
                this.userIdService.isEmulated(),
                this.authStorageService.getTokenTarget(),
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), token = _b[0], isEmulated = _b[1], tokenTarget = _b[2];
                return Boolean(token === null || token === void 0 ? void 0 : token.access_token) &&
                    (tokenTarget === exports.TokenTarget.User ||
                        (tokenTarget === exports.TokenTarget.CSAgent && isEmulated));
            }));
        };
        return AsmAuthService;
    }(AuthService));
    AsmAuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmAuthService_Factory() { return new AsmAuthService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(OAuthLibWrapperService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(AuthRedirectService), i0.ɵɵinject(GlobalMessageService), i0.ɵɵinject(RoutingService)); }, token: AsmAuthService, providedIn: "root" });
    AsmAuthService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AsmAuthService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: OAuthLibWrapperService },
        { type: AsmAuthStorageService },
        { type: AuthRedirectService },
        { type: GlobalMessageService },
        { type: RoutingService }
    ]; };

    var AsmConnector = /** @class */ (function () {
        function AsmConnector(asmAdapter) {
            this.asmAdapter = asmAdapter;
        }
        AsmConnector.prototype.customerSearch = function (options) {
            return this.asmAdapter.customerSearch(options);
        };
        return AsmConnector;
    }());
    AsmConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmConnector_Factory() { return new AsmConnector(i0.ɵɵinject(AsmAdapter)); }, token: AsmConnector, providedIn: "root" });
    AsmConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AsmConnector.ctorParameters = function () { return [
        { type: AsmAdapter }
    ]; };

    var CustomerEffects = /** @class */ (function () {
        function CustomerEffects(actions$, asmConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.asmConnector = asmConnector;
            this.customerSearch$ = this.actions$.pipe(i3.ofType(CUSTOMER_SEARCH), operators.map(function (action) { return action.payload; }), operators.switchMap(function (options) { return _this.asmConnector.customerSearch(options).pipe(operators.map(function (customerSearchResults) {
                return new CustomerSearchSuccess(customerSearchResults);
            }), operators.catchError(function (error) { return rxjs.of(new CustomerSearchFail(normalizeHttpError(error))); })); }));
        }
        return CustomerEffects;
    }());
    CustomerEffects.decorators = [
        { type: i0.Injectable }
    ];
    CustomerEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: AsmConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], CustomerEffects.prototype, "customerSearch$", void 0);

    var effects$4 = [CustomerEffects];

    var initialState$c = { collapsed: false };
    function reducer$c(state, action) {
        if (state === void 0) { state = initialState$c; }
        switch (action.type) {
            case ASM_UI_UPDATE: {
                return Object.assign(Object.assign({}, state), action.payload);
            }
            default: {
                return state;
            }
        }
    }

    function getReducers$5() {
        return {
            customerSearchResult: loaderReducer(CUSTOMER_SEARCH_DATA),
            asmUi: reducer$c,
        };
    }
    var reducerToken$5 = new i0.InjectionToken('AsmReducers');
    var reducerProvider$5 = {
        provide: reducerToken$5,
        useFactory: getReducers$5,
    };
    function clearCustomerSupportAgentAsmState(reducer) {
        return function (state, action) {
            if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {
                state = Object.assign(Object.assign({}, state), { customerSearchResult: undefined });
            }
            return reducer(state, action);
        };
    }
    var metaReducers$1 = [
        clearCustomerSupportAgentAsmState,
    ];

    var getAsmState = i1$2.createFeatureSelector(ASM_FEATURE);

    var ɵ0$A = function (state) { return state.asmUi; };
    var getAsmUi = i1$2.createSelector(getAsmState, ɵ0$A);

    var ɵ0$B = function (state) { return state.customerSearchResult; };
    var getCustomerSearchResultsLoaderState = i1$2.createSelector(getAsmState, ɵ0$B);
    var ɵ1$r = function (state) { return loaderValueSelector(state); };
    var getCustomerSearchResults = i1$2.createSelector(getCustomerSearchResultsLoaderState, ɵ1$r);
    var ɵ2$i = function (state) { return loaderLoadingSelector(state); };
    var getCustomerSearchResultsLoading = i1$2.createSelector(getCustomerSearchResultsLoaderState, ɵ2$i);

    var asmGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAsmUi: getAsmUi,
        ɵ0: ɵ0$A,
        getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,
        getCustomerSearchResults: getCustomerSearchResults,
        getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,
        ɵ1: ɵ1$r,
        ɵ2: ɵ2$i,
        getAsmState: getAsmState
    });

    /**
     * Responsible for storing ASM state in the browser storage.
     * Uses `StatePersistenceService` mechanism.
     */
    var AsmStatePersistenceService = /** @class */ (function () {
        function AsmStatePersistenceService(statePersistenceService, store, authStorageService) {
            this.statePersistenceService = statePersistenceService;
            this.store = store;
            this.authStorageService = authStorageService;
            this.subscription = new rxjs.Subscription();
            /**
             * Identifier used for storage key.
             */
            this.key = 'asm';
        }
        /**
         * Initializes the synchronization between state and browser storage.
         */
        AsmStatePersistenceService.prototype.initSync = function () {
            var _this = this;
            this.subscription.add(this.statePersistenceService.syncWithStorage({
                key: this.key,
                state$: this.getAsmState(),
                onRead: function (state) { return _this.onRead(state); },
            }));
        };
        /**
         * Gets and transforms state from different sources into the form that should
         * be saved in storage.
         */
        AsmStatePersistenceService.prototype.getAsmState = function () {
            return rxjs.combineLatest([
                this.store.pipe(i1$2.select(getAsmUi)),
                rxjs.of(this.authStorageService.getEmulatedUserToken()),
                this.authStorageService.getTokenTarget(),
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), ui = _b[0], emulatedUserToken = _b[1], tokenTarget = _b[2];
                var emulatedToken = emulatedUserToken;
                if (emulatedToken) {
                    emulatedToken = Object.assign({}, emulatedUserToken);
                    // To minimize risk of user account hijacking we don't persist emulated user refresh_token
                    delete emulatedToken.refresh_token;
                }
                return {
                    ui: ui,
                    emulatedUserToken: emulatedToken,
                    tokenTarget: tokenTarget,
                };
            }));
        };
        /**
         * Function called on each browser storage read.
         * Used to update state from browser -> state.
         */
        AsmStatePersistenceService.prototype.onRead = function (state) {
            if (state) {
                if (state.ui) {
                    this.store.dispatch(new AsmUiUpdate(state.ui));
                }
                if (state.emulatedUserToken) {
                    this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);
                }
                if (state.tokenTarget) {
                    this.authStorageService.setTokenTarget(state.tokenTarget);
                }
            }
        };
        AsmStatePersistenceService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return AsmStatePersistenceService;
    }());
    AsmStatePersistenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmStatePersistenceService_Factory() { return new AsmStatePersistenceService(i0.ɵɵinject(StatePersistenceService), i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(AsmAuthStorageService)); }, token: AsmStatePersistenceService, providedIn: "root" });
    AsmStatePersistenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AsmStatePersistenceService.ctorParameters = function () { return [
        { type: StatePersistenceService },
        { type: i1$2.Store },
        { type: AsmAuthStorageService }
    ]; };

    var AsmStoreModule = /** @class */ (function () {
        function AsmStoreModule() {
        }
        return AsmStoreModule;
    }());
    AsmStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(ASM_FEATURE, reducerToken$5, { metaReducers: metaReducers$1 }),
                        i3.EffectsModule.forFeature(effects$4),
                    ],
                    providers: [reducerProvider$5],
                },] }
    ];

    function asmStatePersistenceFactory(asmStatePersistenceService) {
        var result = function () { return asmStatePersistenceService.initSync(); };
        return result;
    }
    var AsmModule = /** @class */ (function () {
        function AsmModule() {
        }
        AsmModule.forRoot = function () {
            return {
                ngModule: AsmModule,
                providers: [
                    provideDefaultConfig(defaultAsmConfig),
                    {
                        provide: AuthStorageService,
                        useExisting: AsmAuthStorageService,
                    },
                    {
                        provide: AuthService,
                        useExisting: AsmAuthService,
                    },
                    {
                        provide: AuthHttpHeaderService,
                        useExisting: AsmAuthHttpHeaderService,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: asmStatePersistenceFactory,
                        deps: [AsmStatePersistenceService],
                        multi: true,
                    },
                ],
            };
        };
        return AsmModule;
    }());
    AsmModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule, AsmStoreModule],
                },] }
    ];

    var AsmService = /** @class */ (function () {
        function AsmService(store) {
            this.store = store;
        }
        /**
         * Search for customers
         * @param options
         */
        AsmService.prototype.customerSearch = function (options) {
            this.store.dispatch(new CustomerSearch(options));
        };
        /**
         * Reset the customer search result data to the initial state.
         */
        AsmService.prototype.customerSearchReset = function () {
            this.store.dispatch(new CustomerSearchReset());
        };
        /**
         * Returns the customer search result data.
         */
        AsmService.prototype.getCustomerSearchResults = function () {
            return this.store.pipe(i1$2.select(getCustomerSearchResults));
        };
        /**
         * Returns the customer search result loading status.
         */
        AsmService.prototype.getCustomerSearchResultsLoading = function () {
            return this.store.pipe(i1$2.select(getCustomerSearchResultsLoading));
        };
        /**
         * Updates the state of the ASM UI
         */
        AsmService.prototype.updateAsmUiState = function (asmUi) {
            this.store.dispatch(new AsmUiUpdate(asmUi));
        };
        /**
         * Get the state of the ASM UI
         */
        AsmService.prototype.getAsmUiState = function () {
            return this.store.pipe(i1$2.select(getAsmUi));
        };
        return AsmService;
    }());
    AsmService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmService_Factory() { return new AsmService(i0.ɵɵinject(i1$2.Store)); }, token: AsmService, providedIn: "root" });
    AsmService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AsmService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    var CartEntryConnector = /** @class */ (function () {
        function CartEntryConnector(adapter) {
            this.adapter = adapter;
        }
        CartEntryConnector.prototype.add = function (userId, cartId, productCode, quantity) {
            return this.adapter.add(userId, cartId, productCode, quantity);
        };
        CartEntryConnector.prototype.update = function (userId, cartId, entryNumber, qty, pickupStore) {
            return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);
        };
        CartEntryConnector.prototype.remove = function (userId, cartId, entryNumber) {
            return this.adapter.remove(userId, cartId, entryNumber);
        };
        return CartEntryConnector;
    }());
    CartEntryConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartEntryConnector_Factory() { return new CartEntryConnector(i0.ɵɵinject(CartEntryAdapter)); }, token: CartEntryConnector, providedIn: "root" });
    CartEntryConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartEntryConnector.ctorParameters = function () { return [
        { type: CartEntryAdapter }
    ]; };

    var CartEntryEffects = /** @class */ (function () {
        function CartEntryEffects(actions$, cartEntryConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.cartEntryConnector = cartEntryConnector;
            this.contextChange$ = this.actions$.pipe(i3.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.addEntry$ = this.actions$.pipe(i3.ofType(CART_ADD_ENTRY), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) {
                return _this.cartEntryConnector
                    .add(payload.userId, payload.cartId, payload.productCode, payload.quantity)
                    .pipe(operators.map(function (cartModification) { return new CartAddEntrySuccess(Object.assign(Object.assign({}, payload), cartModification)); }), operators.catchError(function (error) { return rxjs.from([
                    new CartAddEntryFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                    new LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]); }));
            }), withdrawOn(this.contextChange$));
            this.removeEntry$ = this.actions$.pipe(i3.ofType(CART_REMOVE_ENTRY), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return _this.cartEntryConnector
                .remove(payload.userId, payload.cartId, payload.entryNumber)
                .pipe(operators.map(function () {
                return new CartRemoveEntrySuccess(Object.assign({}, payload));
            }), operators.catchError(function (error) { return rxjs.from([
                new CartRemoveEntryFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                new LoadCart({
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
            ]); })); }), withdrawOn(this.contextChange$));
            this.updateEntry$ = this.actions$.pipe(i3.ofType(CART_UPDATE_ENTRY), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return _this.cartEntryConnector
                .update(payload.userId, payload.cartId, payload.entryNumber, payload.quantity)
                .pipe(operators.map(function () {
                return new CartUpdateEntrySuccess(Object.assign({}, payload));
            }), operators.catchError(function (error) { return rxjs.from([
                new CartUpdateEntryFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                new LoadCart({
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
            ]); })); }), withdrawOn(this.contextChange$));
        }
        return CartEntryEffects;
    }());
    CartEntryEffects.decorators = [
        { type: i0.Injectable }
    ];
    CartEntryEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CartEntryConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], CartEntryEffects.prototype, "addEntry$", void 0);
    __decorate([
        i3.Effect()
    ], CartEntryEffects.prototype, "removeEntry$", void 0);
    __decorate([
        i3.Effect()
    ], CartEntryEffects.prototype, "updateEntry$", void 0);

    var CartVoucherConnector = /** @class */ (function () {
        function CartVoucherConnector(adapter) {
            this.adapter = adapter;
        }
        CartVoucherConnector.prototype.add = function (userId, cartId, voucherId) {
            return this.adapter.add(userId, cartId, voucherId);
        };
        CartVoucherConnector.prototype.remove = function (userId, cartId, voucherId) {
            return this.adapter.remove(userId, cartId, voucherId);
        };
        return CartVoucherConnector;
    }());
    CartVoucherConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartVoucherConnector_Factory() { return new CartVoucherConnector(i0.ɵɵinject(CartVoucherAdapter)); }, token: CartVoucherConnector, providedIn: "root" });
    CartVoucherConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartVoucherConnector.ctorParameters = function () { return [
        { type: CartVoucherAdapter }
    ]; };

    var CartVoucherEffects = /** @class */ (function () {
        function CartVoucherEffects(actions$, cartVoucherConnector, messageService) {
            var _this = this;
            this.actions$ = actions$;
            this.cartVoucherConnector = cartVoucherConnector;
            this.messageService = messageService;
            this.addCartVoucher$ = this.actions$.pipe(i3.ofType(CART_ADD_VOUCHER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.cartVoucherConnector
                    .add(payload.userId, payload.cartId, payload.voucherId)
                    .pipe(operators.map(function () {
                    _this.showGlobalMessage('voucher.applyVoucherSuccess', payload.voucherId, exports.GlobalMessageType.MSG_TYPE_CONFIRMATION);
                    return new CartAddVoucherSuccess(Object.assign({}, payload));
                }), operators.catchError(function (error) { return rxjs.from([
                    new CartAddVoucherFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                    new CartProcessesDecrement(payload.cartId),
                    new LoadCart({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]); }));
            }));
            this.removeCartVoucher$ = this.actions$.pipe(i3.ofType(CART_REMOVE_VOUCHER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.cartVoucherConnector
                    .remove(payload.userId, payload.cartId, payload.voucherId)
                    .pipe(operators.map(function () {
                    _this.showGlobalMessage('voucher.removeVoucherSuccess', payload.voucherId, exports.GlobalMessageType.MSG_TYPE_INFO);
                    return new CartRemoveVoucherSuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                        voucherId: payload.voucherId,
                    });
                }), operators.catchError(function (error) { return rxjs.from([
                    new CartRemoveVoucherFail({
                        error: makeErrorSerializable(error),
                        cartId: payload.cartId,
                        userId: payload.userId,
                        voucherId: payload.voucherId,
                    }),
                    new LoadCart({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]); }));
            }));
        }
        CartVoucherEffects.prototype.showGlobalMessage = function (text, param, messageType) {
            this.messageService.add({ key: text, params: { voucherCode: param } }, messageType);
        };
        return CartVoucherEffects;
    }());
    CartVoucherEffects.decorators = [
        { type: i0.Injectable }
    ];
    CartVoucherEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CartVoucherConnector },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        i3.Effect()
    ], CartVoucherEffects.prototype, "addCartVoucher$", void 0);
    __decorate([
        i3.Effect()
    ], CartVoucherEffects.prototype, "removeCartVoucher$", void 0);

    var CartConnector = /** @class */ (function () {
        function CartConnector(adapter) {
            this.adapter = adapter;
        }
        CartConnector.prototype.loadAll = function (userId) {
            return this.adapter.loadAll(userId);
        };
        CartConnector.prototype.load = function (userId, cartId) {
            return this.adapter.load(userId, cartId);
        };
        CartConnector.prototype.create = function (userId, oldCartId, toMergeCartGuid) {
            return this.adapter.create(userId, oldCartId, toMergeCartGuid);
        };
        CartConnector.prototype.delete = function (userId, cartId) {
            return this.adapter.delete(userId, cartId);
        };
        CartConnector.prototype.addEmail = function (userId, cartId, email) {
            return this.adapter.addEmail(userId, cartId, email);
        };
        return CartConnector;
    }());
    CartConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartConnector_Factory() { return new CartConnector(i0.ɵɵinject(CartAdapter)); }, token: CartConnector, providedIn: "root" });
    CartConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartConnector.ctorParameters = function () { return [
        { type: CartAdapter }
    ]; };

    var CartEffects = /** @class */ (function () {
        function CartEffects(actions$, cartConnector, store) {
            var _this = this;
            this.actions$ = actions$;
            this.cartConnector = cartConnector;
            this.store = store;
            this.contextChange$ = this.actions$.pipe(i3.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.loadCart$ = this.actions$.pipe(i3.ofType(LOAD_CART), operators.map(function (action) { return action.payload; }), operators.groupBy(function (payload) { return payload.cartId; }), operators.mergeMap(function (group$) { return group$.pipe(operators.switchMap(function (payload) {
                return rxjs.of(payload).pipe(operators.withLatestFrom(_this.store.pipe(i1$2.select(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));
            }), operators.filter(function (_b) {
                var _c = __read(_b, 2), _ = _c[0], hasPendingProcesses = _c[1];
                return !hasPendingProcesses;
            }), operators.map(function (_b) {
                var _c = __read(_b, 1), payload = _c[0];
                return payload;
            }), operators.switchMap(function (payload) {
                return _this.cartConnector.load(payload.userId, payload.cartId).pipe(operators.mergeMap(function (cart) {
                    var actions = [];
                    if (cart) {
                        actions.push(new LoadCartSuccess(Object.assign(Object.assign({}, payload), { cart: cart, cartId: getCartIdByUserId(cart, payload.userId) })));
                        if (payload.cartId === OCC_CART_ID_CURRENT) {
                            // Removing cart from entity object under `current` key as it is no longer needed.
                            // Current cart is loaded under it's code entity.
                            actions.push(new RemoveCart({ cartId: OCC_CART_ID_CURRENT }));
                        }
                    }
                    else {
                        actions = [
                            new LoadCartFail(Object.assign(Object.assign({}, payload), { error: {} })),
                        ];
                    }
                    return actions;
                }), operators.catchError(function (error) {
                    var _a;
                    if ((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) {
                        var couponExpiredErrors = error.error.errors.filter(function (err) { return err.reason === 'invalid'; });
                        if (couponExpiredErrors.length > 0) {
                            // Reload in case of expired coupon.
                            return rxjs.of(new LoadCart(Object.assign({}, payload)));
                        }
                        var cartNotFoundErrors = error.error.errors.filter(function (err) { return isCartNotFoundError(err) ||
                            err.reason === 'UnknownResourceError'; });
                        if (cartNotFoundErrors.length > 0) {
                            // Remove cart as it doesn't exist on backend (selective cart always exists).
                            return rxjs.of(new RemoveCart({ cartId: payload.cartId }));
                        }
                    }
                    return rxjs.of(new LoadCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })));
                }));
            })); }), withdrawOn(this.contextChange$));
            this.createCart$ = this.actions$.pipe(i3.ofType(CREATE_CART), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.cartConnector
                    .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)
                    .pipe(operators.switchMap(function (cart) {
                    var conditionalActions = [];
                    if (payload.oldCartId) {
                        conditionalActions.push(new MergeCartSuccess({
                            extraData: payload.extraData,
                            userId: payload.userId,
                            tempCartId: payload.tempCartId,
                            cartId: getCartIdByUserId(cart, payload.userId),
                            oldCartId: payload.oldCartId,
                        }));
                    }
                    return __spread([
                        new CreateCartSuccess(Object.assign(Object.assign({}, payload), { cart: cart, cartId: getCartIdByUserId(cart, payload.userId) })),
                        new SetTempCart({
                            cart: cart,
                            tempCartId: payload.tempCartId,
                        })
                    ], conditionalActions);
                }), operators.catchError(function (error) { return rxjs.of(new CreateCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) }))); }));
            }), withdrawOn(this.contextChange$));
            this.mergeCart$ = this.actions$.pipe(i3.ofType(MERGE_CART), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(operators.mergeMap(function (currentCart) {
                    return [
                        new CreateCart({
                            userId: payload.userId,
                            oldCartId: payload.cartId,
                            toMergeCartGuid: currentCart ? currentCart.guid : undefined,
                            extraData: payload.extraData,
                            tempCartId: payload.tempCartId,
                        }),
                    ];
                }));
            }), withdrawOn(this.contextChange$));
            // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions
            this.refresh$ = this.actions$.pipe(i3.ofType(CART_ADD_VOUCHER_SUCCESS), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return rxjs.from([
                new CartProcessesDecrement(payload.cartId),
                new LoadCart({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
            ]); }));
            // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity
            this.refreshWithoutProcesses$ = this.actions$.pipe(i3.ofType(CART_ADD_ENTRY_SUCCESS, CART_REMOVE_ENTRY_SUCCESS, CART_UPDATE_ENTRY_SUCCESS, CART_REMOVE_VOUCHER_SUCCESS, CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS), operators.map(function (action) { return action.payload; }), operators.map(function (payload) { return new LoadCart({
                userId: payload.userId,
                cartId: payload.cartId,
            }); }));
            this.resetCartDetailsOnSiteContextChange$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.mergeMap(function () {
                return [new ResetCartDetails()];
            }));
            this.addEmail$ = this.actions$.pipe(i3.ofType(ADD_EMAIL_TO_CART), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.cartConnector
                .addEmail(payload.userId, payload.cartId, payload.email)
                .pipe(operators.mergeMap(function () {
                return [
                    new AddEmailToCartSuccess(Object.assign({}, payload)),
                    new LoadCart({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.from([
                new AddEmailToCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                new LoadCart({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
            ]); })); }), withdrawOn(this.contextChange$));
            this.deleteCart$ = this.actions$.pipe(i3.ofType(DELETE_CART), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.cartConnector.delete(payload.userId, payload.cartId).pipe(operators.map(function () {
                return new DeleteCartSuccess(Object.assign({}, payload));
            }), operators.catchError(function (error) { return rxjs.from([
                new DeleteCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
                // Error might happen in higher backend layer and cart could still be removed.
                // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.
                new LoadCart(Object.assign({}, payload)),
            ]); })); }));
        }
        return CartEffects;
    }());
    CartEffects.decorators = [
        { type: i0.Injectable }
    ];
    CartEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CartConnector },
        { type: i1$2.Store }
    ]; };
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "loadCart$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "createCart$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "mergeCart$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "refresh$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "refreshWithoutProcesses$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "resetCartDetailsOnSiteContextChange$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "addEmail$", void 0);
    __decorate([
        i3.Effect()
    ], CartEffects.prototype, "deleteCart$", void 0);

    var SaveCartConnector = /** @class */ (function () {
        function SaveCartConnector(adapter) {
            this.adapter = adapter;
        }
        SaveCartConnector.prototype.saveCart = function (userId, cartId, saveCartName, saveCartDescription) {
            return this.adapter.saveCart(userId, cartId, saveCartName, saveCartDescription);
        };
        return SaveCartConnector;
    }());
    SaveCartConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function SaveCartConnector_Factory() { return new SaveCartConnector(i0.ɵɵinject(SaveCartAdapter)); }, token: SaveCartConnector, providedIn: "root" });
    SaveCartConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SaveCartConnector.ctorParameters = function () { return [
        { type: SaveCartAdapter }
    ]; };

    var WishListEffects = /** @class */ (function () {
        function WishListEffects(actions$, cartConnector, saveCartConnector, userIdService, store) {
            var _this = this;
            this.actions$ = actions$;
            this.cartConnector = cartConnector;
            this.saveCartConnector = saveCartConnector;
            this.userIdService = userIdService;
            this.store = store;
            this.createWishList$ = this.actions$.pipe(i3.ofType(CREATE_WISH_LIST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.cartConnector.create(payload.userId).pipe(operators.switchMap(function (cart) {
                    return _this.saveCartConnector
                        .saveCart(payload.userId, cart.code, payload.name, payload.description)
                        .pipe(operators.switchMap(function (saveCartResult) { return [
                        new CreateWishListSuccess({
                            cart: saveCartResult.savedCartData,
                            userId: payload.userId,
                        }),
                    ]; }), operators.catchError(function (error) { return rxjs.from([
                        new CreateWishListFail({
                            cartId: cart.code,
                            error: makeErrorSerializable(error),
                        }),
                    ]); }));
                }));
            }));
            this.loadWishList$ = this.actions$.pipe(i3.ofType(LOAD_WISH_LIST), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) {
                var userId = payload.userId, customerId = payload.customerId, tempCartId = payload.tempCartId;
                return _this.cartConnector.loadAll(userId).pipe(operators.switchMap(function (carts) {
                    if (carts) {
                        var wishList = carts.find(function (cart) { return cart.name === getWishlistName(customerId); });
                        if (Boolean(wishList)) {
                            return [
                                new LoadWishListSuccess({
                                    cart: wishList,
                                    userId: userId,
                                    tempCartId: tempCartId,
                                    customerId: customerId,
                                    cartId: getCartIdByUserId(wishList, userId),
                                }),
                                new RemoveCart({ cartId: tempCartId }),
                            ];
                        }
                        else {
                            return [
                                new CreateWishList({
                                    userId: userId,
                                    name: getWishlistName(customerId),
                                }),
                            ];
                        }
                    }
                }), operators.catchError(function (error) { return rxjs.from([
                    new LoadWishListFail({
                        userId: userId,
                        cartId: tempCartId,
                        customerId: customerId,
                        error: makeErrorSerializable(error),
                    }),
                ]); }));
            }));
            this.resetWishList$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.withLatestFrom(this.userIdService.getUserId(), this.store.pipe(i1$2.select(getWishListId))), operators.switchMap(function (_a) {
                var _b = __read(_a, 3), userId = _b[1], wishListId = _b[2];
                if (Boolean(wishListId)) {
                    return _this.cartConnector.load(userId, wishListId).pipe(operators.switchMap(function (wishList) { return [
                        new LoadWishListSuccess({
                            cart: wishList,
                            userId: userId,
                            cartId: getCartIdByUserId(wishList, userId),
                        }),
                    ]; }), operators.catchError(function (error) { return rxjs.from([
                        new LoadWishListFail({
                            userId: userId,
                            cartId: wishListId,
                            error: makeErrorSerializable(error),
                        }),
                    ]); }));
                }
                return rxjs.EMPTY;
            }));
        }
        return WishListEffects;
    }());
    WishListEffects.decorators = [
        { type: i0.Injectable }
    ];
    WishListEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CartConnector },
        { type: SaveCartConnector },
        { type: UserIdService },
        { type: i1$2.Store }
    ]; };
    __decorate([
        i3.Effect()
    ], WishListEffects.prototype, "createWishList$", void 0);
    __decorate([
        i3.Effect()
    ], WishListEffects.prototype, "loadWishList$", void 0);
    __decorate([
        i3.Effect()
    ], WishListEffects.prototype, "resetWishList$", void 0);

    var activeCartInitialState = '';
    var wishListInitialState = '';
    function activeCartReducer(state, action) {
        if (state === void 0) { state = activeCartInitialState; }
        var _a, _b, _c;
        switch (action.type) {
            case LOAD_CART_SUCCESS:
            case CREATE_CART_SUCCESS:
            // point to `temp-${uuid}` cart when we are creating/merging cart
            case CREATE_CART:
                if ((_b = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.extraData) === null || _b === void 0 ? void 0 : _b.active) {
                    return action.meta.entityId;
                }
                else {
                    return state;
                }
            case SET_ACTIVE_CART_ID:
                return action.payload;
            case REMOVE_CART:
            case DELETE_CART_SUCCESS:
                if (((_c = action.payload) === null || _c === void 0 ? void 0 : _c.cartId) === state) {
                    return activeCartInitialState;
                }
                return state;
            case CLEAR_CART_STATE:
                return activeCartInitialState;
        }
        return state;
    }
    var cartEntitiesInitialState = undefined;
    function cartEntitiesReducer(state, action) {
        if (state === void 0) { state = cartEntitiesInitialState; }
        switch (action.type) {
            case LOAD_CART_SUCCESS:
            case CREATE_CART_SUCCESS:
            case CREATE_WISH_LIST_SUCCESS:
            case LOAD_WISH_LIST_SUCCESS:
            case SET_TEMP_CART:
                return action.payload.cart;
        }
        return state;
    }
    function wishListReducer(state, action) {
        if (state === void 0) { state = wishListInitialState; }
        switch (action.type) {
            case CREATE_WISH_LIST_SUCCESS:
            case LOAD_WISH_LIST_SUCCESS:
                return action.meta.entityId;
            case CLEAR_CART_STATE:
                return wishListInitialState;
        }
        return state;
    }

    function clearMultiCartState(reducer) {
        return function (state, action) {
            if (action.type === LOGOUT) {
                state = undefined;
            }
            return reducer(state, action);
        };
    }
    var multiCartMetaReducers = [clearMultiCartState];
    var multiCartReducerToken = new i0.InjectionToken('MultiCartReducers');
    function getMultiCartReducers() {
        return {
            carts: entityProcessesLoaderReducer(MULTI_CART_DATA, cartEntitiesReducer),
            active: activeCartReducer,
            wishList: wishListReducer,
        };
    }
    var multiCartReducerProvider = {
        provide: multiCartReducerToken,
        useFactory: getMultiCartReducers,
    };

    var MultiCartStatePersistenceService = /** @class */ (function () {
        function MultiCartStatePersistenceService(statePersistenceService, store, siteContextParamsService) {
            this.statePersistenceService = statePersistenceService;
            this.store = store;
            this.siteContextParamsService = siteContextParamsService;
            this.subscription = new rxjs.Subscription();
        }
        MultiCartStatePersistenceService.prototype.initSync = function () {
            var _this = this;
            this.subscription.add(this.statePersistenceService.syncWithStorage({
                key: 'cart',
                state$: this.getCartState(),
                context$: this.siteContextParamsService.getValues([
                    BASE_SITE_CONTEXT_ID,
                ]),
                onRead: function (state) { return _this.onRead(state); },
            }));
        };
        MultiCartStatePersistenceService.prototype.getCartState = function () {
            return this.store.pipe(i1$2.select(getMultiCartState), operators.filter(function (state) { return !!state; }), operators.distinctUntilKeyChanged('active'), operators.map(function (state) {
                return {
                    active: state.active,
                };
            }));
        };
        MultiCartStatePersistenceService.prototype.onRead = function (state) {
            this.store.dispatch(new ClearCartState());
            if (state) {
                this.store.dispatch(new SetActiveCartId(state.active));
            }
        };
        MultiCartStatePersistenceService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return MultiCartStatePersistenceService;
    }());
    MultiCartStatePersistenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MultiCartStatePersistenceService_Factory() { return new MultiCartStatePersistenceService(i0.ɵɵinject(StatePersistenceService), i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(SiteContextParamsService)); }, token: MultiCartStatePersistenceService, providedIn: "root" });
    MultiCartStatePersistenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    MultiCartStatePersistenceService.ctorParameters = function () { return [
        { type: StatePersistenceService },
        { type: i1$2.Store },
        { type: SiteContextParamsService }
    ]; };

    function cartStatePersistenceFactory(cartStatePersistenceService, configInit) {
        var result = function () { return configInit.getStableConfig('context').then(function () {
            cartStatePersistenceService.initSync();
        }); };
        return result;
    }
    /**
     * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`
     * will use `current` cart instead of the one saved in browser. This meta reducer
     * sets the value on store initialization to undefined cart which holds active cart loading
     * until the data from storage is restored.
     */
    function uninitializeActiveCartMetaReducerFactory() {
        var metaReducer = function (reducer) { return function (state, action) {
            var newState = Object.assign({}, state);
            if (action.type === '@ngrx/store/init') {
                newState.cart = Object.assign(Object.assign({}, newState.cart), { active: undefined });
            }
            return reducer(newState, action);
        }; };
        return metaReducer;
    }
    /**
     * Complimentary module for cart to store cart id in browser storage.
     * This makes it possible to work on the same anonymous cart even after page refresh.
     */
    var CartPersistenceModule = /** @class */ (function () {
        function CartPersistenceModule() {
        }
        CartPersistenceModule.forRoot = function () {
            return {
                ngModule: CartPersistenceModule,
                providers: [
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: cartStatePersistenceFactory,
                        deps: [MultiCartStatePersistenceService, ConfigInitializerService],
                        multi: true,
                    },
                    {
                        provide: i1$2.META_REDUCERS,
                        useFactory: uninitializeActiveCartMetaReducerFactory,
                        multi: true,
                    },
                ],
            };
        };
        return CartPersistenceModule;
    }());
    CartPersistenceModule.decorators = [
        { type: i0.NgModule }
    ];

    // =====================================================================
    var CartAddEntryEvent = /** @class */ (function () {
        function CartAddEntryEvent() {
        }
        return CartAddEntryEvent;
    }());
    var CartAddEntrySuccessEvent = /** @class */ (function () {
        function CartAddEntrySuccessEvent() {
        }
        return CartAddEntrySuccessEvent;
    }());
    var CartAddEntryFailEvent = /** @class */ (function () {
        function CartAddEntryFailEvent() {
        }
        return CartAddEntryFailEvent;
    }());
    var CartRemoveEntrySuccessEvent = /** @class */ (function () {
        function CartRemoveEntrySuccessEvent() {
        }
        return CartRemoveEntrySuccessEvent;
    }());
    var CartUpdateEntrySuccessEvent = /** @class */ (function () {
        function CartUpdateEntrySuccessEvent() {
        }
        return CartUpdateEntrySuccessEvent;
    }());

    /**
     * Registers events for the active cart
     */
    var CartEventBuilder = /** @class */ (function () {
        function CartEventBuilder(actionsSubject, event, activeCartService) {
            this.actionsSubject = actionsSubject;
            this.event = event;
            this.activeCartService = activeCartService;
            this.register();
        }
        /**
         * Registers events for the active cart
         */
        CartEventBuilder.prototype.register = function () {
            this.registerAddEntry();
            this.registerRemoveEntry();
            this.registerUpdateEntry();
        };
        /**
         * Register events for adding entry to the active cart
         */
        CartEventBuilder.prototype.registerAddEntry = function () {
            this.registerMapped({
                action: CART_ADD_ENTRY,
                event: CartAddEntryEvent,
            });
            this.registerMapped({
                action: CART_ADD_ENTRY_SUCCESS,
                event: CartAddEntrySuccessEvent,
            });
            this.registerMapped({
                action: CART_ADD_ENTRY_FAIL,
                event: CartAddEntryFailEvent,
            });
        };
        CartEventBuilder.prototype.registerRemoveEntry = function () {
            this.registerMapped({
                action: CART_REMOVE_ENTRY_SUCCESS,
                event: CartRemoveEntrySuccessEvent,
            });
        };
        CartEventBuilder.prototype.registerUpdateEntry = function () {
            this.registerMapped({
                action: CART_UPDATE_ENTRY_SUCCESS,
                event: CartUpdateEntrySuccessEvent,
            });
        };
        /**
         * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.
         *
         * @param mapping mapping declaration - from `action` string type to `event` class type
         *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).
         */
        CartEventBuilder.prototype.registerMapped = function (mapping) {
            var eventStream$ = this.getAction(mapping.action).pipe(operators.withLatestFrom(this.activeCartService.getActive()), operators.filter(function (_a) {
                var _b = __read(_a, 2), action = _b[0], activeCart = _b[1];
                return action.payload['cartId'] === activeCart.guid;
            } // assuming that action's payload contains the cart id
            ), operators.map(function (_a) {
                var _b = __read(_a, 2), action = _b[0], activeCart = _b[1];
                return createFrom(mapping.event, Object.assign(Object.assign({}, action.payload), { cartCode: activeCart.code, entry: action.payload.entry
                        ? action.payload.entry
                        : activeCart.entries[Number(action.payload.entryNumber)] }));
            }));
            return this.event.register(mapping.event, eventStream$);
        };
        /**
         * Returns a stream of actions only of a given type(s)
         *
         * @param actionType type(s) of actions
         */
        CartEventBuilder.prototype.getAction = function (actionType) {
            return this.actionsSubject.pipe(i3.ofType.apply(void 0, __spread([].concat(actionType))));
        };
        return CartEventBuilder;
    }());
    CartEventBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartEventBuilder_Factory() { return new CartEventBuilder(i0.ɵɵinject(i1$2.ActionsSubject), i0.ɵɵinject(EventService), i0.ɵɵinject(ActiveCartService)); }, token: CartEventBuilder, providedIn: "root" });
    CartEventBuilder.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    CartEventBuilder.ctorParameters = function () { return [
        { type: i1$2.ActionsSubject },
        { type: EventService },
        { type: ActiveCartService }
    ]; };

    var CartEventModule = /** @class */ (function () {
        function CartEventModule(_CartEventBuilder) {
        }
        return CartEventModule;
    }());
    CartEventModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];
    CartEventModule.ctorParameters = function () { return [
        { type: CartEventBuilder }
    ]; };

    var CMS_FEATURE = 'cms';
    var NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';
    var COMPONENT_ENTITY = '[Cms] Component Entity';

    var LOAD_CMS_COMPONENT = '[Cms] Load Component';
    var LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
    var LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
    var CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
    var LoadCmsComponent = /** @class */ (function (_super) {
        __extends(LoadCmsComponent, _super);
        function LoadCmsComponent(payload) {
            var _this = _super.call(this, COMPONENT_ENTITY, payload.uid) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_COMPONENT;
            return _this;
        }
        return LoadCmsComponent;
    }(EntityLoadAction));
    var LoadCmsComponentFail = /** @class */ (function (_super) {
        __extends(LoadCmsComponentFail, _super);
        function LoadCmsComponentFail(payload) {
            var _this = _super.call(this, COMPONENT_ENTITY, payload.uid, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_COMPONENT_FAIL;
            return _this;
        }
        return LoadCmsComponentFail;
    }(EntityFailAction));
    var LoadCmsComponentSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsComponentSuccess, _super);
        function LoadCmsComponentSuccess(payload) {
            var _this = _super.call(this, COMPONENT_ENTITY, payload.uid || payload.component.uid || '') || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_COMPONENT_SUCCESS;
            return _this;
        }
        return LoadCmsComponentSuccess;
    }(EntitySuccessAction));
    var CmsGetComponentFromPage = /** @class */ (function (_super) {
        __extends(CmsGetComponentFromPage, _super);
        function CmsGetComponentFromPage(payload) {
            var _this = _super.call(this, COMPONENT_ENTITY, [].concat(payload).map(function (cmp) { return cmp.component.uid; })) || this;
            _this.payload = payload;
            _this.type = CMS_GET_COMPONENT_FROM_PAGE;
            return _this;
        }
        return CmsGetComponentFromPage;
    }(EntitySuccessAction));

    var LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';
    var LOAD_CMS_NAVIGATION_ITEMS_FAIL = '[Cms] Load NavigationEntry items Fail';
    var LOAD_CMS_NAVIGATION_ITEMS_SUCCESS = '[Cms] Load NavigationEntry items Success';
    var LoadCmsNavigationItems = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItems, _super);
        function LoadCmsNavigationItems(payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS;
            return _this;
        }
        return LoadCmsNavigationItems;
    }(EntityLoadAction));
    var LoadCmsNavigationItemsFail = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItemsFail, _super);
        function LoadCmsNavigationItemsFail(nodeId, payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, nodeId, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;
            return _this;
        }
        return LoadCmsNavigationItemsFail;
    }(EntityFailAction));
    var LoadCmsNavigationItemsSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsNavigationItemsSuccess, _super);
        function LoadCmsNavigationItemsSuccess(payload) {
            var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;
            return _this;
        }
        return LoadCmsNavigationItemsSuccess;
    }(EntitySuccessAction));

    var LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';
    var LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';
    var LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';
    var CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';
    var CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';
    var LoadCmsPageData = /** @class */ (function (_super) {
        __extends(LoadCmsPageData, _super);
        function LoadCmsPageData(payload) {
            var _this = _super.call(this, payload.type, payload.id) || this;
            _this.payload = payload;
            _this.type = LOAD_CMS_PAGE_DATA;
            return _this;
        }
        return LoadCmsPageData;
    }(EntityLoadAction));
    var LoadCmsPageDataFail = /** @class */ (function (_super) {
        __extends(LoadCmsPageDataFail, _super);
        function LoadCmsPageDataFail(pageContext, error) {
            var _this = _super.call(this, pageContext.type, pageContext.id, error) || this;
            _this.type = LOAD_CMS_PAGE_DATA_FAIL;
            return _this;
        }
        return LoadCmsPageDataFail;
    }(EntityFailAction));
    var LoadCmsPageDataSuccess = /** @class */ (function (_super) {
        __extends(LoadCmsPageDataSuccess, _super);
        function LoadCmsPageDataSuccess(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
            _this.type = LOAD_CMS_PAGE_DATA_SUCCESS;
            return _this;
        }
        return LoadCmsPageDataSuccess;
    }(EntitySuccessAction));
    var CmsSetPageSuccessIndex = /** @class */ (function (_super) {
        __extends(CmsSetPageSuccessIndex, _super);
        function CmsSetPageSuccessIndex(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
            _this.type = CMS_SET_PAGE_SUCCESS_INDEX;
            return _this;
        }
        return CmsSetPageSuccessIndex;
    }(EntitySuccessAction));
    var CmsSetPageFailIndex = /** @class */ (function (_super) {
        __extends(CmsSetPageFailIndex, _super);
        function CmsSetPageFailIndex(pageContext, payload) {
            var _this = _super.call(this, pageContext.type, pageContext.id) || this;
            _this.payload = payload;
            _this.type = CMS_SET_PAGE_FAIL_INDEX;
            return _this;
        }
        return CmsSetPageFailIndex;
    }(EntityFailAction));

    var cmsGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_CMS_COMPONENT: LOAD_CMS_COMPONENT,
        LOAD_CMS_COMPONENT_FAIL: LOAD_CMS_COMPONENT_FAIL,
        LOAD_CMS_COMPONENT_SUCCESS: LOAD_CMS_COMPONENT_SUCCESS,
        CMS_GET_COMPONENT_FROM_PAGE: CMS_GET_COMPONENT_FROM_PAGE,
        LoadCmsComponent: LoadCmsComponent,
        LoadCmsComponentFail: LoadCmsComponentFail,
        LoadCmsComponentSuccess: LoadCmsComponentSuccess,
        CmsGetComponentFromPage: CmsGetComponentFromPage,
        LOAD_CMS_NAVIGATION_ITEMS: LOAD_CMS_NAVIGATION_ITEMS,
        LOAD_CMS_NAVIGATION_ITEMS_FAIL: LOAD_CMS_NAVIGATION_ITEMS_FAIL,
        LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: LOAD_CMS_NAVIGATION_ITEMS_SUCCESS,
        LoadCmsNavigationItems: LoadCmsNavigationItems,
        LoadCmsNavigationItemsFail: LoadCmsNavigationItemsFail,
        LoadCmsNavigationItemsSuccess: LoadCmsNavigationItemsSuccess,
        LOAD_CMS_PAGE_DATA: LOAD_CMS_PAGE_DATA,
        LOAD_CMS_PAGE_DATA_FAIL: LOAD_CMS_PAGE_DATA_FAIL,
        LOAD_CMS_PAGE_DATA_SUCCESS: LOAD_CMS_PAGE_DATA_SUCCESS,
        CMS_SET_PAGE_SUCCESS_INDEX: CMS_SET_PAGE_SUCCESS_INDEX,
        CMS_SET_PAGE_FAIL_INDEX: CMS_SET_PAGE_FAIL_INDEX,
        LoadCmsPageData: LoadCmsPageData,
        LoadCmsPageDataFail: LoadCmsPageDataFail,
        LoadCmsPageDataSuccess: LoadCmsPageDataSuccess,
        CmsSetPageSuccessIndex: CmsSetPageSuccessIndex,
        CmsSetPageFailIndex: CmsSetPageFailIndex
    });

    var getCmsState = i1$2.createFeatureSelector(CMS_FEATURE);

    var ɵ0$C = function (state) { return state.components; };
    var getComponentsState = i1$2.createSelector(getCmsState, ɵ0$C);
    var componentsContextSelectorFactory = function (uid) {
        return i1$2.createSelector(getComponentsState, function (componentsState) { return entitySelector(componentsState, uid); });
    };
    var componentsLoaderStateSelectorFactory = function (uid, context) {
        return i1$2.createSelector(componentsContextSelectorFactory(uid), function (componentsContext) { return (componentsContext &&
            componentsContext.pageContext &&
            componentsContext.pageContext[context]) ||
            initialLoaderState; });
    };
    /**
     * This selector will return:
     *   - true: component for this context exists
     *   - false: component for this context doesn't exist
     *   - undefined: if the exists status for component is unknown
     *
     * @param uid
     * @param context
     */
    var componentsContextExistsSelectorFactory = function (uid, context) {
        return i1$2.createSelector(componentsLoaderStateSelectorFactory(uid, context), function (loaderState) { return loaderValueSelector(loaderState); });
    };
    var componentsDataSelectorFactory = function (uid) {
        return i1$2.createSelector(componentsContextSelectorFactory(uid), function (state) { return state ? state.component : undefined; });
    };
    /**
     * This selector will return:
     *   - CmsComponent instance: if we have component data for specified context
     *   - null: if there is no component data for specified context
     *   - undefined: if status of component data for specified context is unknown
     *
     * @param uid
     * @param context
     */
    var componentsSelectorFactory = function (uid, context) {
        return i1$2.createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), function (componentState, exists) {
            switch (exists) {
                case true:
                    return componentState;
                case false:
                    return null;
                case undefined:
                    return undefined;
            }
        });
    };

    var ɵ0$D = function (state) { return state.navigation; };
    var getNavigationEntryItemState = i1$2.createSelector(getCmsState, ɵ0$D);
    var getSelectedNavigationEntryItemState = function (nodeId) {
        return i1$2.createSelector(getNavigationEntryItemState, function (nodes) { return entityLoaderStateSelector(nodes, nodeId); });
    };
    var getNavigationEntryItems = function (nodeId) {
        return i1$2.createSelector(getSelectedNavigationEntryItemState(nodeId), function (itemState) { return loaderValueSelector(itemState); });
    };

    var getPageEntitiesSelector = function (state) { return state.pageData.entities; };
    var ɵ0$E = getPageEntitiesSelector;
    var getIndexByType = function (index, type) {
        switch (type) {
            case exports.PageType.CONTENT_PAGE: {
                return index.content;
            }
            case exports.PageType.PRODUCT_PAGE: {
                return index.product;
            }
            case exports.PageType.CATEGORY_PAGE: {
                return index.category;
            }
            case exports.PageType.CATALOG_PAGE: {
                return index.catalog;
            }
        }
        return { entities: {} };
    };
    var ɵ1$s = getIndexByType;
    var getPageComponentTypesSelector = function (page) {
        var e_1, _a, e_2, _b;
        var componentTypes = new Set();
        if (page && page.slots) {
            try {
                for (var _c = __values(Object.keys(page.slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var slot = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(page.slots[slot].components || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var component = _f.value;
                            componentTypes.add(component.flexType);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return Array.from(componentTypes);
    };
    var ɵ2$j = getPageComponentTypesSelector;
    var ɵ3$c = function (state) { return state.page; };
    var getPageState = i1$2.createSelector(getCmsState, ɵ3$c);
    var ɵ4$6 = function (page) { return page.index; };
    var getPageStateIndex = i1$2.createSelector(getPageState, ɵ4$6);
    var getPageStateIndexEntityLoaderState = function (pageContext) { return i1$2.createSelector(getPageStateIndex, function (index) { return getIndexByType(index, pageContext.type); }); };
    var getPageStateIndexLoaderState = function (pageContext) { return i1$2.createSelector(getPageStateIndexEntityLoaderState(pageContext), function (indexState) { return entityLoaderStateSelector(indexState, pageContext.id); }); };
    var getPageStateIndexValue = function (pageContext) { return i1$2.createSelector(getPageStateIndexLoaderState(pageContext), function (entity) { return loaderValueSelector(entity); }); };
    var getPageEntities = i1$2.createSelector(getPageState, getPageEntitiesSelector);
    var getPageData = function (pageContext) { return i1$2.createSelector(getPageEntities, getPageStateIndexValue(pageContext), function (entities, indexValue) { return entities[indexValue]; }); };
    var getPageComponentTypes = function (pageContext) { return i1$2.createSelector(getPageData(pageContext), function (pageData) { return getPageComponentTypesSelector(pageData); }); };
    var getCurrentSlotSelectorFactory = function (pageContext, position) {
        return i1$2.createSelector(getPageData(pageContext), function (entity) {
            if (entity) {
                return entity.slots[position] || { components: [] };
            }
        });
    };

    var cmsGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getComponentsState: getComponentsState,
        componentsContextSelectorFactory: componentsContextSelectorFactory,
        componentsLoaderStateSelectorFactory: componentsLoaderStateSelectorFactory,
        componentsContextExistsSelectorFactory: componentsContextExistsSelectorFactory,
        componentsDataSelectorFactory: componentsDataSelectorFactory,
        componentsSelectorFactory: componentsSelectorFactory,
        ɵ0: ɵ0$C,
        getCmsState: getCmsState,
        getNavigationEntryItemState: getNavigationEntryItemState,
        getSelectedNavigationEntryItemState: getSelectedNavigationEntryItemState,
        getNavigationEntryItems: getNavigationEntryItems,
        getPageState: getPageState,
        getPageStateIndex: getPageStateIndex,
        getPageStateIndexEntityLoaderState: getPageStateIndexEntityLoaderState,
        getPageStateIndexLoaderState: getPageStateIndexLoaderState,
        getPageStateIndexValue: getPageStateIndexValue,
        getPageEntities: getPageEntities,
        getPageData: getPageData,
        getPageComponentTypes: getPageComponentTypes,
        getCurrentSlotSelectorFactory: getCurrentSlotSelectorFactory,
        ɵ1: ɵ1$s,
        ɵ2: ɵ2$j,
        ɵ3: ɵ3$c,
        ɵ4: ɵ4$6
    });

    var CURRENT_CONTEXT_KEY = 'current';
    /**
     *
     * Serializes the provided page context.
     * The pattern used for serialization is: `pageContext.type-pageContext.id`.
     *
     * @param pageContext to serialize
     * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.
     * Otherwise, the page context if fully serialized.
     */
    function serializePageContext(pageContext, ignoreContentPageId) {
        if (!pageContext) {
            return CURRENT_CONTEXT_KEY;
        }
        if (ignoreContentPageId && pageContext.type === exports.PageType.CONTENT_PAGE) {
            return "" + pageContext.type;
        }
        return pageContext.type + "-" + pageContext.id;
    }

    var CmsService = /** @class */ (function () {
        function CmsService(store, routingService) {
            this.store = store;
            this.routingService = routingService;
            this.components = {};
        }
        /**
         * Get current CMS page data
         */
        CmsService.prototype.getCurrentPage = function () {
            var _this = this;
            return this.routingService
                .getPageContext()
                .pipe(operators.switchMap(function (pageContext) { return _this.store.select(getPageData(pageContext)); }));
        };
        /**
         * Get CMS component data by uid
         *
         * This method can be safely and optimally used to load multiple components data at the same time.
         * Calling getComponentData multiple times for different components will always result in optimized
         * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.
         *
         * In case the component data is not present, the method will load it.
         * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.
         *
         * @param uid CMS component uid
         * @param pageContext if provided, it will be used to lookup the component data.
         */
        CmsService.prototype.getComponentData = function (uid, pageContext) {
            var context = serializePageContext(pageContext, true);
            if (!this.components[uid]) {
                // create the component data structure, if it doesn't already exist
                this.components[uid] = {};
            }
            var component = this.components[uid];
            if (!component[context]) {
                // create the component data and assign it to the component's context
                component[context] = this.createComponentData(uid, pageContext);
            }
            return component[context];
        };
        CmsService.prototype.createComponentData = function (uid, pageContext) {
            var _this = this;
            if (!pageContext) {
                return this.routingService.getPageContext().pipe(operators.filter(function (currentContext) { return !!currentContext; }), operators.switchMap(function (currentContext) { return _this.getComponentData(uid, currentContext); }));
            }
            var context = serializePageContext(pageContext, true);
            var loading$ = rxjs.combineLatest([
                this.routingService.getNextPageContext(),
                this.store.pipe(i1$2.select(componentsLoaderStateSelectorFactory(uid, context))),
            ]).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (_a) {
                var _b = __read(_a, 2), nextContext = _b[0], loadingState = _b[1];
                var attemptedLoad = loadingState.loading || loadingState.success || loadingState.error;
                // if the requested context is the same as the one that's currently being navigated to
                // (as it might already been triggered and might be available shortly from page data)
                // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed
                var couldBeLoadedWithPageData = nextContext
                    ? serializePageContext(nextContext, true) === context
                    : false;
                if (!attemptedLoad && !couldBeLoadedWithPageData) {
                    _this.store.dispatch(new LoadCmsComponent({ uid: uid, pageContext: pageContext }));
                }
            }));
            var component$ = this.store.pipe(i1$2.select(componentsSelectorFactory(uid, context)), operators.filter(function (component) { return component !== undefined; }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return component$; }).pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Given the position, get the content slot data
         * @param position : content slot position
         */
        CmsService.prototype.getContentSlot = function (position) {
            var _this = this;
            return this.routingService
                .getPageContext()
                .pipe(operators.switchMap(function (pageContext) { return _this.store.pipe(i1$2.select(getCurrentSlotSelectorFactory(pageContext, position)), operators.filter(Boolean)); }));
        };
        /**
         * Given navigation node uid, get items (with id and type) inside the navigation entries
         * @param navigationNodeUid : uid of the navigation node
         */
        CmsService.prototype.getNavigationEntryItems = function (navigationNodeUid) {
            return this.store.pipe(i1$2.select(getNavigationEntryItems(navigationNodeUid)));
        };
        /**
         * Load navigation items data
         * @param rootUid : the uid of the root navigation node
         * @param itemList : list of items (with id and type)
         */
        CmsService.prototype.loadNavigationItems = function (rootUid, itemList) {
            this.store.dispatch(new LoadCmsNavigationItems({
                nodeId: rootUid,
                items: itemList,
            }));
        };
        /**
         * Refresh the content of the latest cms page
         */
        CmsService.prototype.refreshLatestPage = function () {
            var _this = this;
            this.routingService
                .getPageContext()
                .pipe(operators.take(1))
                .subscribe(function (pageContext) { return _this.store.dispatch(new LoadCmsPageData(pageContext)); });
        };
        /**
         * Refresh the cms page content by page Id
         * @param pageId
         */
        CmsService.prototype.refreshPageById = function (pageId) {
            var pageContext = { id: pageId };
            this.store.dispatch(new LoadCmsPageData(pageContext));
        };
        /**
         * Refresh cms component's content
         * @param uid component uid
         * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.
         * If not specified, 'current' page context is used.
         */
        CmsService.prototype.refreshComponent = function (uid, pageContext) {
            this.store.dispatch(new LoadCmsComponent({ uid: uid, pageContext: pageContext }));
        };
        /**
         * Given pageContext, return the CMS page data
         * @param pageContext
         */
        CmsService.prototype.getPageState = function (pageContext) {
            return this.store.pipe(i1$2.select(getPageData(pageContext)));
        };
        /**
         * Given pageContext, return the CMS page data
         * @param pageContext
         */
        CmsService.prototype.getPageComponentTypes = function (pageContext) {
            return this.store.pipe(i1$2.select(getPageComponentTypes(pageContext)));
        };
        /**
         * Given pageContext, return whether the CMS page data exists or not
         * @param pageContext
         */
        CmsService.prototype.hasPage = function (pageContext, forceReload) {
            var _this = this;
            if (forceReload === void 0) { forceReload = false; }
            return this.store.pipe(i1$2.select(getPageStateIndexLoaderState(pageContext)), operators.tap(function (entity) {
                var attemptedLoad = entity.loading || entity.success || entity.error;
                var shouldReload = forceReload && !entity.loading;
                if (!attemptedLoad || shouldReload) {
                    _this.store.dispatch(new LoadCmsPageData(pageContext));
                    forceReload = false;
                }
            }), operators.filter(function (entity) {
                if (!entity.hasOwnProperty('value')) {
                    // if we have incomplete state from SSR failed load transfer state,
                    // we should wait for reload and actual value
                    return false;
                }
                return entity.success || (entity.error && !entity.loading);
            }), operators.pluck('success'), operators.catchError(function () { return rxjs.of(false); }));
        };
        /**
         * Given pageContext, return the CMS page data
         **/
        CmsService.prototype.getPage = function (pageContext, forceReload) {
            var _this = this;
            if (forceReload === void 0) { forceReload = false; }
            return this.hasPage(pageContext, forceReload).pipe(operators.switchMap(function (hasPage) { return hasPage ? _this.getPageState(pageContext) : rxjs.of(null); }));
        };
        CmsService.prototype.getPageIndex = function (pageContext) {
            return this.store.pipe(i1$2.select(getPageStateIndexValue(pageContext)));
        };
        CmsService.prototype.setPageFailIndex = function (pageContext, value) {
            this.store.dispatch(new CmsSetPageFailIndex(pageContext, value));
        };
        return CmsService;
    }());
    CmsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsService_Factory() { return new CmsService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(RoutingService)); }, token: CmsService, providedIn: "root" });
    CmsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CmsService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: RoutingService }
    ]; };

    /**
     * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`
     * and the `CartPageTemplate`). If the cart page matches this template, the more
     * generic `ContentPageMetaResolver` is overriden by this resolver.
     *
     * The page title and robots are resolved in this implementation only.
     */
    var CartPageMetaResolver = /** @class */ (function (_super) {
        __extends(CartPageMetaResolver, _super);
        function CartPageMetaResolver(cms) {
            var _this = _super.call(this) || this;
            _this.cms = cms;
            _this.cms$ = _this.cms
                .getCurrentPage()
                .pipe(operators.filter(function (page) { return !!page; }));
            _this.pageType = exports.PageType.CONTENT_PAGE;
            _this.pageTemplate = 'CartPageTemplate';
            return _this;
        }
        /**
         * Resolves the page title, which is driven by the backend.
         */
        CartPageMetaResolver.prototype.resolveTitle = function () {
            return this.cms$.pipe(operators.map(function (p) { return p.title; }));
        };
        /**
         * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.
         */
        CartPageMetaResolver.prototype.resolveRobots = function () {
            return rxjs.of([exports.PageRobotsMeta.NOFOLLOW, exports.PageRobotsMeta.NOINDEX]);
        };
        return CartPageMetaResolver;
    }(PageMetaResolver));
    CartPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartPageMetaResolver_Factory() { return new CartPageMetaResolver(i0.ɵɵinject(CmsService)); }, token: CartPageMetaResolver, providedIn: "root" });
    CartPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartPageMetaResolver.ctorParameters = function () { return [
        { type: CmsService }
    ]; };

    var MultiCartEffects = /** @class */ (function () {
        function MultiCartEffects(actions$) {
            this.actions$ = actions$;
            this.setTempCart$ = this.actions$.pipe(i3.ofType(SET_TEMP_CART), operators.map(function (action) {
                return new RemoveCart({ cartId: action.payload.tempCartId });
            }));
            // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies
            this.processesIncrement$ = this.actions$.pipe(i3.ofType(CART_ADD_VOUCHER), operators.map(function (action) { return action.payload; }), operators.map(function (payload) { return new CartProcessesIncrement(payload.cartId); }));
        }
        return MultiCartEffects;
    }());
    MultiCartEffects.decorators = [
        { type: i0.Injectable }
    ];
    MultiCartEffects.ctorParameters = function () { return [
        { type: i3.Actions }
    ]; };
    __decorate([
        i3.Effect()
    ], MultiCartEffects.prototype, "setTempCart$", void 0);
    __decorate([
        i3.Effect()
    ], MultiCartEffects.prototype, "processesIncrement$", void 0);

    var effects$5 = [
        CartEffects,
        CartEntryEffects,
        CartVoucherEffects,
        WishListEffects,
        MultiCartEffects,
    ];
    var MultiCartStoreModule = /** @class */ (function () {
        function MultiCartStoreModule() {
        }
        return MultiCartStoreModule;
    }());
    MultiCartStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {
                            metaReducers: multiCartMetaReducers,
                        }),
                        i3.EffectsModule.forFeature(effects$5),
                    ],
                    providers: [multiCartReducerProvider],
                },] }
    ];

    var CartModule = /** @class */ (function () {
        function CartModule() {
        }
        CartModule.forRoot = function () {
            return {
                ngModule: CartModule,
                providers: [
                    {
                        provide: PageMetaResolver,
                        useExisting: CartPageMetaResolver,
                        multi: true,
                    },
                ],
            };
        };
        return CartModule;
    }());
    CartModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        MultiCartStoreModule,
                        CartEventModule,
                        CartPersistenceModule.forRoot(),
                    ],
                },] }
    ];

    var CartConfig = /** @class */ (function () {
        function CartConfig() {
        }
        return CartConfig;
    }());
    CartConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartConfig_Factory() { return i0.ɵɵinject(Config); }, token: CartConfig, providedIn: "root" });
    CartConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var CartVoucherService = /** @class */ (function () {
        function CartVoucherService(store, activeCartService, userIdService) {
            this.store = store;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        CartVoucherService.prototype.addVoucher = function (voucherId, cartId) {
            var _this = this;
            this.combineUserAndCartId(cartId).subscribe(function (_a) {
                var _b = __read(_a, 2), occUserId = _b[0], cartIdentifier = _b[1];
                return _this.store.dispatch(new CartAddVoucher({
                    userId: occUserId,
                    cartId: cartIdentifier,
                    voucherId: voucherId,
                }));
            });
        };
        CartVoucherService.prototype.removeVoucher = function (voucherId, cartId) {
            var _this = this;
            this.combineUserAndCartId(cartId).subscribe(function (_a) {
                var _b = __read(_a, 2), occUserId = _b[0], cartIdentifier = _b[1];
                return _this.store.dispatch(new CartRemoveVoucher({
                    userId: occUserId,
                    cartId: cartIdentifier,
                    voucherId: voucherId,
                }));
            });
        };
        // TODO(#7241): Remove when switching to event system for add voucher
        /**
         * Get add voucher process error flag
         * @deprecated since 2.0
         */
        CartVoucherService.prototype.getAddVoucherResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        // TODO(#7241): Remove when switching to event system for add voucher
        /**
         * Get add voucher process success flag
         * @deprecated since 2.0
         */
        CartVoucherService.prototype.getAddVoucherResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        // TODO(#7241): Remove when switching to event system for add voucher
        /**
         * Get add voucher process loading flag
         * @deprecated since 2.0
         */
        CartVoucherService.prototype.getAddVoucherResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID)));
        };
        // TODO(#7241): Remove when switching to event system for add voucher
        /**
         * Reset add voucher process
         * @deprecated since 2.0
         */
        CartVoucherService.prototype.resetAddVoucherProcessingState = function () {
            this.store.dispatch(new CartResetAddVoucher());
        };
        CartVoucherService.prototype.combineUserAndCartId = function (cartId) {
            if (cartId) {
                return this.userIdService.getUserId().pipe(operators.take(1), operators.map(function (userId) { return [userId, cartId]; }));
            }
            else {
                return rxjs.combineLatest([
                    this.userIdService.getUserId(),
                    this.activeCartService.getActiveCartId(),
                ]).pipe(operators.take(1));
            }
        };
        return CartVoucherService;
    }());
    CartVoucherService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartVoucherService_Factory() { return new CartVoucherService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ActiveCartService), i0.ɵɵinject(UserIdService)); }, token: CartVoucherService, providedIn: "root" });
    CartVoucherService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartVoucherService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ActiveCartService },
        { type: UserIdService }
    ]; };

    var CartConfigService = /** @class */ (function () {
        function CartConfigService(config) {
            this.config = config;
        }
        CartConfigService.prototype.isSelectiveCartEnabled = function () {
            var _a, _b, _c;
            return Boolean((_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.cart) === null || _b === void 0 ? void 0 : _b.selectiveCart) === null || _c === void 0 ? void 0 : _c.enabled);
        };
        return CartConfigService;
    }());
    CartConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartConfigService_Factory() { return new CartConfigService(i0.ɵɵinject(CartConfig)); }, token: CartConfigService, providedIn: "root" });
    CartConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CartConfigService.ctorParameters = function () { return [
        { type: CartConfig }
    ]; };

    var SelectiveCartService = /** @class */ (function () {
        function SelectiveCartService(store, userService, multiCartService, baseSiteService, cartConfigService, userIdService) {
            var _this = this;
            this.store = store;
            this.userService = userService;
            this.multiCartService = multiCartService;
            this.baseSiteService = baseSiteService;
            this.cartConfigService = cartConfigService;
            this.userIdService = userIdService;
            this.cartId$ = new rxjs.BehaviorSubject(undefined);
            this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
            this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
            this.cartSelector$ = this.cartId$.pipe(operators.switchMap(function (cartId) {
                _this.cartId = cartId;
                return _this.multiCartService.getCartEntity(cartId);
            }));
            rxjs.combineLatest([
                this.userService.get(),
                this.baseSiteService.getActive(),
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), user = _b[0], activeBaseSite = _b[1];
                if (user && user.customerId && activeBaseSite) {
                    _this.customerId = user.customerId;
                    _this.cartId$.next("selectivecart" + activeBaseSite + _this.customerId);
                }
                else if (user && !user.customerId) {
                    _this.cartId$.next(undefined);
                }
            });
            this.userIdService.getUserId().subscribe(function (userId) {
                _this.userId = userId;
                if (_this.isJustLoggedIn(userId)) {
                    _this.load();
                }
                _this.previousUserId = userId;
            });
            this.selectiveCart$ = this.cartSelector$.pipe(operators.map(function (cartEntity) {
                return {
                    cart: cartEntity.value,
                    loading: cartEntity.loading,
                    loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
                };
            }), operators.filter(function (_a) {
                var loading = _a.loading;
                return !loading;
            }), operators.tap(function (_a) {
                var cart = _a.cart, loaded = _a.loaded;
                if (_this.cartId && _this.isEmpty(cart) && !loaded) {
                    _this.load();
                }
            }), operators.map(function (_a) {
                var cart = _a.cart;
                return (cart ? cart : {});
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        SelectiveCartService.prototype.getCart = function () {
            return this.selectiveCart$;
        };
        SelectiveCartService.prototype.getEntries = function () {
            return this.multiCartService.getEntries(this.cartId);
        };
        SelectiveCartService.prototype.getLoaded = function () {
            return this.cartSelector$.pipe(operators.map(function (cart) { return (cart.success || cart.error) && !cart.loading; }));
        };
        SelectiveCartService.prototype.load = function () {
            if (this.isLoggedIn(this.userId) && this.cartId) {
                this.multiCartService.loadCart({
                    userId: this.userId,
                    cartId: this.cartId,
                });
            }
        };
        SelectiveCartService.prototype.addEntry = function (productCode, quantity) {
            var _this = this;
            var loadAttempted = false;
            this.cartSelector$
                .pipe(operators.filter(function () { return !loadAttempted; }), operators.switchMap(function (cartState) {
                if (_this.isEmpty(cartState.value) && !cartState.loading) {
                    loadAttempted = true;
                    _this.load();
                }
                return rxjs.of(cartState);
            }), operators.filter(function (cartState) { return !_this.isEmpty(cartState.value); }), operators.take(1))
                .subscribe(function () {
                _this.multiCartService.addEntry(_this.userId, _this.cartId, productCode, quantity);
            });
        };
        SelectiveCartService.prototype.removeEntry = function (entry) {
            this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
        };
        SelectiveCartService.prototype.updateEntry = function (entryNumber, quantity) {
            this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
        };
        SelectiveCartService.prototype.getEntry = function (productCode) {
            return this.multiCartService.getEntry(this.cartId, productCode);
        };
        /**
         * Indicates if selectiveCart feature is enabled based on cart configuration.
         */
        SelectiveCartService.prototype.isEnabled = function () {
            return this.cartConfigService.isSelectiveCartEnabled();
        };
        SelectiveCartService.prototype.isEmpty = function (cart) {
            return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
        };
        SelectiveCartService.prototype.isJustLoggedIn = function (userId) {
            return (this.isLoggedIn(userId) &&
                this.previousUserId !== userId && // *just* logged in
                this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
            );
        };
        SelectiveCartService.prototype.isLoggedIn = function (userId) {
            return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;
        };
        return SelectiveCartService;
    }());
    SelectiveCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SelectiveCartService_Factory() { return new SelectiveCartService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserService), i0.ɵɵinject(MultiCartService), i0.ɵɵinject(BaseSiteService), i0.ɵɵinject(CartConfigService), i0.ɵɵinject(UserIdService)); }, token: SelectiveCartService, providedIn: "root" });
    SelectiveCartService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SelectiveCartService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserService },
        { type: MultiCartService },
        { type: BaseSiteService },
        { type: CartConfigService },
        { type: UserIdService }
    ]; };

    var WishListService = /** @class */ (function () {
        function WishListService(store, userService, multiCartService, userIdService) {
            this.store = store;
            this.userService = userService;
            this.multiCartService = multiCartService;
            this.userIdService = userIdService;
        }
        WishListService.prototype.createWishList = function (userId, name, description) {
            this.store.dispatch(new CreateWishList({ userId: userId, name: name, description: description }));
        };
        WishListService.prototype.getWishList = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.getWishListId(),
                this.userService.get(),
                this.userIdService.getUserId(),
            ]).pipe(operators.distinctUntilChanged(), operators.tap(function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], user = _b[1], userId = _b[2];
                if (!Boolean(wishListId) &&
                    userId !== OCC_USER_ID_ANONYMOUS &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            }), operators.filter(function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return _this.multiCartService.getCart(wishListId);
            }));
        };
        WishListService.prototype.loadWishList = function (userId, customerId) {
            this.store.dispatch(new LoadWishList({
                userId: userId,
                customerId: customerId,
                tempCartId: getWishlistName(customerId),
            }));
        };
        WishListService.prototype.addEntry = function (productCode) {
            var _this = this;
            this.getWishListId()
                .pipe(operators.distinctUntilChanged(), operators.withLatestFrom(this.userIdService.getUserId(), this.userService.get()), operators.tap(function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], userId = _b[1], user = _b[2];
                if (!Boolean(wishListId) &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            }), operators.filter(function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            }), operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), wishListId = _b[0], userId = _b[1];
                return _this.multiCartService.addEntry(userId, wishListId, productCode, 1);
            });
        };
        WishListService.prototype.removeEntry = function (entry) {
            var _this = this;
            this.getWishListId()
                .pipe(operators.distinctUntilChanged(), operators.withLatestFrom(this.userIdService.getUserId(), this.userService.get()), operators.tap(function (_a) {
                var _b = __read(_a, 3), wishListId = _b[0], userId = _b[1], user = _b[2];
                if (!Boolean(wishListId) &&
                    Boolean(user) &&
                    Boolean(user.customerId)) {
                    _this.loadWishList(userId, user.customerId);
                }
            }), operators.filter(function (_a) {
                var _b = __read(_a, 1), wishListId = _b[0];
                return Boolean(wishListId);
            }), operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), wishListId = _b[0], userId = _b[1];
                return _this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber);
            });
        };
        WishListService.prototype.getWishListLoading = function () {
            var _this = this;
            return this.getWishListId().pipe(operators.switchMap(function (wishListId) { return _this.multiCartService
                .isStable(wishListId)
                .pipe(operators.map(function (stable) { return !stable; })); }));
        };
        WishListService.prototype.getWishListId = function () {
            return this.store.pipe(i1$2.select(getWishListId));
        };
        return WishListService;
    }());
    WishListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WishListService_Factory() { return new WishListService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserService), i0.ɵɵinject(MultiCartService), i0.ɵɵinject(UserIdService)); }, token: WishListService, providedIn: "root" });
    WishListService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    WishListService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserService },
        { type: MultiCartService },
        { type: UserIdService }
    ]; };

    var defaultCmsModuleConfig = {
        backend: {
            occ: {
                endpoints: {
                    component: 'cms/components/${id}',
                    components: 'cms/components',
                    pages: 'cms/pages',
                    page: 'cms/pages/${id}',
                },
                legacy: false,
            },
        },
        cmsComponents: {},
    };

    /**
     * Resolves the breadcrumb for the Angular ActivatedRouteSnapshot
     */
    var DefaultRoutePageMetaResolver = /** @class */ (function () {
        function DefaultRoutePageMetaResolver(translation) {
            this.translation = translation;
        }
        /**
         * Resolves breadcrumb based on the given url and the breadcrumb config.
         *
         * - When breadcrumb config is empty, it returns an empty breadcrumb.
         * - When breadcrumb config is a string or object with `i18n` property,
         *    it translates it and use as a label of the returned breadcrumb.
         * - When breadcrumb config is an object with property `raw`, then
         *    it's used as a label of the returned breadcrumb.
         */
        DefaultRoutePageMetaResolver.prototype.resolveBreadcrumbs = function (_a) {
            var url = _a.url, pageMetaConfig = _a.pageMetaConfig;
            var breadcrumbConfig = pageMetaConfig === null || pageMetaConfig === void 0 ? void 0 : pageMetaConfig.breadcrumb;
            if (!breadcrumbConfig) {
                return rxjs.of([]);
            }
            if (typeof breadcrumbConfig !== 'string' && breadcrumbConfig.raw) {
                return rxjs.of([{ link: url, label: breadcrumbConfig.raw }]);
            }
            return this.translateBreadcrumbLabel(breadcrumbConfig).pipe(operators.map(function (label) { return [{ label: label, link: url }]; }));
        };
        /**
         * Translates the configured breadcrumb label
         */
        DefaultRoutePageMetaResolver.prototype.translateBreadcrumbLabel = function (breadcrumbConfig) {
            var _this = this;
            var i18nKey = typeof breadcrumbConfig === 'string'
                ? breadcrumbConfig
                : breadcrumbConfig.i18n;
            return this.getParams().pipe(operators.switchMap(function (params) { return _this.translation.translate(i18nKey, params !== null && params !== void 0 ? params : {}); }));
        };
        /**
         * Resolves dynamic data for the whole resolver.
         */
        DefaultRoutePageMetaResolver.prototype.getParams = function () {
            return rxjs.of({});
        };
        return DefaultRoutePageMetaResolver;
    }());
    DefaultRoutePageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function DefaultRoutePageMetaResolver_Factory() { return new DefaultRoutePageMetaResolver(i0.ɵɵinject(TranslationService)); }, token: DefaultRoutePageMetaResolver, providedIn: "root" });
    DefaultRoutePageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DefaultRoutePageMetaResolver.ctorParameters = function () { return [
        { type: TranslationService }
    ]; };

    /**
     * Resolves the page meta based on the Angular Activated Routes
     */
    var RoutingPageMetaResolver = /** @class */ (function () {
        function RoutingPageMetaResolver(activatedRoutesService, injector) {
            var _this = this;
            this.activatedRoutesService = activatedRoutesService;
            this.injector = injector;
            /**
             * Array of activated routes, excluding the special Angular `root` route.
             */
            this.routes$ = this.activatedRoutesService.routes$.pipe(
            // drop the first route - the special `root` route:
            operators.map(function (routes) { return (routes = routes.slice(1, routes.length)); }));
            /**
             * Array of activated routes together with precalculated extras:
             *
             * - route's page meta resolver
             * - route's absolute string URL
             *
             * In case when there is no page meta resolver configured for a specific route,
             * it inherits its parent's resolver.
             *
             * When there is no page meta resolver configured for the highest parent in the hierarchy,
             * it uses the `DefaultRoutePageMetaResolver`.
             */
            this.routesWithExtras$ = this.routes$.pipe(operators.map(function (routes) { return routes.reduce(function (results, route) {
                var _a;
                var parent = results.length
                    ? results[results.length - 1]
                    : {
                        route: null,
                        resolver: _this.injector.get(DefaultRoutePageMetaResolver),
                        url: '',
                    };
                var resolver = (_a = _this.getResolver(route)) !== null && _a !== void 0 ? _a : parent.resolver; // fallback to parent's resolver
                var urlPart = _this.getUrlPart(route);
                var url = parent.url + (urlPart ? "/" + urlPart : ''); // don't add slash for a route with path '', to avoid double slash ...//...
                return results.concat({ route: route, resolver: resolver, url: url });
            }, []); }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        /**
         * Array of breadcrumbs defined for all the activated routes (from the root route to the leaf route).
         * It emits on every completed routing navigation.
         */
        RoutingPageMetaResolver.prototype.resolveBreadcrumbs = function (options) {
            var _this = this;
            return this.routesWithExtras$.pipe(operators.map(function (routesWithExtras) { return (options === null || options === void 0 ? void 0 : options.includeCurrentRoute) ? routesWithExtras
                : _this.trimCurrentRoute(routesWithExtras); }), operators.switchMap(function (routesWithExtras) { return routesWithExtras.length
                ? rxjs.combineLatest(routesWithExtras.map(function (routeWithExtras) { return _this.resolveRouteBreadcrumb(routeWithExtras); }))
                : rxjs.of([]); }), operators.map(function (breadcrumbArrays) { return breadcrumbArrays.flat(); }));
        };
        /**
         * Returns the instance of the RoutePageMetaResolver configured for the given activated route.
         * Returns null in case there the resolver can't be injected or is undefined.
         *
         * @param route route to resolve
         */
        RoutingPageMetaResolver.prototype.getResolver = function (route) {
            var pageMetaConfig = this.getPageMetaConfig(route);
            if (typeof pageMetaConfig !== 'string' && (pageMetaConfig === null || pageMetaConfig === void 0 ? void 0 : pageMetaConfig.resolver)) {
                return this.injector.get(pageMetaConfig.resolver, null);
            }
            return null;
        };
        /**
         * Resolvers breadcrumb for a specific route
         */
        RoutingPageMetaResolver.prototype.resolveRouteBreadcrumb = function (_c) {
            var route = _c.route, resolver = _c.resolver, url = _c.url;
            var breadcrumbResolver = resolver;
            if (typeof breadcrumbResolver.resolveBreadcrumbs === 'function') {
                return breadcrumbResolver.resolveBreadcrumbs({
                    route: route,
                    url: url,
                    pageMetaConfig: this.getPageMetaConfig(route),
                });
            }
            return rxjs.of([]);
        };
        /**
         * By default in breadcrumbs list we don't want to show a link to the current page, so this function
         * trims the last breadcrumb (the breadcrumb of the current route).
         *
         * This function also handles special case when the current route has a configured empty path ('' route).
         * The '' routes are often a _technical_ routes to organize other routes, assign common guards for its children, etc.
         * It shouldn't happen that '' route has a defined breadcrumb config.
         *
         * In that case, we trim not only the last route ('' route), but also its parent route with non-empty path
         * (which likely defines the breadcrumb config).
         */
        RoutingPageMetaResolver.prototype.trimCurrentRoute = function (routesWithExtras) {
            // If the last route is '', we trim:
            // - the '' route
            // - all parent '' routes (until we meet route with non-empty path)
            var _a, _b;
            var i = routesWithExtras.length - 1;
            while (((_b = (_a = routesWithExtras[i]) === null || _a === void 0 ? void 0 : _a.route) === null || _b === void 0 ? void 0 : _b.url.length) === 0 && i >= 0) {
                i--;
            }
            // Finally we trim the last route (the one with non-empty path)
            return routesWithExtras.slice(0, i);
        };
        /**
         * Returns the URL path for the given activated route in a string format.
         * (ActivatedRouteSnapshot#url contains an array of `UrlSegment`s, not a string)
         */
        RoutingPageMetaResolver.prototype.getUrlPart = function (route) {
            return route.url.map(function (urlSegment) { return urlSegment.path; }).join('/');
        };
        /**
         * Returns the breadcrumb config placed in the route's `data` configuration.
         */
        RoutingPageMetaResolver.prototype.getPageMetaConfig = function (route) {
            var _a, _b;
            // Note: we use `route.routeConfig.data` (not `route.data`) to save us from
            // an edge case bug. In Angular, by design the `data` of ActivatedRoute is inherited
            // from the parent route, if only the child has an empty path ''.
            // But in any case we don't want the page meta configs to be inherited, so we
            // read data from the original `routeConfig` which is static.
            //
            // Note: we may inherit the parent's page meta resolver in case we don't define it,
            // but we don't want to inherit parent's page meta config!
            return (_b = (_a = route === null || route === void 0 ? void 0 : route.routeConfig) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.cxPageMeta;
        };
        return RoutingPageMetaResolver;
    }());
    RoutingPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingPageMetaResolver_Factory() { return new RoutingPageMetaResolver(i0.ɵɵinject(ActivatedRoutesService), i0.ɵɵinject(i0.INJECTOR)); }, token: RoutingPageMetaResolver, providedIn: "root" });
    RoutingPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    RoutingPageMetaResolver.ctorParameters = function () { return [
        { type: ActivatedRoutesService },
        { type: i0.Injector }
    ]; };

    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.
     * More specific resolvers for content pages can be implemented by making them more
     * specific, for example by using the page template (see `CartPageMetaResolver`).
     *
     * The page title, and breadcrumbs are resolved in this implementation only.
     */
    var ContentPageMetaResolver = /** @class */ (function (_super) {
        __extends(ContentPageMetaResolver, _super);
        function ContentPageMetaResolver(cms, translation, routingPageMetaResolver) {
            var _this = _super.call(this) || this;
            _this.cms = cms;
            _this.translation = translation;
            _this.routingPageMetaResolver = routingPageMetaResolver;
            /** helper to provide access to the current CMS page */
            _this.cms$ = _this.cms
                .getCurrentPage()
                .pipe(operators.filter(function (p) { return Boolean(p); }));
            /**
             * Breadcrumb for the home page.
             */
            _this.homeBreadcrumb$ = _this.translation
                .translate('common.home')
                .pipe(operators.map(function (label) { return [{ label: label, link: '/' }]; }));
            /**
             * All the resolved breadcrumbs (including those from Angular child routes).
             */
            _this.breadcrumbs$ = rxjs.combineLatest([
                _this.homeBreadcrumb$,
                rxjs.defer(function () { return _this.routingPageMetaResolver.resolveBreadcrumbs(); }),
            ]).pipe(operators.map(function (breadcrumbs) { return breadcrumbs.flat(); }, operators.shareReplay({ bufferSize: 1, refCount: true })));
            _this.pageType = exports.PageType.CONTENT_PAGE;
            return _this;
        }
        /**
         * Resolves the page title for the ContentPage by taking the title
         * from the backend data.
         */
        ContentPageMetaResolver.prototype.resolveTitle = function () {
            return this.cms$.pipe(operators.map(function (p) { return p.title; }));
        };
        /**
         * Resolves a single breadcrumb item to the home page for each `ContentPage`.
         * The home page label is resolved from the translation service.
         */
        ContentPageMetaResolver.prototype.resolveBreadcrumbs = function () {
            return this.breadcrumbs$;
        };
        return ContentPageMetaResolver;
    }(PageMetaResolver));
    ContentPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentPageMetaResolver_Factory() { return new ContentPageMetaResolver(i0.ɵɵinject(CmsService), i0.ɵɵinject(TranslationService), i0.ɵɵinject(RoutingPageMetaResolver)); }, token: ContentPageMetaResolver, providedIn: "root" });
    ContentPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ContentPageMetaResolver.ctorParameters = function () { return [
        { type: CmsService },
        { type: TranslationService },
        { type: RoutingPageMetaResolver }
    ]; };

    var CmsPageTitleModule = /** @class */ (function () {
        function CmsPageTitleModule() {
        }
        return CmsPageTitleModule;
    }());
    CmsPageTitleModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        {
                            provide: PageMetaResolver,
                            useExisting: ContentPageMetaResolver,
                            multi: true,
                        },
                    ],
                },] }
    ];

    function bufferDebounceTime(time, scheduler) {
        if (time === void 0) { time = 0; }
        return function (source) {
            var bufferedValues = [];
            return source.pipe(operators.tap(function (value) { return bufferedValues.push(value); }), operators.debounceTime(time, scheduler), operators.map(function () { return bufferedValues; }), operators.tap(function () { return (bufferedValues = []); }));
        };
    }

    /**
     * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
     * instead of using a backend CMS system. The configuration can be used to build
     * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
     * only require the necessary properties. Adapter logic is applied to serialize
     * the `CmsStructureConfig` into the required UI model.
     */
    var CmsStructureConfig = /** @class */ (function (_super) {
        __extends(CmsStructureConfig, _super);
        function CmsStructureConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CmsStructureConfig;
    }(CmsConfig));
    CmsStructureConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsStructureConfig_Factory() { return i0.ɵɵinject(Config); }, token: CmsStructureConfig, providedIn: "root" });
    CmsStructureConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    /**
     * Service that provides access to CMS structure from a static
     * configuration or configuration file. This class uses static
     * configuration is designed in async fashion so that configurations
     * can be loaded from a file or stream.
     *
     * The intent of the `CmsStructureConfigService` however is to provide
     * fast loading pages and default cms structure for commodity commerce.
     */
    var CmsStructureConfigService = /** @class */ (function () {
        function CmsStructureConfigService(cmsDataConfig) {
            this.cmsDataConfig = cmsDataConfig;
        }
        /**
         * Merge the cms structure to the pageStructure. The page structure
         * can either hold complete page structures or global structures that
         * might apply to all pages (such has header coponents).
         */
        CmsStructureConfigService.prototype.mergePageStructure = function (pageId, pageStructure) {
            var _this = this;
            return this.mergePage(pageId, pageStructure).pipe(operators.switchMap(function (page) { return _this.mergeSlots(page); }));
        };
        /**
         *
         * Returns boolean observable to indicate whether the page should not be
         * loaded from the backend. This is useful for pages which are comoditized
         * and follow best practice.
         *
         * By default, configurable pages are driven by static configuration,
         * in order to allow for fast loading pages (preventing network delays).
         */
        CmsStructureConfigService.prototype.shouldIgnoreBackend = function (pageId) {
            return this.getPageFromConfig(pageId).pipe(operators.map(function (page) { return !!page && !!page.ignoreBackend; }));
        };
        /**
         * returns an Observable component data from the static configuration.
         */
        CmsStructureConfigService.prototype.getComponentFromConfig = function (componentId) {
            return rxjs.of(this.getComponentById(componentId));
        };
        /**
         * returns an Observable components data from the static configuration.
         */
        CmsStructureConfigService.prototype.getComponentsFromConfig = function (ids) {
            var _this = this;
            return rxjs.of(ids.map(function (id) { return _this.getComponentById(id); }));
        };
        /**
         * returns an observable with the `PageConfig`.
         */
        CmsStructureConfigService.prototype.getPageFromConfig = function (pageId) {
            return rxjs.of(this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages
                ? this.cmsDataConfig.cmsStructure.pages.find(function (p) { return p.pageId === pageId; })
                : null);
        };
        /**
         * Merge page data from the configuration into the given structure, if any.
         * If the given page structure is empty, a page is created and the page slots are
         * are merged into the page.
         */
        CmsStructureConfigService.prototype.mergePage = function (pageId, pageStructure) {
            var _this = this;
            return this.getPageFromConfig(pageId).pipe(operators.switchMap(function (page) {
                if (page) {
                    // serialize page data
                    if (!pageStructure.page) {
                        pageStructure.page = Object.assign({}, page);
                        pageStructure.page.slots = {};
                    }
                    if (!pageStructure.page.slots) {
                        pageStructure.page.slots = {};
                    }
                    return _this.mergeSlots(pageStructure, page.slots);
                }
                else {
                    return rxjs.of(pageStructure);
                }
            }));
        };
        /**
         * Adds any pre-configured slots for pages that do not use them.
         * If pages have a slot for the given position, the configiuration
         * is ingored. Even if the slot does not have inner structure (such as
         * components), so that the cms structure is able to override the (static)
         * configuration.
         */
        CmsStructureConfigService.prototype.mergeSlots = function (pageStructure, slots) {
            var e_1, _a, e_2, _b;
            // if no slots have been given, we use the global configured slots
            if (!slots &&
                this.cmsDataConfig.cmsStructure &&
                this.cmsDataConfig.cmsStructure.slots) {
                slots = this.cmsDataConfig.cmsStructure.slots;
            }
            if (!slots) {
                return rxjs.of(pageStructure);
            }
            try {
                for (var _c = __values(Object.keys(slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var position = _d.value;
                    if (!Object.keys(pageStructure.page.slots).includes(position)) {
                        // the global slot isn't yet part of the page structure
                        pageStructure.page.slots[position] = {};
                        try {
                            for (var _e = (e_2 = void 0, __values(this.getComponentsByPosition(slots, position))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var component = _f.value;
                                if (!pageStructure.page.slots[position].components) {
                                    pageStructure.page.slots[position].components = [];
                                }
                                pageStructure.page.slots[position].components.push({
                                    uid: component.uid,
                                    flexType: component.flexType,
                                    typeCode: component.typeCode,
                                });
                                if (!pageStructure.components) {
                                    pageStructure.components = [];
                                }
                                pageStructure.components.push(component);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return rxjs.of(pageStructure);
        };
        CmsStructureConfigService.prototype.getComponentsByPosition = function (slots, position) {
            var e_3, _a;
            var components = [];
            if (slots[position] && slots[position].componentIds) {
                try {
                    for (var _b = __values(slots[position].componentIds), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var componentId = _c.value;
                        if (this.cmsDataConfig.cmsStructure &&
                            this.cmsDataConfig.cmsStructure.components) {
                            var component = this.cmsDataConfig.cmsStructure.components[componentId];
                            if (component) {
                                components.push(Object.assign({ uid: componentId }, component));
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            return components;
        };
        CmsStructureConfigService.prototype.getComponentById = function (componentId) {
            return this.cmsDataConfig.cmsStructure &&
                this.cmsDataConfig.cmsStructure.components
                ? this.cmsDataConfig.cmsStructure.components[componentId]
                : undefined;
        };
        return CmsStructureConfigService;
    }());
    CmsStructureConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsStructureConfigService_Factory() { return new CmsStructureConfigService(i0.ɵɵinject(CmsStructureConfig)); }, token: CmsStructureConfigService, providedIn: "root" });
    CmsStructureConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CmsStructureConfigService.ctorParameters = function () { return [
        { type: CmsStructureConfig }
    ]; };

    var CmsComponentConnector = /** @class */ (function () {
        function CmsComponentConnector(cmsStructureConfigService, adapter, config) {
            this.cmsStructureConfigService = cmsStructureConfigService;
            this.adapter = adapter;
            this.config = config;
        }
        CmsComponentConnector.prototype.get = function (id, pageContext) {
            var _this = this;
            return this.cmsStructureConfigService
                .getComponentFromConfig(id)
                .pipe(operators.switchMap(function (configuredComponent) { return configuredComponent
                ? rxjs.of(configuredComponent)
                : _this.adapter.load(id, pageContext); }));
        };
        CmsComponentConnector.prototype.getList = function (ids, pageContext) {
            var _this = this;
            return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(operators.switchMap(function (configuredComponents) {
                // check if we have some components that are not loaded from configuration
                var missingIds = configuredComponents.reduce(function (acc, component, index) {
                    if (component === undefined) {
                        acc.push(ids[index]);
                    }
                    return acc;
                }, []);
                if (missingIds.length > 0) {
                    return (_this.config.backend.occ.legacy
                        ? _this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)
                        : _this.adapter.findComponentsByIds(missingIds, pageContext)).pipe(operators.map(function (loadedComponents) { return __spread(configuredComponents.filter(Boolean), loadedComponents); }));
                }
                else {
                    return rxjs.of(configuredComponents);
                }
            }));
        };
        return CmsComponentConnector;
    }());
    CmsComponentConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsComponentConnector_Factory() { return new CmsComponentConnector(i0.ɵɵinject(CmsStructureConfigService), i0.ɵɵinject(CmsComponentAdapter), i0.ɵɵinject(OccConfig)); }, token: CmsComponentConnector, providedIn: "root" });
    CmsComponentConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CmsComponentConnector.ctorParameters = function () { return [
        { type: CmsStructureConfigService },
        { type: CmsComponentAdapter },
        { type: OccConfig }
    ]; };

    var ComponentsEffects = /** @class */ (function () {
        function ComponentsEffects(actions$, cmsComponentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsComponentConnector = cmsComponentConnector;
            this.contextChange$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN));
            this.loadComponent$ = i3.createEffect(function () { return function (_a) {
                var _b = _a === void 0 ? {} : _a, scheduler = _b.scheduler, _c = _b.debounce, debounce = _c === void 0 ? 0 : _c;
                return _this.actions$.pipe(i3.ofType(LOAD_CMS_COMPONENT), operators.groupBy(function (actions) { return serializePageContext(actions.payload.pageContext); }), operators.mergeMap(function (actionGroup) { return actionGroup.pipe(bufferDebounceTime(debounce, scheduler), operators.mergeMap(function (actions) { return _this.loadComponentsEffect(actions.map(function (action) { return action.payload.uid; }), actions[0].payload.pageContext); })); }), withdrawOn(_this.contextChange$));
            }; });
        }
        ComponentsEffects.prototype.loadComponentsEffect = function (componentUids, pageContext) {
            return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(operators.switchMap(function (components) {
                var e_1, _a;
                var actions = [];
                var uidsLeft = new Set(componentUids);
                try {
                    for (var components_1 = __values(components), components_1_1 = components_1.next(); !components_1_1.done; components_1_1 = components_1.next()) {
                        var component = components_1_1.value;
                        actions.push(new LoadCmsComponentSuccess({
                            component: component,
                            uid: component.uid,
                            pageContext: pageContext,
                        }));
                        uidsLeft.delete(component.uid);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (components_1_1 && !components_1_1.done && (_a = components_1.return)) _a.call(components_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                // we have to emit LoadCmsComponentFail for all component's uids that
                // are missing from the response
                uidsLeft.forEach(function (uid) {
                    actions.push(new LoadCmsComponentFail({
                        uid: uid,
                        pageContext: pageContext,
                    }));
                });
                return rxjs.from(actions);
            }), operators.catchError(function (error) { return rxjs.from(componentUids.map(function (uid) { return new LoadCmsComponentFail({
                uid: uid,
                error: makeErrorSerializable(error),
                pageContext: pageContext,
            }); })); }));
        };
        return ComponentsEffects;
    }());
    ComponentsEffects.decorators = [
        { type: i0.Injectable }
    ];
    ComponentsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CmsComponentConnector }
    ]; };

    /**
     * @license
     * The MIT License
     * Copyright (c) 2010-2019 Google LLC. http://angular.io/license
     *
     * See:
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17
     * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86
     */
    var QUESTION_MARK = '[^/]';
    var WILD_SINGLE = '[^/]*';
    var WILD_OPEN = '(?:.+\\/)?';
    var TO_ESCAPE_BASE = [
        { replace: /\./g, with: '\\.' },
        { replace: /\+/g, with: '\\+' },
        { replace: /\*/g, with: WILD_SINGLE },
    ];
    var TO_ESCAPE_WILDCARD_QM = __spread(TO_ESCAPE_BASE, [
        { replace: /\?/g, with: QUESTION_MARK },
    ]);
    var TO_ESCAPE_LITERAL_QM = __spread(TO_ESCAPE_BASE, [
        { replace: /\?/g, with: '\\?' },
    ]);
    /**
     * Converts the glob-like pattern into regex string.
     *
     * Patterns use a limited glob format:
     * `**` matches 0 or more path segments
     * `*` matches 0 or more characters excluding `/`
     * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)
     * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included
     *
     * @param glob glob-like pattern
     * @param literalQuestionMark when true, it tells that `?` is treated as a normal character
     */
    function globToRegex(glob, literalQuestionMark) {
        if (literalQuestionMark === void 0) { literalQuestionMark = false; }
        var toEscape = literalQuestionMark
            ? TO_ESCAPE_LITERAL_QM
            : TO_ESCAPE_WILDCARD_QM;
        var segments = glob.split('/').reverse();
        var regex = '';
        while (segments.length > 0) {
            var segment = segments.pop();
            if (segment === '**') {
                if (segments.length > 0) {
                    regex += WILD_OPEN;
                }
                else {
                    regex += '.*';
                }
            }
            else {
                var processed = toEscape.reduce(function (seg, escape) { return seg.replace(escape.replace, escape.with); }, segment);
                regex += processed;
                if (segments.length > 0) {
                    regex += '\\/';
                }
            }
        }
        return regex;
    }
    /**
     * For given list of glob-like patterns, returns a matcher function.
     *
     * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
     */
    function getGlobMatcher(patterns) {
        var processedPatterns = processGlobPatterns(patterns).map(function (_a) {
            var positive = _a.positive, regex = _a.regex;
            return ({
                positive: positive,
                regex: new RegExp(regex),
            });
        });
        var includePatterns = processedPatterns.filter(function (spec) { return spec.positive; });
        var excludePatterns = processedPatterns.filter(function (spec) { return !spec.positive; });
        return function (url) { return includePatterns.some(function (pattern) { return pattern.regex.test(url); }) &&
            !excludePatterns.some(function (pattern) { return pattern.regex.test(url); }); };
    }
    /**
     * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative
     */
    function processGlobPatterns(urls) {
        return urls.map(function (url) {
            var positive = !url.startsWith('!');
            url = positive ? url : url.substr(1);
            return { positive: positive, regex: "^" + globToRegex(url) + "$" };
        });
    }

    var GlobService = /** @class */ (function () {
        function GlobService() {
        }
        /**
         * For given list of glob-like patterns, returns a validator function.
         *
         * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.
         */
        GlobService.prototype.getValidator = function (patterns) {
            var processedPatterns = processGlobPatterns(patterns).map(function (_a) {
                var positive = _a.positive, regex = _a.regex;
                return ({
                    positive: positive,
                    regex: new RegExp(regex),
                });
            });
            var includePatterns = processedPatterns.filter(function (spec) { return spec.positive; });
            var excludePatterns = processedPatterns.filter(function (spec) { return !spec.positive; });
            return function (url) { return includePatterns.some(function (pattern) { return pattern.regex.test(url); }) &&
                !excludePatterns.some(function (pattern) { return pattern.regex.test(url); }); };
        };
        return GlobService;
    }());
    GlobService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GlobService_Factory() { return new GlobService(); }, token: GlobService, providedIn: "root" });
    GlobService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var UrlMatcherService = /** @class */ (function () {
        function UrlMatcherService(globService) {
            this.globService = globService;
        }
        /**
         * Returns a matcher that is always fails
         */
        UrlMatcherService.prototype.getFalsy = function () {
            return function falsyUrlMatcher() {
                return null;
            };
        };
        /**
         * Returns a matcher for given list of paths
         */
        UrlMatcherService.prototype.getFromPaths = function (paths) {
            var _this = this;
            var matchers = paths.map(function (path) { return _this.getFromPath(path); });
            var matcher = this.getCombined(matchers);
            if (i0.isDevMode()) {
                matcher['_paths'] = paths; // property added for easier debugging of routes
            }
            return matcher;
        };
        /**
         * Returns a matcher that combines the given matchers
         * */
        UrlMatcherService.prototype.getCombined = function (matchers) {
            var matcher = function combinedUrlMatchers(segments, segmentGroup, route) {
                for (var i = 0; i < matchers.length; i++) {
                    var result = matchers[i](segments, segmentGroup, route);
                    if (result) {
                        return result;
                    }
                }
                return null;
            };
            if (i0.isDevMode()) {
                matcher['_matchers'] = matchers; // property added for easier debugging of routes
            }
            return matcher;
        };
        /**
         * Similar to Angular's defaultUrlMatcher. Differences:
         * - the `path` comes from function's argument, not from `route.path`
         * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function
         */
        UrlMatcherService.prototype.getFromPath = function (path) {
            if (path === void 0) { path = ''; }
            var matcher = function pathUrlMatcher(segments, segmentGroup, route) {
                /**
                 * @license
                 * The MIT License
                 * Copyright (c) 2010-2019 Google LLC. http://angular.io/license
                 *
                 * See:
                 * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121
                 */
                // use function's argument, not the `route.path`
                if (path === '') {
                    if (route.pathMatch === 'full' &&
                        (segmentGroup.hasChildren() || segments.length > 0)) {
                        return null;
                    }
                    return { consumed: [], posParams: {} };
                }
                var parts = path.split('/'); // use function's argument, not the `route.path`
                if (parts.length > segments.length) {
                    // The actual URL is shorter than the config, no match
                    return null;
                }
                if (route.pathMatch === 'full' &&
                    (segmentGroup.hasChildren() || parts.length < segments.length)) {
                    // The config is longer than the actual URL but we are looking for a full match, return null
                    return null;
                }
                var posParams = {};
                // Check each config part against the actual URL
                for (var index = 0; index < parts.length; index++) {
                    var part = parts[index];
                    var segment = segments[index];
                    var isParameter = part.startsWith(':');
                    if (isParameter) {
                        posParams[part.substring(1)] = segment;
                    }
                    else if (part !== segment.path) {
                        // The actual URL part does not match the config, no match
                        return null;
                    }
                }
                return { consumed: segments.slice(0, parts.length), posParams: posParams };
            };
            if (i0.isDevMode()) {
                matcher['_path'] = path; // property added for easier debugging of routes
            }
            return matcher;
        };
        /**
         * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher
         */
        UrlMatcherService.prototype.getOpposite = function (originalMatcher) {
            var matcher = function oppositeUrlMatcher(segments, group, route) {
                return originalMatcher(segments, group, route)
                    ? null
                    : { consumed: segments, posParams: {} };
            };
            if (i0.isDevMode()) {
                matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes
            }
            return matcher;
        };
        /**
         * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.
         */
        UrlMatcherService.prototype.getFromGlob = function (globPatterns) {
            var globValidator = this.globService.getValidator(globPatterns);
            var matcher = function globUrlMatcher(segments) {
                var fullPath = "/" + segments.map(function (s) { return s.path; }).join('/');
                return globValidator(fullPath)
                    ? { consumed: segments, posParams: {} }
                    : null;
            };
            if (i0.isDevMode()) {
                matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes
            }
            return matcher;
        };
        return UrlMatcherService;
    }());
    UrlMatcherService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UrlMatcherService_Factory() { return new UrlMatcherService(i0.ɵɵinject(GlobService)); }, token: UrlMatcherService, providedIn: "root" });
    UrlMatcherService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    UrlMatcherService.ctorParameters = function () { return [
        { type: GlobService }
    ]; };

    var ConfigurableRoutesService = /** @class */ (function () {
        function ConfigurableRoutesService(injector, routingConfigService, urlMatcherService) {
            this.injector = injector;
            this.routingConfigService = routingConfigService;
            this.urlMatcherService = urlMatcherService;
            this.initCalled = false; // guard not to call init() more than once
        }
        /**
         * Enhances existing Angular routes using the routing config of Spartacus.
         * Can be called only once.
         */
        ConfigurableRoutesService.prototype.init = function () {
            if (!this.initCalled) {
                this.initCalled = true;
                this.configure();
            }
        };
        /**
         * Enhances existing Angular routes using the routing config of Spartacus.
         */
        ConfigurableRoutesService.prototype.configure = function () {
            // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:
            var router = this.injector.get(i1$1.Router);
            router.resetConfig(this.configureRoutes(router.config));
        };
        /**
         * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.
         *
         * @param routes list of Angular `Route` objects
         */
        ConfigurableRoutesService.prototype.configureRoutes = function (routes) {
            var _this = this;
            return routes.map(function (route) {
                var configuredRoute = _this.configureRoute(route);
                if (route.children && route.children.length) {
                    configuredRoute.children = _this.configureRoutes(route.children);
                }
                return configuredRoute;
            });
        };
        /**
         * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.
         * Uses the property `data.cxRoute` to determine the name of the route.
         * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.
         *
         * @param route Angular `Route` object
         */
        ConfigurableRoutesService.prototype.configureRoute = function (route) {
            var _a;
            var routeName = this.getRouteName(route);
            if (routeName) {
                var routeConfig = this.routingConfigService.getRouteConfig(routeName);
                this.validateRouteConfig(routeConfig, routeName, route);
                if (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.disabled) {
                    delete route.path;
                    return Object.assign(Object.assign({}, route), { matcher: this.urlMatcherService.getFalsy() });
                }
                else if (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.matchers) {
                    delete route.path;
                    return Object.assign(Object.assign({}, route), { matcher: this.resolveUrlMatchers(route, routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.matchers) });
                }
                else if (((_a = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths) === null || _a === void 0 ? void 0 : _a.length) === 1) {
                    delete route.matcher;
                    return Object.assign(Object.assign({}, route), { path: routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths[0] });
                }
                else {
                    delete route.path;
                    return Object.assign(Object.assign({}, route), { matcher: this.urlMatcherService.getFromPaths((routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths) || []) });
                }
            }
            return route; // if route doesn't have a name, just pass the original route
        };
        /**
         * Creates a single `UrlMatcher` based on given matchers and factories of matchers.
         *
         * @param route Route object
         * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions
         *  that create UrlMatchers based on the given route.
         */
        ConfigurableRoutesService.prototype.resolveUrlMatchers = function (route, matchersOrFactories) {
            var _this = this;
            var matchers = matchersOrFactories.map(function (matcherOrFactory) {
                return typeof matcherOrFactory === 'function'
                    ? matcherOrFactory // matcher
                    : _this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token
            });
            return this.urlMatcherService.getCombined(matchers);
        };
        /**
         * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.
         *
         * @param route Route object
         * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route
         */
        ConfigurableRoutesService.prototype.resolveUrlMatcherFactory = function (route, factoryToken) {
            var factory = this.injector.get(factoryToken);
            return factory(route);
        };
        /**
         * Returns the name of the Route stored in its property `data.cxRoute`
         * @param route
         */
        ConfigurableRoutesService.prototype.getRouteName = function (route) {
            return route.data && route.data.cxRoute;
        };
        ConfigurableRoutesService.prototype.validateRouteConfig = function (routeConfig, routeName, route) {
            if (i0.isDevMode()) {
                // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config
                // - routeConfig with defined `matchers` is valid, even if `paths` are undefined
                if (routeConfig === null ||
                    (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths) === null || (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.matchers)) {
                    return;
                }
                // undefined value of routeConfig or routeConfig.paths is a misconfiguration
                if (!(routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.paths)) {
                    this.warn("Could not configure the named route '" + routeName + "'", route, "due to undefined config or undefined 'paths' property for this route");
                    return;
                }
            }
        };
        ConfigurableRoutesService.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (i0.isDevMode()) {
                console.warn.apply(console, __spread(args));
            }
        };
        return ConfigurableRoutesService;
    }());
    ConfigurableRoutesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurableRoutesService_Factory() { return new ConfigurableRoutesService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(RoutingConfigService), i0.ɵɵinject(UrlMatcherService)); }, token: ConfigurableRoutesService, providedIn: "root" });
    ConfigurableRoutesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ConfigurableRoutesService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: RoutingConfigService },
        { type: UrlMatcherService }
    ]; };

    var ProductURLPipe = /** @class */ (function () {
        function ProductURLPipe(semanticPath) {
            this.semanticPath = semanticPath;
        }
        ProductURLPipe.prototype.transform = function (product) {
            return this.semanticPath.transform({ cxRoute: 'product', params: product });
        };
        return ProductURLPipe;
    }());
    ProductURLPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cxProductUrl',
                },] }
    ];
    ProductURLPipe.ctorParameters = function () { return [
        { type: SemanticPathService }
    ]; };

    var UrlPipe = /** @class */ (function () {
        function UrlPipe(urlService) {
            this.urlService = urlService;
        }
        UrlPipe.prototype.transform = function (commands) {
            return this.urlService.transform(commands);
        };
        return UrlPipe;
    }());
    UrlPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'cxUrl',
                },] }
    ];
    UrlPipe.ctorParameters = function () { return [
        { type: SemanticPathService }
    ]; };

    var UrlModule = /** @class */ (function () {
        function UrlModule() {
        }
        return UrlModule;
    }());
    UrlModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.CommonModule],
                    declarations: [UrlPipe, ProductURLPipe],
                    exports: [UrlPipe, ProductURLPipe],
                },] }
    ];

    var ExternalRoutesConfig = /** @class */ (function () {
        function ExternalRoutesConfig() {
        }
        return ExternalRoutesConfig;
    }());
    ExternalRoutesConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalRoutesConfig_Factory() { return i0.ɵɵinject(Config); }, token: ExternalRoutesConfig, providedIn: "root" });
    ExternalRoutesConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var ExternalRoutesGuard = /** @class */ (function () {
        function ExternalRoutesGuard(winRef, platformId) {
            this.winRef = winRef;
            this.platformId = platformId;
        }
        /**
         * Redirects to different storefront system for anticipated URL
         */
        ExternalRoutesGuard.prototype.canActivate = function (route, state) {
            if (i1.isPlatformBrowser(this.platformId)) {
                this.redirect(route, state);
            }
            return false;
        };
        /**
         * Redirects to anticipated URL using full page reload, not Angular routing
         */
        ExternalRoutesGuard.prototype.redirect = function (_, state) {
            var window = this.winRef.nativeWindow;
            if (window && window.location) {
                window.location.href = state.url;
            }
        };
        return ExternalRoutesGuard;
    }());
    ExternalRoutesGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalRoutesGuard_Factory() { return new ExternalRoutesGuard(i0.ɵɵinject(WindowRef), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: ExternalRoutesGuard, providedIn: "root" });
    ExternalRoutesGuard.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ExternalRoutesGuard.ctorParameters = function () { return [
        { type: WindowRef },
        { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };

    function addExternalRoutesFactory(service) {
        var result = function () {
            service.addRoutes();
        };
        return result;
    }

    /**
     * Service that helps redirecting to different storefront systems for configured URLs
     */
    var ExternalRoutesService = /** @class */ (function () {
        function ExternalRoutesService(config, urlMatcherService, injector) {
            this.config = config;
            this.urlMatcherService = urlMatcherService;
            this.injector = injector;
        }
        Object.defineProperty(ExternalRoutesService.prototype, "internalUrlPatterns", {
            get: function () {
                return ((this.config && this.config.routing && this.config.routing.internal) || []);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system
         */
        ExternalRoutesService.prototype.addRoutes = function () {
            var router = this.injector.get(i1$1.Router);
            var newRoutes = this.getRoutes();
            if (newRoutes.length) {
                router.resetConfig(__spread(newRoutes, router.config));
            }
        };
        /**
         * Returns routes that are responsible for redirection to different storefront systems
         */
        ExternalRoutesService.prototype.getRoutes = function () {
            if (!this.internalUrlPatterns.length) {
                return [];
            }
            var routes = [];
            routes.push({
                pathMatch: 'full',
                matcher: this.getUrlMatcher(),
                canActivate: [ExternalRoutesGuard],
                component: {},
            });
            return routes;
        };
        /**
         * Returns the URL matcher for the external route
         */
        ExternalRoutesService.prototype.getUrlMatcher = function () {
            var matcher = this.urlMatcherService.getFromGlob(this.internalUrlPatterns);
            return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route
        };
        return ExternalRoutesService;
    }());
    ExternalRoutesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalRoutesService_Factory() { return new ExternalRoutesService(i0.ɵɵinject(ExternalRoutesConfig), i0.ɵɵinject(UrlMatcherService), i0.ɵɵinject(i0.INJECTOR)); }, token: ExternalRoutesService, providedIn: "root" });
    ExternalRoutesService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ExternalRoutesService.ctorParameters = function () { return [
        { type: ExternalRoutesConfig },
        { type: UrlMatcherService },
        { type: i0.Injector }
    ]; };

    /**
     * Prepends the external route that redirects to a different storefront system for configured URLs
     */
    var ExternalRoutesModule = /** @class */ (function () {
        function ExternalRoutesModule() {
        }
        ExternalRoutesModule.forRoot = function () {
            return {
                ngModule: ExternalRoutesModule,
                providers: [
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        useFactory: addExternalRoutesFactory,
                        deps: [ExternalRoutesService],
                    },
                ],
            };
        };
        return ExternalRoutesModule;
    }());
    ExternalRoutesModule.decorators = [
        { type: i0.NgModule }
    ];

    var PageContext = /** @class */ (function () {
        function PageContext(id, type) {
            this.id = id;
            this.type = type;
        }
        return PageContext;
    }());

    var ProtectedRoutesService = /** @class */ (function () {
        function ProtectedRoutesService(config) {
            var _this = this;
            this.config = config;
            this.nonProtectedPaths = []; // arrays of paths' segments list
            if (this.shouldProtect) {
                // pre-process config for performance:
                this.nonProtectedPaths = this.getNonProtectedPaths().map(function (path) { return _this.getSegments(path); });
            }
        }
        Object.defineProperty(ProtectedRoutesService.prototype, "routingConfig", {
            get: function () {
                return this.config && this.config.routing;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProtectedRoutesService.prototype, "shouldProtect", {
            /**
             * Returns 'protected' property (boolean) from routing config
             *
             * @returns boolean
             */
            get: function () {
                return this.routingConfig.protected;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Tells if the url is protected
         */
        ProtectedRoutesService.prototype.isUrlProtected = function (urlSegments) {
            return (this.shouldProtect &&
                !this.matchAnyPath(urlSegments, this.nonProtectedPaths));
        };
        /**
         * Tells whether the url matches at least one of the paths
         */
        ProtectedRoutesService.prototype.matchAnyPath = function (urlSegments, pathsSegments) {
            var _this = this;
            return pathsSegments.some(function (pathSegments) { return _this.matchPath(urlSegments, pathSegments); });
        };
        /**
         * Tells whether the url matches the path
         */
        ProtectedRoutesService.prototype.matchPath = function (urlSegments, pathSegments) {
            if (urlSegments.length !== pathSegments.length) {
                return false;
            }
            for (var i = 0; i < pathSegments.length; i++) {
                var pathSeg = pathSegments[i];
                var urlSeg = urlSegments[i];
                // compare only static segments:
                if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Returns a list of paths that are not protected
         */
        ProtectedRoutesService.prototype.getNonProtectedPaths = function () {
            return Object.values(this.routingConfig.routes).reduce(function (acc, routeConfig) { return routeConfig.protected === false && // must be explicitly false, ignore undefined
                routeConfig.paths &&
                routeConfig.paths.length
                ? acc.concat(routeConfig.paths)
                : acc; }, []);
        };
        /**
         * Splits the url by slashes
         */
        ProtectedRoutesService.prototype.getSegments = function (url) {
            return (url || '').split('/');
        };
        return ProtectedRoutesService;
    }());
    ProtectedRoutesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProtectedRoutesService_Factory() { return new ProtectedRoutesService(i0.ɵɵinject(RoutingConfig)); }, token: ProtectedRoutesService, providedIn: "root" });
    ProtectedRoutesService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ProtectedRoutesService.ctorParameters = function () { return [
        { type: RoutingConfig }
    ]; };

    var ProtectedRoutesGuard = /** @class */ (function () {
        function ProtectedRoutesGuard(service, authGuard) {
            this.service = service;
            this.authGuard = authGuard;
        }
        /**
         * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.
         */
        ProtectedRoutesGuard.prototype.canActivate = function (route) {
            var urlSegments = route.url.map(function (seg) { return seg.path; });
            // For the root path `/` ActivatedRoute contains an empty array of segments:
            urlSegments = urlSegments.length ? urlSegments : [''];
            if (this.service.isUrlProtected(urlSegments)) {
                return this.authGuard.canActivate();
            }
            return rxjs.of(true);
        };
        return ProtectedRoutesGuard;
    }());
    ProtectedRoutesGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProtectedRoutesGuard_Factory() { return new ProtectedRoutesGuard(i0.ɵɵinject(ProtectedRoutesService), i0.ɵɵinject(AuthGuard)); }, token: ProtectedRoutesGuard, providedIn: "root" });
    ProtectedRoutesGuard.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ProtectedRoutesGuard.ctorParameters = function () { return [
        { type: ProtectedRoutesService },
        { type: AuthGuard }
    ]; };

    var RouterEffects = /** @class */ (function () {
        function RouterEffects(actions$, router, location) {
            var _this = this;
            this.actions$ = actions$;
            this.router = router;
            this.location = location;
            this.navigate$ = this.actions$.pipe(i3.ofType(ROUTER_GO), operators.map(function (action) { return action.payload; }), operators.tap(function (_a) {
                var path = _a.path, queryParams = _a.query, extras = _a.extras;
                _this.router.navigate(path, Object.assign({ queryParams: queryParams }, extras));
            }));
            this.navigateByUrl$ = this.actions$.pipe(i3.ofType(ROUTER_GO_BY_URL), operators.map(function (action) { return action.payload; }), operators.tap(function (url) {
                _this.router.navigateByUrl(url);
            }));
            this.clearCmsRoutes$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN), operators.tap(function () {
                var filteredConfig = _this.router.config.filter(function (route) { return !(route.data && route.data.cxCmsRouteContext); });
                if (filteredConfig.length !== _this.router.config.length) {
                    _this.router.resetConfig(filteredConfig);
                }
            }));
            this.navigateBack$ = this.actions$.pipe(i3.ofType(ROUTER_BACK), operators.tap(function () { return _this.location.back(); }));
            this.navigateForward$ = this.actions$.pipe(i3.ofType(ROUTER_FORWARD), operators.tap(function () { return _this.location.forward(); }));
        }
        return RouterEffects;
    }());
    RouterEffects.decorators = [
        { type: i0.Injectable }
    ];
    RouterEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: i1$1.Router },
        { type: i1.Location }
    ]; };
    __decorate([
        i3.Effect({ dispatch: false })
    ], RouterEffects.prototype, "navigate$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], RouterEffects.prototype, "navigateByUrl$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], RouterEffects.prototype, "clearCmsRoutes$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], RouterEffects.prototype, "navigateBack$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], RouterEffects.prototype, "navigateForward$", void 0);

    var effects$6 = [RouterEffects];

    var initialState$d = {
        navigationId: 0,
        state: {
            url: '',
            queryParams: {},
            params: {},
            context: {
                id: '',
            },
            cmsRequired: false,
            semanticRoute: undefined,
        },
        nextState: undefined,
    };
    function getReducers$6() {
        return {
            router: reducer$d,
        };
    }
    function reducer$d(state, action) {
        if (state === void 0) { state = initialState$d; }
        switch (action.type) {
            case fromNgrxRouter.ROUTER_NAVIGATION: {
                return Object.assign(Object.assign({}, state), { nextState: action.payload.routerState, navigationId: action.payload.event.id });
            }
            case fromNgrxRouter.ROUTER_ERROR:
            case fromNgrxRouter.ROUTER_CANCEL: {
                return Object.assign(Object.assign({}, state), { nextState: undefined });
            }
            case fromNgrxRouter.ROUTER_NAVIGATED: {
                return {
                    state: action.payload.routerState,
                    navigationId: action.payload.event.id,
                    nextState: undefined,
                };
            }
            default: {
                return state;
            }
        }
    }
    var reducerToken$6 = new i0.InjectionToken('RouterReducers');
    var reducerProvider$6 = {
        provide: reducerToken$6,
        useFactory: getReducers$6,
    };
    /* The serializer is there to parse the RouterStateSnapshot,
    and to reduce the amount of properties to be passed to the reducer.
     */
    var CustomSerializer = /** @class */ (function () {
        function CustomSerializer(routingConfig) {
            this.routingConfig = routingConfig;
        }
        CustomSerializer.prototype.serialize = function (routerState) {
            var _a, _b;
            var state = routerState.root;
            var cmsRequired = false;
            var context;
            var semanticRoute;
            var urlString = '';
            while (state.firstChild) {
                state = state.firstChild;
                urlString +=
                    '/' + state.url.map(function (urlSegment) { return urlSegment.path; }).join('/');
                // we use semantic route information embedded from any parent route
                if ((_a = state.data) === null || _a === void 0 ? void 0 : _a.cxRoute) {
                    semanticRoute = (_b = state.data) === null || _b === void 0 ? void 0 : _b.cxRoute;
                }
                // we use context information embedded in Cms driven routes from any parent route
                if (state.data && state.data.cxCmsRouteContext) {
                    context = state.data.cxCmsRouteContext;
                }
                // we assume, that any route that has CmsPageGuard or it's child
                // is cmsRequired
                if (!cmsRequired &&
                    (context ||
                        (state.routeConfig &&
                            state.routeConfig.canActivate &&
                            state.routeConfig.canActivate.find(function (x) { return x && x.guardName === 'CmsPageGuard'; })))) {
                    cmsRequired = true;
                }
            }
            // If `semanticRoute` couldn't be already recognized using `data.cxRoute` property
            // let's lookup the routing configuration to find the semantic route that has exactly the same configured path as the current URL.
            // This will work only for simple URLs without any dynamic routing parameters.
            semanticRoute = semanticRoute || this.lookupSemanticRoute(urlString);
            var params = state.params;
            // we give smartedit preview page a PageContext
            if (state.url.length > 0 && state.url[0].path === 'cx-preview') {
                context = {
                    id: 'smartedit-preview',
                    type: exports.PageType.CONTENT_PAGE,
                };
            }
            else {
                if (params['productCode']) {
                    context = { id: params['productCode'], type: exports.PageType.PRODUCT_PAGE };
                }
                else if (params['categoryCode']) {
                    context = { id: params['categoryCode'], type: exports.PageType.CATEGORY_PAGE };
                }
                else if (params['brandCode']) {
                    context = { id: params['brandCode'], type: exports.PageType.CATEGORY_PAGE };
                }
                else if (state.data.pageLabel !== undefined) {
                    context = { id: state.data.pageLabel, type: exports.PageType.CONTENT_PAGE };
                }
                else if (!context) {
                    if (state.url.length > 0) {
                        var pageLabel = '/' + state.url.map(function (urlSegment) { return urlSegment.path; }).join('/');
                        context = {
                            id: pageLabel,
                            type: exports.PageType.CONTENT_PAGE,
                        };
                    }
                    else {
                        context = {
                            id: 'homepage',
                            type: exports.PageType.CONTENT_PAGE,
                        };
                    }
                }
            }
            return {
                url: routerState.url,
                queryParams: routerState.root.queryParams,
                params: params,
                context: context,
                cmsRequired: cmsRequired,
                semanticRoute: semanticRoute,
            };
        };
        /**
         * Returns the semantic route name for given page label.
         *
         * *NOTE*: It works only for simple static urls that are equal to the page label
         * of cms-driven content page. For example: `/my-account/address-book`.
         *
         * It doesn't work for URLs with dynamic parameters. But such case can be handled
         * by reading the defined `data.cxRoute` from the Angular Routes.
         *
         * @param path path to be found in the routing config
         */
        CustomSerializer.prototype.lookupSemanticRoute = function (path) {
            // Page label is assumed to start with `/`, but Spartacus configured paths
            // don't start with slash. So we remove the leading slash:
            return this.routingConfig.getRouteName(path.substr(1));
        };
        return CustomSerializer;
    }());
    CustomSerializer.decorators = [
        { type: i0.Injectable }
    ];
    CustomSerializer.ctorParameters = function () { return [
        { type: RoutingConfigService }
    ]; };

    function initConfigurableRoutes(service) {
        var result = function () { return service.init(); }; // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)
        return result;
    }
    var RoutingModule = /** @class */ (function () {
        function RoutingModule() {
        }
        RoutingModule.forRoot = function () {
            return {
                ngModule: RoutingModule,
                providers: [
                    reducerProvider$6,
                    {
                        provide: fromNgrxRouter.RouterStateSerializer,
                        useClass: CustomSerializer,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: initConfigurableRoutes,
                        deps: [ConfigurableRoutesService],
                        multi: true,
                    },
                ],
            };
        };
        return RoutingModule;
    }());
    RoutingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1$2.StoreModule.forFeature(ROUTING_FEATURE, reducerToken$6),
                        i3.EffectsModule.forFeature(effects$6),
                        fromNgrxRouter.StoreRouterConnectingModule.forRoot({
                            routerState: 1 /* Minimal */,
                            stateKey: ROUTING_FEATURE,
                        }),
                    ],
                },] }
    ];

    function getDefaultUrlMatcherFactory(routingConfigService, urlMatcherService) {
        var factory = function (route) {
            var routeName = route.data && route.data['cxRoute'];
            var routeConfig = routingConfigService.getRouteConfig(routeName);
            var paths = (routeConfig && routeConfig.paths) || [];
            return urlMatcherService.getFromPaths(paths);
        };
        return factory;
    }
    /**
     * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.
     * The provided url matcher matches the configured `paths` from routing config.
     *
     * If this matcher doesn't fit the requirements, it can be replaced with custom matcher
     * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.
     *
     * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
     */
    var DEFAULT_URL_MATCHER = new i0.InjectionToken('DEFAULT_URL_MATCHER', {
        providedIn: 'root',
        factory: function () { return getDefaultUrlMatcherFactory(i0.inject(RoutingConfigService), i0.inject(UrlMatcherService)); },
    });

    var NavigationEntryItemEffects = /** @class */ (function () {
        function NavigationEntryItemEffects(actions$, cmsComponentConnector, routingService) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsComponentConnector = cmsComponentConnector;
            this.routingService = routingService;
            this.loadNavigationItems$ = this.actions$.pipe(i3.ofType(LOAD_CMS_NAVIGATION_ITEMS), operators.map(function (action) { return action.payload; }), operators.map(function (payload) {
                return {
                    ids: _this.getIdListByItemType(payload.items),
                    nodeId: payload.nodeId,
                };
            }), operators.mergeMap(function (data) {
                if (data.ids.componentIds.length > 0) {
                    return _this.routingService.getRouterState().pipe(operators.filter(function (routerState) { return routerState !== undefined; }), operators.map(function (routerState) { return routerState.state.context; }), operators.take(1), operators.mergeMap(function (pageContext) {
                        // download all items in one request
                        return _this.cmsComponentConnector
                            .getList(data.ids.componentIds, pageContext)
                            .pipe(operators.map(function (components) { return new LoadCmsNavigationItemsSuccess({
                            nodeId: data.nodeId,
                            components: components,
                        }); }), operators.catchError(function (error) { return rxjs.of(new LoadCmsNavigationItemsFail(data.nodeId, makeErrorSerializable(error))); }));
                    }));
                }
                else if (data.ids.pageIds.length > 0) {
                    // TODO: future work
                    // dispatch action to load cms page one by one
                }
                else if (data.ids.mediaIds.length > 0) {
                    // TODO: future work
                    // send request to get list of media
                }
                else {
                    return rxjs.of(new LoadCmsNavigationItemsFail(data.nodeId, 'navigation nodes are empty'));
                }
            }));
        }
        // We only consider 3 item types: cms page, cms component, and media.
        NavigationEntryItemEffects.prototype.getIdListByItemType = function (itemList) {
            var pageIds = [];
            var componentIds = [];
            var mediaIds = [];
            itemList.forEach(function (item) {
                if (item.superType === 'AbstractCMSComponent') {
                    componentIds.push(item.id);
                }
                else if (item.superType === 'AbstractPage') {
                    pageIds.push(item.id);
                }
                else if (item.superType === 'AbstractMedia') {
                    mediaIds.push(item.id);
                }
            });
            return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };
        };
        return NavigationEntryItemEffects;
    }());
    NavigationEntryItemEffects.decorators = [
        { type: i0.Injectable }
    ];
    NavigationEntryItemEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CmsComponentConnector },
        { type: RoutingService }
    ]; };
    __decorate([
        i3.Effect()
    ], NavigationEntryItemEffects.prototype, "loadNavigationItems$", void 0);

    var CmsPageConnector = /** @class */ (function () {
        function CmsPageConnector(cmsPageAdapter, cmsStructureConfigService) {
            this.cmsPageAdapter = cmsPageAdapter;
            this.cmsStructureConfigService = cmsStructureConfigService;
        }
        /**
         * Returns an observable with the page structure. The page structure is
         * typically loaded from a backend, but can also be returned from static
         * configuration (see `CmsStructureConfigService`).
         */
        CmsPageConnector.prototype.get = function (pageContext) {
            var _this = this;
            return this.cmsStructureConfigService
                .shouldIgnoreBackend(pageContext.id)
                .pipe(operators.switchMap(function (loadFromConfig) {
                if (!loadFromConfig) {
                    return _this.cmsPageAdapter.load(pageContext).pipe(operators.catchError(function (error) {
                        if (error instanceof i1$4.HttpErrorResponse &&
                            error.status === 400) {
                            return rxjs.of({});
                        }
                        else {
                            return rxjs.throwError(error);
                        }
                    }));
                }
                else {
                    return rxjs.of({});
                }
            }), operators.switchMap(function (page) { return _this.mergeDefaultPageStructure(pageContext, page); }));
        };
        /**
         *
         * Merge default page structure inot the given `CmsStructureModel`.
         * This is benefitial for a fast setup of the UI without necessary
         * finegrained CMS setup.
         */
        CmsPageConnector.prototype.mergeDefaultPageStructure = function (pageContext, pageStructure) {
            return this.cmsStructureConfigService.mergePageStructure(pageContext.id, pageStructure);
        };
        return CmsPageConnector;
    }());
    CmsPageConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsPageConnector_Factory() { return new CmsPageConnector(i0.ɵɵinject(CmsPageAdapter), i0.ɵɵinject(CmsStructureConfigService)); }, token: CmsPageConnector, providedIn: "root" });
    CmsPageConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CmsPageConnector.ctorParameters = function () { return [
        { type: CmsPageAdapter },
        { type: CmsStructureConfigService }
    ]; };

    var PageEffects = /** @class */ (function () {
        function PageEffects(actions$, cmsPageConnector, routingService) {
            var _this = this;
            this.actions$ = actions$;
            this.cmsPageConnector = cmsPageConnector;
            this.routingService = routingService;
            this.refreshPage$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, LOGOUT, LOGIN), operators.switchMap(function () { return _this.routingService.getRouterState().pipe(operators.filter(function (routerState) { return routerState &&
                routerState.state &&
                routerState.state.cmsRequired &&
                !routerState.nextState; }), operators.take(1), operators.map(function (routerState) { return routerState.state.context; }), operators.mergeMap(function (context) { return rxjs.of(new LoadCmsPageData(context)); })); }));
            this.loadPageData$ = this.actions$.pipe(i3.ofType(LOAD_CMS_PAGE_DATA), operators.map(function (action) { return action.payload; }), operators.groupBy(function (pageContext) { return serializePageContext(pageContext); }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (pageContext) { return _this.cmsPageConnector.get(pageContext).pipe(operators.mergeMap(function (cmsStructure) {
                var actions = [
                    new CmsGetComponentFromPage(cmsStructure.components.map(function (component) { return ({
                        component: component,
                        pageContext: pageContext,
                    }); })),
                    new LoadCmsPageDataSuccess(pageContext, cmsStructure.page),
                ];
                var pageLabel = cmsStructure.page.label;
                // For content pages the page label returned from backend can be different than page ID initially assumed from route.
                // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.
                if (pageLabel && pageLabel !== pageContext.id) {
                    actions.unshift(new CmsSetPageSuccessIndex({ id: pageLabel, type: pageContext.type }, cmsStructure.page));
                }
                return actions;
            }), operators.catchError(function (error) { return rxjs.of(new LoadCmsPageDataFail(pageContext, makeErrorSerializable(error))); })); })); }));
        }
        return PageEffects;
    }());
    PageEffects.decorators = [
        { type: i0.Injectable }
    ];
    PageEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CmsPageConnector },
        { type: RoutingService }
    ]; };
    __decorate([
        i3.Effect()
    ], PageEffects.prototype, "refreshPage$", void 0);
    __decorate([
        i3.Effect()
    ], PageEffects.prototype, "loadPageData$", void 0);

    var effects$7 = [
        PageEffects,
        ComponentsEffects,
        NavigationEntryItemEffects,
    ];

    var initialState$e = {
        component: undefined,
        pageContext: {},
    };
    function componentExistsReducer(state, action) {
        switch (action.type) {
            case LOAD_CMS_COMPONENT_FAIL:
                return false;
            case CMS_GET_COMPONENT_FROM_PAGE:
            case LOAD_CMS_COMPONENT_SUCCESS:
                return true;
        }
        return state;
    }
    function reducer$e(state, action) {
        var _a, _b, _c, _d;
        if (state === void 0) { state = initialState$e; }
        switch (action.type) {
            case LOAD_CMS_COMPONENT: {
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                var context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), (_a = {}, _a[context] = pageContextReducer(state.pageContext[context], action), _a)) });
            }
            case LOAD_CMS_COMPONENT_FAIL: {
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                var context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), (_b = {}, _b[context] = pageContextReducer(state.pageContext[context], action), _b)) });
            }
            case LOAD_CMS_COMPONENT_SUCCESS: {
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                var context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), (_c = {}, _c[context] = pageContextReducer(state.pageContext[context], action), _c)) });
            }
            case CMS_GET_COMPONENT_FROM_PAGE: {
                var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
                if (!Array.isArray(action.payload)) {
                    var context = serializePageContext(action.payload.pageContext, true);
                    return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), (_d = {}, _d[context] = pageContextReducer(state.pageContext[context], action), _d)) });
                }
            }
        }
        return state;
    }

    var initialState$f = undefined;
    function reducer$f(state, action) {
        if (state === void 0) { state = initialState$f; }
        switch (action.type) {
            case LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {
                if (action.payload.components) {
                    var components = action.payload.components;
                    var newItem = components.reduce(function (compItems, component) {
                        var _a;
                        return Object.assign(Object.assign({}, compItems), (_a = {}, _a[component.uid + "_AbstractCMSComponent"] = component, _a));
                    }, Object.assign({}));
                    return Object.assign(Object.assign({}, state), newItem);
                }
            }
        }
        return state;
    }

    var initialState$g = { entities: {} };
    function reducer$g(state, action) {
        var _a;
        if (state === void 0) { state = initialState$g; }
        switch (action.type) {
            case LOAD_CMS_PAGE_DATA_SUCCESS: {
                var page = action.payload;
                return Object.assign(Object.assign({}, state), { entities: Object.assign(Object.assign({}, state.entities), (_a = {}, _a[page.pageId] = page, _a)) });
            }
        }
        return state;
    }

    var initialState$h = undefined;
    function reducer$h(entityType) {
        return function (state, action) {
            if (state === void 0) { state = initialState$h; }
            if (action.meta && action.meta.entityType === entityType) {
                switch (action.type) {
                    case LOAD_CMS_PAGE_DATA_SUCCESS: {
                        return action.payload.pageId;
                    }
                    case LOAD_CMS_PAGE_DATA_FAIL: {
                        return initialState$h;
                    }
                    case CMS_SET_PAGE_FAIL_INDEX: {
                        return action.payload;
                    }
                    case CMS_SET_PAGE_SUCCESS_INDEX: {
                        return action.payload.pageId;
                    }
                }
            }
            return state;
        };
    }

    function getReducers$7() {
        return {
            page: i1$2.combineReducers({
                pageData: reducer$g,
                index: i1$2.combineReducers({
                    content: entityLoaderReducer(exports.PageType.CONTENT_PAGE, reducer$h(exports.PageType.CONTENT_PAGE)),
                    product: entityLoaderReducer(exports.PageType.PRODUCT_PAGE, reducer$h(exports.PageType.PRODUCT_PAGE)),
                    category: entityLoaderReducer(exports.PageType.CATEGORY_PAGE, reducer$h(exports.PageType.CATEGORY_PAGE)),
                    catalog: entityLoaderReducer(exports.PageType.CATALOG_PAGE, reducer$h(exports.PageType.CATALOG_PAGE)),
                }),
            }),
            components: entityReducer(COMPONENT_ENTITY, reducer$e),
            navigation: entityLoaderReducer(NAVIGATION_DETAIL_ENTITY, reducer$f),
        };
    }
    var reducerToken$7 = new i0.InjectionToken('CmsReducers');
    var reducerProvider$7 = {
        provide: reducerToken$7,
        useFactory: getReducers$7,
    };
    function clearCmsState(reducer) {
        return function (state, action) {
            if (action.type === LANGUAGE_CHANGE ||
                action.type === LOGOUT ||
                action.type === LOGIN) {
                state = undefined;
            }
            return reducer(state, action);
        };
    }
    var metaReducers$2 = [clearCmsState];

    function cmsStoreConfigFactory() {
        var _a;
        // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[CMS_FEATURE] = exports.StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var CmsStoreModule = /** @class */ (function () {
        function CmsStoreModule() {
        }
        return CmsStoreModule;
    }());
    CmsStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(CMS_FEATURE, reducerToken$7, { metaReducers: metaReducers$2 }),
                        i3.EffectsModule.forFeature(effects$7),
                    ],
                    providers: [
                        provideDefaultConfigFactory(cmsStoreConfigFactory),
                        reducerProvider$7,
                    ],
                },] }
    ];

    var CmsModule = /** @class */ (function () {
        function CmsModule() {
        }
        CmsModule.forRoot = function () {
            return {
                ngModule: CmsModule,
                providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],
            };
        };
        return CmsModule;
    }());
    CmsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [CmsStoreModule, CmsPageTitleModule],
                },] }
    ];

    var PageMetaService = /** @class */ (function () {
        function PageMetaService(cms, unifiedInjector) {
            this.cms = cms;
            this.unifiedInjector = unifiedInjector;
            this.resolvers$ = this.unifiedInjector
                .getMulti(PageMetaResolver)
                .pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
            /**
             * The list of resolver interfaces will be evaluated for the pageResolvers.
             *
             * TOOD: optimize browser vs SSR resolvers; image, robots and description
             *       aren't needed during browsing.
             * TODO: we can make the list of resolver types configurable
             */
            this.resolverMethods = {
                title: 'resolveTitle',
                heading: 'resolveHeading',
                description: 'resolveDescription',
                breadcrumbs: 'resolveBreadcrumbs',
                image: 'resolveImage',
                robots: 'resolveRobots',
            };
        }
        PageMetaService.prototype.getMeta = function () {
            var _this = this;
            return this.cms.getCurrentPage().pipe(operators.filter(Boolean), operators.switchMap(function (page) { return _this.getMetaResolver(page); }), operators.switchMap(function (metaResolver) { return metaResolver ? _this.resolve(metaResolver) : rxjs.of(null); }));
        };
        /**
         * If a `PageResolver` has implemented a resolver interface, the resolved data
         * is merged into the `PageMeta` object.
         * @param metaResolver
         */
        PageMetaService.prototype.resolve = function (metaResolver) {
            var _this = this;
            var resolveMethods = Object.keys(this.resolverMethods)
                .filter(function (key) { return metaResolver[_this.resolverMethods[key]]; })
                .map(function (key) { return metaResolver[_this.resolverMethods[key]]().pipe(operators.map(function (data) {
                var _a;
                return (_a = {},
                    _a[key] = data,
                    _a);
            })); });
            return rxjs.combineLatest(resolveMethods).pipe(operators.debounceTime(0), // avoid partial data emissions when all methods resolve at the same time
            operators.map(function (data) { return Object.assign.apply(Object, __spread([{}], data)); }));
        };
        /**
         * Return the resolver with the best match, based on a score
         * generated by the resolver.
         *
         * Resolvers match by default on `PageType` and `page.template`.
         */
        PageMetaService.prototype.getMetaResolver = function (page) {
            return this.resolvers$.pipe(operators.map(function (resolvers) { return resolveApplicable(resolvers, [page], [page]); }));
        };
        return PageMetaService;
    }());
    PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(CmsService), i0.ɵɵinject(UnifiedInjector)); }, token: PageMetaService, providedIn: "root" });
    PageMetaService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PageMetaService.ctorParameters = function () { return [
        { type: CmsService },
        { type: UnifiedInjector }
    ]; };

    var SmartEditService = /** @class */ (function () {
        function SmartEditService(cmsService, routingService, baseSiteService, zone, winRef) {
            var _this = this;
            this.cmsService = cmsService;
            this.routingService = routingService;
            this.baseSiteService = baseSiteService;
            this.zone = zone;
            this.winRef = winRef;
            this.isPreviewPage = false;
            this._launchedInSmartEdit = false;
            this.getCmsTicket();
            if (winRef.nativeWindow) {
                var window = winRef.nativeWindow;
                // rerender components and slots after editing
                window.smartedit = window.smartedit || {};
                window.smartedit.renderComponent = function (componentId, componentType, parentId) {
                    return _this.renderComponent(componentId, componentType, parentId);
                };
                // reprocess page
                window.smartedit.reprocessPage = this.reprocessPage;
            }
        }
        Object.defineProperty(SmartEditService.prototype, "cmsTicketId", {
            get: function () {
                return this._cmsTicketId;
            },
            enumerable: false,
            configurable: true
        });
        SmartEditService.prototype.getCmsTicket = function () {
            var _this = this;
            rxjs.combineLatest([
                this.cmsService.getCurrentPage(),
                this.routingService.getRouterState(),
            ])
                .pipe(operators.takeWhile(function (_a) {
                var _b = __read(_a, 1), cmsPage = _b[0];
                return cmsPage === undefined;
            }), operators.filter(function (_a) {
                var _b = __read(_a, 2), routerState = _b[1];
                if (routerState.nextState && !_this._cmsTicketId) {
                    _this._cmsTicketId =
                        routerState.nextState.queryParams['cmsTicketId'];
                    if (_this._cmsTicketId) {
                        return true;
                    }
                }
                return false;
            }), operators.take(1))
                .subscribe(function () {
                _this._launchedInSmartEdit = true;
                _this.getDefaultPreviewCode();
            });
        };
        SmartEditService.prototype.getDefaultPreviewCode = function () {
            var _this = this;
            this.baseSiteService
                .getBaseSiteData()
                .pipe(operators.filter(function (site) { return Object.keys(site).length !== 0; }), operators.take(1))
                .subscribe(function (site) {
                _this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;
                _this.defaultPreviewProductCode = site.defaultPreviewProductCode;
                _this.addPageContract();
            });
        };
        SmartEditService.prototype.addPageContract = function () {
            var _this = this;
            this.cmsService.getCurrentPage().subscribe(function (cmsPage) {
                if (cmsPage && _this._cmsTicketId) {
                    _this._currentPageId = cmsPage.pageId;
                    // before adding contract to page, we need redirect to that page
                    _this.goToPreviewPage(cmsPage);
                    // remove old page contract
                    var previousContract_1 = [];
                    Array.from(_this.winRef.document.body.classList).forEach(function (attr) { return previousContract_1.push(attr); });
                    previousContract_1.forEach(function (attr) { return _this.winRef.document.body.classList.remove(attr); });
                    // add new page contract
                    if (cmsPage.properties && cmsPage.properties.smartedit) {
                        var seClasses = cmsPage.properties.smartedit.classes.split(' ');
                        seClasses.forEach(function (classItem) {
                            _this.winRef.document.body.classList.add(classItem);
                        });
                    }
                }
            });
        };
        SmartEditService.prototype.goToPreviewPage = function (cmsPage) {
            // only the first page is the smartedit preview page
            if (!this.isPreviewPage) {
                this.isPreviewPage = true;
                if (cmsPage.type === exports.PageType.PRODUCT_PAGE &&
                    this.defaultPreviewProductCode) {
                    this.routingService.go({
                        cxRoute: 'product',
                        params: { code: this.defaultPreviewProductCode, name: '' },
                    });
                }
                else if (cmsPage.type === exports.PageType.CATEGORY_PAGE &&
                    this.defaultPreviewCategoryCode) {
                    this.routingService.go({
                        cxRoute: 'category',
                        params: { code: this.defaultPreviewCategoryCode },
                    });
                }
            }
        };
        SmartEditService.prototype.renderComponent = function (componentId, componentType, parentId) {
            var _this = this;
            if (componentId) {
                this.zone.run(function () {
                    // without parentId, it is slot
                    if (!parentId) {
                        if (_this._currentPageId) {
                            _this.cmsService.refreshPageById(_this._currentPageId);
                        }
                        else {
                            _this.cmsService.refreshLatestPage();
                        }
                    }
                    else if (componentType) {
                        _this.cmsService.refreshComponent(componentId);
                    }
                });
            }
            return true;
        };
        SmartEditService.prototype.reprocessPage = function () {
            // TODO: reprocess page API
        };
        /**
         * Whether the app launched in smart edit
         */
        SmartEditService.prototype.isLaunchedInSmartEdit = function () {
            return this._launchedInSmartEdit;
        };
        return SmartEditService;
    }());
    SmartEditService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SmartEditService_Factory() { return new SmartEditService(i0.ɵɵinject(CmsService), i0.ɵɵinject(RoutingService), i0.ɵɵinject(BaseSiteService), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(WindowRef)); }, token: SmartEditService, providedIn: "root" });
    SmartEditService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SmartEditService.ctorParameters = function () { return [
        { type: CmsService },
        { type: RoutingService },
        { type: BaseSiteService },
        { type: i0.NgZone },
        { type: WindowRef }
    ]; };

    var DynamicAttributeService = /** @class */ (function () {
        function DynamicAttributeService(smartEditService) {
            this.smartEditService = smartEditService;
        }
        /**
         * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.
         * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.
         * For example, personalization may add 'script' group etc.
         * @param element: slot or cms component element
         * @param renderer
         * @param cmsRenderingContext: an object containing properties in each cms item response data
         */
        DynamicAttributeService.prototype.addDynamicAttributes = function (element, renderer, cmsRenderingContext) {
            var _a, _b;
            var properties = ((_a = cmsRenderingContext.componentData) === null || _a === void 0 ? void 0 : _a.properties) || ((_b = cmsRenderingContext.slotData) === null || _b === void 0 ? void 0 : _b.properties);
            if (properties && this.smartEditService.isLaunchedInSmartEdit()) {
                // check each group of properties, e.g. smartedit
                Object.keys(properties).forEach(function (group) {
                    var name = 'data-' + group + '-';
                    var groupProps = properties[group];
                    // check each property in the group
                    Object.keys(groupProps).forEach(function (propName) {
                        var propValue = groupProps[propName];
                        if (propName === 'classes') {
                            var classes = propValue.split(' ');
                            classes.forEach(function (classItem) {
                                element.classList.add(classItem);
                            });
                        }
                        else {
                            renderer.setAttribute(element, name +
                                propName
                                    .split(/(?=[A-Z])/)
                                    .join('-')
                                    .toLowerCase(), propValue);
                        }
                    });
                });
            }
        };
        return DynamicAttributeService;
    }());
    DynamicAttributeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicAttributeService_Factory() { return new DynamicAttributeService(i0.ɵɵinject(SmartEditService)); }, token: DynamicAttributeService, providedIn: "root" });
    DynamicAttributeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    DynamicAttributeService.ctorParameters = function () { return [
        { type: SmartEditService }
    ]; };

    function configInitializerFactory(configInitializer, initializers) {
        var isReady = function () { return configInitializer.initialize(initializers); };
        return isReady;
    }
    function locationInitializedFactory(configInitializer) {
        return configInitializer.getStableConfig();
    }
    var ConfigInitializerModule = /** @class */ (function () {
        function ConfigInitializerModule() {
        }
        ConfigInitializerModule.forRoot = function () {
            return {
                ngModule: ConfigInitializerModule,
                providers: [
                    {
                        provide: CONFIG_INITIALIZER_FORROOT_GUARD,
                        useValue: true,
                    },
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        useFactory: configInitializerFactory,
                        deps: [
                            ConfigInitializerService,
                            [new i0.Optional(), CONFIG_INITIALIZER],
                        ],
                    },
                    {
                        // Hold on the initial navigation until the Spartacus configuration is stable
                        provide: i1.LOCATION_INITIALIZED,
                        useFactory: locationInitializedFactory,
                        deps: [ConfigInitializerService],
                    },
                ],
            };
        };
        return ConfigInitializerModule;
    }());
    ConfigInitializerModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    function configValidatorFactory(configInitializer, validators) {
        var validate = function () {
            if (i0.isDevMode()) {
                configInitializer
                    .getStableConfig()
                    .then(function (config) { return validateConfig(config, validators || []); });
            }
        };
        return validate;
    }
    /**
     * Should stay private in 1.x
     * as forRoot() is used internally by ConfigInitializerModule
     *
     * issue: #5279
     */
    var ConfigValidatorModule = /** @class */ (function () {
        function ConfigValidatorModule() {
        }
        ConfigValidatorModule.forRoot = function () {
            return {
                ngModule: ConfigValidatorModule,
                providers: [
                    {
                        provide: i0.APP_INITIALIZER,
                        multi: true,
                        useFactory: configValidatorFactory,
                        deps: [
                            ConfigInitializerService,
                            [new i0.Optional(), ConfigValidatorToken],
                        ],
                    },
                ],
            };
        };
        return ConfigValidatorModule;
    }());
    ConfigValidatorModule.decorators = [
        { type: i0.NgModule }
    ];

    function getCookie(cookie, name) {
        var regExp = new RegExp('(?:^|;\\s*)' + name + '=([^;]*)', 'g');
        var result = regExp.exec(cookie);
        return (result && decodeURIComponent(result[1])) || '';
    }

    var TEST_CONFIG_COOKIE_NAME = new i0.InjectionToken('TEST_CONFIG_COOKIE_NAME');
    function parseConfigJSON(config) {
        try {
            return JSON.parse(decodeURIComponent(config));
        }
        catch (_) {
            return {};
        }
    }
    function configFromCookieFactory(cookieName, platform, document) {
        if (i1.isPlatformBrowser(platform) && cookieName) {
            var config = getCookie(document.cookie, cookieName);
            return parseConfigJSON(config);
        }
        return {};
    }
    /**
     * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).
     *
     * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
     */
    var TestConfigModule = /** @class */ (function () {
        function TestConfigModule() {
        }
        /**
         * Injects JSON config from the cookie of the given name.
         *
         * Be aware of the cookie limitations (4096 bytes).
         *
         * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
         */
        TestConfigModule.forRoot = function (options) {
            return {
                ngModule: TestConfigModule,
                providers: [
                    {
                        provide: TEST_CONFIG_COOKIE_NAME,
                        useValue: options && options.cookie,
                    },
                    provideConfigFactory(configFromCookieFactory, [
                        TEST_CONFIG_COOKIE_NAME,
                        i0.PLATFORM_ID,
                        i1.DOCUMENT,
                    ]),
                ],
            };
        };
        return TestConfigModule;
    }());
    TestConfigModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    // type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy
    var CxDatePipe = /** @class */ (function (_super) {
        __extends(CxDatePipe, _super);
        function CxDatePipe(language) {
            var _this = _super.call(this, null) || this;
            _this.language = language;
            return _this;
        }
        CxDatePipe.prototype.transform = function (value, format, timezone) {
            return _super.prototype.transform.call(this, value, format, timezone, this.getLang());
        };
        CxDatePipe.prototype.getLang = function () {
            var lang = this.getActiveLang();
            try {
                i1.getLocaleId(lang);
                return lang;
            }
            catch (_a) {
                this.reportMissingLocaleData(lang);
                return 'en';
            }
        };
        CxDatePipe.prototype.getActiveLang = function () {
            var result;
            this.language
                .getActive()
                .subscribe(function (lang) { return (result = lang); })
                .unsubscribe();
            return result;
        };
        CxDatePipe.prototype.reportMissingLocaleData = function (lang) {
            if (i0.isDevMode()) {
                console.warn("cxDate pipe: No locale data registered for '" + lang + "' (see https://angular.io/api/common/registerLocaleData).");
            }
        };
        return CxDatePipe;
    }(i1.DatePipe));
    CxDatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'cxDate' },] }
    ];
    CxDatePipe.ctorParameters = function () { return [
        { type: LanguageService }
    ]; };

    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(service, cd) {
            this.service = service;
            this.cd = cd;
        }
        TranslatePipe.prototype.transform = function (input, options) {
            if (options === void 0) { options = {}; }
            if (!input) {
                if (i0.isDevMode()) {
                    console.error("The given input for the cxTranslate pipe (" + input + ") is invalid and cannot be translated");
                }
                return;
            }
            if (input.raw) {
                return input.raw;
            }
            var key = typeof input === 'string' ? input : input.key;
            if (typeof input !== 'string') {
                options = Object.assign(Object.assign({}, options), input.params);
            }
            this.translate(key, options);
            return this.translatedValue;
        };
        TranslatePipe.prototype.translate = function (key, options) {
            var _this = this;
            if (key !== this.lastKey ||
                !shallowEqualObjects(options, this.lastOptions)) {
                this.lastKey = key;
                this.lastOptions = options;
                if (this.sub) {
                    this.sub.unsubscribe();
                }
                this.sub = this.service
                    .translate(key, options, true)
                    .subscribe(function (val) { return _this.markForCheck(val); });
            }
        };
        TranslatePipe.prototype.markForCheck = function (value) {
            this.translatedValue = value;
            this.cd.markForCheck();
        };
        TranslatePipe.prototype.ngOnDestroy = function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        return TranslatePipe;
    }());
    TranslatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'cxTranslate', pure: false },] }
    ];
    TranslatePipe.ctorParameters = function () { return [
        { type: TranslationService },
        { type: i0.ChangeDetectorRef }
    ]; };

    var I18nConfig = /** @class */ (function () {
        function I18nConfig() {
        }
        return I18nConfig;
    }());
    I18nConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function I18nConfig_Factory() { return i0.ɵɵinject(Config); }, token: I18nConfig, providedIn: "root" });
    I18nConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var TranslationChunkService = /** @class */ (function () {
        function TranslationChunkService(config) {
            var _this = this;
            this.config = config;
            this.duplicates = {};
            this.chunks = {};
            this.KEY_SEPARATOR = '.';
            var chunks = (config.i18n && config.i18n.chunks) || {};
            Object.keys(chunks).forEach(function (chunk) {
                chunks[chunk].forEach(function (key) {
                    if (_this.chunks.hasOwnProperty(key)) {
                        if (!_this.duplicates[key]) {
                            _this.duplicates[key] = [_this.chunks[key]];
                        }
                        _this.duplicates[key].push(chunk);
                    }
                    else {
                        _this.chunks[key] = chunk;
                    }
                });
            });
            if (Object.keys(this.duplicates).length > 0 && i0.isDevMode()) {
                this.warnDuplicates(this.duplicates);
            }
        }
        TranslationChunkService.prototype.getChunkNameForKey = function (key) {
            var mainKey = (key || '').split(this.KEY_SEPARATOR)[0];
            var chunk = this.chunks && this.chunks[mainKey];
            if (!chunk) {
                return mainKey; // fallback to main key as a chunk
            }
            return chunk;
        };
        TranslationChunkService.prototype.warnDuplicates = function (items) {
            var _this = this;
            var dupes = [];
            Object.keys(items).forEach(function (key) {
                dupes.push("* '" + key + "' found in chunks: " + items[key].join(', ') + ". Used '" + _this.chunks[key] + "." + key + "'.");
            });
            console.warn("Duplicated keys has been found in the config of i18n chunks:\n" + dupes.join('\n'));
        };
        return TranslationChunkService;
    }());
    TranslationChunkService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslationChunkService_Factory() { return new TranslationChunkService(i0.ɵɵinject(I18nConfig)); }, token: TranslationChunkService, providedIn: "root" });
    TranslationChunkService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    TranslationChunkService.ctorParameters = function () { return [
        { type: I18nConfig }
    ]; };

    var defaultI18nConfig = {
        i18n: {
            fallbackLang: false,
            debug: false,
        },
    };

    function i18nextInit(configInit, languageService, httpClient, serverRequestOrigin) {
        return function () { return configInit.getStableConfig('i18n').then(function (config) {
            var i18nextConfig = {
                ns: [],
                fallbackLng: config.i18n.fallbackLang,
                debug: config.i18n.debug,
                interpolation: {
                    escapeValue: false,
                },
            };
            if (config.i18n.backend) {
                i18next__default['default'].use(i18nextXhrBackend__default['default']);
                var loadPath = getLoadPath(config.i18n.backend.loadPath, serverRequestOrigin);
                var backend = {
                    loadPath: loadPath,
                    ajax: i18nextGetHttpClient(httpClient),
                };
                i18nextConfig = Object.assign(Object.assign({}, i18nextConfig), { backend: backend });
            }
            return i18next__default['default'].init(i18nextConfig, function () {
                // Don't use i18next's 'resources' config key for adding static translations,
                // because it will disable loading chunks from backend. We add resources here, in the init's callback.
                i18nextAddTranslations(config.i18n.resources);
                syncI18nextWithSiteContext(languageService);
            });
        }); };
    }
    function i18nextAddTranslations(resources) {
        if (resources === void 0) { resources = {}; }
        Object.keys(resources).forEach(function (lang) {
            Object.keys(resources[lang]).forEach(function (chunkName) {
                i18next__default['default'].addResourceBundle(lang, chunkName, resources[lang][chunkName], true, true);
            });
        });
    }
    function syncI18nextWithSiteContext(language) {
        // always update language of i18next on site context (language) change
        language.getActive().subscribe(function (lang) { return i18next__default['default'].changeLanguage(lang); });
    }
    /**
     * Returns a function appropriate for i18next to make http calls for JSON files.
     * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options
     *
     * It uses Angular HttpClient under the hood, so it works in SSR.
     * @param httpClient Angular http client
     */
    function i18nextGetHttpClient(httpClient) {
        return function (url, _options, callback, _data) {
            httpClient.get(url, { responseType: 'text' }).subscribe(function (data) { return callback(data, { status: 200 }); }, function (error) { return callback(null, { status: error.status }); });
        };
    }
    /**
     * Resolves the relative path to the absolute one in SSR, using the server request's origin.
     * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:
     * - https://github.com/angular/angular/issues/19224
     * - https://github.com/angular/universal/issues/858
     */
    function getLoadPath(path, serverRequestOrigin) {
        if (!path) {
            return undefined;
        }
        if (serverRequestOrigin && !path.match(/^http(s)?:\/\//)) {
            if (path.startsWith('/')) {
                path = path.slice(1);
            }
            if (path.startsWith('./')) {
                path = path.slice(2);
            }
            var result = serverRequestOrigin + "/" + path;
            return result;
        }
        return path;
    }

    var ɵ0$F = i18nextInit;
    var i18nextProviders = [
        {
            provide: i0.APP_INITIALIZER,
            useFactory: ɵ0$F,
            deps: [
                ConfigInitializerService,
                LanguageService,
                i1$4.HttpClient,
                [new i0.Optional(), SERVER_REQUEST_ORIGIN],
            ],
            multi: true,
        },
    ];

    var I18nextTranslationService = /** @class */ (function () {
        function I18nextTranslationService(config, translationChunk) {
            this.config = config;
            this.translationChunk = translationChunk;
            this.NON_BREAKING_SPACE = String.fromCharCode(160);
            this.NAMESPACE_SEPARATOR = ':';
        }
        I18nextTranslationService.prototype.translate = function (key, options, whitespaceUntilLoaded) {
            var _this = this;
            if (options === void 0) { options = {}; }
            if (whitespaceUntilLoaded === void 0) { whitespaceUntilLoaded = false; }
            // If we've already loaded the chunk (or failed to load), we should immediately emit the value
            // (or the fallback value in case the key is missing).
            // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).
            // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,
            // which together with `switchMap` operator may lead to an infinite loop.
            var chunkName = this.translationChunk.getChunkNameForKey(key);
            var namespacedKey = this.getNamespacedKey(key, chunkName);
            return new rxjs.Observable(function (subscriber) {
                var translate = function () {
                    if (!i18next__default['default'].isInitialized) {
                        return;
                    }
                    if (i18next__default['default'].exists(namespacedKey, options)) {
                        subscriber.next(i18next__default['default'].t(namespacedKey, options));
                    }
                    else {
                        if (whitespaceUntilLoaded) {
                            subscriber.next(_this.NON_BREAKING_SPACE);
                        }
                        i18next__default['default'].loadNamespaces(chunkName, function () {
                            if (!i18next__default['default'].exists(namespacedKey, options)) {
                                _this.reportMissingKey(key, chunkName);
                                subscriber.next(_this.getFallbackValue(namespacedKey));
                            }
                            else {
                                subscriber.next(i18next__default['default'].t(namespacedKey, options));
                            }
                        });
                    }
                };
                translate();
                i18next__default['default'].on('languageChanged', translate);
                return function () { return i18next__default['default'].off('languageChanged', translate); };
            });
        };
        I18nextTranslationService.prototype.loadChunks = function (chunkNames) {
            return i18next__default['default'].loadNamespaces(chunkNames);
        };
        /**
         * Returns a fallback value in case when the given key is missing
         * @param key
         */
        I18nextTranslationService.prototype.getFallbackValue = function (key) {
            return i0.isDevMode() ? "[" + key + "]" : this.NON_BREAKING_SPACE;
        };
        I18nextTranslationService.prototype.reportMissingKey = function (key, chunkName) {
            if (i0.isDevMode()) {
                console.warn("Translation key missing '" + key + "' in the chunk '" + chunkName + "'");
            }
        };
        I18nextTranslationService.prototype.getNamespacedKey = function (key, chunk) {
            return chunk + this.NAMESPACE_SEPARATOR + key;
        };
        return I18nextTranslationService;
    }());
    I18nextTranslationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function I18nextTranslationService_Factory() { return new I18nextTranslationService(i0.ɵɵinject(I18nConfig), i0.ɵɵinject(TranslationChunkService)); }, token: I18nextTranslationService, providedIn: "root" });
    I18nextTranslationService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    I18nextTranslationService.ctorParameters = function () { return [
        { type: I18nConfig },
        { type: TranslationChunkService }
    ]; };

    var I18nModule = /** @class */ (function () {
        function I18nModule() {
        }
        I18nModule.forRoot = function () {
            return {
                ngModule: I18nModule,
                providers: __spread([
                    provideDefaultConfig(defaultI18nConfig),
                    { provide: TranslationService, useExisting: I18nextTranslationService }
                ], i18nextProviders),
            };
        };
        return I18nModule;
    }());
    I18nModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [TranslatePipe, CxDatePipe],
                    exports: [TranslatePipe, CxDatePipe],
                },] }
    ];

    function mockTranslate(key, options) {
        if (options === void 0) { options = {}; }
        var optionsString = Object.keys(options)
            .sort()
            .map(function (optionName) { return optionName + ":" + options[optionName]; })
            .join(' ');
        return optionsString ? key + " " + optionsString : key;
    }

    var MockTranslatePipe = /** @class */ (function () {
        function MockTranslatePipe() {
        }
        MockTranslatePipe.prototype.transform = function (input, options) {
            if (options === void 0) { options = {}; }
            if (input.raw) {
                return input.raw;
            }
            var key = typeof input === 'string' ? input : input.key;
            if (typeof input !== 'string') {
                options = Object.assign(Object.assign({}, options), input.params);
            }
            return mockTranslate(key, options);
        };
        return MockTranslatePipe;
    }());
    MockTranslatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'cxTranslate' },] }
    ];

    var MockTranslationService = /** @class */ (function () {
        function MockTranslationService() {
        }
        MockTranslationService.prototype.translate = function (key, options, _whitespaceUntilLoaded) {
            if (options === void 0) { options = {}; }
            if (_whitespaceUntilLoaded === void 0) { _whitespaceUntilLoaded = false; }
            return new rxjs.Observable(function (subscriber) {
                var value = mockTranslate(key, options);
                subscriber.next(value);
                subscriber.complete();
            });
        };
        MockTranslationService.prototype.loadChunks = function (_chunks) {
            return Promise.resolve();
        };
        return MockTranslationService;
    }());
    MockTranslationService.decorators = [
        { type: i0.Injectable }
    ];

    var MockDatePipe = /** @class */ (function (_super) {
        __extends(MockDatePipe, _super);
        function MockDatePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MockDatePipe.prototype.transform = function (value, format, timezone) {
            return _super.prototype.transform.call(this, value, format, timezone, 'en');
        };
        return MockDatePipe;
    }(i1.DatePipe));
    MockDatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'cxDate' },] }
    ];

    var I18nTestingModule = /** @class */ (function () {
        function I18nTestingModule() {
        }
        return I18nTestingModule;
    }());
    I18nTestingModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [MockTranslatePipe, MockDatePipe],
                    exports: [MockTranslatePipe, MockDatePipe],
                    providers: [
                        { provide: TranslationService, useClass: MockTranslationService },
                    ],
                },] }
    ];

    var CostCenterModule = /** @class */ (function () {
        function CostCenterModule() {
        }
        CostCenterModule.forRoot = function () {
            return {
                ngModule: CostCenterModule,
                providers: [],
            };
        };
        return CostCenterModule;
    }());
    CostCenterModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    var defaultPersonalizationConfig = {
        personalization: {
            enabled: false,
            httpHeaderName: {
                id: 'Occ-Personalization-Id',
                timestamp: 'Occ-Personalization-Time',
            },
            context: {
                slotPosition: 'PlaceholderContentSlot',
                componentId: 'PersonalizationScriptComponent',
            },
        },
    };

    var PersonalizationConfig = /** @class */ (function () {
        function PersonalizationConfig() {
        }
        return PersonalizationConfig;
    }());
    PersonalizationConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function PersonalizationConfig_Factory() { return i0.ɵɵinject(Config); }, token: PersonalizationConfig, providedIn: "root" });
    PersonalizationConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var PERSONALIZATION_ID_KEY = 'personalization-id';
    var OccPersonalizationIdInterceptor = /** @class */ (function () {
        function OccPersonalizationIdInterceptor(config, occEndpoints, winRef, platform) {
            this.config = config;
            this.occEndpoints = occEndpoints;
            this.winRef = winRef;
            this.platform = platform;
            this.enabled = false;
            if (i1.isPlatformBrowser(this.platform)) {
                this.enabled =
                    (this.winRef.localStorage && this.config.personalization.enabled) ||
                        false;
                if (this.enabled) {
                    this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();
                    this.personalizationId = this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY);
                }
                else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {
                    this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);
                }
            }
        }
        OccPersonalizationIdInterceptor.prototype.intercept = function (request, next) {
            var _a;
            var _this = this;
            if (!this.enabled) {
                return next.handle(request);
            }
            if (this.personalizationId &&
                request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setHeaders: (_a = {},
                        _a[this.requestHeader] = this.personalizationId,
                        _a),
                });
            }
            return next.handle(request).pipe(operators.tap(function (event) {
                if (event instanceof i1$4.HttpResponse) {
                    if (event.headers.keys().includes(_this.requestHeader)) {
                        var receivedId = event.headers.get(_this.requestHeader);
                        if (_this.personalizationId !== receivedId) {
                            _this.personalizationId = receivedId;
                            _this.winRef.localStorage.setItem(PERSONALIZATION_ID_KEY, _this.personalizationId);
                        }
                    }
                }
            }));
        };
        return OccPersonalizationIdInterceptor;
    }());
    OccPersonalizationIdInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccPersonalizationIdInterceptor_Factory() { return new OccPersonalizationIdInterceptor(i0.ɵɵinject(PersonalizationConfig), i0.ɵɵinject(OccEndpointsService), i0.ɵɵinject(WindowRef), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: OccPersonalizationIdInterceptor, providedIn: "root" });
    OccPersonalizationIdInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccPersonalizationIdInterceptor.ctorParameters = function () { return [
        { type: PersonalizationConfig },
        { type: OccEndpointsService },
        { type: WindowRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };

    var PERSONALIZATION_TIME_KEY = 'personalization-time';
    var OccPersonalizationTimeInterceptor = /** @class */ (function () {
        function OccPersonalizationTimeInterceptor(config, occEndpoints, winRef, platform) {
            this.config = config;
            this.occEndpoints = occEndpoints;
            this.winRef = winRef;
            this.platform = platform;
            this.enabled = false;
            if (i1.isPlatformBrowser(this.platform)) {
                this.enabled =
                    (this.winRef.localStorage && this.config.personalization.enabled) ||
                        false;
                if (this.enabled) {
                    this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();
                    this.timestamp = this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY);
                }
                else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {
                    this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);
                }
            }
        }
        OccPersonalizationTimeInterceptor.prototype.intercept = function (request, next) {
            var _a;
            var _this = this;
            if (!this.enabled) {
                return next.handle(request);
            }
            if (this.timestamp &&
                request.url.includes(this.occEndpoints.getBaseEndpoint())) {
                request = request.clone({
                    setHeaders: (_a = {},
                        _a[this.requestHeader] = this.timestamp,
                        _a),
                });
            }
            return next.handle(request).pipe(operators.tap(function (event) {
                if (event instanceof i1$4.HttpResponse) {
                    if (event.headers.keys().includes(_this.requestHeader)) {
                        var receivedTimestamp = event.headers.get(_this.requestHeader);
                        if (_this.timestamp !== receivedTimestamp) {
                            _this.timestamp = receivedTimestamp;
                            _this.winRef.localStorage.setItem(PERSONALIZATION_TIME_KEY, _this.timestamp);
                        }
                    }
                }
            }));
        };
        return OccPersonalizationTimeInterceptor;
    }());
    OccPersonalizationTimeInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccPersonalizationTimeInterceptor_Factory() { return new OccPersonalizationTimeInterceptor(i0.ɵɵinject(PersonalizationConfig), i0.ɵɵinject(OccEndpointsService), i0.ɵɵinject(WindowRef), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: OccPersonalizationTimeInterceptor, providedIn: "root" });
    OccPersonalizationTimeInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    OccPersonalizationTimeInterceptor.ctorParameters = function () { return [
        { type: PersonalizationConfig },
        { type: OccEndpointsService },
        { type: WindowRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };

    var interceptors$3 = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: OccPersonalizationIdInterceptor,
            multi: true,
        },
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: OccPersonalizationTimeInterceptor,
            multi: true,
        },
    ];

    var PersonalizationModule = /** @class */ (function () {
        function PersonalizationModule() {
        }
        PersonalizationModule.forRoot = function () {
            return {
                ngModule: PersonalizationModule,
                providers: __spread([
                    provideDefaultConfig(defaultPersonalizationConfig)
                ], interceptors$3),
            };
        };
        return PersonalizationModule;
    }());
    PersonalizationModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    var PersonalizationContextService = /** @class */ (function () {
        function PersonalizationContextService(config, cmsService) {
            this.config = config;
            this.cmsService = cmsService;
        }
        PersonalizationContextService.prototype.getPersonalizationContext = function () {
            var _this = this;
            return this.cmsService.getCurrentPage().pipe(operators.filter(Boolean), operators.map(function (page) { return page.slots[_this.config.personalization.context.slotPosition]; }), operators.filter(Boolean), operators.map(function (slot) { return slot.components.find(function (i) { return i.uid === _this.config.personalization.context.componentId; }); }), operators.filter(Boolean), operators.map(function (component) { return _this.buildPersonalizationContext(component.properties.script.data); }));
        };
        PersonalizationContextService.prototype.buildPersonalizationContext = function (data) {
            var context = JSON.parse(atob(data));
            context.actions.forEach(function (action) {
                Object.keys(action).forEach(function (key) {
                    action[key] = atob(action[key]);
                });
            });
            for (var i = 0; i < context.segments.length; i++) {
                context.segments[i] = atob(context.segments[i]);
            }
            return context;
        };
        return PersonalizationContextService;
    }());
    PersonalizationContextService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PersonalizationContextService_Factory() { return new PersonalizationContextService(i0.ɵɵinject(PersonalizationConfig), i0.ɵɵinject(CmsService)); }, token: PersonalizationContextService, providedIn: "root" });
    PersonalizationContextService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PersonalizationContextService.ctorParameters = function () { return [
        { type: PersonalizationConfig },
        { type: CmsService }
    ]; };

    function getReducers$8() {
        return entityLoaderReducer(PROCESS_FEATURE);
    }
    var reducerToken$8 = new i0.InjectionToken('ProcessReducers');
    var reducerProvider$8 = {
        provide: reducerToken$8,
        useFactory: getReducers$8,
    };

    var ProcessStoreModule = /** @class */ (function () {
        function ProcessStoreModule() {
        }
        return ProcessStoreModule;
    }());
    ProcessStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [StateModule, i1$2.StoreModule.forFeature(PROCESS_FEATURE, reducerToken$8)],
                    providers: [reducerProvider$8],
                },] }
    ];

    var ProcessModule = /** @class */ (function () {
        function ProcessModule() {
        }
        ProcessModule.forRoot = function () {
            return {
                ngModule: ProcessModule,
                providers: [],
            };
        };
        return ProcessModule;
    }());
    ProcessModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [ProcessStoreModule],
                },] }
    ];

    var ProductConnector = /** @class */ (function () {
        function ProductConnector(adapter) {
            this.adapter = adapter;
        }
        ProductConnector.prototype.get = function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.adapter.load(productCode, scope);
        };
        ProductConnector.prototype.getMany = function (products) {
            var _this = this;
            if (!this.adapter.loadMany) {
                return products.map(function (product) { return (Object.assign(Object.assign({}, product), { data$: _this.adapter.load(product.code, product.scope) })); });
            }
            return this.adapter.loadMany(products);
        };
        return ProductConnector;
    }());
    ProductConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductConnector_Factory() { return new ProductConnector(i0.ɵɵinject(ProductAdapter)); }, token: ProductConnector, providedIn: "root" });
    ProductConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductConnector.ctorParameters = function () { return [
        { type: ProductAdapter }
    ]; };

    var ProductReferencesConnector = /** @class */ (function () {
        function ProductReferencesConnector(adapter) {
            this.adapter = adapter;
        }
        ProductReferencesConnector.prototype.get = function (productCode, referenceType, pageSize) {
            return this.adapter.load(productCode, referenceType, pageSize);
        };
        return ProductReferencesConnector;
    }());
    ProductReferencesConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductReferencesConnector_Factory() { return new ProductReferencesConnector(i0.ɵɵinject(ProductReferencesAdapter)); }, token: ProductReferencesConnector, providedIn: "root" });
    ProductReferencesConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductReferencesConnector.ctorParameters = function () { return [
        { type: ProductReferencesAdapter }
    ]; };

    var ProductReviewsConnector = /** @class */ (function () {
        function ProductReviewsConnector(adapter) {
            this.adapter = adapter;
        }
        ProductReviewsConnector.prototype.get = function (productCode, maxCount) {
            return this.adapter.load(productCode, maxCount);
        };
        ProductReviewsConnector.prototype.add = function (productCode, review) {
            return this.adapter.post(productCode, review);
        };
        return ProductReviewsConnector;
    }());
    ProductReviewsConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductReviewsConnector_Factory() { return new ProductReviewsConnector(i0.ɵɵinject(ProductReviewsAdapter)); }, token: ProductReviewsConnector, providedIn: "root" });
    ProductReviewsConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductReviewsConnector.ctorParameters = function () { return [
        { type: ProductReviewsAdapter }
    ]; };

    var ProductSearchConnector = /** @class */ (function () {
        function ProductSearchConnector(adapter) {
            this.adapter = adapter;
        }
        ProductSearchConnector.prototype.search = function (query, searchConfig) {
            return this.adapter.search(query, searchConfig);
        };
        ProductSearchConnector.prototype.getSuggestions = function (term, pageSize) {
            return this.adapter.loadSuggestions(term, pageSize);
        };
        return ProductSearchConnector;
    }());
    ProductSearchConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductSearchConnector_Factory() { return new ProductSearchConnector(i0.ɵɵinject(ProductSearchAdapter)); }, token: ProductSearchConnector, providedIn: "root" });
    ProductSearchConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductSearchConnector.ctorParameters = function () { return [
        { type: ProductSearchAdapter }
    ]; };

    var LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';
    var LOAD_PRODUCT_REFERENCES_FAIL = '[Product] Load Product References Data Fail';
    var LOAD_PRODUCT_REFERENCES_SUCCESS = '[Product] Load Product References Data Success';
    var CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';
    var LoadProductReferences = /** @class */ (function () {
        function LoadProductReferences(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES;
        }
        return LoadProductReferences;
    }());
    var LoadProductReferencesFail = /** @class */ (function () {
        function LoadProductReferencesFail(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES_FAIL;
        }
        return LoadProductReferencesFail;
    }());
    var LoadProductReferencesSuccess = /** @class */ (function () {
        function LoadProductReferencesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REFERENCES_SUCCESS;
        }
        return LoadProductReferencesSuccess;
    }());
    var CleanProductReferences = /** @class */ (function () {
        function CleanProductReferences() {
            this.type = CLEAN_PRODUCT_REFERENCES;
        }
        return CleanProductReferences;
    }());

    var LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';
    var LOAD_PRODUCT_REVIEWS_FAIL = '[Product] Load Product Reviews Data Fail';
    var LOAD_PRODUCT_REVIEWS_SUCCESS = '[Product] Load Product Reviews Data Success';
    var POST_PRODUCT_REVIEW = '[Product] Post Product Review';
    var POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';
    var POST_PRODUCT_REVIEW_SUCCESS = '[Product] Post Product Review Success';
    var LoadProductReviews = /** @class */ (function () {
        function LoadProductReviews(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS;
        }
        return LoadProductReviews;
    }());
    var LoadProductReviewsFail = /** @class */ (function () {
        function LoadProductReviewsFail(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS_FAIL;
        }
        return LoadProductReviewsFail;
    }());
    var LoadProductReviewsSuccess = /** @class */ (function () {
        function LoadProductReviewsSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_PRODUCT_REVIEWS_SUCCESS;
        }
        return LoadProductReviewsSuccess;
    }());
    var PostProductReview = /** @class */ (function () {
        function PostProductReview(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW;
        }
        return PostProductReview;
    }());
    var PostProductReviewFail = /** @class */ (function () {
        function PostProductReviewFail(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW_FAIL;
        }
        return PostProductReviewFail;
    }());
    var PostProductReviewSuccess = /** @class */ (function () {
        function PostProductReviewSuccess(payload) {
            this.payload = payload;
            this.type = POST_PRODUCT_REVIEW_SUCCESS;
        }
        return PostProductReviewSuccess;
    }());

    var SEARCH_PRODUCTS = '[Product] Search Products';
    var SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';
    var SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';
    var GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';
    var GET_PRODUCT_SUGGESTIONS_SUCCESS = '[Product] Get Product Suggestions Success';
    var GET_PRODUCT_SUGGESTIONS_FAIL = '[Product] Get Product Suggestions Fail';
    var CLEAR_PRODUCT_SEARCH_RESULT = '[Product] Clear Product Search Result';
    var SearchProducts = /** @class */ (function () {
        function SearchProducts(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS;
        }
        return SearchProducts;
    }());
    var SearchProductsFail = /** @class */ (function () {
        function SearchProductsFail(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS_FAIL;
        }
        return SearchProductsFail;
    }());
    var SearchProductsSuccess = /** @class */ (function () {
        function SearchProductsSuccess(payload, auxiliary) {
            this.payload = payload;
            this.auxiliary = auxiliary;
            this.type = SEARCH_PRODUCTS_SUCCESS;
        }
        return SearchProductsSuccess;
    }());
    var GetProductSuggestions = /** @class */ (function () {
        function GetProductSuggestions(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS;
        }
        return GetProductSuggestions;
    }());
    var GetProductSuggestionsSuccess = /** @class */ (function () {
        function GetProductSuggestionsSuccess(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS_SUCCESS;
        }
        return GetProductSuggestionsSuccess;
    }());
    var GetProductSuggestionsFail = /** @class */ (function () {
        function GetProductSuggestionsFail(payload) {
            this.payload = payload;
            this.type = GET_PRODUCT_SUGGESTIONS_FAIL;
        }
        return GetProductSuggestionsFail;
    }());
    var ClearProductSearchResult = /** @class */ (function () {
        function ClearProductSearchResult(payload) {
            if (payload === void 0) { payload = {
                clearPageResults: false,
                clearSearchboxResults: false,
            }; }
            this.payload = payload;
            this.type = CLEAR_PRODUCT_SEARCH_RESULT;
        }
        return ClearProductSearchResult;
    }());

    var PRODUCT_FEATURE = 'product';
    var PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';

    var EntityScopedLoaderActions;
    (function (EntityScopedLoaderActions) {
        function entityScopedLoadMeta(entityType, id, scope) {
            return Object.assign(Object.assign({}, entityLoadMeta(entityType, id)), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedLoadMeta = entityScopedLoadMeta;
        function entityScopedFailMeta(entityType, id, scope, error) {
            return Object.assign(Object.assign({}, entityFailMeta(entityType, id, error)), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedFailMeta = entityScopedFailMeta;
        function entityScopedSuccessMeta(entityType, id, scope) {
            return Object.assign(Object.assign({}, entitySuccessMeta(entityType, id)), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedSuccessMeta = entityScopedSuccessMeta;
        function entityScopedResetMeta(entityType, id, scope) {
            return Object.assign(Object.assign({}, entityResetMeta(entityType, id)), { scope: scope });
        }
        EntityScopedLoaderActions.entityScopedResetMeta = entityScopedResetMeta;
        var EntityScopedLoadAction = /** @class */ (function () {
            function EntityScopedLoadAction(entityType, id, scope) {
                this.type = ENTITY_LOAD_ACTION;
                this.meta = entityScopedLoadMeta(entityType, id, scope);
            }
            return EntityScopedLoadAction;
        }());
        EntityScopedLoaderActions.EntityScopedLoadAction = EntityScopedLoadAction;
        var EntityScopedFailAction = /** @class */ (function () {
            function EntityScopedFailAction(entityType, id, scope, error) {
                this.type = ENTITY_FAIL_ACTION;
                this.meta = entityScopedFailMeta(entityType, id, scope, error);
            }
            return EntityScopedFailAction;
        }());
        EntityScopedLoaderActions.EntityScopedFailAction = EntityScopedFailAction;
        var EntityScopedSuccessAction = /** @class */ (function () {
            function EntityScopedSuccessAction(entityType, id, scope, payload) {
                this.payload = payload;
                this.type = ENTITY_SUCCESS_ACTION;
                this.meta = entityScopedSuccessMeta(entityType, id, scope);
            }
            return EntityScopedSuccessAction;
        }());
        EntityScopedLoaderActions.EntityScopedSuccessAction = EntityScopedSuccessAction;
        var EntityScopedResetAction = /** @class */ (function () {
            function EntityScopedResetAction(entityType, id, scope) {
                this.type = ENTITY_RESET_ACTION;
                this.meta = entityScopedResetMeta(entityType, id, scope);
            }
            return EntityScopedResetAction;
        }());
        EntityScopedLoaderActions.EntityScopedResetAction = EntityScopedResetAction;
    })(EntityScopedLoaderActions || (EntityScopedLoaderActions = {}));

    var LOAD_PRODUCT = '[Product] Load Product Data';
    var LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';
    var LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';
    var LoadProduct = /** @class */ (function (_super) {
        __extends(LoadProduct, _super);
        function LoadProduct(payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, payload, scope) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT;
            return _this;
        }
        return LoadProduct;
    }(EntityScopedLoaderActions.EntityScopedLoadAction));
    var LoadProductFail = /** @class */ (function (_super) {
        __extends(LoadProductFail, _super);
        function LoadProductFail(productCode, payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, productCode, scope, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_FAIL;
            return _this;
        }
        return LoadProductFail;
    }(EntityScopedLoaderActions.EntityScopedFailAction));
    var LoadProductSuccess = /** @class */ (function (_super) {
        __extends(LoadProductSuccess, _super);
        function LoadProductSuccess(payload, scope) {
            if (scope === void 0) { scope = ''; }
            var _this = _super.call(this, PRODUCT_DETAIL_ENTITY, payload.code, scope) || this;
            _this.payload = payload;
            _this.type = LOAD_PRODUCT_SUCCESS;
            return _this;
        }
        return LoadProductSuccess;
    }(EntityScopedLoaderActions.EntityScopedSuccessAction));

    var productGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_PRODUCT_REFERENCES: LOAD_PRODUCT_REFERENCES,
        LOAD_PRODUCT_REFERENCES_FAIL: LOAD_PRODUCT_REFERENCES_FAIL,
        LOAD_PRODUCT_REFERENCES_SUCCESS: LOAD_PRODUCT_REFERENCES_SUCCESS,
        CLEAN_PRODUCT_REFERENCES: CLEAN_PRODUCT_REFERENCES,
        LoadProductReferences: LoadProductReferences,
        LoadProductReferencesFail: LoadProductReferencesFail,
        LoadProductReferencesSuccess: LoadProductReferencesSuccess,
        CleanProductReferences: CleanProductReferences,
        LOAD_PRODUCT_REVIEWS: LOAD_PRODUCT_REVIEWS,
        LOAD_PRODUCT_REVIEWS_FAIL: LOAD_PRODUCT_REVIEWS_FAIL,
        LOAD_PRODUCT_REVIEWS_SUCCESS: LOAD_PRODUCT_REVIEWS_SUCCESS,
        POST_PRODUCT_REVIEW: POST_PRODUCT_REVIEW,
        POST_PRODUCT_REVIEW_FAIL: POST_PRODUCT_REVIEW_FAIL,
        POST_PRODUCT_REVIEW_SUCCESS: POST_PRODUCT_REVIEW_SUCCESS,
        LoadProductReviews: LoadProductReviews,
        LoadProductReviewsFail: LoadProductReviewsFail,
        LoadProductReviewsSuccess: LoadProductReviewsSuccess,
        PostProductReview: PostProductReview,
        PostProductReviewFail: PostProductReviewFail,
        PostProductReviewSuccess: PostProductReviewSuccess,
        SEARCH_PRODUCTS: SEARCH_PRODUCTS,
        SEARCH_PRODUCTS_FAIL: SEARCH_PRODUCTS_FAIL,
        SEARCH_PRODUCTS_SUCCESS: SEARCH_PRODUCTS_SUCCESS,
        GET_PRODUCT_SUGGESTIONS: GET_PRODUCT_SUGGESTIONS,
        GET_PRODUCT_SUGGESTIONS_SUCCESS: GET_PRODUCT_SUGGESTIONS_SUCCESS,
        GET_PRODUCT_SUGGESTIONS_FAIL: GET_PRODUCT_SUGGESTIONS_FAIL,
        CLEAR_PRODUCT_SEARCH_RESULT: CLEAR_PRODUCT_SEARCH_RESULT,
        SearchProducts: SearchProducts,
        SearchProductsFail: SearchProductsFail,
        SearchProductsSuccess: SearchProductsSuccess,
        GetProductSuggestions: GetProductSuggestions,
        GetProductSuggestionsSuccess: GetProductSuggestionsSuccess,
        GetProductSuggestionsFail: GetProductSuggestionsFail,
        ClearProductSearchResult: ClearProductSearchResult,
        LOAD_PRODUCT: LOAD_PRODUCT,
        LOAD_PRODUCT_FAIL: LOAD_PRODUCT_FAIL,
        LOAD_PRODUCT_SUCCESS: LOAD_PRODUCT_SUCCESS,
        LoadProduct: LoadProduct,
        LoadProductFail: LoadProductFail,
        LoadProductSuccess: LoadProductSuccess
    });

    var ProductReferencesEffects = /** @class */ (function () {
        function ProductReferencesEffects(actions$, productReferencesConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productReferencesConnector = productReferencesConnector;
            this.loadProductReferences$ = this.actions$.pipe(i3.ofType(LOAD_PRODUCT_REFERENCES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.productReferencesConnector
                    .get(payload.productCode, payload.referenceType, payload.pageSize)
                    .pipe(operators.map(function (data) {
                    return new LoadProductReferencesSuccess({
                        productCode: payload.productCode,
                        list: data,
                    });
                }), operators.catchError(function (_error) { return rxjs.of(new LoadProductReferencesFail({
                    message: payload.productCode,
                })); }));
            }));
        }
        return ProductReferencesEffects;
    }());
    ProductReferencesEffects.decorators = [
        { type: i0.Injectable }
    ];
    ProductReferencesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: ProductReferencesConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ProductReferencesEffects.prototype, "loadProductReferences$", void 0);

    var ProductReviewsEffects = /** @class */ (function () {
        function ProductReviewsEffects(actions$, productReviewsConnector, globalMessageService) {
            var _this = this;
            this.actions$ = actions$;
            this.productReviewsConnector = productReviewsConnector;
            this.globalMessageService = globalMessageService;
            this.loadProductReviews$ = this.actions$.pipe(i3.ofType(LOAD_PRODUCT_REVIEWS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (productCode) {
                return _this.productReviewsConnector.get(productCode).pipe(operators.map(function (data) {
                    return new LoadProductReviewsSuccess({
                        productCode: productCode,
                        list: data,
                    });
                }), operators.catchError(function (_error) { return rxjs.of(new LoadProductReviewsFail({
                    message: productCode,
                })); }));
            }));
            this.postProductReview = this.actions$.pipe(i3.ofType(POST_PRODUCT_REVIEW), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.productReviewsConnector
                    .add(payload.productCode, payload.review)
                    .pipe(operators.map(function (reviewResponse) {
                    return new PostProductReviewSuccess(reviewResponse);
                }), operators.catchError(function (_error) { return rxjs.of(new PostProductReviewFail(payload.productCode)); }));
            }));
            this.showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(i3.ofType(POST_PRODUCT_REVIEW_SUCCESS), operators.tap(function () {
                _this.globalMessageService.add({ key: 'productReview.thankYouForReview' }, exports.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            }));
        }
        return ProductReviewsEffects;
    }());
    ProductReviewsEffects.decorators = [
        { type: i0.Injectable }
    ];
    ProductReviewsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: ProductReviewsConnector },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        i3.Effect()
    ], ProductReviewsEffects.prototype, "loadProductReviews$", void 0);
    __decorate([
        i3.Effect()
    ], ProductReviewsEffects.prototype, "postProductReview", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], ProductReviewsEffects.prototype, "showGlobalMessageOnPostProductReviewSuccess$", void 0);

    var ProductsSearchEffects = /** @class */ (function () {
        function ProductsSearchEffects(actions$, productSearchConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productSearchConnector = productSearchConnector;
            this.searchProducts$ = this.actions$.pipe(i3.ofType(SEARCH_PRODUCTS), operators.groupBy(function (action) { return action.auxiliary; }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (action) {
                return _this.productSearchConnector
                    .search(action.payload.queryText, action.payload.searchConfig)
                    .pipe(operators.map(function (data) {
                    return new SearchProductsSuccess(data, action.auxiliary);
                }), operators.catchError(function (error) { return rxjs.of(new SearchProductsFail(makeErrorSerializable(error), action.auxiliary)); }));
            })); }));
            this.getProductSuggestions$ = this.actions$.pipe(i3.ofType(GET_PRODUCT_SUGGESTIONS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.productSearchConnector
                    .getSuggestions(payload.term, payload.searchConfig.pageSize)
                    .pipe(operators.map(function (suggestions) {
                    if (suggestions === undefined) {
                        return new GetProductSuggestionsSuccess([]);
                    }
                    return new GetProductSuggestionsSuccess(suggestions);
                }), operators.catchError(function (error) { return rxjs.of(new GetProductSuggestionsFail(makeErrorSerializable(error))); }));
            }));
        }
        return ProductsSearchEffects;
    }());
    ProductsSearchEffects.decorators = [
        { type: i0.Injectable }
    ];
    ProductsSearchEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: ProductSearchConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ProductsSearchEffects.prototype, "searchProducts$", void 0);
    __decorate([
        i3.Effect()
    ], ProductsSearchEffects.prototype, "getProductSuggestions$", void 0);

    var ProductEffects = /** @class */ (function () {
        function ProductEffects(actions$, productConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.productConnector = productConnector;
            // we want to cancel all ongoing requests when currency or language changes,
            this.contextChange$ = this.actions$.pipe(i3.ofType(CURRENCY_CHANGE, LANGUAGE_CHANGE));
            this.loadProduct$ = i3.createEffect(function () { return function (_a) {
                var _b = _a === void 0 ? {} : _a, scheduler = _b.scheduler, _c = _b.debounce, debounce = _c === void 0 ? 0 : _c;
                return _this.actions$.pipe(i3.ofType(LOAD_PRODUCT), operators.map(function (action) { return ({
                    code: action.payload,
                    scope: action.meta.scope,
                }); }), 
                // we are grouping all load actions that happens at the same time
                // to optimize loading and pass them all to productConnector.getMany
                bufferDebounceTime(debounce, scheduler), operators.mergeMap(function (products) { return rxjs.merge.apply(void 0, __spread(_this.productConnector
                    .getMany(products)
                    .map(_this.productLoadEffect))); }), withdrawOn(_this.contextChange$));
            }; });
        }
        ProductEffects.prototype.productLoadEffect = function (productLoad) {
            return productLoad.data$.pipe(operators.map(function (data) { return new LoadProductSuccess(Object.assign({ code: productLoad.code }, data), productLoad.scope); }), operators.catchError(function (error) {
                return rxjs.of(new LoadProductFail(productLoad.code, makeErrorSerializable(error), productLoad.scope));
            }));
        };
        return ProductEffects;
    }());
    ProductEffects.decorators = [
        { type: i0.Injectable }
    ];
    ProductEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: ProductConnector }
    ]; };

    var effects$8 = [
        ProductsSearchEffects,
        ProductEffects,
        ProductReviewsEffects,
        ProductReferencesEffects,
    ];

    var initialState$i = {
        productCode: '',
        list: [],
    };
    function reducer$i(state, action) {
        if (state === void 0) { state = initialState$i; }
        switch (action.type) {
            case LOAD_PRODUCT_REFERENCES_SUCCESS: {
                var productCode = action.payload.productCode;
                var list = action.payload.list;
                return Object.assign(Object.assign({}, state), { list: __spread(state.list, (list ? list : [])).reduce(function (productReferences, productReference) {
                        if (!productReferences.some(function (obj) { return obj.referenceType === productReference.referenceType &&
                            obj.target.code === productReference.target.code; })) {
                            productReferences.push(productReference);
                        }
                        return productReferences;
                    }, []), productCode: productCode });
            }
            case CLEAN_PRODUCT_REFERENCES: {
                return initialState$i;
            }
        }
        return state;
    }
    var getProductReferenceList = function (state) { return state.list; };
    var getProductReferenceProductCode = function (state) { return state.productCode; };

    var initialState$j = {
        productCode: '',
        list: [],
    };
    function reducer$j(state, action) {
        if (state === void 0) { state = initialState$j; }
        switch (action.type) {
            case LOAD_PRODUCT_REVIEWS_SUCCESS: {
                var productCode = action.payload.productCode;
                var list = action.payload.list;
                return Object.assign(Object.assign({}, state), { productCode: productCode,
                    list: list });
            }
        }
        return state;
    }
    var getReviewList = function (state) { return state.list; };
    var getReviewProductCode = function (state) { return state.productCode; };

    var initialState$k = {
        results: {},
        suggestions: [],
        auxResults: {},
    };
    function reducer$k(state, action) {
        if (state === void 0) { state = initialState$k; }
        switch (action.type) {
            case SEARCH_PRODUCTS_SUCCESS: {
                var results = action.payload;
                var res = action.auxiliary ? { auxResults: results } : { results: results };
                return Object.assign(Object.assign({}, state), res);
            }
            case GET_PRODUCT_SUGGESTIONS_SUCCESS: {
                var suggestions = action.payload;
                return Object.assign(Object.assign({}, state), { suggestions: suggestions });
            }
            case CLEAR_PRODUCT_SEARCH_RESULT: {
                return Object.assign(Object.assign({}, state), { results: action.payload.clearPageResults ? {} : state.results, suggestions: action.payload.clearSearchboxResults
                        ? []
                        : state.suggestions, auxResults: action.payload.clearSearchboxResults
                        ? {}
                        : state.auxResults });
            }
        }
        return state;
    }
    var getSearchResults = function (state) { return state.results; };
    var getAuxSearchResults = function (state) { return state.auxResults; };
    var getProductSuggestions = function (state) { return state.suggestions; };

    var initialScopedLoaderState = {};
    /**
     * Higher order reducer designed to add scope support for loader reducer
     *
     * @param entityType
     * @param reducer
     */
    function scopedLoaderReducer(entityType, reducer) {
        var loader = loaderReducer(entityType, reducer);
        return function (state, action) {
            var _b;
            if (state === void 0) { state = initialScopedLoaderState; }
            var _a;
            if (action && action.meta && action.meta.entityType === entityType) {
                return Object.assign(Object.assign({}, state), (_b = {}, _b[(_a = action.meta.scope) !== null && _a !== void 0 ? _a : ''] = loader(state[action.meta.scope], action), _b));
            }
            return state;
        };
    }

    /**
     * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing
     * single state reducer to support multiple entities with generic loading flags and scopes
     */
    function entityScopedLoaderReducer(entityType, reducer) {
        return entityReducer(entityType, scopedLoaderReducer(entityType, reducer));
    }

    function getReducers$9() {
        return {
            search: reducer$k,
            details: entityScopedLoaderReducer(PRODUCT_DETAIL_ENTITY),
            reviews: reducer$j,
            references: reducer$i,
        };
    }
    var reducerToken$9 = new i0.InjectionToken('ProductReducers');
    var reducerProvider$9 = {
        provide: reducerToken$9,
        useFactory: getReducers$9,
    };
    function clearProductsState(reducer) {
        return function (state, action) {
            if (action.type === CURRENCY_CHANGE ||
                action.type === LANGUAGE_CHANGE) {
                state = undefined;
            }
            return reducer(state, action);
        };
    }
    var metaReducers$3 = [clearProductsState];

    var getProductsState = i1$2.createFeatureSelector(PRODUCT_FEATURE);

    var ɵ0$G = function (state) { return state.references; };
    var getProductReferencesState = i1$2.createSelector(getProductsState, ɵ0$G);
    var getSelectedProductReferencesFactory = function (productCode, referenceType) {
        return i1$2.createSelector(getProductReferencesState, function (referenceTypeData) {
            if (referenceTypeData.productCode === productCode) {
                if (!!referenceTypeData.list) {
                    if (referenceType) {
                        return referenceTypeData.list.filter(function (item) { return item.referenceType === referenceType; });
                    }
                    return referenceTypeData.list;
                }
                else {
                    return [];
                }
            }
        });
    };

    var ɵ0$H = function (state) { return state.reviews; };
    var getProductReviewsState = i1$2.createSelector(getProductsState, ɵ0$H);
    var getSelectedProductReviewsFactory = function (productCode) {
        return i1$2.createSelector(getProductReviewsState, function (reviewData) {
            if (reviewData.productCode === productCode) {
                return reviewData.list;
            }
        });
    };

    var ɵ0$I = function (state) { return state.search; };
    var getProductsSearchState = i1$2.createSelector(getProductsState, ɵ0$I);
    var getSearchResults$1 = i1$2.createSelector(getProductsSearchState, getSearchResults);
    var getAuxSearchResults$1 = i1$2.createSelector(getProductsSearchState, getAuxSearchResults);
    var getProductSuggestions$1 = i1$2.createSelector(getProductsSearchState, getProductSuggestions);

    var ɵ0$J = function (state) { return state.details; };
    var getProductState = i1$2.createSelector(getProductsState, ɵ0$J);
    var getSelectedProductStateFactory = function (code, scope) {
        if (scope === void 0) { scope = ''; }
        return i1$2.createSelector(getProductState, function (details) { return entityLoaderStateSelector(details, code)[scope] ||
            initialLoaderState; });
    };
    var getSelectedProductFactory = function (code, scope) {
        if (scope === void 0) { scope = ''; }
        return i1$2.createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return loaderValueSelector(productState); });
    };
    var getSelectedProductLoadingFactory = function (code, scope) {
        if (scope === void 0) { scope = ''; }
        return i1$2.createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return loaderLoadingSelector(productState); });
    };
    var getSelectedProductSuccessFactory = function (code, scope) {
        if (scope === void 0) { scope = ''; }
        return i1$2.createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return loaderSuccessSelector(productState); });
    };
    var getSelectedProductErrorFactory = function (code, scope) {
        if (scope === void 0) { scope = ''; }
        return i1$2.createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return loaderErrorSelector(productState); });
    };
    var ɵ1$t = function (details) {
        return Object.keys(details.entities);
    };
    var getAllProductCodes = i1$2.createSelector(getProductState, ɵ1$t);

    var productGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getProductsState: getProductsState,
        getProductReferencesState: getProductReferencesState,
        getSelectedProductReferencesFactory: getSelectedProductReferencesFactory,
        ɵ0: ɵ0$G,
        getProductReviewsState: getProductReviewsState,
        getSelectedProductReviewsFactory: getSelectedProductReviewsFactory,
        getProductsSearchState: getProductsSearchState,
        getSearchResults: getSearchResults$1,
        getAuxSearchResults: getAuxSearchResults$1,
        getProductSuggestions: getProductSuggestions$1,
        getProductState: getProductState,
        getSelectedProductStateFactory: getSelectedProductStateFactory,
        getSelectedProductFactory: getSelectedProductFactory,
        getSelectedProductLoadingFactory: getSelectedProductLoadingFactory,
        getSelectedProductSuccessFactory: getSelectedProductSuccessFactory,
        getSelectedProductErrorFactory: getSelectedProductErrorFactory,
        getAllProductCodes: getAllProductCodes,
        ɵ1: ɵ1$t
    });

    var ProductReferenceService = /** @class */ (function () {
        function ProductReferenceService(store) {
            this.store = store;
        }
        ProductReferenceService.prototype.loadProductReferences = function (productCode, referenceType, pageSize) {
            this.store.dispatch(new LoadProductReferences({
                productCode: productCode,
                referenceType: referenceType,
                pageSize: pageSize,
            }));
        };
        ProductReferenceService.prototype.getProductReferences = function (productCode, referenceType) {
            return this.store.pipe(i1$2.select(getSelectedProductReferencesFactory(productCode, referenceType)));
        };
        ProductReferenceService.prototype.cleanReferences = function () {
            this.store.dispatch(new CleanProductReferences());
        };
        return ProductReferenceService;
    }());
    ProductReferenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductReferenceService_Factory() { return new ProductReferenceService(i0.ɵɵinject(i1$2.Store)); }, token: ProductReferenceService, providedIn: "root" });
    ProductReferenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductReferenceService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    var ProductReviewService = /** @class */ (function () {
        function ProductReviewService(store) {
            this.store = store;
        }
        ProductReviewService.prototype.getByProductCode = function (productCode) {
            var _this = this;
            return this.store.pipe(i1$2.select(getSelectedProductReviewsFactory(productCode)), operators.tap(function (reviews) {
                if (reviews === undefined && productCode !== undefined) {
                    _this.store.dispatch(new LoadProductReviews(productCode));
                }
            }));
        };
        ProductReviewService.prototype.add = function (productCode, review) {
            this.store.dispatch(new PostProductReview({
                productCode: productCode,
                review: review,
            }));
        };
        return ProductReviewService;
    }());
    ProductReviewService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductReviewService_Factory() { return new ProductReviewService(i0.ɵɵinject(i1$2.Store)); }, token: ProductReviewService, providedIn: "root" });
    ProductReviewService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductReviewService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    var ProductSearchService = /** @class */ (function () {
        function ProductSearchService(store) {
            this.store = store;
        }
        ProductSearchService.prototype.search = function (query, searchConfig) {
            this.store.dispatch(new SearchProducts({
                queryText: query,
                searchConfig: searchConfig,
            }));
        };
        ProductSearchService.prototype.getResults = function () {
            return this.store.pipe(i1$2.select(getSearchResults$1));
        };
        ProductSearchService.prototype.clearResults = function () {
            this.store.dispatch(new ClearProductSearchResult({
                clearPageResults: true,
            }));
        };
        return ProductSearchService;
    }());
    ProductSearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductSearchService_Factory() { return new ProductSearchService(i0.ɵɵinject(i1$2.Store)); }, token: ProductSearchService, providedIn: "root" });
    ProductSearchService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductSearchService.ctorParameters = function () { return [
        { type: i1$2.Store }
    ]; };

    var ProductLoadingService = /** @class */ (function () {
        function ProductLoadingService(store, loadingScopes, actions$, platformId) {
            this.store = store;
            this.loadingScopes = loadingScopes;
            this.actions$ = actions$;
            this.platformId = platformId;
            this.products = {};
        }
        ProductLoadingService.prototype.get = function (productCode, scopes) {
            scopes = this.loadingScopes.expand('product', scopes);
            this.initProductScopes(productCode, scopes);
            return this.products[productCode][this.getScopesIndex(scopes)];
        };
        ProductLoadingService.prototype.initProductScopes = function (productCode, scopes) {
            var e_1, _a;
            var _this = this;
            if (!this.products[productCode]) {
                this.products[productCode] = {};
            }
            try {
                for (var scopes_1 = __values(scopes), scopes_1_1 = scopes_1.next(); !scopes_1_1.done; scopes_1_1 = scopes_1.next()) {
                    var scope = scopes_1_1.value;
                    if (!this.products[productCode][scope]) {
                        this.products[productCode][scope] = this.getProductForScope(productCode, scope);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (scopes_1_1 && !scopes_1_1.done && (_a = scopes_1.return)) _a.call(scopes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (scopes.length > 1) {
                this.products[productCode][this.getScopesIndex(scopes)] = rxjs.combineLatest(scopes.map(function (scope) { return _this.products[productCode][scope]; })).pipe(operators.auditTime(0), operators.map(function (productParts) { return productParts.every(Boolean)
                    ? deepMerge.apply(void 0, __spread([{}], productParts)) : undefined; }), operators.distinctUntilChanged());
            }
        };
        ProductLoadingService.prototype.getScopesIndex = function (scopes) {
            return scopes.join('ɵ');
        };
        /**
         * Creates observable for providing specified product data for the scope
         *
         * @param productCode
         * @param scope
         */
        ProductLoadingService.prototype.getProductForScope = function (productCode, scope) {
            var _this = this;
            var shouldLoad$ = this.store.pipe(i1$2.select(getSelectedProductStateFactory(productCode, scope)), operators.map(function (productState) { return !productState.loading && !productState.success && !productState.error; }), operators.distinctUntilChanged(), operators.filter(function (x) { return x; }));
            var isLoading$ = this.store.pipe(i1$2.select(getSelectedProductLoadingFactory(productCode, scope)));
            var productLoadLogic$ = rxjs.merge.apply(void 0, __spread([shouldLoad$], this.getProductReloadTriggers(productCode, scope))).pipe(operators.debounceTime(0), operators.withLatestFrom(isLoading$), operators.tap(function (_a) {
                var _b = __read(_a, 2), isLoading = _b[1];
                if (!isLoading) {
                    _this.store.dispatch(new LoadProduct(productCode, scope));
                }
            }));
            var productData$ = this.store.pipe(i1$2.select(getSelectedProductFactory(productCode, scope)));
            return rxjs.using(function () { return productLoadLogic$.subscribe(); }, function () { return productData$; }).pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Returns reload triggers for product per scope
         *
         * @param productCode
         * @param scope
         */
        ProductLoadingService.prototype.getProductReloadTriggers = function (productCode, scope) {
            var triggers = [];
            // max age trigger add
            var maxAge = this.loadingScopes.getMaxAge('product', scope);
            if (maxAge && i1.isPlatformBrowser(this.platformId)) {
                // we want to grab load product success and load product fail for this product and scope
                var loadFinish$ = this.actions$.pipe(operators.filter(function (action) { return (action.type === LOAD_PRODUCT_SUCCESS ||
                    action.type === LOAD_PRODUCT_FAIL) &&
                    action.meta.entityId === productCode &&
                    action.meta.scope === scope; }));
                var loadStart$ = this.actions$.pipe(i3.ofType(LOAD_PRODUCT), operators.filter(function (action) { return action.payload === productCode && action.meta.scope === scope; }));
                triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));
            }
            return triggers;
        };
        /**
         * Generic method that returns stream triggering reload by maxAge
         *
         * Could be refactored to separate service in future to use in other
         * max age reload implementations
         *
         * @param loadStart$ Stream that emits on load start
         * @param loadFinish$ Stream that emits on load finish
         * @param maxAge max age
         */
        ProductLoadingService.prototype.getMaxAgeTrigger = function (loadStart$, loadFinish$, maxAge, scheduler) {
            var timestamp = 0;
            var now = function () { return (scheduler ? scheduler.now() : Date.now()); };
            var timestamp$ = loadFinish$.pipe(operators.tap(function () { return (timestamp = now()); }));
            var shouldReload$ = rxjs.defer(function () {
                var age = now() - timestamp;
                var timestampRefresh$ = timestamp$.pipe(operators.delay(maxAge, scheduler), operators.mapTo(true), withdrawOn(loadStart$));
                if (age > maxAge) {
                    // we should emit first value immediately
                    return rxjs.merge(rxjs.of(true), timestampRefresh$);
                }
                else if (age === 0) {
                    // edge case, we should emit max age timeout after next load success
                    // could happen with artificial schedulers
                    return timestampRefresh$;
                }
                else {
                    // we should emit first value when age will expire
                    return rxjs.merge(rxjs.of(true).pipe(operators.delay(maxAge - age, scheduler)), timestampRefresh$);
                }
            });
            return shouldReload$;
        };
        return ProductLoadingService;
    }());
    ProductLoadingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductLoadingService_Factory() { return new ProductLoadingService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(LoadingScopesService), i0.ɵɵinject(i3.Actions), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: ProductLoadingService, providedIn: "root" });
    ProductLoadingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductLoadingService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: LoadingScopesService },
        { type: i3.Actions },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };

    var ProductService = /** @class */ (function () {
        function ProductService(store, productLoading) {
            this.store = store;
            this.productLoading = productLoading;
        }
        /**
         * Returns the product observable. The product will be loaded
         * whenever there's no value observed.
         *
         * The underlying product loader ensures that the product is
         * only loaded once, even in case of parallel observers.
         *
         * You should provide product data scope you are interested in to not load all
         * the data if not needed. You can provide more than one scope.
         *
         * @param productCode Product code to load
         * @param scopes Scope or scopes of the product data
         */
        ProductService.prototype.get = function (productCode, scopes) {
            if (scopes === void 0) { scopes = DEFAULT_SCOPE; }
            return productCode
                ? this.productLoading.get(productCode, [].concat(scopes))
                : rxjs.of(undefined);
        };
        /**
         * Returns boolean observable for product's loading state
         */
        ProductService.prototype.isLoading = function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(i1$2.select(getSelectedProductLoadingFactory(productCode, scope)));
        };
        /**
         * Returns boolean observable for product's load success state
         */
        ProductService.prototype.isSuccess = function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(i1$2.select(getSelectedProductSuccessFactory(productCode, scope)));
        };
        /**
         * Returns boolean observable for product's load error state
         */
        ProductService.prototype.hasError = function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            return this.store.pipe(i1$2.select(getSelectedProductErrorFactory(productCode, scope)));
        };
        /**
         * Reloads the product. The product is loaded implicetly
         * whenever selected by the `get`, but in some cases an
         * explicit reload might be needed.
         */
        ProductService.prototype.reload = function (productCode, scope) {
            if (scope === void 0) { scope = ''; }
            this.store.dispatch(new LoadProduct(productCode, scope));
        };
        return ProductService;
    }());
    ProductService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductService_Factory() { return new ProductService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(ProductLoadingService)); }, token: ProductService, providedIn: "root" });
    ProductService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: ProductLoadingService }
    ]; };

    var SearchboxService = /** @class */ (function (_super) {
        __extends(SearchboxService, _super);
        function SearchboxService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * dispatch the search for the search box
         */
        SearchboxService.prototype.search = function (query, searchConfig) {
            this.store.dispatch(new SearchProducts({
                queryText: query,
                searchConfig: searchConfig,
            }, true));
        };
        SearchboxService.prototype.getResults = function () {
            return this.store.pipe(i1$2.select(getAuxSearchResults$1));
        };
        /**
         * clears the products and suggestions
         */
        SearchboxService.prototype.clearResults = function () {
            this.store.dispatch(new ClearProductSearchResult({
                clearSearchboxResults: true,
            }));
        };
        SearchboxService.prototype.getSuggestionResults = function () {
            return this.store.pipe(i1$2.select(getProductSuggestions$1));
        };
        SearchboxService.prototype.searchSuggestions = function (query, searchConfig) {
            this.store.dispatch(new GetProductSuggestions({
                term: query,
                searchConfig: searchConfig,
            }));
        };
        return SearchboxService;
    }(ProductSearchService));
    SearchboxService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchboxService_Factory() { return new SearchboxService(i0.ɵɵinject(i1$2.Store)); }, token: SearchboxService, providedIn: "root" });
    SearchboxService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /**
     * Resolves the page data for the Product Listing Page.
     *
     * The page title, and breadcrumbs are resolved in this implementation only.
     */
    var CategoryPageMetaResolver = /** @class */ (function (_super) {
        __extends(CategoryPageMetaResolver, _super);
        function CategoryPageMetaResolver(productSearchService, cms, translation) {
            var _this = _super.call(this) || this;
            _this.productSearchService = productSearchService;
            _this.cms = cms;
            _this.translation = translation;
            // reusable observable for search page data
            _this.searchPage$ = _this.cms.getCurrentPage().pipe(operators.filter(Boolean), operators.switchMap(function (page) {
                // only the existence of a plp component tells us if products
                // are rendered or if this is an ordinary content page
                return _this.hasProductListComponent(page)
                    ? _this.productSearchService.getResults().pipe(operators.filter(Boolean))
                    : rxjs.of(page);
            }));
            _this.pageType = exports.PageType.CATEGORY_PAGE;
            return _this;
        }
        CategoryPageMetaResolver.prototype.resolveTitle = function () {
            var _this = this;
            return this.searchPage$.pipe(operators.filter(function (page) { return !!page.pagination; }), operators.switchMap(function (p) {
                var _a;
                return _this.translation.translate('pageMetaResolver.category.title', {
                    count: p.pagination.totalResults,
                    query: ((_a = p.breadcrumbs) === null || _a === void 0 ? void 0 : _a.length) ? p.breadcrumbs[0].facetValueName
                        : undefined,
                });
            }));
        };
        CategoryPageMetaResolver.prototype.resolveBreadcrumbs = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.searchPage$.pipe(),
                this.translation.translate('common.home'),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), p = _c[0], label = _c[1];
                return p.breadcrumbs
                    ? _this.resolveBreadcrumbData(p, label)
                    : null;
            }));
        };
        CategoryPageMetaResolver.prototype.resolveBreadcrumbData = function (page, label) {
            var e_1, _b;
            var breadcrumbs = [];
            breadcrumbs.push({ label: label, link: '/' });
            try {
                for (var _c = __values(page.breadcrumbs), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var br = _d.value;
                    if (br.facetCode === 'category' || br.facetCode === 'allCategories') {
                        breadcrumbs.push({
                            label: br.facetValueName,
                            link: "/c/" + br.facetValueCode,
                        });
                    }
                    if (br.facetCode === 'brand') {
                        breadcrumbs.push({
                            label: br.facetValueName,
                            link: "/Brands/" + br.facetValueName + "/c/" + br.facetValueCode,
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return breadcrumbs;
        };
        CategoryPageMetaResolver.prototype.hasProductListComponent = function (page) {
            return !!Object.keys(page.slots).find(function (key) { return !!page.slots[key].components.find(function (comp) { return comp.typeCode === 'CMSProductListComponent' ||
                comp.typeCode === 'ProductGridComponent'; }); });
        };
        return CategoryPageMetaResolver;
    }(PageMetaResolver));
    CategoryPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CategoryPageMetaResolver_Factory() { return new CategoryPageMetaResolver(i0.ɵɵinject(ProductSearchService), i0.ɵɵinject(CmsService), i0.ɵɵinject(TranslationService)); }, token: CategoryPageMetaResolver, providedIn: "root" });
    CategoryPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CategoryPageMetaResolver.ctorParameters = function () { return [
        { type: ProductSearchService },
        { type: CmsService },
        { type: TranslationService }
    ]; };

    /**
     * Resolves page meta data for the search result page, in case it's used
     * to query coupons. This is done by adding a `couponcode` query parameter
     * to the search page route.
     *
     * The page resolves an alternative page title and breadcrumb.
     */
    var CouponSearchPageResolver = /** @class */ (function (_super) {
        __extends(CouponSearchPageResolver, _super);
        function CouponSearchPageResolver(productSearchService, translation, authService, route, semanticPathService) {
            var _this = _super.call(this) || this;
            _this.productSearchService = productSearchService;
            _this.translation = translation;
            _this.authService = authService;
            _this.route = route;
            _this.semanticPathService = semanticPathService;
            _this.total$ = _this.productSearchService.getResults().pipe(operators.filter(function (data) { return !!(data === null || data === void 0 ? void 0 : data.pagination); }), operators.map(function (results) { return results.pagination.totalResults; }));
            _this.pageType = exports.PageType.CONTENT_PAGE;
            _this.pageTemplate = 'SearchResultsListPageTemplate';
            return _this;
        }
        CouponSearchPageResolver.prototype.resolveBreadcrumbs = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.translation.translate('common.home'),
                this.translation.translate('myCoupons.myCoupons'),
                this.authService.isUserLoggedIn(),
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 3), homeLabel = _d[0], couponLabel = _d[1], isLoggedIn = _d[2];
                var breadcrumbs = [];
                breadcrumbs.push({ label: homeLabel, link: '/' });
                if (isLoggedIn) {
                    breadcrumbs.push({
                        label: couponLabel,
                        link: _this.semanticPathService.transform({
                            cxRoute: 'coupons',
                        }),
                    });
                }
                return breadcrumbs;
            }));
        };
        CouponSearchPageResolver.prototype.resolveTitle = function () {
            var _this = this;
            return this.total$.pipe(operators.switchMap(function (total) { return _this.translation.translate('pageMetaResolver.search.findProductTitle', {
                count: total,
                coupon: _this.couponCode,
            }); }));
        };
        CouponSearchPageResolver.prototype.getScore = function (page) {
            return _super.prototype.getScore.call(this, page) + (this.couponCode ? 1 : -1);
        };
        Object.defineProperty(CouponSearchPageResolver.prototype, "couponCode", {
            get: function () {
                var _a, _b;
                return (_b = (_a = this.route.snapshot) === null || _a === void 0 ? void 0 : _a.queryParams) === null || _b === void 0 ? void 0 : _b.couponcode;
            },
            enumerable: false,
            configurable: true
        });
        return CouponSearchPageResolver;
    }(PageMetaResolver));
    CouponSearchPageResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CouponSearchPageResolver_Factory() { return new CouponSearchPageResolver(i0.ɵɵinject(ProductSearchService), i0.ɵɵinject(TranslationService), i0.ɵɵinject(AuthService), i0.ɵɵinject(i1$1.ActivatedRoute), i0.ɵɵinject(SemanticPathService)); }, token: CouponSearchPageResolver, providedIn: "root" });
    CouponSearchPageResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CouponSearchPageResolver.ctorParameters = function () { return [
        { type: ProductSearchService },
        { type: TranslationService },
        { type: AuthService },
        { type: i1$1.ActivatedRoute },
        { type: SemanticPathService }
    ]; };

    /**
     * Resolves the page data for the Product Detail Page
     * based on the `PageType.PRODUCT_PAGE`.
     *
     * The page title, heading, description, breadcrumbs and
     * first GALLERY image are resolved if available in the data.
     */
    var ProductPageMetaResolver = /** @class */ (function (_super) {
        __extends(ProductPageMetaResolver, _super);
        function ProductPageMetaResolver(routingService, productService, translation) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productService = productService;
            _this.translation = translation;
            // reusable observable for product data based on the current page
            _this.product$ = _this.routingService.getRouterState().pipe(operators.map(function (state) { return state.state.params['productCode']; }), operators.filter(function (code) { return !!code; }), operators.switchMap(function (code) { return _this.productService.get(code, exports.ProductScope.DETAILS); }), operators.filter(Boolean));
            _this.pageType = exports.PageType.PRODUCT_PAGE;
            return _this;
        }
        /**
         * Resolves the page heading for the Product Detail Page.
         * The page heading is used in the UI (`<h1>`), where as the page
         * title is used by the browser and crawlers.
         */
        ProductPageMetaResolver.prototype.resolveHeading = function () {
            var _this = this;
            return this.product$.pipe(operators.switchMap(function (p) { return _this.translation.translate('pageMetaResolver.product.heading', {
                heading: p.name,
            }); }));
        };
        /**
         * Resolves the page title for the Product Detail Page. The page title
         * is resolved with the product name, the first category and the manufactorer.
         * The page title used by the browser (history, tabs) and crawlers.
         */
        ProductPageMetaResolver.prototype.resolveTitle = function () {
            var _this = this;
            return this.product$.pipe(operators.switchMap(function (p) {
                var title = p.name;
                title += _this.resolveFirstCategory(p);
                title += _this.resolveManufacturer(p);
                return _this.translation.translate('pageMetaResolver.product.title', {
                    title: title,
                });
            }));
        };
        /**
         * Resolves the page description for the Product Detail Page. The description
         * is based on the `product.summary`.
         */
        ProductPageMetaResolver.prototype.resolveDescription = function () {
            var _this = this;
            return this.product$.pipe(operators.switchMap(function (p) { return _this.translation.translate('pageMetaResolver.product.description', {
                description: p.summary,
            }); }));
        };
        /**
         * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by
         * a static home page crum and a crumb for each category.
         */
        ProductPageMetaResolver.prototype.resolveBreadcrumbs = function () {
            return rxjs.combineLatest([
                this.product$.pipe(),
                this.translation.translate('common.home'),
            ]).pipe(operators.map(function (_d) {
                var e_1, _e;
                var _f = __read(_d, 2), p = _f[0], label = _f[1];
                var breadcrumbs = [];
                breadcrumbs.push({ label: label, link: '/' });
                try {
                    for (var _g = __values(p.categories || []), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var _j = _h.value, name = _j.name, code = _j.code, url = _j.url;
                        breadcrumbs.push({
                            label: name || code,
                            link: url,
                        });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_e = _g.return)) _e.call(_g);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return breadcrumbs;
            }));
        };
        /**
         * Resolves the main page image for the Product Detail Page. The product image
         * is based on the PRIMARY product image. The zoom format is used by default.
         */
        ProductPageMetaResolver.prototype.resolveImage = function () {
            return this.product$.pipe(operators.map(function (p) {
                var _a, _b, _c;
                return ((_c = (_b = (_a = p.images) === null || _a === void 0 ? void 0 : _a.PRIMARY) === null || _b === void 0 ? void 0 : _b.zoom) === null || _c === void 0 ? void 0 : _c.url) ? p.images.PRIMARY.zoom.url
                    : null;
            }));
        };
        ProductPageMetaResolver.prototype.resolveFirstCategory = function (product) {
            var _a;
            var firstCategory;
            if (((_a = product.categories) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                firstCategory = product.categories[0];
            }
            return firstCategory
                ? " | " + (firstCategory.name || firstCategory.code)
                : '';
        };
        ProductPageMetaResolver.prototype.resolveManufacturer = function (product) {
            return product.manufacturer ? " | " + product.manufacturer : '';
        };
        /**
         * Resolves the robot information for the Product Detail Page. The
         * robot instruction defaults to FOLLOW and INDEX for all product pages,
         * regardless of whether they're purchasable or not.
         */
        ProductPageMetaResolver.prototype.resolveRobots = function () {
            return rxjs.of([exports.PageRobotsMeta.FOLLOW, exports.PageRobotsMeta.INDEX]);
        };
        return ProductPageMetaResolver;
    }(PageMetaResolver));
    ProductPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductPageMetaResolver_Factory() { return new ProductPageMetaResolver(i0.ɵɵinject(RoutingService), i0.ɵɵinject(ProductService), i0.ɵɵinject(TranslationService)); }, token: ProductPageMetaResolver, providedIn: "root" });
    ProductPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ProductPageMetaResolver.ctorParameters = function () { return [
        { type: RoutingService },
        { type: ProductService },
        { type: TranslationService }
    ]; };

    /**
     * Resolves the page data for the Search Result Page based on the
     * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.
     *
     * Only the page title is resolved in the standard implemenation.
     */
    var SearchPageMetaResolver = /** @class */ (function (_super) {
        __extends(SearchPageMetaResolver, _super);
        function SearchPageMetaResolver(routingService, productSearchService, translation) {
            var _this = _super.call(this) || this;
            _this.routingService = routingService;
            _this.productSearchService = productSearchService;
            _this.translation = translation;
            _this.total$ = _this.productSearchService.getResults().pipe(operators.filter(function (data) { return !!(data === null || data === void 0 ? void 0 : data.pagination); }), operators.map(function (results) { return results.pagination.totalResults; }));
            _this.query$ = _this.routingService
                .getRouterState()
                .pipe(operators.map(function (state) { return state.state.params['query']; }));
            _this.pageType = exports.PageType.CONTENT_PAGE;
            _this.pageTemplate = 'SearchResultsListPageTemplate';
            return _this;
        }
        SearchPageMetaResolver.prototype.resolveTitle = function () {
            var _this = this;
            var sources = [this.total$, this.query$];
            return rxjs.combineLatest(sources).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), t = _b[0], q = _b[1];
                return _this.translation.translate('pageMetaResolver.search.title', {
                    count: t,
                    query: q,
                });
            }));
        };
        return SearchPageMetaResolver;
    }(PageMetaResolver));
    SearchPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchPageMetaResolver_Factory() { return new SearchPageMetaResolver(i0.ɵɵinject(RoutingService), i0.ɵɵinject(ProductSearchService), i0.ɵɵinject(TranslationService)); }, token: SearchPageMetaResolver, providedIn: "root" });
    SearchPageMetaResolver.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SearchPageMetaResolver.ctorParameters = function () { return [
        { type: RoutingService },
        { type: ProductSearchService },
        { type: TranslationService }
    ]; };

    function productStoreConfigFactory() {
        var _a;
        // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object
        var config = {
            state: {
                ssrTransfer: {
                    keys: (_a = {}, _a[PRODUCT_FEATURE] = exports.StateTransferType.TRANSFER_STATE, _a),
                },
            },
        };
        return config;
    }
    var ProductStoreModule = /** @class */ (function () {
        function ProductStoreModule() {
        }
        return ProductStoreModule;
    }());
    ProductStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$2.StoreModule.forFeature(PRODUCT_FEATURE, reducerToken$9, { metaReducers: metaReducers$3 }),
                        i3.EffectsModule.forFeature(effects$8),
                    ],
                    providers: [
                        provideDefaultConfigFactory(productStoreConfigFactory),
                        reducerProvider$9,
                    ],
                },] }
    ];

    var pageTitleResolvers = [
        {
            provide: PageMetaResolver,
            useExisting: ProductPageMetaResolver,
            multi: true,
        },
        {
            provide: PageMetaResolver,
            useExisting: CategoryPageMetaResolver,
            multi: true,
        },
        {
            provide: PageMetaResolver,
            useExisting: SearchPageMetaResolver,
            multi: true,
        },
        {
            provide: PageMetaResolver,
            useExisting: CouponSearchPageResolver,
            multi: true,
        },
    ];
    var ProductModule = /** @class */ (function () {
        function ProductModule() {
        }
        ProductModule.forRoot = function () {
            return {
                ngModule: ProductModule,
                providers: __spread(pageTitleResolvers),
            };
        };
        return ProductModule;
    }());
    ProductModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [ProductStoreModule],
                },] }
    ];

    var CmsTicketInterceptor = /** @class */ (function () {
        function CmsTicketInterceptor(service) {
            this.service = service;
        }
        CmsTicketInterceptor.prototype.intercept = function (request, next) {
            if (request.url.includes('/cms/') && this.service.cmsTicketId) {
                request = request.clone({
                    setParams: {
                        cmsTicketId: this.service.cmsTicketId,
                    },
                });
            }
            return next.handle(request);
        };
        return CmsTicketInterceptor;
    }());
    CmsTicketInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsTicketInterceptor_Factory() { return new CmsTicketInterceptor(i0.ɵɵinject(SmartEditService)); }, token: CmsTicketInterceptor, providedIn: "root" });
    CmsTicketInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    CmsTicketInterceptor.ctorParameters = function () { return [
        { type: SmartEditService }
    ]; };

    var interceptors$4 = [
        {
            provide: i1$4.HTTP_INTERCEPTORS,
            useExisting: CmsTicketInterceptor,
            multi: true,
        },
    ];

    var SmartEditModule = /** @class */ (function () {
        function SmartEditModule() {
        }
        SmartEditModule.forRoot = function () {
            return {
                ngModule: SmartEditModule,
                providers: __spread(interceptors$4),
            };
        };
        return SmartEditModule;
    }());
    SmartEditModule.decorators = [
        { type: i0.NgModule, args: [{},] }
    ];

    /**
     * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
     * @param ngExpressEngine
     */
    var NgExpressEngineDecorator = /** @class */ (function () {
        function NgExpressEngineDecorator() {
        }
        /**
         * Returns the higher order ngExpressEngine with provided tokens for Spartacus
         *
         * @param ngExpressEngine
         */
        NgExpressEngineDecorator.get = function (ngExpressEngine) {
            var result = function cxNgExpressEngine(setupOptions) {
                return function (filePath, options, callback) {
                    var engineInstance = ngExpressEngine(Object.assign(Object.assign({}, setupOptions), { providers: __spread(getServerRequestProviders(options), (setupOptions.providers || [])) }));
                    return engineInstance(filePath, options, callback);
                };
            };
            return result;
        };
        return NgExpressEngineDecorator;
    }());
    /**
     * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)
     *
     * @param options
     */
    function getServerRequestProviders(options) {
        return [
            {
                provide: SERVER_REQUEST_URL,
                useValue: getRequestUrl(options.req),
            },
            {
                provide: SERVER_REQUEST_ORIGIN,
                useValue: getRequestOrigin(options.req),
            },
        ];
    }
    function getRequestUrl(req) {
        return getRequestOrigin(req) + req.originalUrl;
    }
    function getRequestOrigin(req) {
        return req.protocol + '://' + req.get('host');
    }

    var StoreFinderConfig = /** @class */ (function () {
        function StoreFinderConfig() {
        }
        return StoreFinderConfig;
    }());
    StoreFinderConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreFinderConfig_Factory() { return i0.ɵɵinject(Config); }, token: StoreFinderConfig, providedIn: "root" });
    StoreFinderConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                    useExisting: Config,
                },] }
    ];

    var STORE_FINDER_FEATURE = 'stores';
    var STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';

    var FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';
    var FIND_STORES = '[StoreFinder] Find Stores';
    var FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';
    var FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';
    var FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';
    var FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';
    var FIND_STORE_BY_ID_SUCCESS = '[StoreFinder] Find a Store by Id Success';
    var FindStoresOnHold = /** @class */ (function (_super) {
        __extends(FindStoresOnHold, _super);
        function FindStoresOnHold() {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.type = FIND_STORES_ON_HOLD;
            return _this;
        }
        return FindStoresOnHold;
    }(LoaderLoadAction));
    var FindStores = /** @class */ (function (_super) {
        __extends(FindStores, _super);
        function FindStores(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORES;
            return _this;
        }
        return FindStores;
    }(LoaderLoadAction));
    var FindStoresFail = /** @class */ (function (_super) {
        __extends(FindStoresFail, _super);
        function FindStoresFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = FIND_STORES_FAIL;
            return _this;
        }
        return FindStoresFail;
    }(LoaderFailAction));
    var FindStoresSuccess = /** @class */ (function (_super) {
        __extends(FindStoresSuccess, _super);
        function FindStoresSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORES_SUCCESS;
            return _this;
        }
        return FindStoresSuccess;
    }(LoaderSuccessAction));
    var FindStoreById = /** @class */ (function (_super) {
        __extends(FindStoreById, _super);
        function FindStoreById(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID;
            return _this;
        }
        return FindStoreById;
    }(LoaderLoadAction));
    var FindStoreByIdFail = /** @class */ (function (_super) {
        __extends(FindStoreByIdFail, _super);
        function FindStoreByIdFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID_FAIL;
            return _this;
        }
        return FindStoreByIdFail;
    }(LoaderFailAction));
    var FindStoreByIdSuccess = /** @class */ (function (_super) {
        __extends(FindStoreByIdSuccess, _super);
        function FindStoreByIdSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = FIND_STORE_BY_ID_SUCCESS;
            return _this;
        }
        return FindStoreByIdSuccess;
    }(LoaderSuccessAction));

    var VIEW_ALL_STORES = '[StoreFinder] View All Stores';
    var VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';
    var VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';
    var ViewAllStores = /** @class */ (function (_super) {
        __extends(ViewAllStores, _super);
        function ViewAllStores() {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.type = VIEW_ALL_STORES;
            return _this;
        }
        return ViewAllStores;
    }(LoaderLoadAction));
    var ViewAllStoresFail = /** @class */ (function (_super) {
        __extends(ViewAllStoresFail, _super);
        function ViewAllStoresFail(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA, payload) || this;
            _this.payload = payload;
            _this.type = VIEW_ALL_STORES_FAIL;
            return _this;
        }
        return ViewAllStoresFail;
    }(LoaderFailAction));
    var ViewAllStoresSuccess = /** @class */ (function (_super) {
        __extends(ViewAllStoresSuccess, _super);
        function ViewAllStoresSuccess(payload) {
            var _this = _super.call(this, STORE_FINDER_DATA) || this;
            _this.payload = payload;
            _this.type = VIEW_ALL_STORES_SUCCESS;
            return _this;
        }
        return ViewAllStoresSuccess;
    }(LoaderSuccessAction));

    var storeFinderGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        FIND_STORES_ON_HOLD: FIND_STORES_ON_HOLD,
        FIND_STORES: FIND_STORES,
        FIND_STORES_FAIL: FIND_STORES_FAIL,
        FIND_STORES_SUCCESS: FIND_STORES_SUCCESS,
        FIND_STORE_BY_ID: FIND_STORE_BY_ID,
        FIND_STORE_BY_ID_FAIL: FIND_STORE_BY_ID_FAIL,
        FIND_STORE_BY_ID_SUCCESS: FIND_STORE_BY_ID_SUCCESS,
        FindStoresOnHold: FindStoresOnHold,
        FindStores: FindStores,
        FindStoresFail: FindStoresFail,
        FindStoresSuccess: FindStoresSuccess,
        FindStoreById: FindStoreById,
        FindStoreByIdFail: FindStoreByIdFail,
        FindStoreByIdSuccess: FindStoreByIdSuccess,
        VIEW_ALL_STORES: VIEW_ALL_STORES,
        VIEW_ALL_STORES_FAIL: VIEW_ALL_STORES_FAIL,
        VIEW_ALL_STORES_SUCCESS: VIEW_ALL_STORES_SUCCESS,
        ViewAllStores: ViewAllStores,
        ViewAllStoresFail: ViewAllStoresFail,
        ViewAllStoresSuccess: ViewAllStoresSuccess
    });

    var getStoreFinderState = i1$2.createFeatureSelector(STORE_FINDER_FEATURE);

    var ɵ0$K = function (storesState) { return storesState.findStores; };
    var getFindStoresState = i1$2.createSelector(getStoreFinderState, ɵ0$K);
    var ɵ1$u = function (state) { return loaderValueSelector(state); };
    var getFindStoresEntities = i1$2.createSelector(getFindStoresState, ɵ1$u);
    var ɵ2$k = function (state) { return loaderLoadingSelector(state); };
    var getStoresLoading = i1$2.createSelector(getFindStoresState, ɵ2$k);

    var ɵ0$L = function (storesState) { return storesState.viewAllStores; };
    var getViewAllStoresState = i1$2.createSelector(getStoreFinderState, ɵ0$L);
    var ɵ1$v = function (state) { return loaderValueSelector(state); };
    var getViewAllStoresEntities = i1$2.createSelector(getViewAllStoresState, ɵ1$v);
    var ɵ2$l = function (state) { return loaderLoadingSelector(state); };
    var getViewAllStoresLoading = i1$2.createSelector(getViewAllStoresState, ɵ2$l);

    var storeFinderGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getFindStoresState: getFindStoresState,
        getFindStoresEntities: getFindStoresEntities,
        getStoresLoading: getStoresLoading,
        ɵ0: ɵ0$K,
        ɵ1: ɵ1$u,
        ɵ2: ɵ2$k,
        getViewAllStoresState: getViewAllStoresState,
        getViewAllStoresEntities: getViewAllStoresEntities,
        getViewAllStoresLoading: getViewAllStoresLoading
    });

    var StoreFinderService = /** @class */ (function () {
        function StoreFinderService(store, winRef, globalMessageService, routingService) {
            this.store = store;
            this.winRef = winRef;
            this.globalMessageService = globalMessageService;
            this.routingService = routingService;
            this.geolocationWatchId = null;
        }
        /**
         * Returns boolean observable for store's loading state
         */
        StoreFinderService.prototype.getStoresLoading = function () {
            return this.store.pipe(i1$2.select(getStoresLoading));
        };
        /**
         * Returns observable for store's entities
         */
        StoreFinderService.prototype.getFindStoresEntities = function () {
            return this.store.pipe(i1$2.select(getFindStoresEntities));
        };
        /**
         * Returns boolean observable for view all store's loading state
         */
        StoreFinderService.prototype.getViewAllStoresLoading = function () {
            return this.store.pipe(i1$2.select(getViewAllStoresLoading));
        };
        /**
         * Returns observable for view all store's entities
         */
        StoreFinderService.prototype.getViewAllStoresEntities = function () {
            return this.store.pipe(i1$2.select(getViewAllStoresEntities));
        };
        /**
         * Store finding action functionality
         * @param queryText text query
         * @param searchConfig search configuration
         * @param longitudeLatitude longitude and latitude coordinates
         * @param countryIsoCode country ISO code
         * @param useMyLocation current location coordinates
         * @param radius radius of the scope from the center point
         */
        StoreFinderService.prototype.findStoresAction = function (queryText, searchConfig, longitudeLatitude, countryIsoCode, useMyLocation, radius) {
            var _this = this;
            if (useMyLocation && this.winRef.nativeWindow) {
                this.clearWatchGeolocation(new FindStoresOnHold());
                this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(function (pos) {
                    var position = {
                        longitude: pos.coords.longitude,
                        latitude: pos.coords.latitude,
                    };
                    _this.clearWatchGeolocation(new FindStores({
                        queryText: queryText,
                        searchConfig: searchConfig,
                        longitudeLatitude: position,
                        countryIsoCode: countryIsoCode,
                        radius: radius,
                    }));
                }, function () {
                    _this.globalMessageService.add({ key: 'storeFinder.geolocationNotEnabled' }, exports.GlobalMessageType.MSG_TYPE_ERROR);
                    _this.routingService.go(['/store-finder']);
                });
            }
            else {
                this.clearWatchGeolocation(new FindStores({
                    queryText: queryText,
                    searchConfig: searchConfig,
                    longitudeLatitude: longitudeLatitude,
                    countryIsoCode: countryIsoCode,
                    radius: radius,
                }));
            }
        };
        /**
         * View all stores
         */
        StoreFinderService.prototype.viewAllStores = function () {
            this.clearWatchGeolocation(new ViewAllStores());
        };
        /**
         * View all stores by id
         * @param storeId store id
         */
        StoreFinderService.prototype.viewStoreById = function (storeId) {
            this.clearWatchGeolocation(new FindStoreById({ storeId: storeId }));
        };
        StoreFinderService.prototype.clearWatchGeolocation = function (callbackAction) {
            if (this.geolocationWatchId !== null) {
                this.winRef.nativeWindow.navigator.geolocation.clearWatch(this.geolocationWatchId);
                this.geolocationWatchId = null;
            }
            this.store.dispatch(callbackAction);
        };
        return StoreFinderService;
    }());
    StoreFinderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreFinderService_Factory() { return new StoreFinderService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(WindowRef), i0.ɵɵinject(GlobalMessageService), i0.ɵɵinject(RoutingService)); }, token: StoreFinderService, providedIn: "root" });
    StoreFinderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    StoreFinderService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: WindowRef },
        { type: GlobalMessageService },
        { type: RoutingService }
    ]; };

    var StoreDataService = /** @class */ (function () {
        function StoreDataService() {
            this.weekDays = {
                0: 'Sun',
                1: 'Mon',
                2: 'Tue',
                3: 'Wed',
                4: 'Thu',
                5: 'Fri',
                6: 'Sat',
            };
        }
        /**
         * Returns store latitude
         * @param location store location
         */
        StoreDataService.prototype.getStoreLatitude = function (location) {
            return location.geoPoint.latitude;
        };
        /**
         * Returns store longitude
         * @param location store location
         */
        StoreDataService.prototype.getStoreLongitude = function (location) {
            return location.geoPoint.longitude;
        };
        /**
         * Returns store closing time
         * @param location store location
         * @param date date to compare
         */
        StoreDataService.prototype.getStoreClosingTime = function (location, date) {
            var requestedDaySchedule = this.getSchedule(location, date);
            if (requestedDaySchedule) {
                if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {
                    return 'closed';
                }
                if (requestedDaySchedule.closingTime) {
                    return requestedDaySchedule.closingTime.formattedHour;
                }
            }
        };
        /**
         * Returns store opening time
         * @param location store location
         * @param date date to compare
         */
        StoreDataService.prototype.getStoreOpeningTime = function (location, date) {
            var requestedDaySchedule = this.getSchedule(location, date);
            if (requestedDaySchedule) {
                if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {
                    return 'closed';
                }
                if (requestedDaySchedule.openingTime) {
                    return requestedDaySchedule.openingTime.formattedHour;
                }
            }
        };
        /**
         * Extracts schedule from the given location for the given date
         * @param location location
         * @param date date
         *
         * @returns payload describing the store's schedule for the given day.
         */
        StoreDataService.prototype.getSchedule = function (location, date) {
            var weekday = this.weekDays[date.getDay()];
            return location.openingHours.weekDayOpeningList.find(function (weekDayOpeningListItem) { return weekDayOpeningListItem.weekDay === weekday; });
        };
        return StoreDataService;
    }());
    StoreDataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreDataService_Factory() { return new StoreDataService(); }, token: StoreDataService, providedIn: "root" });
    StoreDataService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var ExternalJsFileLoader = /** @class */ (function () {
        function ExternalJsFileLoader(document) {
            this.document = document;
        }
        /**
         * Loads a javascript from an external URL
         * @param src URL for the script to be loaded
         * @param params additional parameters to be attached to the given URL
         * @param callback a function to be invoked after the script has been loaded
         * @param errorCallback function to be invoked after error during script loading
         */
        ExternalJsFileLoader.prototype.load = function (src, params, callback, errorCallback) {
            var script = this.document.createElement('script');
            script.type = 'text/javascript';
            if (params) {
                script.src = src + this.parseParams(params);
            }
            else {
                script.src = src;
            }
            script.async = true;
            script.defer = true;
            if (callback) {
                script.addEventListener('load', callback);
            }
            if (errorCallback) {
                script.addEventListener('error', errorCallback);
            }
            document.head.appendChild(script);
        };
        /**
         * Parses the given object with parameters to a string "param1=value1&param2=value2"
         * @param params object containing parameters
         */
        ExternalJsFileLoader.prototype.parseParams = function (params) {
            var result = '';
            var keysArray = Object.keys(params);
            if (keysArray.length > 0) {
                result =
                    '?' +
                        keysArray
                            .map(function (key) { return encodeURI(key) + '=' + encodeURI(params[key]); })
                            .join('&');
            }
            return result;
        };
        return ExternalJsFileLoader;
    }());
    ExternalJsFileLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalJsFileLoader_Factory() { return new ExternalJsFileLoader(i0.ɵɵinject(i1.DOCUMENT)); }, token: ExternalJsFileLoader, providedIn: "root" });
    ExternalJsFileLoader.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ExternalJsFileLoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }
    ]; };

    /// <reference types="@types/googlemaps" />
    var GoogleMapRendererService = /** @class */ (function () {
        function GoogleMapRendererService(config, externalJsFileLoader, storeDataService) {
            this.config = config;
            this.externalJsFileLoader = externalJsFileLoader;
            this.storeDataService = storeDataService;
            this.googleMap = null;
        }
        /**
         * Renders google map on the given element and draws markers on it.
         * If map already exists it will use an existing map otherwise it will create one
         * @param mapElement HTML element inside of which the map will be displayed
         * @param locations array containign geo data to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        GoogleMapRendererService.prototype.renderMap = function (mapElement, locations, selectMarkerHandler) {
            var _this = this;
            if (this.googleMap === null) {
                this.externalJsFileLoader.load(this.config.googleMaps.apiUrl, { key: this.config.googleMaps.apiKey }, function () {
                    _this.drawMap(mapElement, locations, selectMarkerHandler);
                });
            }
            else {
                this.drawMap(mapElement, locations, selectMarkerHandler);
            }
        };
        /**
         * Centers the map to the given point
         * @param latitute latitude of the new center
         * @param longitude longitude of the new center
         */
        GoogleMapRendererService.prototype.centerMap = function (latitute, longitude) {
            this.googleMap.panTo({ lat: latitute, lng: longitude });
            this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);
        };
        /**
         * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered
         * @param locations list of locations
         */
        GoogleMapRendererService.prototype.defineMapCenter = function (locations) {
            return new google.maps.LatLng(this.storeDataService.getStoreLatitude(locations[0]), this.storeDataService.getStoreLongitude(locations[0]));
        };
        /**
         * Creates google map inside if the given HTML element centered to the given point
         * @param mapElement {@link HTMLElement} inside of which the map will be created
         * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered
         */
        GoogleMapRendererService.prototype.initMap = function (mapElement, mapCenter) {
            var gestureOption = 'greedy';
            var mapProp = {
                center: mapCenter,
                zoom: this.config.googleMaps.scale,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                gestureHandling: gestureOption,
            };
            this.googleMap = new google.maps.Map(mapElement, mapProp);
        };
        /**
         * Erases the current map's markers and create a new one based on the given locations
         * @param locations array of locations to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        GoogleMapRendererService.prototype.createMarkers = function (locations, selectMarkerHandler) {
            var _this = this;
            this.markers = [];
            locations.forEach(function (element, index) {
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(_this.storeDataService.getStoreLatitude(element), _this.storeDataService.getStoreLongitude(element)),
                    label: index + 1 + '',
                });
                _this.markers.push(marker);
                marker.setMap(_this.googleMap);
                marker.addListener('mouseover', function () {
                    marker.setAnimation(google.maps.Animation.BOUNCE);
                });
                marker.addListener('mouseout', function () {
                    marker.setAnimation(null);
                });
                if (selectMarkerHandler) {
                    marker.addListener('click', function () {
                        selectMarkerHandler(index);
                    });
                }
            });
        };
        /**
         * Initialize and draw the map
         * @param mapElement {@link HTMLElement} inside of which the map will be drawn
         * @param locations array of locations to be displayed on the map
         * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
         */
        GoogleMapRendererService.prototype.drawMap = function (mapElement, locations, selectMarkerHandler) {
            this.initMap(mapElement, this.defineMapCenter(locations));
            this.createMarkers(locations, selectMarkerHandler);
        };
        return GoogleMapRendererService;
    }());
    GoogleMapRendererService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleMapRendererService_Factory() { return new GoogleMapRendererService(i0.ɵɵinject(StoreFinderConfig), i0.ɵɵinject(ExternalJsFileLoader), i0.ɵɵinject(StoreDataService)); }, token: GoogleMapRendererService, providedIn: "root" });
    GoogleMapRendererService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    GoogleMapRendererService.ctorParameters = function () { return [
        { type: StoreFinderConfig },
        { type: ExternalJsFileLoader },
        { type: StoreDataService }
    ]; };

    var defaultStoreFinderConfig = {
        googleMaps: {
            apiUrl: 'https://maps.googleapis.com/maps/api/js',
            apiKey: '',
            scale: 5,
            selectedMarkerScale: 17,
            radius: 50000,
        },
    };

    function getReducers$a() {
        return {
            findStores: loaderReducer(STORE_FINDER_DATA),
            viewAllStores: loaderReducer(STORE_FINDER_DATA),
        };
    }
    var reducerToken$a = new i0.InjectionToken('StoreFinderReducers');
    var reducerProvider$a = {
        provide: reducerToken$a,
        useFactory: getReducers$a,
    };
    var metaReducers$4 = [];

    var FindStoresEffect = /** @class */ (function () {
        function FindStoresEffect(actions$, storeFinderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.storeFinderConnector = storeFinderConnector;
            this.findStores$ = this.actions$.pipe(i3.ofType(FIND_STORES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.storeFinderConnector
                .search(payload.queryText, payload.searchConfig, payload.longitudeLatitude, payload.radius)
                .pipe(operators.map(function (data) {
                if (payload.countryIsoCode) {
                    data.stores = data.stores.filter(function (store) { return store.address.country.isocode === payload.countryIsoCode; });
                    data.stores.sort(function (a, b) { return a.name < b.name ? -1 : a.name > b.name ? 1 : 0; });
                }
                return new FindStoresSuccess(data);
            }), operators.catchError(function (error) { return rxjs.of(new FindStoresFail(makeErrorSerializable(error))); })); }));
            this.findStoreById$ = this.actions$.pipe(i3.ofType(FIND_STORE_BY_ID), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.storeFinderConnector.get(payload.storeId).pipe(operators.map(function (data) { return new FindStoreByIdSuccess(data); }), operators.catchError(function (error) { return rxjs.of(new FindStoreByIdFail(makeErrorSerializable(error))); })); }));
        }
        return FindStoresEffect;
    }());
    FindStoresEffect.decorators = [
        { type: i0.Injectable }
    ];
    FindStoresEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: StoreFinderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], FindStoresEffect.prototype, "findStores$", void 0);
    __decorate([
        i3.Effect()
    ], FindStoresEffect.prototype, "findStoreById$", void 0);

    var ViewAllStoresEffect = /** @class */ (function () {
        function ViewAllStoresEffect(actions$, storeFinderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.storeFinderConnector = storeFinderConnector;
            this.viewAllStores$ = this.actions$.pipe(i3.ofType(VIEW_ALL_STORES), operators.switchMap(function () {
                return _this.storeFinderConnector.getCounts().pipe(operators.map(function (data) {
                    data.sort(function (a, b) { return (a.name < b.name ? -1 : a.name > b.name ? 1 : 0); });
                    return new ViewAllStoresSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new ViewAllStoresFail(makeErrorSerializable(error))); }));
            }));
        }
        return ViewAllStoresEffect;
    }());
    ViewAllStoresEffect.decorators = [
        { type: i0.Injectable }
    ];
    ViewAllStoresEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: StoreFinderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ViewAllStoresEffect.prototype, "viewAllStores$", void 0);

    var effects$9 = [FindStoresEffect, ViewAllStoresEffect];

    var StoreFinderStoreModule = /** @class */ (function () {
        function StoreFinderStoreModule() {
        }
        return StoreFinderStoreModule;
    }());
    StoreFinderStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        i1$2.StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken$a),
                        i3.EffectsModule.forFeature(effects$9),
                    ],
                    providers: [reducerProvider$a],
                },] }
    ];

    var StoreFinderCoreModule = /** @class */ (function () {
        function StoreFinderCoreModule() {
        }
        return StoreFinderCoreModule;
    }());
    StoreFinderCoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [StoreFinderStoreModule],
                    providers: [provideDefaultConfig(defaultStoreFinderConfig)],
                },] }
    ];

    var UserConsentConnector = /** @class */ (function () {
        function UserConsentConnector(adapter) {
            this.adapter = adapter;
        }
        UserConsentConnector.prototype.loadConsents = function (userId) {
            return this.adapter.loadConsents(userId);
        };
        UserConsentConnector.prototype.giveConsent = function (userId, consentTemplateId, consentTemplateVersion) {
            return this.adapter.giveConsent(userId, consentTemplateId, consentTemplateVersion);
        };
        UserConsentConnector.prototype.withdrawConsent = function (userId, consentCode) {
            return this.adapter.withdrawConsent(userId, consentCode);
        };
        return UserConsentConnector;
    }());
    UserConsentConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserConsentConnector_Factory() { return new UserConsentConnector(i0.ɵɵinject(UserConsentAdapter)); }, token: UserConsentConnector, providedIn: "root" });
    UserConsentConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserConsentConnector.ctorParameters = function () { return [
        { type: UserConsentAdapter }
    ]; };

    var UserCostCenterConnector = /** @class */ (function () {
        function UserCostCenterConnector(adapter) {
            this.adapter = adapter;
        }
        UserCostCenterConnector.prototype.getActiveList = function (userId) {
            return this.adapter.loadActiveList(userId);
        };
        return UserCostCenterConnector;
    }());
    UserCostCenterConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserCostCenterConnector_Factory() { return new UserCostCenterConnector(i0.ɵɵinject(UserCostCenterAdapter)); }, token: UserCostCenterConnector, providedIn: "root" });
    UserCostCenterConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserCostCenterConnector.ctorParameters = function () { return [
        { type: UserCostCenterAdapter }
    ]; };

    var CustomerCouponConnector = /** @class */ (function () {
        function CustomerCouponConnector(adapter) {
            this.adapter = adapter;
        }
        CustomerCouponConnector.prototype.getCustomerCoupons = function (userId, pageSize, currentPage, sort) {
            return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);
        };
        CustomerCouponConnector.prototype.turnOnNotification = function (userId, couponCode) {
            return this.adapter.turnOnNotification(userId, couponCode);
        };
        CustomerCouponConnector.prototype.turnOffNotification = function (userId, couponCode) {
            return this.adapter.turnOffNotification(userId, couponCode);
        };
        CustomerCouponConnector.prototype.claimCustomerCoupon = function (userId, couponCode) {
            return this.adapter.claimCustomerCoupon(userId, couponCode);
        };
        return CustomerCouponConnector;
    }());
    CustomerCouponConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomerCouponConnector_Factory() { return new CustomerCouponConnector(i0.ɵɵinject(CustomerCouponAdapter)); }, token: CustomerCouponConnector, providedIn: "root" });
    CustomerCouponConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CustomerCouponConnector.ctorParameters = function () { return [
        { type: CustomerCouponAdapter }
    ]; };

    var UserInterestsConnector = /** @class */ (function () {
        function UserInterestsConnector(adapter) {
            this.adapter = adapter;
        }
        UserInterestsConnector.prototype.getInterests = function (userId, pageSize, currentPage, sort, productCode, notificationType) {
            return this.adapter.getInterests(userId, pageSize, currentPage, sort, productCode, notificationType);
        };
        UserInterestsConnector.prototype.removeInterest = function (userId, item) {
            return this.adapter.removeInterest(userId, item);
        };
        UserInterestsConnector.prototype.addInterest = function (userId, productCode, notificationType) {
            return this.adapter.addInterest(userId, productCode, notificationType);
        };
        return UserInterestsConnector;
    }());
    UserInterestsConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserInterestsConnector_Factory() { return new UserInterestsConnector(i0.ɵɵinject(UserInterestsAdapter)); }, token: UserInterestsConnector, providedIn: "root" });
    UserInterestsConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserInterestsConnector.ctorParameters = function () { return [
        { type: UserInterestsAdapter }
    ]; };

    var UserOrderConnector = /** @class */ (function () {
        function UserOrderConnector(adapter) {
            this.adapter = adapter;
        }
        UserOrderConnector.prototype.get = function (userId, orderCode) {
            return this.adapter.load(userId, orderCode);
        };
        UserOrderConnector.prototype.getHistory = function (userId, pageSize, currentPage, sort) {
            return this.adapter.loadHistory(userId, pageSize, currentPage, sort);
        };
        UserOrderConnector.prototype.getConsignmentTracking = function (orderCode, consignmentCode, userId) {
            return this.adapter.getConsignmentTracking(orderCode, consignmentCode, userId);
        };
        UserOrderConnector.prototype.cancel = function (userId, orderCode, cancelRequestInput) {
            return this.adapter.cancel(userId, orderCode, cancelRequestInput);
        };
        UserOrderConnector.prototype.return = function (userId, returnRequestInput) {
            return this.adapter.createReturnRequest(userId, returnRequestInput);
        };
        UserOrderConnector.prototype.getReturnRequestDetail = function (userId, returnRequestCode) {
            return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);
        };
        UserOrderConnector.prototype.getReturnRequestList = function (userId, pageSize, currentPage, sort) {
            return this.adapter.loadReturnRequestList(userId, pageSize, currentPage, sort);
        };
        UserOrderConnector.prototype.cancelReturnRequest = function (userId, returnRequestCode, returnRequestModification) {
            return this.adapter.cancelReturnRequest(userId, returnRequestCode, returnRequestModification);
        };
        return UserOrderConnector;
    }());
    UserOrderConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserOrderConnector_Factory() { return new UserOrderConnector(i0.ɵɵinject(UserOrderAdapter)); }, token: UserOrderConnector, providedIn: "root" });
    UserOrderConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserOrderConnector.ctorParameters = function () { return [
        { type: UserOrderAdapter }
    ]; };

    var UserPaymentConnector = /** @class */ (function () {
        function UserPaymentConnector(adapter) {
            this.adapter = adapter;
        }
        UserPaymentConnector.prototype.getAll = function (userId) {
            return this.adapter.loadAll(userId);
        };
        UserPaymentConnector.prototype.delete = function (userId, paymentMethodID) {
            return this.adapter.delete(userId, paymentMethodID);
        };
        UserPaymentConnector.prototype.setDefault = function (userId, paymentMethodID) {
            return this.adapter.setDefault(userId, paymentMethodID);
        };
        return UserPaymentConnector;
    }());
    UserPaymentConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPaymentConnector_Factory() { return new UserPaymentConnector(i0.ɵɵinject(UserPaymentAdapter)); }, token: UserPaymentConnector, providedIn: "root" });
    UserPaymentConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserPaymentConnector.ctorParameters = function () { return [
        { type: UserPaymentAdapter }
    ]; };

    var UserConnector = /** @class */ (function () {
        function UserConnector(adapter) {
            this.adapter = adapter;
        }
        UserConnector.prototype.get = function (userId) {
            return this.adapter.load(userId);
        };
        UserConnector.prototype.update = function (username, user) {
            return this.adapter.update(username, user);
        };
        UserConnector.prototype.register = function (user) {
            return this.adapter.register(user);
        };
        UserConnector.prototype.registerGuest = function (guid, password) {
            return this.adapter.registerGuest(guid, password);
        };
        UserConnector.prototype.requestForgotPasswordEmail = function (userEmailAddress) {
            return this.adapter.requestForgotPasswordEmail(userEmailAddress);
        };
        UserConnector.prototype.resetPassword = function (token, newPassword) {
            return this.adapter.resetPassword(token, newPassword);
        };
        UserConnector.prototype.updateEmail = function (userId, currentPassword, newUserId) {
            return this.adapter.updateEmail(userId, currentPassword, newUserId);
        };
        UserConnector.prototype.updatePassword = function (userId, oldPassword, newPassword) {
            return this.adapter.updatePassword(userId, oldPassword, newPassword);
        };
        UserConnector.prototype.remove = function (userId) {
            return this.adapter.remove(userId);
        };
        UserConnector.prototype.getTitles = function () {
            return this.adapter.loadTitles();
        };
        return UserConnector;
    }());
    UserConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserConnector_Factory() { return new UserConnector(i0.ɵɵinject(UserAdapter)); }, token: UserConnector, providedIn: "root" });
    UserConnector.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserConnector.ctorParameters = function () { return [
        { type: UserAdapter }
    ]; };

    /**
     * Unified facade for both anonymous and registered user consents.
     */
    var ConsentService = /** @class */ (function () {
        function ConsentService(anonymousConsentsService, userConsentService) {
            this.anonymousConsentsService = anonymousConsentsService;
            this.userConsentService = userConsentService;
        }
        /**
         * Returns either anonymous consent or registered consent as they are emmited.
         * @param templateCode for which to return either anonymous or registered consent.
         */
        ConsentService.prototype.getConsent = function (templateCode) {
            return rxjs.merge(this.userConsentService.getConsent(templateCode), this.anonymousConsentsService.getConsent(templateCode));
        };
        /**
         * Checks if the `templateId`'s template has a given consent.
         * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.
         *
         * @param templateId of a template which's consent should be checked
         */
        ConsentService.prototype.checkConsentGivenByTemplateId = function (templateId) {
            var _this = this;
            return this.getConsent(templateId).pipe(operators.map(function (consent) {
                if (!consent) {
                    return false;
                }
                return _this.isAnonymousConsentType(consent)
                    ? _this.anonymousConsentsService.isConsentGiven(consent)
                    : _this.userConsentService.isConsentGiven(consent);
            }), operators.distinctUntilChanged());
        };
        /**
         * Checks if the `templateId`'s template has a withdrawn consent.
         * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.
         *
         * @param templateId of a template which's consent should be checked
         */
        ConsentService.prototype.checkConsentWithdrawnByTemplateId = function (templateId) {
            var _this = this;
            return this.getConsent(templateId).pipe(operators.map(function (consent) {
                if (!consent) {
                    return true;
                }
                return _this.isAnonymousConsentType(consent)
                    ? _this.anonymousConsentsService.isConsentWithdrawn(consent)
                    : _this.userConsentService.isConsentWithdrawn(consent);
            }), operators.distinctUntilChanged());
        };
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`
         *
         * @param consent a consent to check
         */
        ConsentService.prototype.isConsentGiven = function (consent) {
            return this.isAnonymousConsentType(consent)
                ? this.anonymousConsentsService.isConsentGiven(consent)
                : this.userConsentService.isConsentGiven(consent);
        };
        /**
         *
         * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`
         *
         * @param consent a consent to check
         */
        ConsentService.prototype.isConsentWithdrawn = function (consent) {
            return this.isAnonymousConsentType(consent)
                ? this.anonymousConsentsService.isConsentWithdrawn(consent)
                : this.userConsentService.isConsentWithdrawn(consent);
        };
        /**
         * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.
         */
        ConsentService.prototype.isAnonymousConsentType = function (consent) {
            if (!consent) {
                return false;
            }
            return consent.templateCode !== undefined;
        };
        /**
         * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.
         */
        ConsentService.prototype.isConsentType = function (consent) {
            if (!consent) {
                return false;
            }
            return consent.code !== undefined;
        };
        return ConsentService;
    }());
    ConsentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConsentService_Factory() { return new ConsentService(i0.ɵɵinject(AnonymousConsentsService), i0.ɵɵinject(UserConsentService)); }, token: ConsentService, providedIn: "root" });
    ConsentService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ConsentService.ctorParameters = function () { return [
        { type: AnonymousConsentsService },
        { type: UserConsentService }
    ]; };

    var CustomerCouponService = /** @class */ (function () {
        function CustomerCouponService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Retrieves customer's coupons
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        CustomerCouponService.prototype.loadCustomerCoupons = function (pageSize, currentPage, sort) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadCustomerCoupons({
                    userId: userId,
                    pageSize: pageSize,
                    currentPage: currentPage,
                    sort: sort,
                }));
            });
        };
        /**
         * Returns customer coupon search result
         * @param pageSize page size
         */
        CustomerCouponService.prototype.getCustomerCoupons = function (pageSize) {
            var _this = this;
            return rxjs.combineLatest([
                this.store.pipe(i1$2.select(getCustomerCouponsState)),
                this.getClaimCustomerCouponResultLoading(),
            ]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 2), loading = _b[1];
                return !loading;
            }), operators.tap(function (_a) {
                var _b = __read(_a, 1), customerCouponsState = _b[0];
                var attemptedLoad = customerCouponsState.loading ||
                    customerCouponsState.success ||
                    customerCouponsState.error;
                if (!attemptedLoad) {
                    _this.loadCustomerCoupons(pageSize);
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 1), customerCouponsState = _b[0];
                return customerCouponsState.value;
            }));
        };
        /**
         * Returns a loaded flag for customer coupons
         */
        CustomerCouponService.prototype.getCustomerCouponsLoaded = function () {
            return this.store.pipe(i1$2.select(getCustomerCouponsLoaded));
        };
        /**
         * Returns a loading flag for customer coupons
         */
        CustomerCouponService.prototype.getCustomerCouponsLoading = function () {
            return this.store.pipe(i1$2.select(getCustomerCouponsLoading));
        };
        /**
         * Subscribe a CustomerCoupon Notification
         * @param couponCode a customer coupon code
         */
        CustomerCouponService.prototype.subscribeCustomerCoupon = function (couponCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new SubscribeCustomerCoupon({
                    userId: userId,
                    couponCode: couponCode,
                }));
            });
        };
        /**
         * Returns the subscribe customer coupon notification process loading flag
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the subscribe customer coupon notification process success flag
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the subscribe customer coupon notification process error flag
         */
        CustomerCouponService.prototype.getSubscribeCustomerCouponResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Unsubscribe a CustomerCoupon Notification
         * @param couponCode a customer coupon code
         */
        CustomerCouponService.prototype.unsubscribeCustomerCoupon = function (couponCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UnsubscribeCustomerCoupon({
                    userId: userId,
                    couponCode: couponCode,
                }));
            });
        };
        /**
         * Returns the unsubscribe customer coupon notification process loading flag
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the unsubscribe customer coupon notification process success flag
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the unsubscribe customer coupon notification process error flag
         */
        CustomerCouponService.prototype.getUnsubscribeCustomerCouponResultError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Claim a CustomerCoupon
         * @param couponCode a customer coupon code
         */
        CustomerCouponService.prototype.claimCustomerCoupon = function (couponCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new ClaimCustomerCoupon({
                    userId: userId,
                    couponCode: couponCode,
                }));
            });
        };
        /**
         * Returns the claim customer coupon notification process success flag
         */
        CustomerCouponService.prototype.getClaimCustomerCouponResultSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID)));
        };
        /**
         * Returns the claim customer coupon notification process loading flag
         */
        CustomerCouponService.prototype.getClaimCustomerCouponResultLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID)));
        };
        return CustomerCouponService;
    }());
    CustomerCouponService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomerCouponService_Factory() { return new CustomerCouponService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: CustomerCouponService, providedIn: "root" });
    CustomerCouponService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    CustomerCouponService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var OrderReturnRequestService = /** @class */ (function () {
        function OrderReturnRequestService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Create order return request
         * @param orderCode an order code
         * @param returnRequestInput order return request entry input
         */
        OrderReturnRequestService.prototype.createOrderReturnRequest = function (returnRequestInput) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new CreateOrderReturnRequest({
                    userId: userId,
                    returnRequestInput: returnRequestInput,
                }));
            });
        };
        /**
         * Return an order return request
         */
        OrderReturnRequestService.prototype.getOrderReturnRequest = function () {
            return this.store.pipe(i1$2.select(getOrderReturnRequest));
        };
        /**
         * Gets order return request list
         */
        OrderReturnRequestService.prototype.getOrderReturnRequestList = function (pageSize) {
            var _this = this;
            return this.store.pipe(i1$2.select(getOrderReturnRequestListState), operators.tap(function (returnListState) {
                var attemptedLoad = returnListState.loading ||
                    returnListState.success ||
                    returnListState.error;
                if (!attemptedLoad) {
                    _this.loadOrderReturnRequestList(pageSize);
                }
            }), operators.map(function (returnListState) { return returnListState.value; }));
        };
        /**
         * Loads order return request detail
         * @param returnRequestCode
         */
        OrderReturnRequestService.prototype.loadOrderReturnRequestDetail = function (returnRequestCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadOrderReturnRequest({
                    userId: userId,
                    returnRequestCode: returnRequestCode,
                }));
            });
        };
        /**
         * Loads order return request list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        OrderReturnRequestService.prototype.loadOrderReturnRequestList = function (pageSize, currentPage, sort) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadOrderReturnRequestList({
                        userId: userId,
                        pageSize: pageSize,
                        currentPage: currentPage,
                        sort: sort,
                    }));
                }
            });
        };
        /**
         * Cleaning order return request list
         */
        OrderReturnRequestService.prototype.clearOrderReturnRequestList = function () {
            this.store.dispatch(new ClearOrderReturnRequestList());
        };
        /**
         * Get the order return request loading flag
         */
        OrderReturnRequestService.prototype.getReturnRequestLoading = function () {
            return this.store.pipe(i1$2.select(getOrderReturnRequestLoading));
        };
        /**
         * Get the order return request success flag
         */
        OrderReturnRequestService.prototype.getReturnRequestSuccess = function () {
            return this.store.pipe(i1$2.select(getOrderReturnRequestSuccess));
        };
        /**
         * Cleaning order return request details
         */
        OrderReturnRequestService.prototype.clearOrderReturnRequestDetail = function () {
            this.store.dispatch(new ClearOrderReturnRequest());
        };
        /*
         * Cancel order return request
         */
        OrderReturnRequestService.prototype.cancelOrderReturnRequest = function (returnRequestCode, returnRequestModification) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new CancelOrderReturnRequest({
                    userId: userId,
                    returnRequestCode: returnRequestCode,
                    returnRequestModification: returnRequestModification,
                }));
            });
        };
        /**
         * Returns the cancel return request loading flag
         */
        OrderReturnRequestService.prototype.getCancelReturnRequestLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID)));
        };
        /**
         * Returns the cancel return request success flag
         */
        OrderReturnRequestService.prototype.getCancelReturnRequestSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID)));
        };
        /**
         * Resets the cancel return request process flags
         */
        OrderReturnRequestService.prototype.resetCancelReturnRequestProcessState = function () {
            return this.store.dispatch(new ResetCancelReturnProcess());
        };
        return OrderReturnRequestService;
    }());
    OrderReturnRequestService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OrderReturnRequestService_Factory() { return new OrderReturnRequestService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: OrderReturnRequestService, providedIn: "root" });
    OrderReturnRequestService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    OrderReturnRequestService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserAddressService = /** @class */ (function () {
        function UserAddressService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Retrieves user's addresses
         */
        UserAddressService.prototype.loadAddresses = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadUserAddresses(userId));
            });
        };
        /**
         * Adds user address
         * @param address a user address
         */
        UserAddressService.prototype.addUserAddress = function (address) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new AddUserAddress({
                    userId: userId,
                    address: address,
                }));
            });
        };
        /**
         * Sets user address as default
         * @param addressId a user address ID
         */
        UserAddressService.prototype.setAddressAsDefault = function (addressId) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdateUserAddress({
                    userId: userId,
                    addressId: addressId,
                    address: { defaultAddress: true },
                }));
            });
        };
        /**
         * Updates existing user address
         * @param addressId a user address ID
         * @param address a user address
         */
        UserAddressService.prototype.updateUserAddress = function (addressId, address) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdateUserAddress({
                    userId: userId,
                    addressId: addressId,
                    address: address,
                }));
            });
        };
        /**
         * Deletes existing user address
         * @param addressId a user address ID
         */
        UserAddressService.prototype.deleteUserAddress = function (addressId) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new DeleteUserAddress({
                    userId: userId,
                    addressId: addressId,
                }));
            });
        };
        /**
         * Returns addresses
         */
        UserAddressService.prototype.getAddresses = function () {
            return this.store.pipe(i1$2.select(getAddresses));
        };
        /**
         * Returns a loading flag for addresses
         */
        UserAddressService.prototype.getAddressesLoading = function () {
            return this.store.pipe(i1$2.select(getAddressesLoading));
        };
        UserAddressService.prototype.getAddressesLoadedSuccess = function () {
            return this.store.pipe(i1$2.select(getAddressesLoadedSuccess));
        };
        /**
         * Retrieves delivery countries
         */
        UserAddressService.prototype.loadDeliveryCountries = function () {
            this.store.dispatch(new LoadDeliveryCountries());
        };
        /**
         * Returns all delivery countries
         */
        UserAddressService.prototype.getDeliveryCountries = function () {
            return this.store.pipe(i1$2.select(getAllDeliveryCountries));
        };
        /**
         * Returns a country based on the provided `isocode`
         * @param isocode an isocode for a country
         */
        UserAddressService.prototype.getCountry = function (isocode) {
            return this.store.pipe(i1$2.select(countrySelectorFactory(isocode)));
        };
        /**
         * Retrieves regions for specified country by `countryIsoCode`
         * @param countryIsoCode
         */
        UserAddressService.prototype.loadRegions = function (countryIsoCode) {
            this.store.dispatch(new LoadRegions(countryIsoCode));
        };
        /**
         * Clear regions in store - useful when changing country
         */
        UserAddressService.prototype.clearRegions = function () {
            this.store.dispatch(new ClearRegions());
        };
        /**
         * Returns all regions
         */
        UserAddressService.prototype.getRegions = function (countryIsoCode) {
            var _this = this;
            return this.store.pipe(i1$2.select(getRegionsDataAndLoading), operators.map(function (_a) {
                var regions = _a.regions, country = _a.country, loading = _a.loading, loaded = _a.loaded;
                if (!countryIsoCode && (loading || loaded)) {
                    _this.clearRegions();
                    return [];
                }
                else if (loading && !loaded) {
                    // don't interrupt loading
                    return [];
                }
                else if (!loading && countryIsoCode !== country && countryIsoCode) {
                    // country changed - clear store and load new regions
                    if (country) {
                        _this.clearRegions();
                    }
                    _this.loadRegions(countryIsoCode);
                    return [];
                }
                return regions;
            }));
        };
        return UserAddressService;
    }());
    UserAddressService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserAddressService_Factory() { return new UserAddressService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserAddressService, providedIn: "root" });
    UserAddressService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserAddressService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserCostCenterService = /** @class */ (function () {
        function UserCostCenterService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Load all visible active cost centers for the currently login user
         */
        UserCostCenterService.prototype.loadActiveCostCenters = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId && userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadActiveCostCenters(userId));
                }
            });
        };
        UserCostCenterService.prototype.getCostCentersState = function () {
            return this.store.select(getCostCentersState);
        };
        /**
         * Get all visible active cost centers
         */
        UserCostCenterService.prototype.getActiveCostCenters = function () {
            var _this = this;
            return this.getCostCentersState().pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadActiveCostCenters();
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        /**
         * Get the addresses of the cost center's unit based on cost center id
         * @param costCenterId cost center id
         */
        UserCostCenterService.prototype.getCostCenterAddresses = function (costCenterId) {
            return this.getActiveCostCenters().pipe(operators.map(function (costCenters) {
                var costCenter = costCenters.find(function (cc) { return cc.code === costCenterId; });
                if (costCenter && costCenter.unit) {
                    return costCenter.unit.addresses;
                }
                else {
                    return [];
                }
            }));
        };
        return UserCostCenterService;
    }());
    UserCostCenterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserCostCenterService_Factory() { return new UserCostCenterService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserCostCenterService, providedIn: "root" });
    UserCostCenterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserCostCenterService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserInterestsService = /** @class */ (function () {
        function UserInterestsService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Retrieves an product interest list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        UserInterestsService.prototype.loadProductInterests = function (pageSize, currentPage, sort, productCode, notificationType) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadProductInterests({
                    userId: userId,
                    pageSize: pageSize,
                    currentPage: currentPage,
                    sort: sort,
                    productCode: productCode,
                    notificationType: notificationType,
                }));
            });
        };
        /**
         * Returns product interests
         */
        UserInterestsService.prototype.getProductInterests = function () {
            return this.store.pipe(i1$2.select(getInterests));
        };
        /**
         * Returns product interests
         * @param pageSize the page size
         */
        UserInterestsService.prototype.getAndLoadProductInterests = function (pageSize) {
            var _this = this;
            return this.store.pipe(i1$2.select(getInterestsState), operators.tap(function (interestListState) {
                var attemptedLoad = interestListState.loading ||
                    interestListState.success ||
                    interestListState.error;
                if (!attemptedLoad) {
                    _this.loadProductInterests(pageSize);
                }
            }), operators.map(function (interestListState) { return interestListState.value; }));
        };
        /**
         * Returns a loading flag for product interests
         */
        UserInterestsService.prototype.getProdutInterestsLoading = function () {
            return this.store.pipe(i1$2.select(getInterestsLoading));
        };
        /**
         * Removes a ProductInterestRelation
         * @param item product interest relation item
         * @param singleDelete flag to delete only one interest
         */
        UserInterestsService.prototype.removeProdutInterest = function (item, singleDelete) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new RemoveProductInterest({
                    userId: userId,
                    item: item,
                    singleDelete: singleDelete,
                }));
            });
        };
        /**
         * Returns a loading flag for removing product interests.
         */
        UserInterestsService.prototype.getRemoveProdutInterestLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
        };
        /**
         * Returns a success flag for removing a product interests.
         */
        UserInterestsService.prototype.getRemoveProdutInterestSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
        };
        /**
         * Add a new product interest.
         *
         * @param productCode the product code
         * @param notificationType the notification type
         */
        UserInterestsService.prototype.addProductInterest = function (productCode, notificationType) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new AddProductInterest({
                    userId: userId,
                    productCode: productCode,
                    notificationType: notificationType,
                }));
            });
        };
        /**
         * Returns a success flag for adding a product interest.
         */
        UserInterestsService.prototype.getAddProductInterestSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
        };
        /**
         * Returns a error flag for adding a product interest.
         */
        UserInterestsService.prototype.getAddProductInterestError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
        };
        /**
         * Reset product interest adding state.
         */
        UserInterestsService.prototype.resetAddInterestState = function () {
            this.store.dispatch(new ResetAddInterestState());
        };
        /**
         * Reset product interest removing state.
         */
        UserInterestsService.prototype.resetRemoveInterestState = function () {
            this.store.dispatch(new ResetRemoveInterestState());
        };
        /**
         * Clears product interests
         */
        UserInterestsService.prototype.clearProductInterests = function () {
            this.store.dispatch(new ClearProductInterests());
        };
        return UserInterestsService;
    }());
    UserInterestsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserInterestsService_Factory() { return new UserInterestsService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserInterestsService, providedIn: "root" });
    UserInterestsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserInterestsService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserNotificationPreferenceService = /** @class */ (function () {
        function UserNotificationPreferenceService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Returns all notification preferences.
         */
        UserNotificationPreferenceService.prototype.getPreferences = function () {
            return this.store.pipe(i1$2.select(getPreferences));
        };
        /**
         * Returns all enabled notification preferences.
         */
        UserNotificationPreferenceService.prototype.getEnabledPreferences = function () {
            return this.store.pipe(i1$2.select(getEnabledPreferences));
        };
        /**
         * Loads all notification preferences.
         */
        UserNotificationPreferenceService.prototype.loadPreferences = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadNotificationPreferences(userId));
            });
        };
        /**
         * Clear all notification preferences.
         */
        UserNotificationPreferenceService.prototype.clearPreferences = function () {
            this.store.dispatch(new ClearNotificationPreferences());
        };
        /**
         * Returns a loading flag for notification preferences.
         */
        UserNotificationPreferenceService.prototype.getPreferencesLoading = function () {
            return this.store.pipe(i1$2.select(getPreferencesLoading));
        };
        /**
         * Updating notification preferences.
         * @param preferences a preference list
         */
        UserNotificationPreferenceService.prototype.updatePreferences = function (preferences) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new UpdateNotificationPreferences({
                    userId: userId,
                    preferences: preferences,
                }));
            });
        };
        /**
         * Returns a loading flag for updating preferences.
         */
        UserNotificationPreferenceService.prototype.getUpdatePreferencesResultLoading = function () {
            return this.store.select(getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID));
        };
        /**
         * Resets the update notification preferences process state. The state needs to be
         * reset after the process concludes, regardless if it's a success or an error.
         */
        UserNotificationPreferenceService.prototype.resetNotificationPreferences = function () {
            this.store.dispatch(new ResetNotificationPreferences());
        };
        return UserNotificationPreferenceService;
    }());
    UserNotificationPreferenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserNotificationPreferenceService_Factory() { return new UserNotificationPreferenceService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserNotificationPreferenceService, providedIn: "root" });
    UserNotificationPreferenceService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserNotificationPreferenceService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserOrderService = /** @class */ (function () {
        function UserOrderService(store, userIdService, routingService) {
            this.store = store;
            this.userIdService = userIdService;
            this.routingService = routingService;
        }
        /**
         * Returns an order's detail
         */
        UserOrderService.prototype.getOrderDetails = function () {
            return this.store.pipe(i1$2.select(getOrderDetails));
        };
        /**
         * Retrieves order's details
         *
         * @param orderCode an order code
         */
        UserOrderService.prototype.loadOrderDetails = function (orderCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadOrderDetails({
                    userId: userId,
                    orderCode: orderCode,
                }));
            });
        };
        /**
         * Clears order's details
         */
        UserOrderService.prototype.clearOrderDetails = function () {
            this.store.dispatch(new ClearOrderDetails());
        };
        /**
         * Returns order history list
         */
        UserOrderService.prototype.getOrderHistoryList = function (pageSize) {
            var _this = this;
            return this.store.pipe(i1$2.select(getOrdersState), operators.tap(function (orderListState) {
                var attemptedLoad = orderListState.loading ||
                    orderListState.success ||
                    orderListState.error;
                if (!attemptedLoad) {
                    _this.loadOrderList(pageSize);
                }
            }), operators.map(function (orderListState) { return orderListState.value; }));
        };
        /**
         * Returns a loaded flag for order history list
         */
        UserOrderService.prototype.getOrderHistoryListLoaded = function () {
            return this.store.pipe(i1$2.select(getOrdersLoaded));
        };
        /**
         * Retrieves an order list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        UserOrderService.prototype.loadOrderList = function (pageSize, currentPage, sort) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    var replenishmentOrderCode_1;
                    _this.routingService
                        .getRouterState()
                        .pipe(operators.take(1))
                        .subscribe(function (data) {
                        var _a, _b;
                        replenishmentOrderCode_1 = (_b = (_a = data === null || data === void 0 ? void 0 : data.state) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.replenishmentOrderCode;
                    })
                        .unsubscribe();
                    _this.store.dispatch(new LoadUserOrders({
                        userId: userId,
                        pageSize: pageSize,
                        currentPage: currentPage,
                        sort: sort,
                        replenishmentOrderCode: replenishmentOrderCode_1,
                    }));
                }
            });
        };
        /**
         * Cleaning order list
         */
        UserOrderService.prototype.clearOrderList = function () {
            this.store.dispatch(new ClearUserOrders());
        };
        /**
         *  Returns a consignment tracking detail
         */
        UserOrderService.prototype.getConsignmentTracking = function () {
            return this.store.pipe(i1$2.select(getConsignmentTracking));
        };
        /**
         * Retrieves consignment tracking details
         * @param orderCode an order code
         * @param consignmentCode a consignment code
         */
        UserOrderService.prototype.loadConsignmentTracking = function (orderCode, consignmentCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadConsignmentTracking({
                    userId: userId,
                    orderCode: orderCode,
                    consignmentCode: consignmentCode,
                }));
            });
        };
        /**
         * Cleaning consignment tracking
         */
        UserOrderService.prototype.clearConsignmentTracking = function () {
            this.store.dispatch(new ClearConsignmentTracking());
        };
        /*
         * Cancel an order
         */
        UserOrderService.prototype.cancelOrder = function (orderCode, cancelRequestInput) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new CancelOrder({
                    userId: userId,
                    orderCode: orderCode,
                    cancelRequestInput: cancelRequestInput,
                }));
            });
        };
        /**
         * Returns the cancel order loading flag
         */
        UserOrderService.prototype.getCancelOrderLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the cancel order success flag
         */
        UserOrderService.prototype.getCancelOrderSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID)));
        };
        /**
         * Resets the cancel order process flags
         */
        UserOrderService.prototype.resetCancelOrderProcessState = function () {
            return this.store.dispatch(new ResetCancelOrderProcess());
        };
        return UserOrderService;
    }());
    UserOrderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserOrderService_Factory() { return new UserOrderService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService), i0.ɵɵinject(RoutingService)); }, token: UserOrderService, providedIn: "root" });
    UserOrderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserOrderService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService },
        { type: RoutingService }
    ]; };

    var UserPaymentService = /** @class */ (function () {
        function UserPaymentService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Loads all user's payment methods.
         */
        UserPaymentService.prototype.loadPaymentMethods = function () {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new LoadUserPaymentMethods(userId));
            });
        };
        /**
         * Returns all user's payment methods
         */
        UserPaymentService.prototype.getPaymentMethods = function () {
            return this.store.pipe(i1$2.select(getPaymentMethods));
        };
        /**
         * Returns a loading flag for payment methods
         */
        UserPaymentService.prototype.getPaymentMethodsLoading = function () {
            return this.store.pipe(i1$2.select(getPaymentMethodsLoading));
        };
        UserPaymentService.prototype.getPaymentMethodsLoadedSuccess = function () {
            return this.store.pipe(i1$2.select(getPaymentMethodsLoadedSuccess));
        };
        /**
         * Sets the payment as a default one
         * @param paymentMethodId a payment method ID
         */
        UserPaymentService.prototype.setPaymentMethodAsDefault = function (paymentMethodId) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new SetDefaultUserPaymentMethod({
                    userId: userId,
                    paymentMethodId: paymentMethodId,
                }));
            });
        };
        /**
         * Deletes the payment method
         *
         * @param paymentMethodId a payment method ID
         */
        UserPaymentService.prototype.deletePaymentMethod = function (paymentMethodId) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                _this.store.dispatch(new DeleteUserPaymentMethod({
                    userId: userId,
                    paymentMethodId: paymentMethodId,
                }));
            });
        };
        /**
         * Returns all billing countries
         */
        UserPaymentService.prototype.getAllBillingCountries = function () {
            return this.store.pipe(i1$2.select(getAllBillingCountries));
        };
        /**
         * Retrieves billing countries
         */
        UserPaymentService.prototype.loadBillingCountries = function () {
            this.store.dispatch(new LoadBillingCountries());
        };
        return UserPaymentService;
    }());
    UserPaymentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPaymentService_Factory() { return new UserPaymentService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserPaymentService, providedIn: "root" });
    UserPaymentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserPaymentService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var UserReplenishmentOrderService = /** @class */ (function () {
        function UserReplenishmentOrderService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        /**
         * Returns replenishment order details for a given 'current' user
         *
         * @param replenishmentOrderCode a replenishment order code
         */
        UserReplenishmentOrderService.prototype.loadReplenishmentOrderDetails = function (replenishmentOrderCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadReplenishmentOrderDetails({
                        userId: userId,
                        replenishmentOrderCode: replenishmentOrderCode,
                    }));
                }
            });
        };
        /**
         * Returns a replenishment order details
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderDetails = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrderDetailsValue));
        };
        /**
         * Returns a replenishment order details loading flag
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderDetailsLoading = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrderDetailsLoading));
        };
        /**
         * Returns a replenishment order details success flag
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderDetailsSuccess = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrderDetailsSuccess));
        };
        /**
         * Returns a replenishment order details error flag
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderDetailsError = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrderDetailsError));
        };
        /**
         * Clears the replenishment orders details state
         */
        UserReplenishmentOrderService.prototype.clearReplenishmentOrderDetails = function () {
            this.store.dispatch(new ClearReplenishmentOrderDetails());
        };
        /**
         * Cancels a specific replenishment order for a given 'current' user
         *
         * @param replenishmentOrderCode a replenishment order code
         */
        UserReplenishmentOrderService.prototype.cancelReplenishmentOrder = function (replenishmentOrderCode) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new CancelReplenishmentOrder({
                        userId: userId,
                        replenishmentOrderCode: replenishmentOrderCode,
                    }));
                }
            });
        };
        /**
         * Returns the cancel replenishment order loading flag
         */
        UserReplenishmentOrderService.prototype.getCancelReplenishmentOrderLoading = function () {
            return this.store.pipe(i1$2.select(getProcessLoadingFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the cancel replenishment order success flag
         */
        UserReplenishmentOrderService.prototype.getCancelReplenishmentOrderSuccess = function () {
            return this.store.pipe(i1$2.select(getProcessSuccessFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the cancel replenishment order error flag
         */
        UserReplenishmentOrderService.prototype.getCancelReplenishmentOrderError = function () {
            return this.store.pipe(i1$2.select(getProcessErrorFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));
        };
        /**
         * Clears the cancel replenishment order processing state
         */
        UserReplenishmentOrderService.prototype.clearCancelReplenishmentOrderProcessState = function () {
            this.store.dispatch(new ClearCancelReplenishmentOrder());
        };
        /**
         * Returns replenishment order history list
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderHistoryList = function (pageSize) {
            var _this = this;
            return this.store.pipe(i1$2.select(getReplenishmentOrdersState), operators.tap(function (replenishmentOrderListState) {
                var attemptedLoad = replenishmentOrderListState.loading ||
                    replenishmentOrderListState.success ||
                    replenishmentOrderListState.error;
                if (!attemptedLoad) {
                    _this.loadReplenishmentOrderList(pageSize);
                }
            }), operators.map(function (replenishmentOrderListState) { return replenishmentOrderListState.value; }));
        };
        /**
         * Returns a loading flag for replenishment order history list
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderHistoryListLoading = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrdersLoading));
        };
        /**
         * Returns a error flag for replenishment order history list
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderHistoryListError = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrdersError));
        };
        /**
         * Returns a success flag for replenishment order history list
         */
        UserReplenishmentOrderService.prototype.getReplenishmentOrderHistoryListSuccess = function () {
            return this.store.pipe(i1$2.select(getReplenishmentOrdersSuccess));
        };
        /**
         * Retrieves a replenishment order list
         * @param pageSize page size
         * @param currentPage current page
         * @param sort sort
         */
        UserReplenishmentOrderService.prototype.loadReplenishmentOrderList = function (pageSize, currentPage, sort) {
            var _this = this;
            this.userIdService.invokeWithUserId(function (userId) {
                if (userId !== OCC_USER_ID_ANONYMOUS) {
                    _this.store.dispatch(new LoadUserReplenishmentOrders({
                        userId: userId,
                        pageSize: pageSize,
                        currentPage: currentPage,
                        sort: sort,
                    }));
                }
            });
        };
        /**
         * Cleaning replenishment order list
         */
        UserReplenishmentOrderService.prototype.clearReplenishmentOrderList = function () {
            this.store.dispatch(new ClearUserReplenishmentOrders());
        };
        return UserReplenishmentOrderService;
    }());
    UserReplenishmentOrderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserReplenishmentOrderService_Factory() { return new UserReplenishmentOrderService(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(UserIdService)); }, token: UserReplenishmentOrderService, providedIn: "root" });
    UserReplenishmentOrderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    UserReplenishmentOrderService.ctorParameters = function () { return [
        { type: i1$2.Store },
        { type: UserIdService }
    ]; };

    var initialState$l = {
        entities: {},
    };
    function reducer$l(state, action) {
        if (state === void 0) { state = initialState$l; }
        switch (action.type) {
            case LOAD_BILLING_COUNTRIES_SUCCESS: {
                var billingCountries = action.payload;
                var entities = billingCountries.reduce(function (countryEntities, name) {
                    var _a;
                    return Object.assign(Object.assign({}, countryEntities), (_a = {}, _a[name.isocode] = name, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$l;
            }
        }
        return state;
    }

    var initialState$m = {};
    function reducer$m(state, action) {
        if (state === void 0) { state = initialState$m; }
        switch (action.type) {
            case LOAD_CONSIGNMENT_TRACKING_SUCCESS: {
                var tracking = action.payload;
                return {
                    tracking: tracking,
                };
            }
            case CLEAR_CONSIGNMENT_TRACKING: {
                return initialState$m;
            }
        }
        return state;
    }

    var initialState$n = {
        coupons: [],
        sorts: [],
        pagination: {},
    };
    function reducer$n(state, action) {
        if (state === void 0) { state = initialState$n; }
        switch (action.type) {
            case LOAD_CUSTOMER_COUPONS_SUCCESS: {
                return action.payload;
            }
            case SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {
                var updatedCustomerCoupon_1 = action.payload.coupon;
                var customerCoupons_1 = new Array(state.coupons.length);
                state.coupons.forEach(function (customerCoupon, index) { return customerCoupon.couponId === updatedCustomerCoupon_1.couponId
                    ? (customerCoupons_1[index] = updatedCustomerCoupon_1)
                    : (customerCoupons_1[index] = customerCoupon); });
                return Object.assign(Object.assign({}, state), { coupons: customerCoupons_1 });
            }
            case UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {
                var updatedCouponCode_1 = action.payload;
                var customerCoupons_2 = new Array(state.coupons.length);
                state.coupons.forEach(function (customerCoupon, index) { return customerCoupon.couponId === updatedCouponCode_1
                    ? (customerCoupons_2[index] = Object.assign(Object.assign({}, customerCoupon), { notificationOn: false }))
                    : (customerCoupons_2[index] = customerCoupon); });
                return Object.assign(Object.assign({}, state), { coupons: customerCoupons_2 });
            }
        }
        return state;
    }

    var initialState$o = {
        entities: {},
    };
    function reducer$o(state, action) {
        if (state === void 0) { state = initialState$o; }
        switch (action.type) {
            case LOAD_DELIVERY_COUNTRIES_SUCCESS: {
                var deliveryCountries = action.payload;
                var entities = deliveryCountries.reduce(function (countryEntities, country) {
                    var _a;
                    return Object.assign(Object.assign({}, countryEntities), (_a = {}, _a[country.isocode] = country, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$o;
            }
        }
        return state;
    }

    var initialState$p = [];
    function reducer$p(state, action) {
        if (state === void 0) { state = initialState$p; }
        switch (action.type) {
            case LOAD_NOTIFICATION_PREFERENCES_FAIL: {
                return initialState$p;
            }
            case LOAD_NOTIFICATION_PREFERENCES_SUCCESS:
            case UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {
                return action.payload ? action.payload : initialState$p;
            }
        }
        return state;
    }

    var initialState$q = {};
    function reducer$q(state, action) {
        if (state === void 0) { state = initialState$q; }
        switch (action.type) {
            case LOAD_ORDER_DETAILS_SUCCESS: {
                var order = action.payload;
                return order;
            }
        }
        return state;
    }

    var initialState$r = {
        returnRequests: [],
        pagination: {},
        sorts: [],
    };
    function reducer$r(state, action) {
        if (state === void 0) { state = initialState$r; }
        switch (action.type) {
            case LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {
                return action.payload ? action.payload : initialState$r;
            }
        }
        return state;
    }

    var initialState$s = [];
    function reducer$s(state, action) {
        if (state === void 0) { state = initialState$s; }
        switch (action.type) {
            case LOAD_USER_PAYMENT_METHODS_SUCCESS: {
                return action.payload ? action.payload : initialState$s;
            }
            case LOAD_USER_PAYMENT_METHODS_FAIL: {
                return initialState$s;
            }
        }
        return state;
    }

    var initialState$t = {
        results: [],
        pagination: {},
        sorts: [],
    };
    function reducer$t(state, action) {
        if (state === void 0) { state = initialState$t; }
        switch (action.type) {
            case LOAD_PRODUCT_INTERESTS_SUCCESS: {
                return action.payload ? action.payload : initialState$t;
            }
            case LOAD_PRODUCT_INTERESTS_FAIL: {
                return initialState$t;
            }
        }
        return state;
    }

    var initialState$u = {
        entities: [],
        country: null,
    };
    function reducer$u(state, action) {
        if (state === void 0) { state = initialState$u; }
        switch (action.type) {
            case LOAD_REGIONS_SUCCESS: {
                var entities = action.payload.entities;
                var country = action.payload.country;
                if (entities || country) {
                    return Object.assign(Object.assign({}, state), { entities: entities,
                        country: country });
                }
                return initialState$u;
            }
        }
        return state;
    }

    var initialState$v = {};
    function reducer$v(state, action) {
        if (state === void 0) { state = initialState$v; }
        switch (action.type) {
            case LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS:
            case CANCEL_REPLENISHMENT_ORDER_SUCCESS: {
                return action.payload ? action.payload : initialState$v;
            }
            default: {
                return state;
            }
        }
    }

    var initialState$w = false;
    function reducer$w(state, action) {
        if (state === void 0) { state = initialState$w; }
        switch (action.type) {
            case RESET_PASSWORD_SUCCESS: {
                return true;
            }
        }
        return state;
    }

    var initialState$x = {
        entities: {},
    };
    function reducer$x(state, action) {
        if (state === void 0) { state = initialState$x; }
        switch (action.type) {
            case LOAD_TITLES_SUCCESS: {
                var titles = action.payload;
                var entities = titles.reduce(function (titleEntities, name) {
                    var _a;
                    return Object.assign(Object.assign({}, titleEntities), (_a = {}, _a[name.code] = name, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case CLEAR_USER_MISCS_DATA: {
                return initialState$x;
            }
        }
        return state;
    }

    var initialState$y = [];
    function reducer$y(state, action) {
        if (state === void 0) { state = initialState$y; }
        switch (action.type) {
            case LOAD_USER_ADDRESSES_FAIL: {
                return initialState$y;
            }
            case LOAD_USER_ADDRESSES_SUCCESS: {
                return action.payload ? action.payload : initialState$y;
            }
        }
        return state;
    }

    var initialState$z = [];
    function reducer$z(state, action) {
        if (state === void 0) { state = initialState$z; }
        switch (action.type) {
            case LOAD_USER_CONSENTS_SUCCESS: {
                var consents = action.payload;
                return consents ? consents : initialState$z;
            }
            case GIVE_USER_CONSENT_SUCCESS: {
                var updatedConsentTemplate_1 = action.consentTemplate;
                return state.map(function (consentTemplate) { return consentTemplate.id === updatedConsentTemplate_1.id
                    ? updatedConsentTemplate_1
                    : consentTemplate; });
            }
        }
        return state;
    }

    var initialState$A = [];
    function reducer$A(state, action) {
        if (state === void 0) { state = initialState$A; }
        switch (action.type) {
            case LOAD_ACTIVE_COST_CENTERS_FAIL: {
                return initialState$A;
            }
            case LOAD_ACTIVE_COST_CENTERS_SUCCESS: {
                return action.payload ? action.payload : initialState$A;
            }
        }
        return state;
    }

    var initialState$B = {};
    function reducer$B(state, action) {
        if (state === void 0) { state = initialState$B; }
        switch (action.type) {
            case LOAD_USER_DETAILS_SUCCESS: {
                return action.payload;
            }
            case UPDATE_USER_DETAILS_SUCCESS: {
                var updatedDetails = Object.assign(Object.assign({}, state), action.userUpdates);
                return Object.assign(Object.assign({}, updatedDetails), { name: updatedDetails.firstName + " " + updatedDetails.lastName });
            }
        }
        return state;
    }

    var initialState$C = {
        orders: [],
        pagination: {},
        sorts: [],
    };
    function reducer$C(state, action) {
        if (state === void 0) { state = initialState$C; }
        switch (action.type) {
            case LOAD_USER_ORDERS_SUCCESS: {
                return action.payload ? action.payload : initialState$C;
            }
            case LOAD_USER_ORDERS_FAIL: {
                return initialState$C;
            }
        }
        return state;
    }

    var initialState$D = {
        replenishmentOrders: [],
        pagination: {},
        sorts: [],
    };
    function reducer$D(state, action) {
        if (state === void 0) { state = initialState$D; }
        switch (action.type) {
            case LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: {
                return action.payload ? action.payload : initialState$D;
            }
            case CANCEL_REPLENISHMENT_ORDER_SUCCESS: {
                var cancelledReplenishmentOrder_1 = action.payload;
                var userReplenishmentOrders = __spread(state.replenishmentOrders);
                var index = userReplenishmentOrders.findIndex(function (replenishmentOrder) { return replenishmentOrder.replenishmentOrderCode ===
                    cancelledReplenishmentOrder_1.replenishmentOrderCode; });
                if (index === -1) {
                    return initialState$D;
                }
                else {
                    userReplenishmentOrders[index] = Object.assign({}, cancelledReplenishmentOrder_1);
                }
                return Object.assign(Object.assign({}, state), { replenishmentOrders: userReplenishmentOrders });
            }
        }
        return state;
    }

    function getReducers$b() {
        return {
            account: i1$2.combineReducers({
                details: reducer$B,
            }),
            addresses: loaderReducer(USER_ADDRESSES, reducer$y),
            billingCountries: reducer$l,
            consents: loaderReducer(USER_CONSENTS, reducer$z),
            payments: loaderReducer(USER_PAYMENT_METHODS, reducer$s),
            orders: loaderReducer(USER_ORDERS, reducer$C),
            order: loaderReducer(USER_ORDER_DETAILS, reducer$q),
            replenishmentOrders: loaderReducer(USER_REPLENISHMENT_ORDERS, reducer$D),
            orderReturn: loaderReducer(USER_RETURN_REQUEST_DETAILS),
            orderReturnList: loaderReducer(USER_RETURN_REQUESTS, reducer$r),
            countries: reducer$o,
            titles: reducer$x,
            regions: loaderReducer(REGIONS, reducer$u),
            resetPassword: reducer$w,
            consignmentTracking: reducer$m,
            customerCoupons: loaderReducer(CUSTOMER_COUPONS, reducer$n),
            notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, reducer$p),
            productInterests: loaderReducer(PRODUCT_INTERESTS, reducer$t),
            costCenters: loaderReducer(USER_COST_CENTERS, reducer$A),
            replenishmentOrder: loaderReducer(USER_REPLENISHMENT_ORDER_DETAILS, reducer$v),
        };
    }
    var reducerToken$b = new i0.InjectionToken('UserReducers');
    var reducerProvider$b = {
        provide: reducerToken$b,
        useFactory: getReducers$b,
    };
    function clearUserState(reducer) {
        return function (state, action) {
            if (action.type === LOGOUT) {
                state = undefined;
            }
            return reducer(state, action);
        };
    }
    var metaReducers$5 = [clearUserState];

    var BillingCountriesEffect = /** @class */ (function () {
        function BillingCountriesEffect(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadBillingCountries$ = this.actions$.pipe(i3.ofType(LOAD_BILLING_COUNTRIES), operators.switchMap(function () {
                return _this.siteConnector.getCountries(exports.CountryType.BILLING).pipe(operators.map(function (countries) { return new LoadBillingCountriesSuccess(countries); }), operators.catchError(function (error) { return rxjs.of(new LoadBillingCountriesFail(makeErrorSerializable(error))); }));
            }));
        }
        return BillingCountriesEffect;
    }());
    BillingCountriesEffect.decorators = [
        { type: i0.Injectable }
    ];
    BillingCountriesEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], BillingCountriesEffect.prototype, "loadBillingCountries$", void 0);

    var ClearMiscsDataEffect = /** @class */ (function () {
        function ClearMiscsDataEffect(actions$) {
            this.actions$ = actions$;
            this.clearMiscsData$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE, CURRENCY_CHANGE), operators.map(function () {
                return new ClearUserMiscsData();
            }));
        }
        return ClearMiscsDataEffect;
    }());
    ClearMiscsDataEffect.decorators = [
        { type: i0.Injectable }
    ];
    ClearMiscsDataEffect.ctorParameters = function () { return [
        { type: i3.Actions }
    ]; };
    __decorate([
        i3.Effect()
    ], ClearMiscsDataEffect.prototype, "clearMiscsData$", void 0);

    var ConsignmentTrackingEffects = /** @class */ (function () {
        function ConsignmentTrackingEffects(actions$, userOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userOrderConnector = userOrderConnector;
            this.loadConsignmentTracking$ = this.actions$.pipe(i3.ofType(LOAD_CONSIGNMENT_TRACKING), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.userOrderConnector
                    .getConsignmentTracking(payload.orderCode, payload.consignmentCode, payload.userId)
                    .pipe(operators.map(function (tracking) { return new LoadConsignmentTrackingSuccess(tracking); }), operators.catchError(function (error) { return rxjs.of(new LoadConsignmentTrackingFail(makeErrorSerializable(error))); }));
            }));
        }
        return ConsignmentTrackingEffects;
    }());
    ConsignmentTrackingEffects.decorators = [
        { type: i0.Injectable }
    ];
    ConsignmentTrackingEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserOrderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ConsignmentTrackingEffects.prototype, "loadConsignmentTracking$", void 0);

    var CustomerCouponEffects = /** @class */ (function () {
        function CustomerCouponEffects(actions$, customerCouponConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.customerCouponConnector = customerCouponConnector;
            this.loadCustomerCoupons$ = this.actions$.pipe(i3.ofType(LOAD_CUSTOMER_COUPONS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.customerCouponConnector
                    .getCustomerCoupons(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map(function (coupons) {
                    return new LoadCustomerCouponsSuccess(coupons);
                }), operators.catchError(function (error) { return rxjs.of(new LoadCustomerCouponsFail(makeErrorSerializable(error))); }));
            }));
            this.subscribeCustomerCoupon$ = this.actions$.pipe(i3.ofType(SUBSCRIBE_CUSTOMER_COUPON), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.customerCouponConnector
                    .turnOnNotification(payload.userId, payload.couponCode)
                    .pipe(operators.map(function (data) {
                    return new SubscribeCustomerCouponSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new SubscribeCustomerCouponFail(makeErrorSerializable(error))); }));
            }));
            this.unsubscribeCustomerCoupon$ = this.actions$.pipe(i3.ofType(UNSUBSCRIBE_CUSTOMER_COUPON), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.customerCouponConnector
                    .turnOffNotification(payload.userId, payload.couponCode)
                    .pipe(operators.map(function () {
                    return new UnsubscribeCustomerCouponSuccess(payload.couponCode);
                }), operators.catchError(function (error) { return rxjs.of(new UnsubscribeCustomerCouponFail(makeErrorSerializable(error))); }));
            }));
            this.claimCustomerCoupon$ = this.actions$.pipe(i3.ofType(CLAIM_CUSTOMER_COUPON), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.customerCouponConnector
                    .claimCustomerCoupon(payload.userId, payload.couponCode)
                    .pipe(operators.map(function (data) {
                    return new ClaimCustomerCouponSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new ClaimCustomerCouponFail(makeErrorSerializable(error))); }));
            }));
        }
        return CustomerCouponEffects;
    }());
    CustomerCouponEffects.decorators = [
        { type: i0.Injectable }
    ];
    CustomerCouponEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: CustomerCouponConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], CustomerCouponEffects.prototype, "loadCustomerCoupons$", void 0);
    __decorate([
        i3.Effect()
    ], CustomerCouponEffects.prototype, "subscribeCustomerCoupon$", void 0);
    __decorate([
        i3.Effect()
    ], CustomerCouponEffects.prototype, "unsubscribeCustomerCoupon$", void 0);
    __decorate([
        i3.Effect()
    ], CustomerCouponEffects.prototype, "claimCustomerCoupon$", void 0);

    var DeliveryCountriesEffects = /** @class */ (function () {
        function DeliveryCountriesEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadDeliveryCountries$ = this.actions$.pipe(i3.ofType(LOAD_DELIVERY_COUNTRIES), operators.switchMap(function () {
                return _this.siteConnector.getCountries(exports.CountryType.SHIPPING).pipe(operators.map(function (countries) { return new LoadDeliveryCountriesSuccess(countries); }), operators.catchError(function (error) { return rxjs.of(new LoadDeliveryCountriesFail(makeErrorSerializable(error))); }));
            }));
        }
        return DeliveryCountriesEffects;
    }());
    DeliveryCountriesEffects.decorators = [
        { type: i0.Injectable }
    ];
    DeliveryCountriesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], DeliveryCountriesEffects.prototype, "loadDeliveryCountries$", void 0);

    var ForgotPasswordEffects = /** @class */ (function () {
        function ForgotPasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.requestForgotPasswordEmail$ = this.actions$.pipe(i3.ofType(FORGOT_PASSWORD_EMAIL_REQUEST), operators.map(function (action) {
                return action.payload;
            }), operators.concatMap(function (userEmailAddress) {
                return _this.userAccountConnector
                    .requestForgotPasswordEmail(userEmailAddress)
                    .pipe(operators.switchMap(function () { return [
                    new ForgotPasswordEmailRequestSuccess(),
                    new AddMessage({
                        text: { key: 'forgottenPassword.passwordResetEmailSent' },
                        type: exports.GlobalMessageType.MSG_TYPE_CONFIRMATION,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.of(new ForgotPasswordEmailRequestFail(makeErrorSerializable(error))); }));
            }));
        }
        return ForgotPasswordEffects;
    }());
    ForgotPasswordEffects.decorators = [
        { type: i0.Injectable }
    ];
    ForgotPasswordEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ForgotPasswordEffects.prototype, "requestForgotPasswordEmail$", void 0);

    var NotificationPreferenceEffects = /** @class */ (function () {
        function NotificationPreferenceEffects(actions$, connector) {
            var _this = this;
            this.actions$ = actions$;
            this.connector = connector;
            this.loadPreferences$ = this.actions$.pipe(i3.ofType(LOAD_NOTIFICATION_PREFERENCES), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.connector.loadAll(payload).pipe(operators.map(function (preferences) { return new LoadNotificationPreferencesSuccess(preferences); }), operators.catchError(function (error) { return rxjs.of(new LoadNotificationPreferencesFail(makeErrorSerializable(error))); })); }));
            this.updatePreferences$ = this.actions$.pipe(i3.ofType(UPDATE_NOTIFICATION_PREFERENCES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.connector.update(payload.userId, payload.preferences).pipe(operators.map(function () { return new UpdateNotificationPreferencesSuccess(payload.preferences); }), operators.catchError(function (error) { return rxjs.of(new UpdateNotificationPreferencesFail(makeErrorSerializable(error))); })); }));
        }
        return NotificationPreferenceEffects;
    }());
    NotificationPreferenceEffects.decorators = [
        { type: i0.Injectable }
    ];
    NotificationPreferenceEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserNotificationPreferenceConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
    __decorate([
        i3.Effect()
    ], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);

    var OrderDetailsEffect = /** @class */ (function () {
        function OrderDetailsEffect(actions$, orderConnector, globalMessageService) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.globalMessageService = globalMessageService;
            this.loadOrderDetails$ = this.actions$.pipe(i3.ofType(LOAD_ORDER_DETAILS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector.get(payload.userId, payload.orderCode).pipe(operators.map(function (order) {
                    return new LoadOrderDetailsSuccess(order);
                }), operators.catchError(function (error) { return rxjs.of(new LoadOrderDetailsFail(makeErrorSerializable(error))); }));
            }));
            this.cancelOrder$ = this.actions$.pipe(i3.ofType(CANCEL_ORDER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector
                    .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)
                    .pipe(operators.map(function () { return new CancelOrderSuccess(); }), operators.catchError(function (error) {
                    var _a;
                    (_a = error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach(function (err) { return _this.globalMessageService.add(err.message, exports.GlobalMessageType.MSG_TYPE_ERROR); });
                    return rxjs.of(new CancelOrderFail(makeErrorSerializable(error)));
                }));
            }));
        }
        return OrderDetailsEffect;
    }());
    OrderDetailsEffect.decorators = [
        { type: i0.Injectable }
    ];
    OrderDetailsEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserOrderConnector },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        i3.Effect()
    ], OrderDetailsEffect.prototype, "loadOrderDetails$", void 0);
    __decorate([
        i3.Effect()
    ], OrderDetailsEffect.prototype, "cancelOrder$", void 0);

    var OrderReturnRequestEffect = /** @class */ (function () {
        function OrderReturnRequestEffect(actions$, orderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.createReturnRequest$ = this.actions$.pipe(i3.ofType(CREATE_ORDER_RETURN_REQUEST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector
                    .return(payload.userId, payload.returnRequestInput)
                    .pipe(operators.map(function (returnRequest) { return new CreateOrderReturnRequestSuccess(returnRequest); }), operators.catchError(function (error) { return rxjs.of(new CreateOrderReturnRequestFail(makeErrorSerializable(error))); }));
            }));
            this.loadReturnRequest$ = this.actions$.pipe(i3.ofType(LOAD_ORDER_RETURN_REQUEST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector
                    .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                    .pipe(operators.map(function (returnRequest) { return new LoadOrderReturnRequestSuccess(returnRequest); }), operators.catchError(function (error) { return rxjs.of(new LoadOrderReturnRequestFail(makeErrorSerializable(error))); }));
            }));
            this.cancelReturnRequest$ = this.actions$.pipe(i3.ofType(CANCEL_ORDER_RETURN_REQUEST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector
                    .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                    .pipe(operators.map(function () { return new CancelOrderReturnRequestSuccess(); }), operators.catchError(function (error) { return rxjs.of(new CancelOrderReturnRequestFail(makeErrorSerializable(error))); }));
            }));
            this.loadReturnRequestList$ = this.actions$.pipe(i3.ofType(LOAD_ORDER_RETURN_REQUEST_LIST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.orderConnector
                    .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map(function (returnRequestList) { return new LoadOrderReturnRequestListSuccess(returnRequestList); }), operators.catchError(function (error) { return rxjs.of(new LoadOrderReturnRequestListFail(makeErrorSerializable(error))); }));
            }));
        }
        return OrderReturnRequestEffect;
    }());
    OrderReturnRequestEffect.decorators = [
        { type: i0.Injectable }
    ];
    OrderReturnRequestEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserOrderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], OrderReturnRequestEffect.prototype, "createReturnRequest$", void 0);
    __decorate([
        i3.Effect()
    ], OrderReturnRequestEffect.prototype, "loadReturnRequest$", void 0);
    __decorate([
        i3.Effect()
    ], OrderReturnRequestEffect.prototype, "cancelReturnRequest$", void 0);
    __decorate([
        i3.Effect()
    ], OrderReturnRequestEffect.prototype, "loadReturnRequestList$", void 0);

    var UserPaymentMethodsEffects = /** @class */ (function () {
        function UserPaymentMethodsEffects(actions$, userPaymentMethodConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userPaymentMethodConnector = userPaymentMethodConnector;
            this.loadUserPaymentMethods$ = this.actions$.pipe(i3.ofType(LOAD_USER_PAYMENT_METHODS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userPaymentMethodConnector.getAll(payload).pipe(operators.map(function (payments) {
                    return new LoadUserPaymentMethodsSuccess(payments);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserPaymentMethodsFail(makeErrorSerializable(error))); }));
            }));
            this.setDefaultUserPaymentMethod$ = this.actions$.pipe(i3.ofType(SET_DEFAULT_USER_PAYMENT_METHOD), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userPaymentMethodConnector
                    .setDefault(payload.userId, payload.paymentMethodId)
                    .pipe(operators.switchMap(function (data) { return [
                    new SetDefaultUserPaymentMethodSuccess(data),
                    new LoadUserPaymentMethods(payload.userId),
                ]; }), operators.catchError(function (error) { return rxjs.of(new SetDefaultUserPaymentMethodFail(makeErrorSerializable(error))); }));
            }));
            this.deleteUserPaymentMethod$ = this.actions$.pipe(i3.ofType(DELETE_USER_PAYMENT_METHOD), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userPaymentMethodConnector
                    .delete(payload.userId, payload.paymentMethodId)
                    .pipe(operators.switchMap(function (data) { return [
                    new DeleteUserPaymentMethodSuccess(data),
                    new LoadUserPaymentMethods(payload.userId),
                ]; }), operators.catchError(function (error) { return rxjs.of(new DeleteUserPaymentMethodFail(makeErrorSerializable(error))); }));
            }));
        }
        return UserPaymentMethodsEffects;
    }());
    UserPaymentMethodsEffects.decorators = [
        { type: i0.Injectable }
    ];
    UserPaymentMethodsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserPaymentConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserPaymentMethodsEffects.prototype, "loadUserPaymentMethods$", void 0);
    __decorate([
        i3.Effect()
    ], UserPaymentMethodsEffects.prototype, "setDefaultUserPaymentMethod$", void 0);
    __decorate([
        i3.Effect()
    ], UserPaymentMethodsEffects.prototype, "deleteUserPaymentMethod$", void 0);

    var ProductInterestsEffect = /** @class */ (function () {
        function ProductInterestsEffect(actions$, userInterestsConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userInterestsConnector = userInterestsConnector;
            this.loadProductInteres$ = this.actions$.pipe(i3.ofType(LOAD_PRODUCT_INTERESTS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.userInterestsConnector
                    .getInterests(payload.userId, payload.pageSize, payload.currentPage, payload.sort, payload.productCode, payload.notificationType)
                    .pipe(operators.map(function (interests) {
                    return new LoadProductInterestsSuccess(interests);
                }), operators.catchError(function (error) { return rxjs.of(new LoadProductInterestsFail(makeErrorSerializable(error))); }));
            }));
            this.removeProductInterest$ = this.actions$.pipe(i3.ofType(REMOVE_PRODUCT_INTEREST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userInterestsConnector
                .removeInterest(payload.userId, payload.item)
                .pipe(operators.switchMap(function (data) { return [
                new LoadProductInterests(payload.singleDelete
                    ? {
                        userId: payload.userId,
                        productCode: payload.item.product.code,
                        notificationType: payload.item.productInterestEntry[0].interestType,
                    }
                    : { userId: payload.userId }),
                new RemoveProductInterestSuccess(data),
            ]; }), operators.catchError(function (error) { return rxjs.of(new RemoveProductInterestFail(makeErrorSerializable(error))); })); }));
            this.addProductInterest$ = this.actions$.pipe(i3.ofType(ADD_PRODUCT_INTEREST), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userInterestsConnector
                .addInterest(payload.userId, payload.productCode, payload.notificationType)
                .pipe(operators.switchMap(function (res) { return [
                new LoadProductInterests({
                    userId: payload.userId,
                    productCode: payload.productCode,
                    notificationType: payload.notificationType,
                }),
                new AddProductInterestSuccess(res),
            ]; }), operators.catchError(function (error) { return rxjs.of(new AddProductInterestFail(makeErrorSerializable(error))); })); }));
        }
        return ProductInterestsEffect;
    }());
    ProductInterestsEffect.decorators = [
        { type: i0.Injectable }
    ];
    ProductInterestsEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserInterestsConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ProductInterestsEffect.prototype, "loadProductInteres$", void 0);
    __decorate([
        i3.Effect()
    ], ProductInterestsEffect.prototype, "removeProductInterest$", void 0);
    __decorate([
        i3.Effect()
    ], ProductInterestsEffect.prototype, "addProductInterest$", void 0);

    var RegionsEffects = /** @class */ (function () {
        function RegionsEffects(actions$, siteConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.siteConnector = siteConnector;
            this.loadRegions$ = this.actions$.pipe(i3.ofType(LOAD_REGIONS), operators.map(function (action) {
                return action.payload;
            }), operators.switchMap(function (countryCode) {
                return _this.siteConnector.getRegions(countryCode).pipe(operators.map(function (regions) { return new LoadRegionsSuccess({
                    entities: regions,
                    country: countryCode,
                }); }), operators.catchError(function (error) { return rxjs.of(new LoadRegionsFail(makeErrorSerializable(error))); }));
            }));
            this.resetRegions$ = this.actions$.pipe(i3.ofType(CLEAR_USER_MISCS_DATA, CLEAR_REGIONS), operators.map(function () {
                return new LoaderResetAction(REGIONS);
            }));
        }
        return RegionsEffects;
    }());
    RegionsEffects.decorators = [
        { type: i0.Injectable }
    ];
    RegionsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: SiteConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], RegionsEffects.prototype, "loadRegions$", void 0);
    __decorate([
        i3.Effect()
    ], RegionsEffects.prototype, "resetRegions$", void 0);

    var ReplenishmentOrderDetailsEffect = /** @class */ (function () {
        function ReplenishmentOrderDetailsEffect(actions$, replenishmentOrderConnector, globalMessageService) {
            var _this = this;
            this.actions$ = actions$;
            this.replenishmentOrderConnector = replenishmentOrderConnector;
            this.globalMessageService = globalMessageService;
            this.loadReplenishmentOrderDetails$ = this.actions$.pipe(i3.ofType(LOAD_REPLENISHMENT_ORDER_DETAILS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.replenishmentOrderConnector
                    .load(payload.userId, payload.replenishmentOrderCode)
                    .pipe(operators.map(function (replenishmentOrder) {
                    return new LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
                }), operators.catchError(function (error) { return rxjs.of(new LoadReplenishmentOrderDetailsFail(normalizeHttpError(error))); }));
            }));
            this.cancelReplenishmentOrder$ = this.actions$.pipe(i3.ofType(CANCEL_REPLENISHMENT_ORDER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.replenishmentOrderConnector
                    .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                    .pipe(operators.map(function (replenishmentOrder) { return new CancelReplenishmentOrderSuccess(replenishmentOrder); }), operators.catchError(function (error) {
                    var _a;
                    (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach(function (err) { return _this.globalMessageService.add(err.message, exports.GlobalMessageType.MSG_TYPE_ERROR); });
                    return rxjs.of(new CancelReplenishmentOrderFail(normalizeHttpError(error)));
                }));
            }));
        }
        return ReplenishmentOrderDetailsEffect;
    }());
    ReplenishmentOrderDetailsEffect.decorators = [
        { type: i0.Injectable }
    ];
    ReplenishmentOrderDetailsEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserReplenishmentOrderConnector },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        i3.Effect()
    ], ReplenishmentOrderDetailsEffect.prototype, "loadReplenishmentOrderDetails$", void 0);
    __decorate([
        i3.Effect()
    ], ReplenishmentOrderDetailsEffect.prototype, "cancelReplenishmentOrder$", void 0);

    var ResetPasswordEffects = /** @class */ (function () {
        function ResetPasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.resetPassword$ = this.actions$.pipe(i3.ofType(RESET_PASSWORD), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_b) {
                var token = _b.token, password = _b.password;
                return _this.userAccountConnector.resetPassword(token, password).pipe(operators.switchMap(function () { return [
                    new ResetPasswordSuccess(),
                    new AddMessage({
                        text: { key: 'forgottenPassword.passwordResetSuccess' },
                        type: exports.GlobalMessageType.MSG_TYPE_CONFIRMATION,
                    }),
                ]; }), operators.catchError(function (error) {
                    var _a;
                    var actions = [new ResetPasswordFail(makeErrorSerializable(error))];
                    if ((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) {
                        error.error.errors.forEach(function (err) {
                            if (err.message) {
                                actions.push(new AddMessage({
                                    text: { raw: err.message },
                                    type: exports.GlobalMessageType.MSG_TYPE_ERROR,
                                }));
                            }
                        });
                    }
                    return rxjs.from(actions);
                }));
            }));
        }
        return ResetPasswordEffects;
    }());
    ResetPasswordEffects.decorators = [
        { type: i0.Injectable }
    ];
    ResetPasswordEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], ResetPasswordEffects.prototype, "resetPassword$", void 0);

    var TitlesEffects = /** @class */ (function () {
        function TitlesEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.loadTitles$ = this.actions$.pipe(i3.ofType(LOAD_TITLES), operators.switchMap(function () {
                return _this.userAccountConnector.getTitles().pipe(operators.map(function (titles) {
                    return new LoadTitlesSuccess(titles);
                }), operators.catchError(function (error) { return rxjs.of(new LoadTitlesFail(makeErrorSerializable(error))); }));
            }));
        }
        return TitlesEffects;
    }());
    TitlesEffects.decorators = [
        { type: i0.Injectable }
    ];
    TitlesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], TitlesEffects.prototype, "loadTitles$", void 0);

    var UpdateEmailEffects = /** @class */ (function () {
        function UpdateEmailEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.updateEmail$ = this.actions$.pipe(i3.ofType(UPDATE_EMAIL), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return _this.userAccountConnector
                .updateEmail(payload.uid, payload.password, payload.newUid)
                .pipe(operators.map(function () { return new UpdateEmailSuccessAction(payload.newUid); }), operators.catchError(function (error) { return rxjs.of(new UpdateEmailErrorAction(makeErrorSerializable(error))); })); }));
        }
        return UpdateEmailEffects;
    }());
    UpdateEmailEffects.decorators = [
        { type: i0.Injectable }
    ];
    UpdateEmailEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UpdateEmailEffects.prototype, "updateEmail$", void 0);

    var UpdatePasswordEffects = /** @class */ (function () {
        function UpdatePasswordEffects(actions$, userAccountConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userAccountConnector = userAccountConnector;
            this.updatePassword$ = this.actions$.pipe(i3.ofType(UPDATE_PASSWORD), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return _this.userAccountConnector
                .updatePassword(payload.userId, payload.oldPassword, payload.newPassword)
                .pipe(operators.map(function () { return new UpdatePasswordSuccess(); }), operators.catchError(function (error) { return rxjs.of(new UpdatePasswordFail(makeErrorSerializable(error))); })); }));
        }
        return UpdatePasswordEffects;
    }());
    UpdatePasswordEffects.decorators = [
        { type: i0.Injectable }
    ];
    UpdatePasswordEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UpdatePasswordEffects.prototype, "updatePassword$", void 0);

    var UserAddressesEffects = /** @class */ (function () {
        function UserAddressesEffects(actions$, userAddressConnector, userAddressService, messageService) {
            var _this = this;
            this.actions$ = actions$;
            this.userAddressConnector = userAddressConnector;
            this.userAddressService = userAddressService;
            this.messageService = messageService;
            this.loadUserAddresses$ = this.actions$.pipe(i3.ofType(LOAD_USER_ADDRESSES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userAddressConnector.getAll(payload).pipe(operators.map(function (addresses) {
                    return new LoadUserAddressesSuccess(addresses);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserAddressesFail(makeErrorSerializable(error))); }));
            }));
            this.addUserAddress$ = this.actions$.pipe(i3.ofType(ADD_USER_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userAddressConnector
                    .add(payload.userId, payload.address)
                    .pipe(operators.map(function (data) {
                    return new AddUserAddressSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new AddUserAddressFail(makeErrorSerializable(error))); }));
            }));
            this.updateUserAddress$ = this.actions$.pipe(i3.ofType(UPDATE_USER_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userAddressConnector
                    .update(payload.userId, payload.addressId, payload.address)
                    .pipe(operators.map(function (data) {
                    // don't show the message if just setting address as default
                    if (payload.address &&
                        Object.keys(payload.address).length === 1 &&
                        payload.address.defaultAddress) {
                        return new LoadUserAddresses(payload.userId);
                    }
                    else {
                        return new UpdateUserAddressSuccess(data);
                    }
                }), operators.catchError(function (error) { return rxjs.of(new UpdateUserAddressFail(makeErrorSerializable(error))); }));
            }));
            this.deleteUserAddress$ = this.actions$.pipe(i3.ofType(DELETE_USER_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.userAddressConnector
                    .delete(payload.userId, payload.addressId)
                    .pipe(operators.map(function (data) {
                    return new DeleteUserAddressSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new DeleteUserAddressFail(makeErrorSerializable(error))); }));
            }));
            /**
             *  Reload addresses and notify about add success
             */
            this.showGlobalMessageOnAddSuccess$ = this.actions$.pipe(i3.ofType(ADD_USER_ADDRESS_SUCCESS), operators.tap(function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressAddSuccess');
            }));
            /**
             *  Reload addresses and notify about update success
             */
            this.showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(i3.ofType(UPDATE_USER_ADDRESS_SUCCESS), operators.tap(function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressUpdateSuccess');
            }));
            /**
             *  Reload addresses and notify about delete success
             */
            this.showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(i3.ofType(DELETE_USER_ADDRESS_SUCCESS), operators.tap(function () {
                _this.loadAddresses();
                _this.showGlobalMessage('addressForm.userAddressDeleteSuccess');
            }));
        }
        /**
         * Show global confirmation message with provided text
         */
        UserAddressesEffects.prototype.showGlobalMessage = function (text) {
            this.messageService.add({ key: text }, exports.GlobalMessageType.MSG_TYPE_CONFIRMATION);
        };
        UserAddressesEffects.prototype.loadAddresses = function () {
            this.userAddressService.loadAddresses();
        };
        return UserAddressesEffects;
    }());
    UserAddressesEffects.decorators = [
        { type: i0.Injectable }
    ];
    UserAddressesEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserAddressConnector },
        { type: UserAddressService },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        i3.Effect()
    ], UserAddressesEffects.prototype, "loadUserAddresses$", void 0);
    __decorate([
        i3.Effect()
    ], UserAddressesEffects.prototype, "addUserAddress$", void 0);
    __decorate([
        i3.Effect()
    ], UserAddressesEffects.prototype, "updateUserAddress$", void 0);
    __decorate([
        i3.Effect()
    ], UserAddressesEffects.prototype, "deleteUserAddress$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnAddSuccess$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnUpdateSuccess$", void 0);
    __decorate([
        i3.Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnDeleteSuccess$", void 0);

    var UserConsentsEffect = /** @class */ (function () {
        function UserConsentsEffect(actions$, userConsentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userConsentConnector = userConsentConnector;
            this.resetConsents$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE), operators.map(function () { return new ResetLoadUserConsents(); }));
            this.getConsents$ = this.actions$.pipe(i3.ofType(LOAD_USER_CONSENTS), operators.map(function (action) { return action.payload; }), operators.concatMap(function (userId) { return _this.userConsentConnector.loadConsents(userId).pipe(operators.map(function (consents) { return new LoadUserConsentsSuccess(consents); }), operators.catchError(function (error) { return rxjs.of(new LoadUserConsentsFail(makeErrorSerializable(error))); })); }));
            this.giveConsent$ = this.actions$.pipe(i3.ofType(GIVE_USER_CONSENT, TRANSFER_ANONYMOUS_CONSENT), operators.concatMap(function (action) { return _this.userConsentConnector
                .giveConsent(action.payload.userId, action.payload.consentTemplateId, action.payload.consentTemplateVersion)
                .pipe(operators.map(function (consent) { return new GiveUserConsentSuccess(consent); }), operators.catchError(function (error) {
                var errors = [
                    new GiveUserConsentFail(makeErrorSerializable(error)),
                ];
                if (action.type === TRANSFER_ANONYMOUS_CONSENT &&
                    error.status === 409) {
                    errors.push(new RemoveMessagesByType(exports.GlobalMessageType.MSG_TYPE_ERROR));
                }
                return rxjs.of.apply(void 0, __spread(errors));
            })); }));
            this.withdrawConsent$ = this.actions$.pipe(i3.ofType(WITHDRAW_USER_CONSENT), operators.map(function (action) { return action.payload; }), operators.concatMap(function (_a) {
                var userId = _a.userId, consentCode = _a.consentCode;
                return _this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(operators.map(function () { return new WithdrawUserConsentSuccess(); }), operators.catchError(function (error) { return rxjs.of(new WithdrawUserConsentFail(makeErrorSerializable(error))); }));
            }));
        }
        return UserConsentsEffect;
    }());
    UserConsentsEffect.decorators = [
        { type: i0.Injectable }
    ];
    UserConsentsEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConsentConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserConsentsEffect.prototype, "resetConsents$", void 0);
    __decorate([
        i3.Effect()
    ], UserConsentsEffect.prototype, "getConsents$", void 0);
    __decorate([
        i3.Effect()
    ], UserConsentsEffect.prototype, "giveConsent$", void 0);
    __decorate([
        i3.Effect()
    ], UserConsentsEffect.prototype, "withdrawConsent$", void 0);

    var UserCostCenterEffects = /** @class */ (function () {
        function UserCostCenterEffects(actions$, userCostCenterConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userCostCenterConnector = userCostCenterConnector;
            this.loadActiveCostCenters$ = this.actions$.pipe(i3.ofType(LOAD_ACTIVE_COST_CENTERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userCostCenterConnector.getActiveList(payload).pipe(
            // TODO(#8875): Should we use here serialize utils?
            operators.map(function (data) { return new LoadActiveCostCentersSuccess(data.values); }), operators.catchError(function (error) { return rxjs.of(new LoadActiveCostCentersFail(normalizeHttpError(error))); })); }));
        }
        return UserCostCenterEffects;
    }());
    UserCostCenterEffects.decorators = [
        { type: i0.Injectable }
    ];
    UserCostCenterEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserCostCenterConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserCostCenterEffects.prototype, "loadActiveCostCenters$", void 0);

    var UserDetailsEffects = /** @class */ (function () {
        function UserDetailsEffects(actions$, userConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userConnector = userConnector;
            this.loadUserDetails$ = this.actions$.pipe(i3.ofType(LOAD_USER_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (userId) {
                return _this.userConnector.get(userId).pipe(operators.map(function (user) {
                    return new LoadUserDetailsSuccess(user);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserDetailsFail(makeErrorSerializable(error))); }));
            }));
            this.updateUserDetails$ = this.actions$.pipe(i3.ofType(UPDATE_USER_DETAILS), operators.map(function (action) { return action.payload; }), operators.concatMap(function (payload) { return _this.userConnector.update(payload.username, payload.userDetails).pipe(operators.map(function () { return new UpdateUserDetailsSuccess(payload.userDetails); }), operators.catchError(function (error) { return rxjs.of(new UpdateUserDetailsFail(makeErrorSerializable(error))); })); }));
        }
        return UserDetailsEffects;
    }());
    UserDetailsEffects.decorators = [
        { type: i0.Injectable }
    ];
    UserDetailsEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserDetailsEffects.prototype, "loadUserDetails$", void 0);
    __decorate([
        i3.Effect()
    ], UserDetailsEffects.prototype, "updateUserDetails$", void 0);

    var UserOrdersEffect = /** @class */ (function () {
        function UserOrdersEffect(actions$, orderConnector, replenishmentOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orderConnector = orderConnector;
            this.replenishmentOrderConnector = replenishmentOrderConnector;
            this.loadUserOrders$ = this.actions$.pipe(i3.ofType(LOAD_USER_ORDERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return (Boolean(payload.replenishmentOrderCode)
                    ? _this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(payload.userId, payload.replenishmentOrderCode, payload.pageSize, payload.currentPage, payload.sort)
                    : _this.orderConnector.getHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)).pipe(operators.map(function (orders) {
                    return new LoadUserOrdersSuccess(orders);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserOrdersFail(normalizeHttpError(error))); }));
            }));
            this.resetUserOrders$ = this.actions$.pipe(i3.ofType(LANGUAGE_CHANGE), operators.map(function () {
                return new ClearUserOrders();
            }));
        }
        return UserOrdersEffect;
    }());
    UserOrdersEffect.decorators = [
        { type: i0.Injectable }
    ];
    UserOrdersEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserOrderConnector },
        { type: UserReplenishmentOrderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserOrdersEffect.prototype, "loadUserOrders$", void 0);
    __decorate([
        i3.Effect()
    ], UserOrdersEffect.prototype, "resetUserOrders$", void 0);

    var UserRegisterEffects = /** @class */ (function () {
        function UserRegisterEffects(actions$, userConnector, authService) {
            var _this = this;
            this.actions$ = actions$;
            this.userConnector = userConnector;
            this.authService = authService;
            this.registerUser$ = this.actions$.pipe(i3.ofType(REGISTER_USER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (user) { return _this.userConnector.register(user).pipe(operators.map(function () { return new RegisterUserSuccess(); }), operators.catchError(function (error) { return rxjs.of(new RegisterUserFail(makeErrorSerializable(error))); })); }));
            this.registerGuest$ = this.actions$.pipe(i3.ofType(REGISTER_GUEST), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (_a) {
                var guid = _a.guid, password = _a.password;
                return _this.userConnector.registerGuest(guid, password).pipe(operators.switchMap(function (user) {
                    _this.authService.loginWithCredentials(user.uid, password);
                    return [new RegisterGuestSuccess()];
                }), operators.catchError(function (error) { return rxjs.of(new RegisterGuestFail(makeErrorSerializable(error))); }));
            }));
            this.removeUser$ = this.actions$.pipe(i3.ofType(REMOVE_USER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (userId) {
                return _this.userConnector.remove(userId).pipe(operators.switchMap(function () {
                    _this.authService.logout();
                    return [new RemoveUserSuccess()];
                }), operators.catchError(function (error) { return rxjs.of(new RemoveUserFail(makeErrorSerializable(error))); }));
            }));
        }
        return UserRegisterEffects;
    }());
    UserRegisterEffects.decorators = [
        { type: i0.Injectable }
    ];
    UserRegisterEffects.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserConnector },
        { type: AuthService }
    ]; };
    __decorate([
        i3.Effect()
    ], UserRegisterEffects.prototype, "registerUser$", void 0);
    __decorate([
        i3.Effect()
    ], UserRegisterEffects.prototype, "registerGuest$", void 0);
    __decorate([
        i3.Effect()
    ], UserRegisterEffects.prototype, "removeUser$", void 0);

    var UserReplenishmentOrdersEffect = /** @class */ (function () {
        function UserReplenishmentOrdersEffect(actions$, replenishmentOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.replenishmentOrderConnector = replenishmentOrderConnector;
            this.loadUserReplenishmentOrders$ = this.actions$.pipe(i3.ofType(LOAD_USER_REPLENISHMENT_ORDERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.replenishmentOrderConnector
                    .loadHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                    .pipe(operators.map(function (orders) {
                    return new LoadUserReplenishmentOrdersSuccess(orders);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserReplenishmentOrdersFail(normalizeHttpError(error))); }));
            }));
        }
        return UserReplenishmentOrdersEffect;
    }());
    UserReplenishmentOrdersEffect.decorators = [
        { type: i0.Injectable }
    ];
    UserReplenishmentOrdersEffect.ctorParameters = function () { return [
        { type: i3.Actions },
        { type: UserReplenishmentOrderConnector }
    ]; };
    __decorate([
        i3.Effect()
    ], UserReplenishmentOrdersEffect.prototype, "loadUserReplenishmentOrders$", void 0);

    var effects$a = [
        ClearMiscsDataEffect,
        DeliveryCountriesEffects,
        RegionsEffects,
        TitlesEffects,
        UserDetailsEffects,
        UserAddressesEffects,
        UserPaymentMethodsEffects,
        UserRegisterEffects,
        UserOrdersEffect,
        OrderDetailsEffect,
        BillingCountriesEffect,
        ResetPasswordEffects,
        ForgotPasswordEffects,
        UpdateEmailEffects,
        UpdatePasswordEffects,
        UserConsentsEffect,
        ConsignmentTrackingEffects,
        CustomerCouponEffects,
        NotificationPreferenceEffects,
        ProductInterestsEffect,
        OrderReturnRequestEffect,
        UserCostCenterEffects,
        ReplenishmentOrderDetailsEffect,
        UserReplenishmentOrdersEffect,
    ];

    var UserStoreModule = /** @class */ (function () {
        function UserStoreModule() {
        }
        return UserStoreModule;
    }());
    UserStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CommonModule,
                        StateModule,
                        i1$2.StoreModule.forFeature(USER_FEATURE, reducerToken$b, { metaReducers: metaReducers$5 }),
                        i3.EffectsModule.forFeature(effects$a),
                        i1$1.RouterModule,
                    ],
                    providers: [reducerProvider$b],
                },] }
    ];

    var UserModule = /** @class */ (function () {
        function UserModule() {
        }
        UserModule.forRoot = function () {
            return {
                ngModule: UserModule,
            };
        };
        return UserModule;
    }());
    UserModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [UserStoreModule],
                },] }
    ];

    var DatePickerFormatterService = /** @class */ (function () {
        function DatePickerFormatterService() {
        }
        DatePickerFormatterService.prototype.toNative = function (value) {
            return value ? new Date(value).toISOString().split('T')[0] : null;
        };
        DatePickerFormatterService.prototype.toModel = function (value, endOfDay) {
            if (value) {
                var date = new Date(value)
                    .toISOString()
                    .replace('.', '+')
                    .replace('Z', '0');
                if (endOfDay) {
                    date = date.replace('00:00:00', '23:59:59');
                }
                return date;
            }
        };
        return DatePickerFormatterService;
    }());
    DatePickerFormatterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatePickerFormatterService_Factory() { return new DatePickerFormatterService(); }, token: DatePickerFormatterService, providedIn: "root" });
    DatePickerFormatterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    DatePickerFormatterService.ctorParameters = function () { return []; };

    /*
     * Public API Surface of core
     */
    /** AUGMENTABLE_TYPES_END */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ADDRESS_LIST_NORMALIZER = ADDRESS_LIST_NORMALIZER;
    exports.ADDRESS_NORMALIZER = ADDRESS_NORMALIZER;
    exports.ADDRESS_SERIALIZER = ADDRESS_SERIALIZER;
    exports.ADDRESS_VALIDATION_NORMALIZER = ADDRESS_VALIDATION_NORMALIZER;
    exports.ADD_PRODUCT_INTEREST_PROCESS_ID = ADD_PRODUCT_INTEREST_PROCESS_ID;
    exports.ADD_VOUCHER_PROCESS_ID = ADD_VOUCHER_PROCESS_ID;
    exports.ANONYMOUS_CONSENTS = ANONYMOUS_CONSENTS;
    exports.ANONYMOUS_CONSENTS_HEADER = ANONYMOUS_CONSENTS_HEADER;
    exports.ANONYMOUS_CONSENTS_STORE_FEATURE = ANONYMOUS_CONSENTS_STORE_FEATURE;
    exports.ANONYMOUS_CONSENT_NORMALIZER = ANONYMOUS_CONSENT_NORMALIZER;
    exports.ASM_FEATURE = ASM_FEATURE;
    exports.ActivatedRoutesService = ActivatedRoutesService;
    exports.ActiveCartService = ActiveCartService;
    exports.AnonymousConsentNormalizer = AnonymousConsentNormalizer;
    exports.AnonymousConsentTemplatesAdapter = AnonymousConsentTemplatesAdapter;
    exports.AnonymousConsentTemplatesConnector = AnonymousConsentTemplatesConnector;
    exports.AnonymousConsentsActions = anonymousConsentsGroup;
    exports.AnonymousConsentsConfig = AnonymousConsentsConfig;
    exports.AnonymousConsentsModule = AnonymousConsentsModule;
    exports.AnonymousConsentsSelectors = anonymousConsentsGroup_selectors;
    exports.AnonymousConsentsService = AnonymousConsentsService;
    exports.AsmActions = customerGroup_actions;
    exports.AsmAdapter = AsmAdapter;
    exports.AsmAuthHttpHeaderService = AsmAuthHttpHeaderService;
    exports.AsmAuthService = AsmAuthService;
    exports.AsmAuthStorageService = AsmAuthStorageService;
    exports.AsmConfig = AsmConfig;
    exports.AsmConnector = AsmConnector;
    exports.AsmModule = AsmModule;
    exports.AsmOccModule = AsmOccModule;
    exports.AsmSelectors = asmGroup_selectors;
    exports.AsmService = AsmService;
    exports.AsmStatePersistenceService = AsmStatePersistenceService;
    exports.AuthActions = authGroup_actions;
    exports.AuthConfig = AuthConfig;
    exports.AuthConfigService = AuthConfigService;
    exports.AuthGuard = AuthGuard;
    exports.AuthHttpHeaderService = AuthHttpHeaderService;
    exports.AuthInterceptor = AuthInterceptor;
    exports.AuthModule = AuthModule;
    exports.AuthRedirectService = AuthRedirectService;
    exports.AuthRedirectStorageService = AuthRedirectStorageService;
    exports.AuthService = AuthService;
    exports.AuthStatePersistenceService = AuthStatePersistenceService;
    exports.AuthStorageService = AuthStorageService;
    exports.BASE_SITE_CONTEXT_ID = BASE_SITE_CONTEXT_ID;
    exports.BadGatewayHandler = BadGatewayHandler;
    exports.BadRequestHandler = BadRequestHandler;
    exports.BaseSiteService = BaseSiteService;
    exports.CANCEL_ORDER_PROCESS_ID = CANCEL_ORDER_PROCESS_ID;
    exports.CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = CANCEL_REPLENISHMENT_ORDER_PROCESS_ID;
    exports.CANCEL_RETURN_PROCESS_ID = CANCEL_RETURN_PROCESS_ID;
    exports.CARD_TYPE_NORMALIZER = CARD_TYPE_NORMALIZER;
    exports.CART_MODIFICATION_NORMALIZER = CART_MODIFICATION_NORMALIZER;
    exports.CART_NORMALIZER = CART_NORMALIZER;
    exports.CART_VOUCHER_NORMALIZER = CART_VOUCHER_NORMALIZER;
    exports.CHECKOUT_DETAILS = CHECKOUT_DETAILS;
    exports.CHECKOUT_FEATURE = CHECKOUT_FEATURE;
    exports.CLAIM_CUSTOMER_COUPON_PROCESS_ID = CLAIM_CUSTOMER_COUPON_PROCESS_ID;
    exports.CLIENT_AUTH_FEATURE = CLIENT_AUTH_FEATURE;
    exports.CLIENT_TOKEN_DATA = CLIENT_TOKEN_DATA;
    exports.CMS_COMPONENT_NORMALIZER = CMS_COMPONENT_NORMALIZER;
    exports.CMS_FEATURE = CMS_FEATURE;
    exports.CMS_FLEX_COMPONENT_TYPE = CMS_FLEX_COMPONENT_TYPE;
    exports.CMS_PAGE_NORMALIZER = CMS_PAGE_NORMALIZER;
    exports.COMPONENT_ENTITY = COMPONENT_ENTITY;
    exports.CONFIG_INITIALIZER = CONFIG_INITIALIZER;
    exports.CONSENT_TEMPLATE_NORMALIZER = CONSENT_TEMPLATE_NORMALIZER;
    exports.CONSIGNMENT_TRACKING_NORMALIZER = CONSIGNMENT_TRACKING_NORMALIZER;
    exports.COST_CENTERS_NORMALIZER = COST_CENTERS_NORMALIZER;
    exports.COST_CENTER_NORMALIZER = COST_CENTER_NORMALIZER;
    exports.COST_CENTER_SERIALIZER = COST_CENTER_SERIALIZER;
    exports.COUNTRY_NORMALIZER = COUNTRY_NORMALIZER;
    exports.CURRENCY_CONTEXT_ID = CURRENCY_CONTEXT_ID;
    exports.CURRENCY_NORMALIZER = CURRENCY_NORMALIZER;
    exports.CUSTOMER_COUPONS = CUSTOMER_COUPONS;
    exports.CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER;
    exports.CUSTOMER_SEARCH_DATA = CUSTOMER_SEARCH_DATA;
    exports.CUSTOMER_SEARCH_PAGE_NORMALIZER = CUSTOMER_SEARCH_PAGE_NORMALIZER;
    exports.CartActions = cartGroup_actions;
    exports.CartAdapter = CartAdapter;
    exports.CartAddEntryEvent = CartAddEntryEvent;
    exports.CartAddEntryFailEvent = CartAddEntryFailEvent;
    exports.CartAddEntrySuccessEvent = CartAddEntrySuccessEvent;
    exports.CartConfig = CartConfig;
    exports.CartConfigService = CartConfigService;
    exports.CartConnector = CartConnector;
    exports.CartEntryAdapter = CartEntryAdapter;
    exports.CartEntryConnector = CartEntryConnector;
    exports.CartEventBuilder = CartEventBuilder;
    exports.CartEventModule = CartEventModule;
    exports.CartModule = CartModule;
    exports.CartOccModule = CartOccModule;
    exports.CartPersistenceModule = CartPersistenceModule;
    exports.CartRemoveEntrySuccessEvent = CartRemoveEntrySuccessEvent;
    exports.CartUpdateEntrySuccessEvent = CartUpdateEntrySuccessEvent;
    exports.CartVoucherAdapter = CartVoucherAdapter;
    exports.CartVoucherConnector = CartVoucherConnector;
    exports.CartVoucherService = CartVoucherService;
    exports.CategoryPageMetaResolver = CategoryPageMetaResolver;
    exports.CheckoutActions = checkoutGroup_actions;
    exports.CheckoutAdapter = CheckoutAdapter;
    exports.CheckoutConnector = CheckoutConnector;
    exports.CheckoutCostCenterAdapter = CheckoutCostCenterAdapter;
    exports.CheckoutCostCenterConnector = CheckoutCostCenterConnector;
    exports.CheckoutCostCenterService = CheckoutCostCenterService;
    exports.CheckoutDeliveryAdapter = CheckoutDeliveryAdapter;
    exports.CheckoutDeliveryConnector = CheckoutDeliveryConnector;
    exports.CheckoutDeliveryService = CheckoutDeliveryService;
    exports.CheckoutEventBuilder = CheckoutEventBuilder;
    exports.CheckoutEventModule = CheckoutEventModule;
    exports.CheckoutModule = CheckoutModule;
    exports.CheckoutOccModule = CheckoutOccModule;
    exports.CheckoutPageMetaResolver = CheckoutPageMetaResolver;
    exports.CheckoutPaymentAdapter = CheckoutPaymentAdapter;
    exports.CheckoutPaymentConnector = CheckoutPaymentConnector;
    exports.CheckoutPaymentService = CheckoutPaymentService;
    exports.CheckoutReplenishmentOrderAdapter = CheckoutReplenishmentOrderAdapter;
    exports.CheckoutReplenishmentOrderConnector = CheckoutReplenishmentOrderConnector;
    exports.CheckoutSelectors = checkoutGroup_selectors;
    exports.CheckoutService = CheckoutService;
    exports.ClientAuthActions = clientTokenGroup_actions;
    exports.ClientAuthModule = ClientAuthModule;
    exports.ClientAuthSelectors = clientTokenGroup_selectors;
    exports.ClientAuthenticationTokenService = ClientAuthenticationTokenService;
    exports.ClientErrorHandlingService = ClientErrorHandlingService;
    exports.ClientTokenInterceptor = ClientTokenInterceptor;
    exports.ClientTokenService = ClientTokenService;
    exports.CmsActions = cmsGroup_actions;
    exports.CmsComponentAdapter = CmsComponentAdapter;
    exports.CmsComponentConnector = CmsComponentConnector;
    exports.CmsConfig = CmsConfig;
    exports.CmsModule = CmsModule;
    exports.CmsOccModule = CmsOccModule;
    exports.CmsPageAdapter = CmsPageAdapter;
    exports.CmsPageConnector = CmsPageConnector;
    exports.CmsPageTitleModule = CmsPageTitleModule;
    exports.CmsSelectors = cmsGroup_selectors;
    exports.CmsService = CmsService;
    exports.CmsStructureConfig = CmsStructureConfig;
    exports.CmsStructureConfigService = CmsStructureConfigService;
    exports.Config = Config;
    exports.ConfigChunk = ConfigChunk;
    exports.ConfigInitializerModule = ConfigInitializerModule;
    exports.ConfigInitializerService = ConfigInitializerService;
    exports.ConfigModule = ConfigModule;
    exports.ConfigValidatorModule = ConfigValidatorModule;
    exports.ConfigValidatorToken = ConfigValidatorToken;
    exports.ConfigurableRoutesService = ConfigurableRoutesService;
    exports.ConfigurationService = ConfigurationService;
    exports.ConflictHandler = ConflictHandler;
    exports.ConsentService = ConsentService;
    exports.ContentPageMetaResolver = ContentPageMetaResolver;
    exports.ContextServiceMap = ContextServiceMap;
    exports.ConverterService = ConverterService;
    exports.CostCenterModule = CostCenterModule;
    exports.CostCenterOccModule = CostCenterOccModule;
    exports.CsAgentAuthService = CsAgentAuthService;
    exports.CurrencyService = CurrencyService;
    exports.CustomerCouponAdapter = CustomerCouponAdapter;
    exports.CustomerCouponConnector = CustomerCouponConnector;
    exports.CustomerCouponService = CustomerCouponService;
    exports.CxDatePipe = CxDatePipe;
    exports.DEFAULT_LOCAL_STORAGE_KEY = DEFAULT_LOCAL_STORAGE_KEY;
    exports.DEFAULT_SCOPE = DEFAULT_SCOPE;
    exports.DEFAULT_SESSION_STORAGE_KEY = DEFAULT_SESSION_STORAGE_KEY;
    exports.DEFAULT_URL_MATCHER = DEFAULT_URL_MATCHER;
    exports.DELIVERY_MODE_NORMALIZER = DELIVERY_MODE_NORMALIZER;
    exports.DatePickerFormatterService = DatePickerFormatterService;
    exports.DateTimePickerFormatterService = DateTimePickerFormatterService;
    exports.DefaultConfig = DefaultConfig;
    exports.DefaultConfigChunk = DefaultConfigChunk;
    exports.DefaultRoutePageMetaResolver = DefaultRoutePageMetaResolver;
    exports.DynamicAttributeService = DynamicAttributeService;
    exports.EMAIL_PATTERN = EMAIL_PATTERN;
    exports.EXTERNAL_CONFIG_TRANSFER_ID = EXTERNAL_CONFIG_TRANSFER_ID;
    exports.EventService = EventService;
    exports.ExternalJsFileLoader = ExternalJsFileLoader;
    exports.ExternalRoutesConfig = ExternalRoutesConfig;
    exports.ExternalRoutesGuard = ExternalRoutesGuard;
    exports.ExternalRoutesModule = ExternalRoutesModule;
    exports.ExternalRoutesService = ExternalRoutesService;
    exports.FeatureConfigService = FeatureConfigService;
    exports.FeatureDirective = FeatureDirective;
    exports.FeatureLevelDirective = FeatureLevelDirective;
    exports.FeaturesConfig = FeaturesConfig;
    exports.FeaturesConfigModule = FeaturesConfigModule;
    exports.ForbiddenHandler = ForbiddenHandler;
    exports.GET_PAYMENT_TYPES_PROCESS_ID = GET_PAYMENT_TYPES_PROCESS_ID;
    exports.GIVE_CONSENT_PROCESS_ID = GIVE_CONSENT_PROCESS_ID;
    exports.GLOBAL_MESSAGE_FEATURE = GLOBAL_MESSAGE_FEATURE;
    exports.GatewayTimeoutHandler = GatewayTimeoutHandler;
    exports.GlobService = GlobService;
    exports.GlobalMessageActions = globalMessageGroup_actions;
    exports.GlobalMessageConfig = GlobalMessageConfig;
    exports.GlobalMessageModule = GlobalMessageModule;
    exports.GlobalMessageSelectors = globalMessageGroup_selectors;
    exports.GlobalMessageService = GlobalMessageService;
    exports.GoogleMapRendererService = GoogleMapRendererService;
    exports.HttpErrorHandler = HttpErrorHandler;
    exports.HttpParamsURIEncoder = HttpParamsURIEncoder;
    exports.I18nConfig = I18nConfig;
    exports.I18nModule = I18nModule;
    exports.I18nTestingModule = I18nTestingModule;
    exports.I18nextTranslationService = I18nextTranslationService;
    exports.InterceptorUtil = InterceptorUtil;
    exports.InternalServerErrorHandler = InternalServerErrorHandler;
    exports.JSP_INCLUDE_CMS_COMPONENT_TYPE = JSP_INCLUDE_CMS_COMPONENT_TYPE;
    exports.JavaRegExpConverter = JavaRegExpConverter;
    exports.LANGUAGE_CONTEXT_ID = LANGUAGE_CONTEXT_ID;
    exports.LANGUAGE_NORMALIZER = LANGUAGE_NORMALIZER;
    exports.LanguageService = LanguageService;
    exports.LazyModulesService = LazyModulesService;
    exports.LoadingScopesService = LoadingScopesService;
    exports.MEDIA_BASE_URL_META_TAG_NAME = MEDIA_BASE_URL_META_TAG_NAME;
    exports.MEDIA_BASE_URL_META_TAG_PLACEHOLDER = MEDIA_BASE_URL_META_TAG_PLACEHOLDER;
    exports.MULTI_CART_DATA = MULTI_CART_DATA;
    exports.MULTI_CART_FEATURE = MULTI_CART_FEATURE;
    exports.MockDatePipe = MockDatePipe;
    exports.MockTranslatePipe = MockTranslatePipe;
    exports.ModuleInitializedEvent = ModuleInitializedEvent;
    exports.MultiCartSelectors = multiCartGroup_selectors;
    exports.MultiCartService = MultiCartService;
    exports.MultiCartStatePersistenceService = MultiCartStatePersistenceService;
    exports.NAVIGATION_DETAIL_ENTITY = NAVIGATION_DETAIL_ENTITY;
    exports.NOTIFICATION_PREFERENCES = NOTIFICATION_PREFERENCES;
    exports.NgExpressEngineDecorator = NgExpressEngineDecorator;
    exports.NotAuthGuard = NotAuthGuard;
    exports.NotFoundHandler = NotFoundHandler;
    exports.OAuthLibWrapperService = OAuthLibWrapperService;
    exports.OCC_BASE_URL_META_TAG_NAME = OCC_BASE_URL_META_TAG_NAME;
    exports.OCC_BASE_URL_META_TAG_PLACEHOLDER = OCC_BASE_URL_META_TAG_PLACEHOLDER;
    exports.OCC_CART_ID_CURRENT = OCC_CART_ID_CURRENT;
    exports.OCC_USER_ID_ANONYMOUS = OCC_USER_ID_ANONYMOUS;
    exports.OCC_USER_ID_CURRENT = OCC_USER_ID_CURRENT;
    exports.OCC_USER_ID_GUEST = OCC_USER_ID_GUEST;
    exports.ORDER_HISTORY_NORMALIZER = ORDER_HISTORY_NORMALIZER;
    exports.ORDER_NORMALIZER = ORDER_NORMALIZER;
    exports.ORDER_RETURNS_NORMALIZER = ORDER_RETURNS_NORMALIZER;
    exports.ORDER_RETURN_REQUEST_INPUT_SERIALIZER = ORDER_RETURN_REQUEST_INPUT_SERIALIZER;
    exports.ORDER_RETURN_REQUEST_NORMALIZER = ORDER_RETURN_REQUEST_NORMALIZER;
    exports.OccAnonymousConsentTemplatesAdapter = OccAnonymousConsentTemplatesAdapter;
    exports.OccAsmAdapter = OccAsmAdapter;
    exports.OccCartAdapter = OccCartAdapter;
    exports.OccCartEntryAdapter = OccCartEntryAdapter;
    exports.OccCartNormalizer = OccCartNormalizer;
    exports.OccCartVoucherAdapter = OccCartVoucherAdapter;
    exports.OccCheckoutAdapter = OccCheckoutAdapter;
    exports.OccCheckoutCostCenterAdapter = OccCheckoutCostCenterAdapter;
    exports.OccCheckoutDeliveryAdapter = OccCheckoutDeliveryAdapter;
    exports.OccCheckoutPaymentAdapter = OccCheckoutPaymentAdapter;
    exports.OccCheckoutPaymentTypeAdapter = OccCheckoutPaymentTypeAdapter;
    exports.OccCheckoutReplenishmentOrderAdapter = OccCheckoutReplenishmentOrderAdapter;
    exports.OccCmsComponentAdapter = OccCmsComponentAdapter;
    exports.OccCmsPageAdapter = OccCmsPageAdapter;
    exports.OccCmsPageNormalizer = OccCmsPageNormalizer;
    exports.OccConfig = OccConfig;
    exports.OccConfigLoaderModule = OccConfigLoaderModule;
    exports.OccConfigLoaderService = OccConfigLoaderService;
    exports.OccCostCenterListNormalizer = OccCostCenterListNormalizer;
    exports.OccCostCenterNormalizer = OccCostCenterNormalizer;
    exports.OccCostCenterSerializer = OccCostCenterSerializer;
    exports.OccCustomerCouponAdapter = OccCustomerCouponAdapter;
    exports.OccEndpointsService = OccEndpointsService;
    exports.OccFieldsService = OccFieldsService;
    exports.OccLoadedConfigConverter = OccLoadedConfigConverter;
    exports.OccModule = OccModule;
    exports.OccOrderNormalizer = OccOrderNormalizer;
    exports.OccProductAdapter = OccProductAdapter;
    exports.OccProductReferencesAdapter = OccProductReferencesAdapter;
    exports.OccProductReferencesListNormalizer = OccProductReferencesListNormalizer;
    exports.OccProductReviewsAdapter = OccProductReviewsAdapter;
    exports.OccProductSearchAdapter = OccProductSearchAdapter;
    exports.OccProductSearchPageNormalizer = OccProductSearchPageNormalizer;
    exports.OccReplenishmentOrderFormSerializer = OccReplenishmentOrderFormSerializer;
    exports.OccReplenishmentOrderNormalizer = OccReplenishmentOrderNormalizer;
    exports.OccRequestsOptimizerService = OccRequestsOptimizerService;
    exports.OccReturnRequestNormalizer = OccReturnRequestNormalizer;
    exports.OccSiteAdapter = OccSiteAdapter;
    exports.OccSitesConfigLoader = OccSitesConfigLoader;
    exports.OccStoreFinderAdapter = OccStoreFinderAdapter;
    exports.OccUserAdapter = OccUserAdapter;
    exports.OccUserAddressAdapter = OccUserAddressAdapter;
    exports.OccUserConsentAdapter = OccUserConsentAdapter;
    exports.OccUserInterestsAdapter = OccUserInterestsAdapter;
    exports.OccUserInterestsNormalizer = OccUserInterestsNormalizer;
    exports.OccUserNotificationPreferenceAdapter = OccUserNotificationPreferenceAdapter;
    exports.OccUserOrderAdapter = OccUserOrderAdapter;
    exports.OccUserPaymentAdapter = OccUserPaymentAdapter;
    exports.OccUserReplenishmentOrderAdapter = OccUserReplenishmentOrderAdapter;
    exports.OrderPlacedEvent = OrderPlacedEvent;
    exports.OrderReturnRequestService = OrderReturnRequestService;
    exports.PASSWORD_PATTERN = PASSWORD_PATTERN;
    exports.PAYMENT_DETAILS_NORMALIZER = PAYMENT_DETAILS_NORMALIZER;
    exports.PAYMENT_DETAILS_SERIALIZER = PAYMENT_DETAILS_SERIALIZER;
    exports.PAYMENT_TYPE_NORMALIZER = PAYMENT_TYPE_NORMALIZER;
    exports.PLACED_ORDER_PROCESS_ID = PLACED_ORDER_PROCESS_ID;
    exports.POINT_OF_SERVICE_NORMALIZER = POINT_OF_SERVICE_NORMALIZER;
    exports.PROCESS_FEATURE = PROCESS_FEATURE;
    exports.PRODUCT_DETAIL_ENTITY = PRODUCT_DETAIL_ENTITY;
    exports.PRODUCT_FEATURE = PRODUCT_FEATURE;
    exports.PRODUCT_INTERESTS = PRODUCT_INTERESTS;
    exports.PRODUCT_INTERESTS_NORMALIZER = PRODUCT_INTERESTS_NORMALIZER;
    exports.PRODUCT_NORMALIZER = PRODUCT_NORMALIZER;
    exports.PRODUCT_REFERENCES_NORMALIZER = PRODUCT_REFERENCES_NORMALIZER;
    exports.PRODUCT_REVIEW_NORMALIZER = PRODUCT_REVIEW_NORMALIZER;
    exports.PRODUCT_REVIEW_SERIALIZER = PRODUCT_REVIEW_SERIALIZER;
    exports.PRODUCT_SEARCH_PAGE_NORMALIZER = PRODUCT_SEARCH_PAGE_NORMALIZER;
    exports.PRODUCT_SUGGESTION_NORMALIZER = PRODUCT_SUGGESTION_NORMALIZER;
    exports.PageContext = PageContext;
    exports.PageMetaResolver = PageMetaResolver;
    exports.PageMetaService = PageMetaService;
    exports.PaymentTypeAdapter = PaymentTypeAdapter;
    exports.PaymentTypeConnector = PaymentTypeConnector;
    exports.PaymentTypeService = PaymentTypeService;
    exports.PersonalizationConfig = PersonalizationConfig;
    exports.PersonalizationContextService = PersonalizationContextService;
    exports.PersonalizationModule = PersonalizationModule;
    exports.ProcessModule = ProcessModule;
    exports.ProcessSelectors = process_selectors;
    exports.ProductActions = productGroup_actions;
    exports.ProductAdapter = ProductAdapter;
    exports.ProductConnector = ProductConnector;
    exports.ProductImageNormalizer = ProductImageNormalizer;
    exports.ProductLoadingService = ProductLoadingService;
    exports.ProductModule = ProductModule;
    exports.ProductNameNormalizer = ProductNameNormalizer;
    exports.ProductOccModule = ProductOccModule;
    exports.ProductPageMetaResolver = ProductPageMetaResolver;
    exports.ProductReferenceNormalizer = ProductReferenceNormalizer;
    exports.ProductReferenceService = ProductReferenceService;
    exports.ProductReferencesAdapter = ProductReferencesAdapter;
    exports.ProductReferencesConnector = ProductReferencesConnector;
    exports.ProductReviewService = ProductReviewService;
    exports.ProductReviewsAdapter = ProductReviewsAdapter;
    exports.ProductReviewsConnector = ProductReviewsConnector;
    exports.ProductSearchAdapter = ProductSearchAdapter;
    exports.ProductSearchConnector = ProductSearchConnector;
    exports.ProductSearchService = ProductSearchService;
    exports.ProductSelectors = productGroup_selectors;
    exports.ProductService = ProductService;
    exports.ProductURLPipe = ProductURLPipe;
    exports.ProtectedRoutesGuard = ProtectedRoutesGuard;
    exports.ProtectedRoutesService = ProtectedRoutesService;
    exports.REGIONS = REGIONS;
    exports.REGION_NORMALIZER = REGION_NORMALIZER;
    exports.REGISTER_USER_PROCESS_ID = REGISTER_USER_PROCESS_ID;
    exports.REMOVE_PRODUCT_INTERESTS_PROCESS_ID = REMOVE_PRODUCT_INTERESTS_PROCESS_ID;
    exports.REMOVE_USER_PROCESS_ID = REMOVE_USER_PROCESS_ID;
    exports.REPLENISHMENT_ORDER_FORM_SERIALIZER = REPLENISHMENT_ORDER_FORM_SERIALIZER;
    exports.REPLENISHMENT_ORDER_HISTORY_NORMALIZER = REPLENISHMENT_ORDER_HISTORY_NORMALIZER;
    exports.REPLENISHMENT_ORDER_NORMALIZER = REPLENISHMENT_ORDER_NORMALIZER;
    exports.ROUTING_FEATURE = ROUTING_FEATURE;
    exports.RootConfig = RootConfig;
    exports.RoutingActions = routingGroup_actions;
    exports.RoutingConfig = RoutingConfig;
    exports.RoutingConfigService = RoutingConfigService;
    exports.RoutingModule = RoutingModule;
    exports.RoutingPageMetaResolver = RoutingPageMetaResolver;
    exports.RoutingSelector = routingGroup_selectors;
    exports.RoutingService = RoutingService;
    exports.SERVER_REQUEST_ORIGIN = SERVER_REQUEST_ORIGIN;
    exports.SERVER_REQUEST_URL = SERVER_REQUEST_URL;
    exports.SET_COST_CENTER_PROCESS_ID = SET_COST_CENTER_PROCESS_ID;
    exports.SET_DELIVERY_ADDRESS_PROCESS_ID = SET_DELIVERY_ADDRESS_PROCESS_ID;
    exports.SET_DELIVERY_MODE_PROCESS_ID = SET_DELIVERY_MODE_PROCESS_ID;
    exports.SET_PAYMENT_DETAILS_PROCESS_ID = SET_PAYMENT_DETAILS_PROCESS_ID;
    exports.SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID;
    exports.SITE_CONTEXT_FEATURE = SITE_CONTEXT_FEATURE;
    exports.STORE_COUNT_NORMALIZER = STORE_COUNT_NORMALIZER;
    exports.STORE_FINDER_DATA = STORE_FINDER_DATA;
    exports.STORE_FINDER_FEATURE = STORE_FINDER_FEATURE;
    exports.STORE_FINDER_SEARCH_PAGE_NORMALIZER = STORE_FINDER_SEARCH_PAGE_NORMALIZER;
    exports.SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID;
    exports.SearchPageMetaResolver = SearchPageMetaResolver;
    exports.SearchboxService = SearchboxService;
    exports.SelectiveCartService = SelectiveCartService;
    exports.SemanticPathService = SemanticPathService;
    exports.SiteAdapter = SiteAdapter;
    exports.SiteConnector = SiteConnector;
    exports.SiteContextActions = siteContextGroup_actions;
    exports.SiteContextConfig = SiteContextConfig;
    exports.SiteContextInterceptor = SiteContextInterceptor;
    exports.SiteContextModule = SiteContextModule;
    exports.SiteContextOccModule = SiteContextOccModule;
    exports.SiteContextSelectors = siteContextGroup_selectors;
    exports.SmartEditModule = SmartEditModule;
    exports.SmartEditService = SmartEditService;
    exports.StateConfig = StateConfig;
    exports.StateEventService = StateEventService;
    exports.StateModule = StateModule;
    exports.StatePersistenceService = StatePersistenceService;
    exports.StateUtils = utilsGroup;
    exports.StoreDataService = StoreDataService;
    exports.StoreFinderActions = storeFinderGroup_actions;
    exports.StoreFinderAdapter = StoreFinderAdapter;
    exports.StoreFinderConfig = StoreFinderConfig;
    exports.StoreFinderConnector = StoreFinderConnector;
    exports.StoreFinderCoreModule = StoreFinderCoreModule;
    exports.StoreFinderOccModule = StoreFinderOccModule;
    exports.StoreFinderSelectors = storeFinderGroup_selectors;
    exports.StoreFinderService = StoreFinderService;
    exports.TITLE_NORMALIZER = TITLE_NORMALIZER;
    exports.TestConfigModule = TestConfigModule;
    exports.TokenRevocationInterceptor = TokenRevocationInterceptor;
    exports.TranslatePipe = TranslatePipe;
    exports.TranslationChunkService = TranslationChunkService;
    exports.TranslationService = TranslationService;
    exports.UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID;
    exports.UPDATE_EMAIL_PROCESS_ID = UPDATE_EMAIL_PROCESS_ID;
    exports.UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID = UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID;
    exports.UPDATE_PASSWORD_PROCESS_ID = UPDATE_PASSWORD_PROCESS_ID;
    exports.UPDATE_USER_DETAILS_PROCESS_ID = UPDATE_USER_DETAILS_PROCESS_ID;
    exports.USER_ADDRESSES = USER_ADDRESSES;
    exports.USER_CONSENTS = USER_CONSENTS;
    exports.USER_COST_CENTERS = USER_COST_CENTERS;
    exports.USER_FEATURE = USER_FEATURE;
    exports.USER_NORMALIZER = USER_NORMALIZER;
    exports.USER_ORDERS = USER_ORDERS;
    exports.USER_ORDER_DETAILS = USER_ORDER_DETAILS;
    exports.USER_PAYMENT_METHODS = USER_PAYMENT_METHODS;
    exports.USER_REPLENISHMENT_ORDERS = USER_REPLENISHMENT_ORDERS;
    exports.USER_REPLENISHMENT_ORDER_DETAILS = USER_REPLENISHMENT_ORDER_DETAILS;
    exports.USER_RETURN_REQUESTS = USER_RETURN_REQUESTS;
    exports.USER_RETURN_REQUEST_DETAILS = USER_RETURN_REQUEST_DETAILS;
    exports.USER_SERIALIZER = USER_SERIALIZER;
    exports.USER_SIGN_UP_SERIALIZER = USER_SIGN_UP_SERIALIZER;
    exports.USE_CLIENT_TOKEN = USE_CLIENT_TOKEN;
    exports.USE_CUSTOMER_SUPPORT_AGENT_TOKEN = USE_CUSTOMER_SUPPORT_AGENT_TOKEN;
    exports.UnifiedInjector = UnifiedInjector;
    exports.UnknownErrorHandler = UnknownErrorHandler;
    exports.UrlMatcherService = UrlMatcherService;
    exports.UrlModule = UrlModule;
    exports.UrlPipe = UrlPipe;
    exports.UserActions = userGroup_actions;
    exports.UserAdapter = UserAdapter;
    exports.UserAddressAdapter = UserAddressAdapter;
    exports.UserAddressConnector = UserAddressConnector;
    exports.UserAddressService = UserAddressService;
    exports.UserAuthModule = UserAuthModule;
    exports.UserConnector = UserConnector;
    exports.UserConsentAdapter = UserConsentAdapter;
    exports.UserConsentConnector = UserConsentConnector;
    exports.UserConsentService = UserConsentService;
    exports.UserCostCenterAdapter = UserCostCenterAdapter;
    exports.UserCostCenterConnector = UserCostCenterConnector;
    exports.UserCostCenterService = UserCostCenterService;
    exports.UserIdService = UserIdService;
    exports.UserInterestsAdapter = UserInterestsAdapter;
    exports.UserInterestsConnector = UserInterestsConnector;
    exports.UserInterestsService = UserInterestsService;
    exports.UserModule = UserModule;
    exports.UserNotificationPreferenceService = UserNotificationPreferenceService;
    exports.UserOccModule = UserOccModule;
    exports.UserOrderAdapter = UserOrderAdapter;
    exports.UserOrderConnector = UserOrderConnector;
    exports.UserOrderService = UserOrderService;
    exports.UserPaymentAdapter = UserPaymentAdapter;
    exports.UserPaymentConnector = UserPaymentConnector;
    exports.UserPaymentService = UserPaymentService;
    exports.UserReplenishmentOrderAdapter = UserReplenishmentOrderAdapter;
    exports.UserReplenishmentOrderConnector = UserReplenishmentOrderConnector;
    exports.UserReplenishmentOrderService = UserReplenishmentOrderService;
    exports.UserService = UserService;
    exports.UsersSelectors = usersGroup_selectors;
    exports.WITHDRAW_CONSENT_PROCESS_ID = WITHDRAW_CONSENT_PROCESS_ID;
    exports.WindowRef = WindowRef;
    exports.WishListService = WishListService;
    exports.WithCredentialsInterceptor = WithCredentialsInterceptor;
    exports.configInitializerFactory = configInitializerFactory;
    exports.configValidatorFactory = configValidatorFactory;
    exports.contextServiceMapProvider = contextServiceMapProvider;
    exports.createFrom = createFrom;
    exports.deepMerge = deepMerge;
    exports.defaultAnonymousConsentsConfig = defaultAnonymousConsentsConfig;
    exports.defaultCmsModuleConfig = defaultCmsModuleConfig;
    exports.defaultOccConfig = defaultOccConfig;
    exports.defaultStateConfig = defaultStateConfig;
    exports.errorHandlers = errorHandlers;
    exports.getLastValueSync = getLastValueSync;
    exports.getServerRequestProviders = getServerRequestProviders;
    exports.httpErrorInterceptors = httpErrorInterceptors;
    exports.initConfigurableRoutes = initConfigurableRoutes;
    exports.isFeatureEnabled = isFeatureEnabled;
    exports.isFeatureLevel = isFeatureLevel;
    exports.isObject = isObject;
    exports.locationInitializedFactory = locationInitializedFactory;
    exports.mediaServerConfigFromMetaTagFactory = mediaServerConfigFromMetaTagFactory;
    exports.normalizeHttpError = normalizeHttpError;
    exports.occConfigValidator = occConfigValidator;
    exports.occServerConfigFromMetaTagFactory = occServerConfigFromMetaTagFactory;
    exports.provideConfig = provideConfig;
    exports.provideConfigFactory = provideConfigFactory;
    exports.provideConfigFromMetaTags = provideConfigFromMetaTags;
    exports.provideConfigValidator = provideConfigValidator;
    exports.provideDefaultConfig = provideDefaultConfig;
    exports.provideDefaultConfigFactory = provideDefaultConfigFactory;
    exports.recurrencePeriod = recurrencePeriod;
    exports.resolveApplicable = resolveApplicable;
    exports.serviceMapFactory = serviceMapFactory;
    exports.validateConfig = validateConfig;
    exports.withdrawOn = withdrawOn;
    exports.ɵa = asmStatePersistenceFactory;
    exports.ɵb = checkOAuthParamsInUrl;
    exports.ɵba = reducer$a;
    exports.ɵbb = reducer$8;
    exports.ɵbc = reducer$9;
    exports.ɵbd = interceptors$2;
    exports.ɵbe = AnonymousConsentsInterceptor;
    exports.ɵbf = AsmStoreModule;
    exports.ɵbg = getReducers$5;
    exports.ɵbh = reducerToken$5;
    exports.ɵbi = reducerProvider$5;
    exports.ɵbj = clearCustomerSupportAgentAsmState;
    exports.ɵbk = metaReducers$1;
    exports.ɵbl = effects$4;
    exports.ɵbm = CustomerEffects;
    exports.ɵbn = reducer$c;
    exports.ɵbo = defaultAsmConfig;
    exports.ɵbq = ClientAuthStoreModule;
    exports.ɵbr = getReducers;
    exports.ɵbs = reducerToken;
    exports.ɵbt = reducerProvider;
    exports.ɵbu = effects;
    exports.ɵbv = ClientTokenEffect;
    exports.ɵbw = interceptors;
    exports.ɵbx = defaultAuthConfig;
    exports.ɵby = interceptors$1;
    exports.ɵbz = SiteContextParamsService;
    exports.ɵc = authStatePersistenceFactory;
    exports.ɵca = MultiCartStoreModule;
    exports.ɵcb = clearMultiCartState;
    exports.ɵcc = multiCartMetaReducers;
    exports.ɵcd = multiCartReducerToken;
    exports.ɵce = getMultiCartReducers;
    exports.ɵcf = multiCartReducerProvider;
    exports.ɵcg = CartEffects;
    exports.ɵch = CartEntryEffects;
    exports.ɵci = CartVoucherEffects;
    exports.ɵcj = WishListEffects;
    exports.ɵck = SaveCartConnector;
    exports.ɵcl = SaveCartAdapter;
    exports.ɵcm = MultiCartEffects;
    exports.ɵcn = entityProcessesLoaderReducer;
    exports.ɵco = entityReducer;
    exports.ɵcp = processesLoaderReducer;
    exports.ɵcq = activeCartReducer;
    exports.ɵcr = cartEntitiesReducer;
    exports.ɵcs = wishListReducer;
    exports.ɵct = CartPageMetaResolver;
    exports.ɵcu = CheckoutStoreModule;
    exports.ɵcv = getReducers$1;
    exports.ɵcw = reducerToken$1;
    exports.ɵcx = reducerProvider$1;
    exports.ɵcy = effects$1;
    exports.ɵcz = AddressVerificationEffect;
    exports.ɵd = cartStatePersistenceFactory;
    exports.ɵda = CardTypesEffects;
    exports.ɵdb = CheckoutEffects;
    exports.ɵdc = PaymentTypesEffects;
    exports.ɵdd = ReplenishmentOrderEffects;
    exports.ɵde = reducer$2;
    exports.ɵdf = reducer$1;
    exports.ɵdg = reducer;
    exports.ɵdh = reducer$4;
    exports.ɵdi = reducer$3;
    exports.ɵdj = cmsStoreConfigFactory;
    exports.ɵdk = CmsStoreModule;
    exports.ɵdl = getReducers$7;
    exports.ɵdm = reducerToken$7;
    exports.ɵdn = reducerProvider$7;
    exports.ɵdo = clearCmsState;
    exports.ɵdp = metaReducers$2;
    exports.ɵdq = effects$7;
    exports.ɵdr = ComponentsEffects;
    exports.ɵds = NavigationEntryItemEffects;
    exports.ɵdt = PageEffects;
    exports.ɵdu = reducer$g;
    exports.ɵdv = entityLoaderReducer;
    exports.ɵdw = reducer$h;
    exports.ɵdx = reducer$e;
    exports.ɵdy = reducer$f;
    exports.ɵdz = GlobalMessageStoreModule;
    exports.ɵe = uninitializeActiveCartMetaReducerFactory;
    exports.ɵea = getReducers$4;
    exports.ɵeb = reducerToken$4;
    exports.ɵec = reducerProvider$4;
    exports.ɵed = reducer$b;
    exports.ɵee = GlobalMessageEffect;
    exports.ɵef = defaultGlobalMessageConfigFactory;
    exports.ɵeg = HttpErrorInterceptor;
    exports.ɵeh = defaultI18nConfig;
    exports.ɵei = i18nextProviders;
    exports.ɵej = i18nextInit;
    exports.ɵek = MockTranslationService;
    exports.ɵel = defaultOccAsmConfig;
    exports.ɵem = defaultOccCartConfig;
    exports.ɵen = OccSaveCartAdapter;
    exports.ɵeo = defaultOccCheckoutConfig;
    exports.ɵep = defaultOccCostCentersConfig;
    exports.ɵeq = defaultOccProductConfig;
    exports.ɵer = defaultOccSiteContextConfig;
    exports.ɵes = defaultOccStoreFinderConfig;
    exports.ɵet = defaultOccUserConfig;
    exports.ɵeu = UserNotificationPreferenceAdapter;
    exports.ɵev = OccUserCostCenterAdapter;
    exports.ɵew = OccAddressListNormalizer;
    exports.ɵex = UserReplenishmentOrderAdapter;
    exports.ɵey = defaultPersonalizationConfig;
    exports.ɵez = interceptors$3;
    exports.ɵf = CONFIG_INITIALIZER_FORROOT_GUARD;
    exports.ɵfa = OccPersonalizationIdInterceptor;
    exports.ɵfb = OccPersonalizationTimeInterceptor;
    exports.ɵfc = ProcessStoreModule;
    exports.ɵfd = getReducers$8;
    exports.ɵfe = reducerToken$8;
    exports.ɵff = reducerProvider$8;
    exports.ɵfg = productStoreConfigFactory;
    exports.ɵfh = ProductStoreModule;
    exports.ɵfi = getReducers$9;
    exports.ɵfj = reducerToken$9;
    exports.ɵfk = reducerProvider$9;
    exports.ɵfl = clearProductsState;
    exports.ɵfm = metaReducers$3;
    exports.ɵfn = effects$8;
    exports.ɵfo = ProductReferencesEffects;
    exports.ɵfp = ProductReviewsEffects;
    exports.ɵfq = ProductsSearchEffects;
    exports.ɵfr = ProductEffects;
    exports.ɵfs = reducer$k;
    exports.ɵft = entityScopedLoaderReducer;
    exports.ɵfu = scopedLoaderReducer;
    exports.ɵfv = reducer$j;
    exports.ɵfw = reducer$i;
    exports.ɵfx = PageMetaResolver;
    exports.ɵfy = CouponSearchPageResolver;
    exports.ɵfz = PageMetaResolver;
    exports.ɵg = TEST_CONFIG_COOKIE_NAME;
    exports.ɵga = addExternalRoutesFactory;
    exports.ɵgb = getReducers$6;
    exports.ɵgc = reducer$d;
    exports.ɵgd = reducerToken$6;
    exports.ɵge = reducerProvider$6;
    exports.ɵgf = CustomSerializer;
    exports.ɵgg = effects$6;
    exports.ɵgh = RouterEffects;
    exports.ɵgi = siteContextStoreConfigFactory;
    exports.ɵgj = SiteContextStoreModule;
    exports.ɵgk = getReducers$2;
    exports.ɵgl = reducerToken$2;
    exports.ɵgm = reducerProvider$2;
    exports.ɵgn = effects$3;
    exports.ɵgo = LanguagesEffects;
    exports.ɵgp = CurrenciesEffects;
    exports.ɵgq = BaseSiteEffects;
    exports.ɵgr = reducer$7;
    exports.ɵgs = reducer$6;
    exports.ɵgt = reducer$5;
    exports.ɵgu = defaultSiteContextConfigFactory;
    exports.ɵgv = initializeContext;
    exports.ɵgw = contextServiceProviders;
    exports.ɵgx = SiteContextRoutesHandler;
    exports.ɵgy = SiteContextUrlSerializer;
    exports.ɵgz = siteContextParamsProviders;
    exports.ɵh = configFromCookieFactory;
    exports.ɵha = baseSiteConfigValidator;
    exports.ɵhb = interceptors$4;
    exports.ɵhc = CmsTicketInterceptor;
    exports.ɵhd = StoreFinderStoreModule;
    exports.ɵhe = getReducers$a;
    exports.ɵhf = reducerToken$a;
    exports.ɵhg = reducerProvider$a;
    exports.ɵhh = effects$9;
    exports.ɵhi = FindStoresEffect;
    exports.ɵhj = ViewAllStoresEffect;
    exports.ɵhk = defaultStoreFinderConfig;
    exports.ɵhl = UserStoreModule;
    exports.ɵhm = getReducers$b;
    exports.ɵhn = reducerToken$b;
    exports.ɵho = reducerProvider$b;
    exports.ɵhp = clearUserState;
    exports.ɵhq = metaReducers$5;
    exports.ɵhr = effects$a;
    exports.ɵhs = BillingCountriesEffect;
    exports.ɵht = ClearMiscsDataEffect;
    exports.ɵhu = ConsignmentTrackingEffects;
    exports.ɵhv = CustomerCouponEffects;
    exports.ɵhw = DeliveryCountriesEffects;
    exports.ɵhx = NotificationPreferenceEffects;
    exports.ɵhy = OrderDetailsEffect;
    exports.ɵhz = OrderReturnRequestEffect;
    exports.ɵi = initConfig;
    exports.ɵia = UserPaymentMethodsEffects;
    exports.ɵib = ProductInterestsEffect;
    exports.ɵic = RegionsEffects;
    exports.ɵid = ReplenishmentOrderDetailsEffect;
    exports.ɵie = ResetPasswordEffects;
    exports.ɵif = TitlesEffects;
    exports.ɵig = UserAddressesEffects;
    exports.ɵih = UserConsentsEffect;
    exports.ɵii = UserDetailsEffects;
    exports.ɵij = UserOrdersEffect;
    exports.ɵik = UserRegisterEffects;
    exports.ɵil = UserReplenishmentOrdersEffect;
    exports.ɵim = ForgotPasswordEffects;
    exports.ɵin = UpdateEmailEffects;
    exports.ɵio = UpdatePasswordEffects;
    exports.ɵip = UserNotificationPreferenceConnector;
    exports.ɵiq = UserCostCenterEffects;
    exports.ɵir = reducer$B;
    exports.ɵis = reducer$y;
    exports.ɵit = reducer$l;
    exports.ɵiu = reducer$z;
    exports.ɵiv = reducer$s;
    exports.ɵiw = reducer$C;
    exports.ɵix = reducer$q;
    exports.ɵiy = reducer$D;
    exports.ɵiz = reducer$r;
    exports.ɵj = anonymousConsentsStoreConfigFactory;
    exports.ɵja = reducer$o;
    exports.ɵjb = reducer$x;
    exports.ɵjc = reducer$u;
    exports.ɵjd = reducer$w;
    exports.ɵje = reducer$m;
    exports.ɵjf = reducer$n;
    exports.ɵjg = reducer$p;
    exports.ɵjh = reducer$t;
    exports.ɵji = reducer$A;
    exports.ɵjj = reducer$v;
    exports.ɵk = AnonymousConsentsStoreModule;
    exports.ɵl = TRANSFER_STATE_META_REDUCER;
    exports.ɵm = STORAGE_SYNC_META_REDUCER;
    exports.ɵn = stateMetaReducers;
    exports.ɵo = getStorageSyncReducer;
    exports.ɵp = getTransferStateReducer;
    exports.ɵq = getReducers$3;
    exports.ɵr = reducerToken$3;
    exports.ɵs = reducerProvider$3;
    exports.ɵt = clearAnonymousConsentTemplates;
    exports.ɵu = metaReducers;
    exports.ɵv = effects$2;
    exports.ɵw = AnonymousConsentsEffects;
    exports.ɵx = UrlParsingService;
    exports.ɵy = RoutingParamsService;
    exports.ɵz = loaderReducer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-core.umd.js.map
