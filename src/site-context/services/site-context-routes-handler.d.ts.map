{"version":3,"file":"site-context-routes-handler.d.ts","sources":["site-context-routes-handler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Injector, OnDestroy } from '@angular/core';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\nexport declare class SiteContextRoutesHandler implements OnDestroy {\n    private siteContextParams;\n    private serializer;\n    private injector;\n    constructor(siteContextParams: SiteContextParamsService, serializer: SiteContextUrlSerializer, injector: Injector);\n    private subscription;\n    private contextValues;\n    private router;\n    private location;\n    /**\n     * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n     * - `subscribeChanges` method triggers a navigation on update of site context state\n     * - `subscribeRouting` method updates the site context state on navigation\n     */\n    private isNavigating;\n    /**\n     * Initializes the two-way synchronization between the site context state and the URL.\n     *\n     * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n     */\n    init(): Promise<void>;\n    /**\n     * After each change of the site context state, it modifies the current URL in place.\n     * But it happens only for the parameters configured to be persisted in the URL.\n     */\n    private subscribeChanges;\n    /**\n     * After each Angular NavigationStart event it updates the site context state based on\n     * site context params encoded in the anticipated URL.\n     *\n     * In particular, it's responsible for initializing the state of the context params\n     * on page start, reading the values from the URL.\n     *\n     * @param onContextInitialized notify that the initialization of the context was done based on the URL\n     */\n    private subscribeRouting;\n    /**\n     * Updates the site context state based on the context params encoded in the given URL\n     *\n     * @param url URL with encoded context params\n     */\n    private setContextParamsFromRoute;\n    ngOnDestroy(): void;\n}\n"]}