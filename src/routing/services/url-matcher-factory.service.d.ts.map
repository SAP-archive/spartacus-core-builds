{"version":3,"file":"url-matcher-factory.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/routing/services/url-matcher-factory.service.d.ts"],"sourcesContent":["import { UrlMatcher } from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\nexport declare class UrlMatcherFactoryService {\n    protected globService: GlobService;\n    constructor(globService: GlobService);\n    /**\n     * Returns a matcher that is always fails\n     */\n    getFalsyUrlMatcher(): UrlMatcher;\n    /**\n     * Returns a matcher for given list of paths\n     */\n    getMultiplePathsUrlMatcher(paths: string[]): UrlMatcher;\n    /**\n     * Similar to Angular's defaultUrlMatcher. Differences:\n     * - the `path` comes from function's argument, not from `route.path`\n     * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n     */\n    protected getPathUrlMatcher(path?: string): UrlMatcher;\n    /**\n     * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n     */\n    getOppositeUrlMatcher(originalMatcher: UrlMatcher): UrlMatcher;\n    /**\n     * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n     */\n    getGlobUrlMatcher(globPatterns: string[]): UrlMatcher;\n}\n"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;"}