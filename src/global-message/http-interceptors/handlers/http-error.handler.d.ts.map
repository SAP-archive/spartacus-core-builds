{"version":3,"file":"http-error.handler.d.ts","sources":["http-error.handler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Applicable, Priority } from '../../../util/applicable';\nexport declare abstract class HttpErrorHandler implements Applicable {\n    protected globalMessageService: GlobalMessageService;\n    constructor(globalMessageService: GlobalMessageService);\n    /**\n     * The http response status number which is handled by this handler.\n     * Implementations can set the response status number, i.e. 404, so that\n     * the handler can be found by the error interceptor.\n     */\n    responseStatus?: number;\n    /**\n     * Handles the error response for the respose status that is register for the handler\n     * @param { HttpRequest<any> } request : http request\n     * @param { HttpErrorResponse } errorResponse : Http error response\n     */\n    abstract handleError(request: HttpRequest<any>, errorResponse: HttpErrorResponse): void;\n    /**\n     * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n     * a priority can be added to distinguish multiple handles for the same response status.\n     */\n    hasMatch(errorResponse: HttpErrorResponse): boolean;\n    abstract getPriority?(): Priority;\n}\n"]}