import { __values } from "tslib";
import { createSelector } from '@ngrx/store';
import { PageType } from '../../../model/cms.model';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var getPageEntitiesSelector = function (state) { return state.pageData.entities; };
var ɵ0 = getPageEntitiesSelector;
var getIndexByType = function (index, type) {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
var ɵ1 = getIndexByType;
var getPageComponentTypesSelector = function (page) {
    var e_1, _a, e_2, _b;
    var componentTypes = new Set();
    if (page && page.slots) {
        try {
            for (var _c = __values(Object.keys(page.slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var slot = _d.value;
                try {
                    for (var _e = (e_2 = void 0, __values(page.slots[slot].components || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var component = _f.value;
                        componentTypes.add(component.flexType);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return Array.from(componentTypes);
};
var ɵ2 = getPageComponentTypesSelector;
var ɵ3 = function (state) { return state.page; };
export var getPageState = createSelector(getCmsState, ɵ3);
var ɵ4 = function (page) { return page.index; };
export var getPageStateIndex = createSelector(getPageState, ɵ4);
export var getPageStateIndexEntityLoaderState = function (pageContext) {
    return createSelector(getPageStateIndex, function (index) {
        return getIndexByType(index, pageContext.type);
    });
};
export var getPageStateIndexLoaderState = function (pageContext) {
    return createSelector(getPageStateIndexEntityLoaderState(pageContext), function (indexState) {
        return StateUtils.entityLoaderStateSelector(indexState, pageContext.id);
    });
};
export var getPageStateIndexValue = function (pageContext) {
    return createSelector(getPageStateIndexLoaderState(pageContext), function (entity) {
        return StateUtils.loaderValueSelector(entity);
    });
};
export var getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
export var getPageData = function (pageContext) {
    return createSelector(getPageEntities, getPageStateIndexValue(pageContext), function (entities, indexValue) {
        return entities[indexValue];
    });
};
export var getPageComponentTypes = function (pageContext) {
    return createSelector(getPageData(pageContext), function (pageData) {
        return getPageComponentTypesSelector(pageData);
    });
};
export var getCurrentSlotSelectorFactory = function (pageContext, position) {
    return createSelector(getPageData(pageContext), function (entity) {
        if (entity) {
            return entity.slots[position] || { components: [] };
        }
    });
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9wYWdlLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUl4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsSUFBTSx1QkFBdUIsR0FBRyxVQUFDLEtBQWdCLElBQUssT0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBdkIsQ0FBdUIsQ0FBQzs7QUFDOUUsSUFBTSxjQUFjLEdBQUcsVUFDckIsS0FBZ0IsRUFDaEIsSUFBYztJQUVkLFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0IsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDO1NBQ3ZCO1FBQ0QsS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO0tBQ0Y7SUFDRCxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzFCLENBQUMsQ0FBQzs7QUFFRixJQUFNLDZCQUE2QixHQUE2QixVQUM5RCxJQUFVOztJQUVWLElBQU0sY0FBYyxHQUFHLElBQUksR0FBRyxFQUFVLENB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RUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNyRDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBQYWdlVHlwZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5pbXBvcnQgeyBQYWdlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL3JvdXRpbmcnO1xuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uLy4uL21vZGVsL2NvbnRlbnQtc2xvdC1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IENtc1N0YXRlLCBJbmRleFR5cGUsIFBhZ2VTdGF0ZSwgU3RhdGVXaXRoQ21zIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcbmltcG9ydCB7IGdldENtc1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XG5cbmNvbnN0IGdldFBhZ2VFbnRpdGllc1NlbGVjdG9yID0gKHN0YXRlOiBQYWdlU3RhdGUpID0+IHN0YXRlLnBhZ2VEYXRhLmVudGl0aWVzO1xuY29uc3QgZ2V0SW5kZXhCeVR5cGUgPSAoXG4gIGluZGV4OiBJbmRleFR5cGUsXG4gIHR5cGU6IFBhZ2VUeXBlXG4pOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPHN0cmluZz4gPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFBhZ2VUeXBlLkNPTlRFTlRfUEFHRToge1xuICAgICAgcmV0dXJuIGluZGV4LmNvbnRlbnQ7XG4gICAgfVxuICAgIGNhc2UgUGFnZVR5cGUuUFJPRFVDVF9QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXgucHJvZHVjdDtcbiAgICB9XG4gICAgY2FzZSBQYWdlVHlwZS5DQVRFR09SWV9QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXguY2F0ZWdvcnk7XG4gICAgfVxuICAgIGNhc2UgUGFnZVR5cGUuQ0FUQUxPR19QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXguY2F0YWxvZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgZW50aXRpZXM6IHt9IH07XG59O1xuXG5jb25zdCBnZXRQYWdlQ29tcG9uZW50VHlwZXNTZWxlY3RvcjogKHBhZ2U6IFBhZ2UpID0+IHN0cmluZ1tdID0gKFxuICBwYWdlOiBQYWdlXG4pID0+IHtcbiAgY29uc3QgY29tcG9uZW50VHlwZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgaWYgKHBhZ2UgJiYgcGFnZS5zbG90cykge1xuICAgIGZvciAoY29uc3Qgc2xvdCBvZiBPYmplY3Qua2V5cyhwYWdlLnNsb3RzKSkge1xuICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgcGFnZS5zbG90c1tzbG90XS5jb21wb25lbnRzIHx8IFtdKSB7XG4gICAgICAgIGNvbXBvbmVudFR5cGVzLmFkZChjb21wb25lbnQuZmxleFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShjb21wb25lbnRUeXBlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFnZVN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDbXMsXG4gIFBhZ2VTdGF0ZVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENtc1N0YXRlLCAoc3RhdGU6IENtc1N0YXRlKSA9PiBzdGF0ZS5wYWdlKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VTdGF0ZUluZGV4OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDbXMsXG4gIEluZGV4VHlwZVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VTdGF0ZSwgKHBhZ2U6IFBhZ2VTdGF0ZSkgPT4gcGFnZS5pbmRleCk7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlU3RhdGVJbmRleEVudGl0eUxvYWRlclN0YXRlID0gKFxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPHN0cmluZz4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VTdGF0ZUluZGV4LCAoaW5kZXg6IEluZGV4VHlwZSkgPT5cbiAgICBnZXRJbmRleEJ5VHlwZShpbmRleCwgcGFnZUNvbnRleHQudHlwZSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VTdGF0ZUluZGV4TG9hZGVyU3RhdGUgPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8c3RyaW5nPj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0UGFnZVN0YXRlSW5kZXhFbnRpdHlMb2FkZXJTdGF0ZShwYWdlQ29udGV4dCksXG4gICAgKGluZGV4U3RhdGUpID0+XG4gICAgICBTdGF0ZVV0aWxzLmVudGl0eUxvYWRlclN0YXRlU2VsZWN0b3IoaW5kZXhTdGF0ZSwgcGFnZUNvbnRleHQuaWQpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlU3RhdGVJbmRleFZhbHVlID0gKFxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBzdHJpbmc+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VTdGF0ZUluZGV4TG9hZGVyU3RhdGUocGFnZUNvbnRleHQpLCAoZW50aXR5KSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcjxzdHJpbmc+KGVudGl0eSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VFbnRpdGllczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICB7IFtpZDogc3RyaW5nXTogUGFnZSB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UGFnZVN0YXRlLCBnZXRQYWdlRW50aXRpZXNTZWxlY3Rvcik7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlRGF0YSA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgUGFnZT4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0UGFnZUVudGl0aWVzLFxuICAgIGdldFBhZ2VTdGF0ZUluZGV4VmFsdWUocGFnZUNvbnRleHQpLFxuICAgIChlbnRpdGllczogeyBbaWQ6IHN0cmluZ106IFBhZ2UgfSwgaW5kZXhWYWx1ZTogc3RyaW5nKSA9PlxuICAgICAgZW50aXRpZXNbaW5kZXhWYWx1ZV1cbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VDb21wb25lbnRUeXBlcyA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgc3RyaW5nW10+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VEYXRhKHBhZ2VDb250ZXh0KSwgKHBhZ2VEYXRhKSA9PlxuICAgIGdldFBhZ2VDb21wb25lbnRUeXBlc1NlbGVjdG9yKHBhZ2VEYXRhKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudFNsb3RTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCxcbiAgcG9zaXRpb246IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENvbnRlbnRTbG90RGF0YT4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0UGFnZURhdGEocGFnZUNvbnRleHQpLCAoZW50aXR5KSA9PiB7XG4gICAgaWYgKGVudGl0eSkge1xuICAgICAgcmV0dXJuIGVudGl0eS5zbG90c1twb3NpdGlvbl0gfHwgeyBjb21wb25lbnRzOiBbXSB9O1xuICAgIH1cbiAgfSk7XG59O1xuIl19