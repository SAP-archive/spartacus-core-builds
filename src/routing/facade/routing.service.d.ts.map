{"version":3,"file":"routing.service.d.ts","sources":["routing.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NavigationExtras } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingParamsService } from './routing-params.service';\nexport declare class RoutingService {\n    protected store: Store<RouterState>;\n    protected winRef: WindowRef;\n    protected semanticPathService: SemanticPathService;\n    protected routingParamsService: RoutingParamsService;\n    constructor(store: Store<RouterState>, winRef: WindowRef, semanticPathService: SemanticPathService, routingParamsService: RoutingParamsService);\n    /**\n     * Get the list of all parameters of the full route. This includes\n     * active child routes.\n     */\n    getParams(): Observable<{\n        [key: string]: string;\n    }>;\n    /**\n     * Get the current router state\n     */\n    getRouterState(): Observable<RouterState>;\n    /**\n     * Get the `PageContext` from the state\n     */\n    getPageContext(): Observable<PageContext>;\n    /**\n     * Get the next `PageContext` from the state\n     */\n    getNextPageContext(): Observable<PageContext>;\n    /**\n     * Get the `isNavigating` info from the state\n     */\n    isNavigating(): Observable<boolean>;\n    /**\n     * Navigation with a new state into history\n     * @param commands: url commands\n     * @param query\n     * @param extras: Represents the extra options used during navigation.\n     */\n    go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void;\n    /**\n     * Navigation using URL\n     * @param url\n     */\n    goByUrl(url: string): void;\n    /**\n     * Navigating back\n     */\n    back(): void;\n    /**\n     * Navigating forward\n     */\n    forward(): void;\n    /**\n     * Navigation with a new state into history\n     * @param path\n     * @param query\n     * @param extras: Represents the extra options used during navigation.\n     */\n    protected navigate(path: any[], query?: object, extras?: NavigationExtras): void;\n}\n"]}