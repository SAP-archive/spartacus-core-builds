import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DefaultUrlSerializer } from '@angular/router';
import { SiteContextParamsService } from './site-context-params.service';
const UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts
let SiteContextUrlSerializer = class SiteContextUrlSerializer extends DefaultUrlSerializer {
    constructor(siteContextParams) {
        super();
        this.siteContextParams = siteContextParams;
    }
    get urlEncodingParameters() {
        return this.siteContextParams.getUrlEncodingParameters();
    }
    get hasContextInRoutes() {
        return this.urlEncodingParameters.length > 0;
    }
    parse(url) {
        if (this.hasContextInRoutes) {
            const urlWithParams = this.urlExtractContextParameters(url);
            const parsed = super.parse(urlWithParams.url);
            this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);
            return parsed;
        }
        else {
            return super.parse(url);
        }
    }
    urlExtractContextParameters(url) {
        const [, urlPart, queryPart] = url.match(UrlSplit);
        const segments = urlPart.split('/');
        if (segments[0] === '') {
            segments.shift();
        }
        const params = {};
        let paramId = 0;
        let segmentId = 0;
        while (paramId < this.urlEncodingParameters.length &&
            segmentId < segments.length) {
            const paramName = this.urlEncodingParameters[paramId];
            const paramValues = this.siteContextParams.getParamValues(paramName);
            if (paramValues.includes(segments[segmentId])) {
                params[paramName] = segments[segmentId];
                segmentId++;
            }
            paramId++;
        }
        url = segments.slice(Object.keys(params).length).join('/') + queryPart;
        return { url, params };
    }
    urlTreeIncludeContextParameters(urlTree, params) {
        urlTree.siteContext = params;
    }
    serialize(tree) {
        const params = this.urlTreeExtractContextParameters(tree);
        const url = super.serialize(tree);
        const serialized = this.urlIncludeContextParameters(url, params);
        return serialized;
    }
    urlTreeExtractContextParameters(urlTree) {
        return urlTree.siteContext ? urlTree.siteContext : {};
    }
    urlIncludeContextParameters(url, params) {
        const contextRoutePart = this.urlEncodingParameters
            .map((param) => {
            return params[param]
                ? params[param]
                : this.siteContextParams.getValue(param);
        })
            .join('/');
        return contextRoutePart + url;
    }
};
SiteContextUrlSerializer.ctorParameters = () => [
    { type: SiteContextParamsService }
];
SiteContextUrlSerializer = __decorate([
    Injectable()
], SiteContextUrlSerializer);
export { SiteContextUrlSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS1jb250ZXh0LXVybC1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3NpdGUtY29udGV4dC9zZXJ2aWNlcy9zaXRlLWNvbnRleHQtdXJsLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFXLE1BQU0saUJBQWlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFVekUsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLENBQUMsdURBQXVEO0FBR3pGLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXlCLFNBQVEsb0JBQW9CO0lBU2hFLFlBQW9CLGlCQUEyQztRQUM3RCxLQUFLLEVBQUUsQ0FBQztRQURVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7SUFFL0QsQ0FBQztJQVZELElBQVkscUJBQXFCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDM0QsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQU1ELEtBQUssQ0FBQyxHQUFXO1FBQ2YsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBMkIsQ0FBQztZQUN4RSxJQUFJLENBQUMsK0JBQStCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRSxPQUFPLE1B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O1NBdEZZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFNpdGVDb250ZXh0UGFyYW1zU2VydmljZSB9IGZyb20gJy4vc2l0ZS1jb250ZXh0LXBhcmFtcy5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBQYXJhbVZhbHVlc01hcCB7XG4gIFtuYW1lOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXJsVHJlZVdpdGhTaXRlQ29udGV4dCBleHRlbmRzIFVybFRyZWUge1xuICBzaXRlQ29udGV4dD86IFBhcmFtVmFsdWVzTWFwO1xufVxuXG5jb25zdCBVcmxTcGxpdCA9IC8oXlteIz9dKikoLiopLzsgLy8gdXNlZCB0byBzcGxpdCB1cmwgaW50byBwYXRoIGFuZCBxdWVyeS9mcmFnbWVudCBwYXJ0c1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2l0ZUNvbnRleHRVcmxTZXJpYWxpemVyIGV4dGVuZHMgRGVmYXVsdFVybFNlcmlhbGl6ZXIge1xuICBwcml2YXRlIGdldCB1cmxFbmNvZGluZ1BhcmFtZXRlcnMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLnNpdGVDb250ZXh0UGFyYW1zLmdldFVybEVuY29kaW5nUGFyYW1ldGVycygpO1xuICB9XG5cbiAgZ2V0IGhhc0NvbnRleHRJblJvdXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy51cmxFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2l0ZUNvbnRleHRQYXJhbXM6IFNpdGVDb250ZXh0UGFyYW1zU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwYXJzZSh1cmw6IHN0cmluZyk6IFVybFRyZWVXaXRoU2l0ZUNvbnRleHQge1xuICAgIGlmICh0aGlzLmhhc0NvbnRleHRJblJvdXRlcykge1xuICAgICAgY29uc3QgdXJsV2l0aFBhcmFtcyA9IHRoaXMudXJsRXh0cmFjdENvbnRleHRQYXJhbWV0ZXJzKHVybCk7XG4gICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZSh1cmxXaXRoUGFyYW1zLnVybCkgYXMgVXJsVHJlZVdpdGhTaXRlQ29udGV4dDtcbiAgICAgIHRoaXMudXJsVHJlZUluY2x1ZGVDb250ZXh0UGFyYW1ldGVycyhwYXJzZWQsIHVybFdpdGhQYXJhbXMucGFyYW1zKTtcbiAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdXBlci5wYXJzZSh1cmwpO1xuICAgIH1cbiAgfVxuXG4gIHVybEV4dHJhY3RDb250ZXh0UGFyYW1ldGVycyhcbiAgICB1cmw6IHN0cmluZ1xuICApOiB7IHVybDogc3RyaW5nOyBwYXJhbXM6IFBhcmFtVmFsdWVzTWFwIH0ge1xuICAgIGNvbnN0IFssIHVybFBhcnQsIHF1ZXJ5UGFydF0gPSB1cmwubWF0Y2goVXJsU3BsaXQpO1xuXG4gICAgY29uc3Qgc2VnbWVudHMgPSB1cmxQYXJ0LnNwbGl0KCcvJyk7XG4gICAgaWYgKHNlZ21lbnRzWzBdID09PSAnJykge1xuICAgICAgc2VnbWVudHMuc2hpZnQoKTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0ge307XG5cbiAgICBsZXQgcGFyYW1JZCA9IDA7XG4gICAgbGV0IHNlZ21lbnRJZCA9IDA7XG4gICAgd2hpbGUgKFxuICAgICAgcGFyYW1JZCA8IHRoaXMudXJsRW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCAmJlxuICAgICAgc2VnbWVudElkIDwgc2VnbWVudHMubGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBwYXJhbU5hbWUgPSB0aGlzLnVybEVuY29kaW5nUGFyYW1ldGVyc1twYXJhbUlkXTtcbiAgICAgIGNvbnN0IHBhcmFtVmFsdWVzID0gdGhpcy5zaXRlQ29udGV4dFBhcmFtcy5nZXRQYXJhbVZhbHVlcyhwYXJhbU5hbWUpO1xuXG4gICAgICBpZiAocGFyYW1WYWx1ZXMuaW5jbHVkZXMoc2VnbWVudHNbc2VnbWVudElkXSkpIHtcbiAgICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBzZWdtZW50c1tzZWdtZW50SWRdO1xuICAgICAgICBzZWdtZW50SWQrKztcbiAgICAgIH1cbiAgICAgIHBhcmFtSWQrKztcbiAgICB9XG5cbiAgICB1cmwgPSBzZWdtZW50cy5zbGljZShPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCkuam9pbignLycpICsgcXVlcnlQYXJ0O1xuICAgIHJldHVybiB7IHVybCwgcGFyYW1zIH07XG4gIH1cblxuICBwcml2YXRlIHVybFRyZWVJbmNsdWRlQ29udGV4dFBhcmFtZXRlcnMoXG4gICAgdXJsVHJlZTogVXJsVHJlZVdpdGhTaXRlQ29udGV4dCxcbiAgICBwYXJhbXM6IFBhcmFtVmFsdWVzTWFwXG4gICkge1xuICAgIHVybFRyZWUuc2l0ZUNvbnRleHQgPSBwYXJhbXM7XG4gIH1cblxuICBzZXJpYWxpemUodHJlZTogVXJsVHJlZVdpdGhTaXRlQ29udGV4dCk6IHN0cmluZyB7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy51cmxUcmVlRXh0cmFjdENvbnRleHRQYXJhbWV0ZXJzKHRyZWUpO1xuICAgIGNvbnN0IHVybCA9IHN1cGVyLnNlcmlhbGl6ZSh0cmVlKTtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gdGhpcy51cmxJbmNsdWRlQ29udGV4dFBhcmFtZXRlcnModXJsLCBwYXJhbXMpO1xuICAgIHJldHVybiBzZXJpYWxpemVkO1xuICB9XG5cbiAgdXJsVHJlZUV4dHJhY3RDb250ZXh0UGFyYW1ldGVycyhcbiAgICB1cmxUcmVlOiBVcmxUcmVlV2l0aFNpdGVDb250ZXh0XG4gICk6IFBhcmFtVmFsdWVzTWFwIHtcbiAgICByZXR1cm4gdXJsVHJlZS5zaXRlQ29udGV4dCA/IHVybFRyZWUuc2l0ZUNvbnRleHQgOiB7fTtcbiAgfVxuXG4gIHByaXZhdGUgdXJsSW5jbHVkZUNvbnRleHRQYXJhbWV0ZXJzKHVybDogc3RyaW5nLCBwYXJhbXM6IFBhcmFtVmFsdWVzTWFwKSB7XG4gICAgY29uc3QgY29udGV4dFJvdXRlUGFydCA9IHRoaXMudXJsRW5jb2RpbmdQYXJhbWV0ZXJzXG4gICAgICAubWFwKChwYXJhbSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFyYW1zW3BhcmFtXVxuICAgICAgICAgID8gcGFyYW1zW3BhcmFtXVxuICAgICAgICAgIDogdGhpcy5zaXRlQ29udGV4dFBhcmFtcy5nZXRWYWx1ZShwYXJhbSk7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJy8nKTtcblxuICAgIHJldHVybiBjb250ZXh0Um91dGVQYXJ0ICsgdXJsO1xuICB9XG59XG4iXX0=