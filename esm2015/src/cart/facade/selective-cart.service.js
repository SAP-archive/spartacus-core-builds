import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { BaseSiteService } from '../../site-context/facade/base-site.service';
import { UserService } from '../../user/facade/user.service';
import { CartConfigService } from '../services/cart-config.service';
import { MultiCartService } from './multi-cart.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../user/facade/user.service";
import * as i3 from "../../auth/facade/auth.service";
import * as i4 from "./multi-cart.service";
import * as i5 from "../../site-context/facade/base-site.service";
import * as i6 from "../services/cart-config.service";
export class SelectiveCartService {
    constructor(store, userService, authService, multiCartService, baseSiteService, cartConfigService) {
        this.store = store;
        this.userService = userService;
        this.authService = authService;
        this.multiCartService = multiCartService;
        this.baseSiteService = baseSiteService;
        this.cartConfigService = cartConfigService;
        this.cartId$ = new BehaviorSubject(undefined);
        this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
        this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
        this.cartSelector$ = this.cartId$.pipe(switchMap((cartId) => {
            this.cartId = cartId;
            return this.multiCartService.getCartEntity(cartId);
        }));
        combineLatest([
            this.userService.get(),
            this.baseSiteService.getActive(),
        ]).subscribe(([user, activeBaseSite]) => {
            if (user && user.customerId && activeBaseSite) {
                this.customerId = user.customerId;
                this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);
            }
            else if (user && !user.customerId) {
                this.cartId$.next(undefined);
            }
        });
        this.authService.getOccUserId().subscribe((userId) => {
            this.userId = userId;
            if (this.isJustLoggedIn(userId)) {
                this.load();
            }
            this.previousUserId = userId;
        });
        this.selectiveCart$ = this.cartSelector$.pipe(map((cartEntity) => {
            return {
                cart: cartEntity.value,
                loading: cartEntity.loading,
                loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
            };
        }), filter(({ loading }) => !loading), tap(({ cart, loaded }) => {
            if (this.cartId && this.isEmpty(cart) && !loaded) {
                this.load();
            }
        }), map(({ cart }) => (cart ? cart : {})), shareReplay({ bufferSize: 1, refCount: true }));
    }
    getCart() {
        return this.selectiveCart$;
    }
    getEntries() {
        return this.multiCartService.getEntries(this.cartId);
    }
    getLoaded() {
        return this.cartSelector$.pipe(map((cart) => (cart.success || cart.error) && !cart.loading));
    }
    load() {
        if (this.isLoggedIn(this.userId) && this.cartId) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: this.cartId,
            });
        }
    }
    addEntry(productCode, quantity) {
        let loadAttempted = false;
        this.cartSelector$
            .pipe(filter(() => !loadAttempted), switchMap((cartState) => {
            if (this.isEmpty(cartState.value) && !cartState.loading) {
                loadAttempted = true;
                this.load();
            }
            return of(cartState);
        }), filter((cartState) => !this.isEmpty(cartState.value)), take(1))
            .subscribe(() => {
            this.multiCartService.addEntry(this.userId, this.cartId, productCode, quantity);
        });
    }
    removeEntry(entry) {
        this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
    }
    updateEntry(entryNumber, quantity) {
        this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
    }
    getEntry(productCode) {
        return this.multiCartService.getEntry(this.cartId, productCode);
    }
    /**
     * Indicates if selectiveCart feature is enabled based on cart configuration.
     */
    isEnabled() {
        return this.cartConfigService.isSelectiveCartEnabled();
    }
    isEmpty(cart) {
        return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
    }
    isJustLoggedIn(userId) {
        return (this.isLoggedIn(userId) &&
            this.previousUserId !== userId && // *just* logged in
            this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
        );
    }
    isLoggedIn(userId) {
        return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;
    }
}
SelectiveCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SelectiveCartService_Factory() { return new SelectiveCartService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.MultiCartService), i0.ɵɵinject(i5.BaseSiteService), i0.ɵɵinject(i6.CartConfigService)); }, token: SelectiveCartService, providedIn: "root" });
SelectiveCartService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SelectiveCartService.ctorParameters = () => [
    { type: Store },
    { type: UserService },
    { type: AuthService },
    { type: MultiCartService },
    { type: BaseSiteService },
    { type: CartConfigService }
];
//# sourceMappingURL=data:application/json;base64,