{"version":3,"file":"event.service.d.ts","sources":["event.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\nexport declare class EventService {\n    /**\n     * The various events meta are collected in a map, stored by the event type class\n     */\n    private eventsMeta;\n    /**\n     * Register an event source for the given event type.\n     *\n     * CAUTION: To avoid memory leaks, the returned teardown function should be called\n     *  when the event source is no longer maintained by its creator\n     * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n     *\n     * @param eventType the event type\n     * @param source$ an observable that represents the source\n     *\n     * @returns a teardown function which unregisters the given event source\n     */\n    register<T>(eventType: Type<T>, source$: Observable<T>): () => void;\n    /**\n     * Returns a stream of events for the given event type\n     * @param eventTypes event type\n     */\n    get<T>(eventType: Type<T>): Observable<T>;\n    /**\n     * Dispatches an instance of an individual event.\n     */\n    dispatch(event: Object): void;\n    /**\n     * Returns the input subject used to dispatch a single event.\n     * The subject is created on demand, when it's needed for the first time.\n     * @param eventType type of event\n     */\n    private getInputSubject;\n    /**\n     * Returns the event meta object for the given event type\n     */\n    private getEventMeta;\n    /**\n     * Creates the event meta object for the given event type\n     */\n    private createEventMeta;\n    /**\n     * Checks if the event type is a valid type (is a class with constructor).\n     *\n     * Should be used only in dev mode.\n     */\n    private validateEventType;\n    /**\n     * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n     *\n     * Should be used only in dev mode.\n     */\n    private getValidatedEventStream;\n}\n"]}