import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GlobalMessageService, GlobalMessageType, } from '../../../global-message/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserReplenishmentOrderConnector } from '../../connectors/replenishment-order/user-replenishment-order.connector';
import { UserActions } from '../actions/index';
export class ReplenishmentOrderDetailsEffect {
    constructor(actions$, replenishmentOrderConnector, globalMessageService) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.globalMessageService = globalMessageService;
        this.loadReplenishmentOrderDetails$ = this.actions$.pipe(ofType(UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .load(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => {
                return new UserActions.LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
            }), catchError((error) => of(new UserActions.LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));
        }));
        this.cancelReplenishmentOrder$ = this.actions$.pipe(ofType(UserActions.CANCEL_REPLENISHMENT_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => new UserActions.CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError((error) => {
                var _a;
                (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new UserActions.CancelReplenishmentOrderFail(normalizeHttpError(error)));
            }));
        }));
    }
}
ReplenishmentOrderDetailsEffect.decorators = [
    { type: Injectable }
];
ReplenishmentOrderDetailsEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserReplenishmentOrderConnector },
    { type: GlobalMessageService }
];
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "loadReplenishmentOrderDetails$", void 0);
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "cancelReplenishmentOrder$", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9yZXBsZW5pc2htZW50LW9yZGVyLWRldGFpbHMuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsaUJBQWlCLEdBQ2xCLE1BQU0sK0JBQStCLENBQUM7QUFFdkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0seUVBQXlFLENBQUM7QUFDMUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRy9DLE1BQU0sT0FBTywrQkFBK0I7SUFnRTFDLFlBQ1UsUUFBaUIsRUFDakIsMkJBQTRELEVBQzVELG9CQUEwQztRQUYxQyxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBaUM7UUFDNUQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQWpFcEQsbUNBQThCLEdBRTFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLGdDQUFnQyxDQUFDLEVBQ3BELEdBQUcsQ0FBQyxDQUFDLE1BQWlELEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDMUUsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsMkJBQTJCO2lCQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7aUJBQ3BELElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxrQkFBc0MsRUFBRSxFQUFFO2dCQUM3QyxPQUFPLElBQUksV0FBVyxDQUFDLG9DQUFvQyxDQUN6RCxrQkFBa0IsQ0FDbkIsQ0FBQztZQUNKLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FDQSxJQUFJLFdBQVcsQ0FBQyxpQ0FBaUMsQ0FDL0Msa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQ0YsQ0FDRixDQUNGLENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBR0YsOEJBQXlCLEdBRXJCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLDBCQUEwQixDQUFDLEVBQzlDLEdBQUcsQ0FBQyxDQUFDLE1BQTRDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDckUsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsMkJBQTJCO2lCQUNwQyx3QkFBd0IsQ0FDdkIsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsc0JBQXNCLENBQy9CO2lCQUNBLElBQUksQ0FDSCxHQUFHLENBQ0QsQ0FBQyxrQkFBc0MsRUFBRSxFQUFFLENBQ3pDLElBQUksV0FBVyxDQUFDLCtCQUErQixDQUM3QyxrQkFBa0IsQ0FDbkIsQ0FDSixFQUNELFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFOztnQkFDbkIsTUFBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsS0FBSywwQ0FBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FDM0IsR0FBRyxDQUFDLE9BQU8sRUFDWCxpQkFBaUIsQ0FBQyxjQUFjLENBQ2pDLEVBQ0Q7Z0JBRUYsT0FBTyxFQUFFLENBQ1AsSUFBSSxXQUFXLENBQUMsNEJBQTRCLENBQzFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQUM7WUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQU1DLENBQUM7OztZQXJFTCxVQUFVOzs7WUFaRixPQUFPO1lBU1AsK0JBQStCO1lBTHRDLG9CQUFvQjs7QUFXcEI7SUFEQyxNQUFNLEVBQUU7dUZBd0JQO0FBR0Y7SUFEQyxNQUFNLEVBQUU7a0ZBbUNQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIEdsb2JhbE1lc3NhZ2VTZXJ2aWNlLFxuICBHbG9iYWxNZXNzYWdlVHlwZSxcbn0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsLW1lc3NhZ2UvaW5kZXgnO1xuaW1wb3J0IHsgUmVwbGVuaXNobWVudE9yZGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcmVwbGVuaXNobWVudC1vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBub3JtYWxpemVIdHRwRXJyb3IgfSBmcm9tICcuLi8uLi8uLi91dGlsL25vcm1hbGl6ZS1odHRwLWVycm9yJztcbmltcG9ydCB7IFVzZXJSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL3JlcGxlbmlzaG1lbnQtb3JkZXIvdXNlci1yZXBsZW5pc2htZW50LW9yZGVyLmNvbm5lY3Rvcic7XG5pbXBvcnQgeyBVc2VyQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0VmZmVjdCB7XG4gIEBFZmZlY3QoKVxuICBsb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscyQ6IE9ic2VydmFibGU8XG4gICAgVXNlckFjdGlvbnMuUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0FjdGlvblxuICA+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5MT0FEX1JFUExFTklTSE1FTlRfT1JERVJfREVUQUlMUyksXG4gICAgbWFwKChhY3Rpb246IFVzZXJBY3Rpb25zLkxvYWRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgc3dpdGNoTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3JcbiAgICAgICAgLmxvYWQocGF5bG9hZC51c2VySWQsIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSlcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgbWFwKChyZXBsZW5pc2htZW50T3JkZXI6IFJlcGxlbmlzaG1lbnRPcmRlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVc2VyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc1N1Y2Nlc3MoXG4gICAgICAgICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICAgIG9mKFxuICAgICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNGYWlsKFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9KVxuICApO1xuXG4gIEBFZmZlY3QoKVxuICBjYW5jZWxSZXBsZW5pc2htZW50T3JkZXIkOiBPYnNlcnZhYmxlPFxuICAgIFVzZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb25cbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoVXNlckFjdGlvbnMuQ0FOQ0VMX1JFUExFTklTSE1FTlRfT1JERVIpLFxuICAgIG1hcCgoYWN0aW9uOiBVc2VyQWN0aW9ucy5DYW5jZWxSZXBsZW5pc2htZW50T3JkZXIpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvclxuICAgICAgICAuY2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKFxuICAgICAgICAgIHBheWxvYWQudXNlcklkLFxuICAgICAgICAgIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZVxuICAgICAgICApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIG1hcChcbiAgICAgICAgICAgIChyZXBsZW5pc2htZW50T3JkZXI6IFJlcGxlbmlzaG1lbnRPcmRlcikgPT5cbiAgICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgcmVwbGVuaXNobWVudE9yZGVyXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBlcnJvcj8uZXJyb3I/LmVycm9ycy5mb3JFYWNoKChlcnIpID0+XG4gICAgICAgICAgICAgIHRoaXMuZ2xvYmFsTWVzc2FnZVNlcnZpY2UuYWRkKFxuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIEdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0VSUk9SXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckZhaWwoXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSHR0cEVycm9yKGVycm9yKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgcmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yOiBVc2VyUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yLFxuICAgIHByaXZhdGUgZ2xvYmFsTWVzc2FnZVNlcnZpY2U6IEdsb2JhbE1lc3NhZ2VTZXJ2aWNlXG4gICkge31cbn1cbiJdfQ==