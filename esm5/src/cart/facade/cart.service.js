import { __decorate, __read } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { combineLatest } from 'rxjs';
import { debounceTime, filter, map, shareReplay, take, tap, } from 'rxjs/operators';
import { AuthService } from '../../auth/index';
import { OCC_CART_ID_CURRENT, OCC_USER_ID_ANONYMOUS, } from '../../occ/utils/occ-constants';
import * as DeprecatedCartActions from '../store/actions/cart.action';
import { CartActions } from '../store/actions/index';
import { CartSelectors } from '../store/selectors/index';
import { ActiveCartService } from './active-cart.service';
import { CartDataService } from './cart-data.service';
/**
 * @deprecated since version 1.4
 * Use ActiveCartService instead (API is almost the same)
 * From 1.4 version CartService uses ActiveCartService if it is available
 * Fixes and improvements will be only implemented in ActiveCartService
 */
var CartService = /** @class */ (function () {
    function CartService(store, cartData, authService, activeCartService) {
        var _this = this;
        this.store = store;
        this.cartData = cartData;
        this.authService = authService;
        this.activeCartService = activeCartService;
        this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
        this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
        this._activeCart$ = combineLatest([
            this.store.select(CartSelectors.getCartContent),
            this.store.select(CartSelectors.getCartLoading),
            this.authService.getUserToken(),
            this.store.select(CartSelectors.getCartLoaded),
        ]).pipe(
        // combineLatest emits multiple times on each property update instead of one emit
        // additionally dispatching actions that changes selectors used here needs to happen in order
        // for this asyncScheduler is used here
        debounceTime(0), filter(function (_a) {
            var _b = __read(_a, 2), loading = _b[1];
            return !loading;
        }), tap(function (_a) {
            var _b = __read(_a, 4), cart = _b[0], userToken = _b[2], loaded = _b[3];
            if (_this.isJustLoggedIn(userToken.userId)) {
                _this.loadOrMerge();
            }
            else if ((_this.isCreated(cart) && _this.isIncomplete(cart)) ||
                (_this.isLoggedIn(userToken.userId) &&
                    !_this.isCreated(cart) &&
                    !loaded) // try to load current cart for logged in user (loaded flag to prevent infinite loop when user doesn't have cart)
            ) {
                _this.load();
            }
            _this.previousUserId = userToken.userId;
        }), filter(function (_a) {
            var _b = __read(_a, 1), cart = _b[0];
            return !_this.isCreated(cart) ||
                (_this.isCreated(cart) && !_this.isIncomplete(cart));
        }), map(function (_a) {
            var _b = __read(_a, 1), cart = _b[0];
            return cart;
        }), shareReplay({ bufferSize: 1, refCount: true }));
    }
    CartService.prototype.getActive = function () {
        if (this.activeCartService) {
            return this.activeCartService.getActive();
        }
        return this._activeCart$;
    };
    CartService.prototype.getEntries = function () {
        if (this.activeCartService) {
            return this.activeCartService.getEntries();
        }
        return this.store.pipe(select(CartSelectors.getCartEntries));
    };
    // TODO: to remove in 2.0
    // doesn't seem useful for end developers
    // there shouldn't be a need for such low level information
    CartService.prototype.getCartMergeComplete = function () {
        return this.store.pipe(select(CartSelectors.getCartMergeComplete));
    };
    CartService.prototype.getLoaded = function () {
        if (this.activeCartService) {
            return this.activeCartService.getLoaded();
        }
        return this.store.pipe(select(CartSelectors.getCartLoaded));
    };
    CartService.prototype.loadOrMerge = function () {
        // for login user, whenever there's an existing cart, we will load the user
        // current cart and merge it into the existing cart
        if (!this.isCreated(this.cartData.cart)) {
            this.store.dispatch(new DeprecatedCartActions.LoadCart({
                userId: this.cartData.userId,
                cartId: OCC_CART_ID_CURRENT,
            }));
        }
        else if (this.isGuestCart()) {
            this.guestCartMerge();
        }
        else {
            this.store.dispatch(new DeprecatedCartActions.MergeCart({
                userId: this.cartData.userId,
                cartId: this.cartData.cart.guid,
            }));
        }
    };
    CartService.prototype.load = function () {
        if (this.cartData.userId !== OCC_USER_ID_ANONYMOUS) {
            this.store.dispatch(new DeprecatedCartActions.LoadCart({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId
                    ? this.cartData.cartId
                    : OCC_CART_ID_CURRENT,
            }));
        }
        else {
            this.store.dispatch(new DeprecatedCartActions.LoadCart({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
            }));
        }
    };
    CartService.prototype.addEntry = function (productCode, quantity) {
        var _this = this;
        if (this.activeCartService) {
            return this.activeCartService.addEntry(productCode, quantity);
        }
        this.store
            .pipe(select(CartSelectors.getActiveCartState), tap(function (cartState) {
            if (!_this.isCreated(cartState.value.content) && !cartState.loading) {
                _this.store.dispatch(new DeprecatedCartActions.CreateCart({
                    userId: _this.cartData.userId,
                }));
            }
        }), filter(function (cartState) { return _this.isCreated(cartState.value.content); }), take(1))
            .subscribe(function (_) {
            _this.store.dispatch(new CartActions.CartAddEntry({
                userId: _this.cartData.userId,
                cartId: _this.cartData.cartId,
                productCode: productCode,
                quantity: quantity,
            }));
        });
    };
    CartService.prototype.removeEntry = function (entry) {
        if (this.activeCartService) {
            return this.activeCartService.removeEntry(entry);
        }
        this.store.dispatch(new CartActions.CartRemoveEntry({
            userId: this.cartData.userId,
            cartId: this.cartData.cartId,
            entry: entry.entryNumber,
        }));
    };
    CartService.prototype.updateEntry = function (entryNumber, quantity) {
        if (this.activeCartService) {
            return this.activeCartService.updateEntry(parseInt(entryNumber, 10), quantity);
        }
        if (quantity > 0) {
            this.store.dispatch(new CartActions.CartUpdateEntry({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
                entry: entryNumber,
                qty: quantity,
            }));
        }
        else {
            this.store.dispatch(new CartActions.CartRemoveEntry({
                userId: this.cartData.userId,
                cartId: this.cartData.cartId,
                entry: entryNumber,
            }));
        }
    };
    CartService.prototype.getEntry = function (productCode) {
        if (this.activeCartService) {
            return this.activeCartService.getEntry(productCode);
        }
        return this.store.pipe(select(CartSelectors.getCartEntrySelectorFactory(productCode)));
    };
    CartService.prototype.addEmail = function (email) {
        if (this.activeCartService) {
            return this.activeCartService.addEmail(email);
        }
        this.store.dispatch(new DeprecatedCartActions.AddEmailToCart({
            userId: this.cartData.userId,
            cartId: this.cartData.cartId,
            email: email,
        }));
    };
    CartService.prototype.getAssignedUser = function () {
        if (this.activeCartService) {
            return this.activeCartService.getAssignedUser();
        }
        return this.store.pipe(select(CartSelectors.getCartUser));
    };
    CartService.prototype.isGuestCart = function () {
        if (this.activeCartService) {
            return this.activeCartService.isGuestCart();
        }
        return this.cartData.isGuestCart;
    };
    /**
     * Add multiple entries to a cart
     * Requires a created cart
     * @param cartEntries : list of entries to add (OrderEntry[])
     */
    CartService.prototype.addEntries = function (cartEntries) {
        var _this = this;
        if (this.activeCartService) {
            return this.activeCartService.addEntries(cartEntries);
        }
        var newEntries = 0;
        this.getEntries()
            .pipe(tap(function () {
            // Keep adding entries until the user cart contains the same number of entries
            // as the guest cart did
            if (newEntries < cartEntries.length) {
                _this.store.dispatch(new CartActions.CartAddEntry({
                    userId: _this.cartData.userId,
                    cartId: _this.cartData.cartId,
                    productCode: cartEntries[newEntries].product.code,
                    quantity: cartEntries[newEntries].quantity,
                }));
                newEntries++;
            }
        }), filter(function () { return newEntries === cartEntries.length; }), take(1))
            .subscribe();
    };
    CartService.prototype.isCreated = function (cart) {
        return cart && typeof cart.guid !== 'undefined';
    };
    /**
     * Cart is incomplete if it contains only `guid`, `code` and `user` properties, which come from local storage.
     * To get cart content, we need to load cart from backend.
     */
    CartService.prototype.isIncomplete = function (cart) {
        return cart && Object.keys(cart).length <= 3;
    };
    CartService.prototype.isJustLoggedIn = function (userId) {
        return (this.isLoggedIn(userId) &&
            this.previousUserId !== userId && // *just* logged in
            this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
        );
    };
    CartService.prototype.isLoggedIn = function (userId) {
        return typeof userId !== 'undefined';
    };
    // TODO: Remove once backend is updated
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     */
    CartService.prototype.guestCartMerge = function () {
        var _this = this;
        var cartEntries;
        this.getEntries()
            .pipe(take(1))
            .subscribe(function (entries) {
            cartEntries = entries;
        });
        this.store.dispatch(new DeprecatedCartActions.DeleteCart({
            userId: OCC_USER_ID_ANONYMOUS,
            cartId: this.cartData.cart.guid,
        }));
        this.store
            .pipe(select(CartSelectors.getActiveCartState), filter(function (cartState) { return !cartState.loading; }), tap(function (cartState) {
            // If the cart is not created it needs to be created
            // This step should happen before adding entries to avoid conflicts in the requests
            if (!_this.isCreated(cartState.value.content)) {
                _this.store.dispatch(new DeprecatedCartActions.CreateCart({
                    userId: _this.cartData.userId,
                }));
            }
        }), filter(function (cartState) { return _this.isCreated(cartState.value.content); }), take(1))
            .subscribe(function () {
            _this.addEntries(cartEntries);
        });
    };
    CartService.prototype.addVoucher = function (voucherId) {
        this.store.dispatch(new CartActions.CartAddVoucher({
            userId: this.cartData.userId,
            cartId: this.cartData.cartId,
            voucherId: voucherId,
        }));
    };
    CartService.ctorParameters = function () { return [
        { type: Store },
        { type: CartDataService },
        { type: AuthService },
        { type: ActiveCartService }
    ]; };
    CartService = __decorate([
        Injectable()
    ], CartService);
    return CartService;
}());
export { CartService };
//# sourceMappingURL=data:application/json;base64,