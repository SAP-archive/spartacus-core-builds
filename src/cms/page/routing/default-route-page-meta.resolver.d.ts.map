{"version":3,"file":"default-route-page-meta.resolver.d.ts","sources":["default-route-page-meta.resolver.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { TranslationService } from '../../../i18n/translation.service';\nimport { BreadcrumbMeta } from '../../model/page.model';\nimport { RouteBreadcrumbConfig, RouteBreadcrumbResolver, RouteBreadcrumbResolverParams } from './route-page-meta.model';\n/**\n * Resolves the breadcrumb for the Angular ActivatedRouteSnapshot\n */\nexport declare abstract class DefaultRoutePageMetaResolver implements RouteBreadcrumbResolver {\n    protected translation: TranslationService;\n    constructor(translation: TranslationService);\n    /**\n     * Resolves breadcrumb based on the given url and the breadcrumb config.\n     *\n     * - When breadcrumb config is empty, it returns an empty breadcrumb.\n     * - When breadcrumb config is a string or object with `i18n` property,\n     *    it translates it and use as a label of the returned breadcrumb.\n     * - When breadcrumb config is an object with property `raw`, then\n     *    it's used as a label of the returned breadcrumb.\n     */\n    resolveBreadcrumbs({ url, pageMetaConfig, }: RouteBreadcrumbResolverParams): Observable<BreadcrumbMeta[]>;\n    /**\n     * Translates the configured breadcrumb label\n     */\n    protected translateBreadcrumbLabel(breadcrumbConfig: string | RouteBreadcrumbConfig): Observable<string>;\n    /**\n     * Resolves dynamic data for the whole resolver.\n     */\n    protected getParams(): Observable<{\n        [_: string]: any;\n    }>;\n}\n"]}