import { PRODUCT_INTERESTS, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, ADD_PRODUCT_INTEREST_PROCESS_ID, } from '../user-state';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { LoaderLoadAction, LoaderFailAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { EntityFailAction, EntityLoadAction, EntitySuccessAction, EntityLoaderResetAction, } from '../../../state/utils/entity-loader/entity-loader.action';
export const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';
export const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';
export const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';
export const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';
export const REMOVE_PRODUCT_INTEREST_SUCCESS = 'Remove Product Interest Success';
export const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';
export const ADD_PRODUCT_INTEREST = 'Add Product Interest';
export const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';
export const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';
export const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';
export const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';
export const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';
export class LoadProductInterests extends LoaderLoadAction {
    constructor(payload) {
        super(PRODUCT_INTERESTS);
        this.payload = payload;
        this.type = LOAD_PRODUCT_INTERESTS;
    }
}
export class LoadProductInterestsFail extends LoaderFailAction {
    constructor(payload) {
        super(PRODUCT_INTERESTS, payload);
        this.payload = payload;
        this.type = LOAD_PRODUCT_INTERESTS_FAIL;
    }
}
export class LoadProductInterestsSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(PRODUCT_INTERESTS);
        this.payload = payload;
        this.type = LOAD_PRODUCT_INTERESTS_SUCCESS;
    }
}
export class RemoveProductInterest extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);
        this.payload = payload;
        this.type = REMOVE_PRODUCT_INTEREST;
    }
}
export class RemoveProductInterestSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);
        this.payload = payload;
        this.type = REMOVE_PRODUCT_INTEREST_SUCCESS;
    }
}
export class RemoveProductInterestFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REMOVE_PRODUCT_INTEREST_FAIL;
    }
}
export class AddProductInterest extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);
        this.payload = payload;
        this.type = ADD_PRODUCT_INTEREST;
    }
}
export class AddProductInterestSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);
        this.payload = payload;
        this.type = ADD_PRODUCT_INTEREST_SUCCESS;
    }
}
export class AddProductInterestFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);
        this.payload = payload;
        this.type = ADD_PRODUCT_INTEREST_FAIL;
    }
}
export class ResetAddInterestState extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);
        this.type = ADD_PRODUCT_INTEREST_RESET;
    }
}
export class ResetRemoveInterestState extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);
        this.type = REMOVE_PRODUCT_INTEREST_RESET;
    }
}
export class ClearProductInterests extends LoaderResetAction {
    constructor() {
        super(PRODUCT_INTERESTS);
        this.type = CLEAR_PRODUCT_INTERESTS;
    }
}
//# sourceMappingURL=data:application/json;base64,