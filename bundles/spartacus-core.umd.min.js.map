{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","semanticRoute","getSemanticRoute","ɵ1$1","context","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsOccModule","CmsPageAdapter","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4$1","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$3","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$4","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (event instanceof HttpResponse) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(() =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[] = [],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = applicables.filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: '',\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      if (state.data.routeName) {\n        semanticRoute = state.data.routeName;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n        semanticRoute = 'product';\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'category';\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'brand';\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url,\n      queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","export const testestsd = 'sare';\n"]}