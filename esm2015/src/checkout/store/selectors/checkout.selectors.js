import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { CHECKOUT_FEATURE, } from '../checkout-state';
const getDeliveryAddressSelector = (state) => state.address;
const ɵ0 = getDeliveryAddressSelector;
const getDeliveryModeSelector = (state) => state.deliveryMode;
const ɵ1 = getDeliveryModeSelector;
const getPaymentDetailsSelector = (state) => state.paymentDetails;
const ɵ2 = getPaymentDetailsSelector;
const getOrderDetailsSelector = (state) => state.orderDetails;
const ɵ3 = getOrderDetailsSelector;
export const getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);
const ɵ4 = (checkoutState) => checkoutState.steps;
export const getCheckoutStepsState = createSelector(getCheckoutState, ɵ4);
const ɵ5 = state => StateLoaderSelectors.loaderValueSelector(state);
export const getCheckoutSteps = createSelector(getCheckoutStepsState, ɵ5);
export const getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);
export const getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);
const ɵ6 = deliveryMode => {
    return (deliveryMode &&
        Object.keys(deliveryMode.supported).map(code => deliveryMode.supported[code]));
};
export const getSupportedDeliveryModes = createSelector(getDeliveryMode, ɵ6);
const ɵ7 = deliveryMode => {
    return deliveryMode && deliveryMode.selected;
};
export const getSelectedDeliveryModeCode = createSelector(getDeliveryMode, ɵ7);
const ɵ8 = deliveryMode => {
    if (deliveryMode.selected !== '') {
        if (Object.keys(deliveryMode.supported).length === 0) {
            return null;
        }
        return deliveryMode.supported[deliveryMode.selected];
    }
};
export const getSelectedDeliveryMode = createSelector(getDeliveryMode, ɵ8);
export const getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);
export const getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);
const ɵ9 = state => StateLoaderSelectors.loaderSuccessSelector(state) &&
    !StateLoaderSelectors.loaderLoadingSelector(state);
export const getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, ɵ9);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQuc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3NlbGVjdG9ycy9jaGVja291dC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEdBRWYsTUFBTSxhQUFhLENBQUM7QUFJckIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbEUsT0FBTyxFQUdMLGdCQUFnQixHQUVqQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxLQUF5QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDOztBQUNoRixNQUFNLHVCQUF1QixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQzVELEtBQUssQ0FBQyxZQUFZLENBQUM7O0FBQ3JCLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxLQUF5QixFQUFFLEVBQUUsQ0FDOUQsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7QUFDdkIsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEtBQXlCLEVBQUUsRUFBRSxDQUM1RCxLQUFLLENBQUMsWUFBWSxDQUFDOztBQUVyQixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FHekIscUJBQXFCLENBQWdCLGdCQUFnQixDQUFDLENBQUM7V0FPekQsQ0FBQyxhQUE0QixFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSztBQUx2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FHOUIsY0FBYyxDQUNoQixnQkFBZ0IsS0FFakIsQ0FBQztXQUt3QyxLQUFLLENBQUMsRUFBRSxDQUNoRCxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7QUFKakQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FBQyxxQkFBcUIsS0FFdkMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUczQixjQUFjLENBQUMsZ0JBQWdCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUVqRSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBTXhCLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1dBSzFCLFlBQVksQ0FBQyxFQUFFO0lBQ2pELE9BQU8sQ0FDTCxZQUFZO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUNyQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQ3JDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFWRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FHbEMsY0FBYyxDQUFDLGVBQWUsS0FPaEMsQ0FBQztXQUtpQyxZQUFZLENBQUMsRUFBRTtJQUNqRCxPQUFPLFlBQVksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQy9DLENBQUM7QUFMRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FHcEMsY0FBYyxDQUFDLGVBQWUsS0FFaEMsQ0FBQztXQUtpQyxZQUFZLENBQUMsRUFBRTtJQUNqRCxJQUFJLFlBQVksQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO1FBQ2hDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0RDtBQUNILENBQUM7QUFWRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGVBQWUsS0FPaEMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQUMsZ0JBQWdCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDLENBQUM7V0FPNUQsS0FBSyxDQUFDLEVBQUUsQ0FDTixvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDakQsQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFQdEQsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBR2pDLGNBQWMsQ0FDaEIscUJBQXFCLEtBSXRCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvYWRkcmVzcy5tb2RlbCc7XG5pbXBvcnQgeyBQYXltZW50RGV0YWlscyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xuaW1wb3J0IHsgRGVsaXZlcnlNb2RlLCBPcmRlciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlTG9hZGVyU2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7XG4gIENoZWNrb3V0U3RhdGUsXG4gIENoZWNrb3V0U3RlcHNTdGF0ZSxcbiAgQ0hFQ0tPVVRfRkVBVFVSRSxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG59IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuY29uc3QgZ2V0RGVsaXZlcnlBZGRyZXNzU2VsZWN0b3IgPSAoc3RhdGU6IENoZWNrb3V0U3RlcHNTdGF0ZSkgPT4gc3RhdGUuYWRkcmVzcztcbmNvbnN0IGdldERlbGl2ZXJ5TW9kZVNlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XG4gIHN0YXRlLmRlbGl2ZXJ5TW9kZTtcbmNvbnN0IGdldFBheW1lbnREZXRhaWxzU2VsZWN0b3IgPSAoc3RhdGU6IENoZWNrb3V0U3RlcHNTdGF0ZSkgPT5cbiAgc3RhdGUucGF5bWVudERldGFpbHM7XG5jb25zdCBnZXRPcmRlckRldGFpbHNTZWxlY3RvciA9IChzdGF0ZTogQ2hlY2tvdXRTdGVwc1N0YXRlKSA9PlxuICBzdGF0ZS5vcmRlckRldGFpbHM7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGVja291dFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgQ2hlY2tvdXRTdGF0ZVxuPiA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxDaGVja291dFN0YXRlPihDSEVDS09VVF9GRUFUVVJFKTtcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RlcHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIExvYWRlclN0YXRlPENoZWNrb3V0U3RlcHNTdGF0ZT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGF0ZSxcbiAgKGNoZWNrb3V0U3RhdGU6IENoZWNrb3V0U3RhdGUpID0+IGNoZWNrb3V0U3RhdGUuc3RlcHNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGVja291dFN0ZXBzOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgQ2hlY2tvdXRTdGVwc1N0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlLCBzdGF0ZSA9PlxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldERlbGl2ZXJ5QWRkcmVzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIEFkZHJlc3Ncbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDaGVja291dFN0ZXBzLCBnZXREZWxpdmVyeUFkZHJlc3NTZWxlY3Rvcik7XG5cbmV4cG9ydCBjb25zdCBnZXREZWxpdmVyeU1vZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICB7XG4gICAgc3VwcG9ydGVkOiB7IFtjb2RlOiBzdHJpbmddOiBEZWxpdmVyeU1vZGUgfTtcbiAgICBzZWxlY3RlZDogc3RyaW5nO1xuICB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwcywgZ2V0RGVsaXZlcnlNb2RlU2VsZWN0b3IpO1xuXG5leHBvcnQgY29uc3QgZ2V0U3VwcG9ydGVkRGVsaXZlcnlNb2RlczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIERlbGl2ZXJ5TW9kZVtdXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0RGVsaXZlcnlNb2RlLCBkZWxpdmVyeU1vZGUgPT4ge1xuICByZXR1cm4gKFxuICAgIGRlbGl2ZXJ5TW9kZSAmJlxuICAgIE9iamVjdC5rZXlzKGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWQpLm1hcChcbiAgICAgIGNvZGUgPT4gZGVsaXZlcnlNb2RlLnN1cHBvcnRlZFtjb2RlXVxuICAgIClcbiAgKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWREZWxpdmVyeU1vZGVDb2RlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgc3RyaW5nXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0RGVsaXZlcnlNb2RlLCBkZWxpdmVyeU1vZGUgPT4ge1xuICByZXR1cm4gZGVsaXZlcnlNb2RlICYmIGRlbGl2ZXJ5TW9kZS5zZWxlY3RlZDtcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWREZWxpdmVyeU1vZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBEZWxpdmVyeU1vZGVcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXREZWxpdmVyeU1vZGUsIGRlbGl2ZXJ5TW9kZSA9PiB7XG4gIGlmIChkZWxpdmVyeU1vZGUuc2VsZWN0ZWQgIT09ICcnKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkZWxpdmVyeU1vZGUuc3VwcG9ydGVkW2RlbGl2ZXJ5TW9kZS5zZWxlY3RlZF07XG4gIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0UGF5bWVudERldGFpbHM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBQYXltZW50RGV0YWlsc1xuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHMsIGdldFBheW1lbnREZXRhaWxzU2VsZWN0b3IpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tvdXRPcmRlckRldGFpbHM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBPcmRlclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHMsIGdldE9yZGVyRGV0YWlsc1NlbGVjdG9yKTtcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0RGV0YWlsc0xvYWRlZDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlLFxuICBzdGF0ZSA9PlxuICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSkgJiZcbiAgICAhU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==