import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { ConverterService } from '../../../util/converter.service';
import { COST_CENTER_NORMALIZER, COST_CENTERS_NORMALIZER, } from '../../../organization/connectors/cost-center/converters';
import { BUDGETS_NORMALIZER } from '../../../organization/connectors/budget/converters';
var OccCostCenterAdapter = /** @class */ (function () {
    function OccCostCenterAdapter(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    OccCostCenterAdapter.prototype.load = function (userId, costCenterCode) {
        return this.http
            .get(this.getCostCenterEndpoint(userId, costCenterCode))
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.loadList = function (userId, params) {
        return this.http
            .get(this.getAllCostCentersEndpoint(userId, params))
            .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.loadActiveList = function (userId) {
        var params = new HttpParams().set('fields', 'DEFAULT,unit(BASIC,addresses(DEFAULT))');
        return this.http
            .get(this.getCostCentersEndpoint(userId), { params: params })
            .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.create = function (userId, costCenter) {
        return this.http
            .post(this.getCostCentersEndpoint(userId), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.update = function (userId, costCenterCode, costCenter) {
        return this.http
            .patch(this.getCostCenterEndpoint(userId, costCenterCode), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.loadBudgets = function (userId, costCenterCode, params) {
        return this.http
            .get(this.getBudgetsEndpoint(userId, costCenterCode, params))
            .pipe(this.converter.pipeable(BUDGETS_NORMALIZER));
    };
    OccCostCenterAdapter.prototype.assignBudget = function (userId, costCenterCode, budgetCode) {
        return this.http.post(this.getBudgetsEndpoint(userId, costCenterCode, { budgetCode: budgetCode }), null);
    };
    OccCostCenterAdapter.prototype.unassignBudget = function (userId, costCenterCode, budgetCode) {
        return this.http.delete(this.getBudgetEndpoint(userId, costCenterCode, budgetCode));
    };
    OccCostCenterAdapter.prototype.getCostCenterEndpoint = function (userId, costCenterCode) {
        return this.occEndpoints.getUrl('costCenter', { userId: userId, costCenterCode: costCenterCode });
    };
    OccCostCenterAdapter.prototype.getCostCentersEndpoint = function (userId, params) {
        return this.occEndpoints.getUrl('costCenters', { userId: userId }, params);
    };
    OccCostCenterAdapter.prototype.getAllCostCentersEndpoint = function (userId, params) {
        return this.occEndpoints.getUrl('costCentersAll', { userId: userId }, params);
    };
    OccCostCenterAdapter.prototype.getBudgetsEndpoint = function (userId, costCenterCode, params) {
        return this.occEndpoints.getUrl('costCenterBudgets', { userId: userId, costCenterCode: costCenterCode }, params);
    };
    OccCostCenterAdapter.prototype.getBudgetEndpoint = function (userId, costCenterCode, budgetCode) {
        return this.occEndpoints.getUrl('costCenterBudget', {
            userId: userId,
            costCenterCode: costCenterCode,
            budgetCode: budgetCode,
        });
    };
    OccCostCenterAdapter.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };
    OccCostCenterAdapter = __decorate([
        Injectable()
    ], OccCostCenterAdapter);
    return OccCostCenterAdapter;
}());
export { OccCostCenterAdapter };
//# sourceMappingURL=data:application/json;base64,