import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/index';
import { SiteContextActions } from '../../../site-context/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { ANONYMOUS_CONSENTS, } from '../anonymous-consents-state';
import * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';
import * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';
import * as fromAnonymousConsents from './anonymous-consents.reducer';
export function getReducers() {
    return {
        templates: loaderReducer(ANONYMOUS_CONSENTS),
        consents: fromAnonymousConsents.reducer,
        ui: combineReducers({
            bannerDismissed: fromAnonymousConsentsBanner.reducer,
            updated: fromAnonymousConsentsUpdate.reducer,
        }),
    };
}
export const reducerToken = new InjectionToken('AnonymousConsentsReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearAnonymousConsentTemplates(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT ||
            action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = Object.assign(Object.assign({}, state), { templates: undefined });
        }
        return reducer(state, action);
    };
}
export const metaReducers = [
    clearAnonymousConsentTemplates,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYW5vbnltb3VzLWNvbnNlbnRzL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUlMLGVBQWUsR0FFaEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRSxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxLQUFLLDJCQUEyQixNQUFNLHFDQUFxQyxDQUFDO0FBQ25GLE9BQU8sS0FBSywyQkFBMkIsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFFdEUsTUFBTSxVQUFVLFdBQVc7SUFDekIsT0FBTztRQUNMLFNBQVMsRUFBRSxhQUFhLENBQW9CLGtCQUFrQixDQUFDO1FBQy9ELFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPO1FBQ3ZDLEVBQUUsRUFBRSxlQUFlLENBQUM7WUFDbEIsZUFBZSxFQUFFLDJCQUEyQixDQUFDLE9BQU87WUFDcEQsT0FBTyxFQUFFLDJCQUEyQixDQUFDLE9BQU87U0FDN0MsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUVwQixJQUFJLGNBQWMsQ0FDckIsMkJBQTJCLENBQzVCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQWE7SUFDdkMsT0FBTyxFQUFFLFlBQVk7SUFDckIsVUFBVSxFQUFFLFdBQVc7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sVUFBVSw4QkFBOEIsQ0FDNUMsT0FBc0Q7SUFFdEQsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFNO1FBQzVCLElBQ0UsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTTtZQUNsQyxNQUFNLENBQUMsSUFBSSxLQUFLLGtCQUFrQixDQUFDLGVBQWUsRUFDbEQ7WUFDQSxLQUFLLG1DQUNBLEtBQUssS0FDUixTQUFTLEVBQUUsU0FBUyxHQUNyQixDQUFDO1NBQ0g7UUFDRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBdUI7SUFDOUMsOEJBQThCO0NBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFjdGlvbixcbiAgQWN0aW9uUmVkdWNlcixcbiAgQWN0aW9uUmVkdWNlck1hcCxcbiAgY29tYmluZVJlZHVjZXJzLFxuICBNZXRhUmVkdWNlcixcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQXV0aEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9hdXRoL2luZGV4JztcbmltcG9ydCB7IENvbnNlbnRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2l0ZS1jb250ZXh0L2luZGV4JztcbmltcG9ydCB7IGxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLnJlZHVjZXInO1xuaW1wb3J0IHtcbiAgQW5vbnltb3VzQ29uc2VudHNTdGF0ZSxcbiAgQU5PTllNT1VTX0NPTlNFTlRTLFxufSBmcm9tICcuLi9hbm9ueW1vdXMtY29uc2VudHMtc3RhdGUnO1xuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzQmFubmVyIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLWJhbm5lci5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Bbm9ueW1vdXNDb25zZW50c1VwZGF0ZSBmcm9tICcuL2Fub255bW91cy1jb25zZW50cy11cGRhdGUucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHMgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMucmVkdWNlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2VycygpOiBBY3Rpb25SZWR1Y2VyTWFwPEFub255bW91c0NvbnNlbnRzU3RhdGU+IHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZXM6IGxvYWRlclJlZHVjZXI8Q29uc2VudFRlbXBsYXRlW10+KEFOT05ZTU9VU19DT05TRU5UUyksXG4gICAgY29uc2VudHM6IGZyb21Bbm9ueW1vdXNDb25zZW50cy5yZWR1Y2VyLFxuICAgIHVpOiBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgYmFubmVyRGlzbWlzc2VkOiBmcm9tQW5vbnltb3VzQ29uc2VudHNCYW5uZXIucmVkdWNlcixcbiAgICAgIHVwZGF0ZWQ6IGZyb21Bbm9ueW1vdXNDb25zZW50c1VwZGF0ZS5yZWR1Y2VyLFxuICAgIH0pLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgcmVkdWNlclRva2VuOiBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPFxuICBBbm9ueW1vdXNDb25zZW50c1N0YXRlXG4+PiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPEFub255bW91c0NvbnNlbnRzU3RhdGU+PihcbiAgJ0Fub255bW91c0NvbnNlbnRzUmVkdWNlcnMnXG4pO1xuXG5leHBvcnQgY29uc3QgcmVkdWNlclByb3ZpZGVyOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogcmVkdWNlclRva2VuLFxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2Vycyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMoXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8QW5vbnltb3VzQ29uc2VudHNTdGF0ZSwgQWN0aW9uPlxuKTogQWN0aW9uUmVkdWNlcjxBbm9ueW1vdXNDb25zZW50c1N0YXRlLCBBY3Rpb24+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKFxuICAgICAgYWN0aW9uLnR5cGUgPT09IEF1dGhBY3Rpb25zLkxPR09VVCB8fFxuICAgICAgYWN0aW9uLnR5cGUgPT09IFNpdGVDb250ZXh0QWN0aW9ucy5MQU5HVUFHRV9DSEFOR0VcbiAgICApIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdGVtcGxhdGVzOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IG1ldGFSZWR1Y2VyczogTWV0YVJlZHVjZXI8YW55PltdID0gW1xuICBjbGVhckFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMsXG5dO1xuIl19