import { __decorate, __param, __read, __spread } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import { resolveApplicable } from '../../util/applicable';
import * as i0 from "@angular/core";
import * as i1 from "../page/page-meta.resolver";
import * as i2 from "./cms.service";
var PageMetaService = /** @class */ (function () {
    function PageMetaService(resolvers, cms) {
        this.resolvers = resolvers;
        this.cms = cms;
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.resolvers = this.resolvers || [];
    }
    PageMetaService.prototype.getMeta = function () {
        var _this = this;
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap(function (page) {
            var metaResolver = _this.getMetaResolver(page);
            if (metaResolver) {
                return _this.resolve(metaResolver);
            }
            else {
                // we do not have a page resolver
                return of(null);
            }
        }));
    };
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    PageMetaService.prototype.resolve = function (metaResolver) {
        var _this = this;
        var resolveMethods = Object.keys(this.resolverMethods)
            .filter(function (key) { return metaResolver[_this.resolverMethods[key]]; })
            .map(function (key) {
            return metaResolver[_this.resolverMethods[key]]().pipe(map(function (data) {
                var _a;
                return (_a = {},
                    _a[key] = data,
                    _a);
            }));
        });
        return combineLatest(resolveMethods).pipe(map(function (data) { return Object.assign.apply(Object, __spread([{}], data)); }));
    };
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    PageMetaService.prototype.getMetaResolver = function (page) {
        return resolveApplicable(this.resolvers, [page], [page]);
    };
    PageMetaService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PageMetaResolver,] }] },
        { type: CmsService }
    ]; };
    PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.PageMetaResolver, 8), i0.ɵɵinject(i2.CmsService)); }, token: PageMetaService, providedIn: "root" });
    PageMetaService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Optional()),
        __param(0, Inject(PageMetaResolver))
    ], PageMetaService);
    return PageMetaService;
}());
export { PageMetaService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2ZhY2FkZS9wYWdlLW1ldGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFLMUQ7SUFDRSx5QkFHWSxTQUE2QixFQUM3QixHQUFlO1FBRGYsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFDN0IsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUkzQjs7Ozs7O1dBTUc7UUFDTyxvQkFBZSxHQUE4QjtZQUNyRCxLQUFLLEVBQUUsY0FBYztZQUNyQixPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxLQUFLLEVBQUUsY0FBYztZQUNyQixNQUFNLEVBQUUsZUFBZTtTQUN4QixDQUFDO1FBaEJBLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQWlCRCxpQ0FBTyxHQUFQO1FBQUEsaUJBY0M7UUFiQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsU0FBUyxDQUFDLFVBQUMsSUFBVTtZQUNuQixJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhELElBQUksWUFBWSxFQUFFO2dCQUNoQixPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsaUNBQWlDO2dCQUNqQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLGlDQUFPLEdBQWpCLFVBQWtCLFlBQThCO1FBQWhELGlCQWNDO1FBYkMsSUFBTSxjQUFjLEdBQVUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO2FBQzVELE1BQU0sQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLFlBQVksQ0FBQyxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXZDLENBQXVDLENBQUM7YUFDeEQsR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLE9BQUEsWUFBWSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLFVBQUMsSUFBSTs7Z0JBQUssT0FBQTtvQkFDWixHQUFDLEdBQUcsSUFBRyxJQUFJO3VCQUNYO1lBRlksQ0FFWixDQUFDLENBQ0o7UUFKRCxDQUlDLENBQ0YsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsTUFBTSxDQUFDLE1BQU0sT0FBYixNQUFNLFlBQVEsRUFBRSxHQUFLLElBQUksSUFBekIsQ0FBMEIsQ0FBQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ08seUNBQWUsR0FBekIsVUFBMEIsSUFBVTtRQUNsQyxPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7NENBcEVFLFFBQVEsWUFDUixNQUFNLFNBQUMsZ0JBQWdCO2dCQUVULFVBQVU7OztJQUxoQixlQUFlO1FBSDNCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7UUFHRyxXQUFBLFFBQVEsRUFBRSxDQUFBO1FBQ1YsV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtPQUhoQixlQUFlLENBdUUzQjswQkFsRkQ7Q0FrRkMsQUF2RUQsSUF1RUM7U0F2RVksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZSwgUGFnZU1ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VNZXRhUmVzb2x2ZXIgfSBmcm9tICcuLi9wYWdlL3BhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyByZXNvbHZlQXBwbGljYWJsZSB9IGZyb20gJy4uLy4uL3V0aWwvYXBwbGljYWJsZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdlTWV0YVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoUGFnZU1ldGFSZXNvbHZlcilcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZXJzOiBQYWdlTWV0YVJlc29sdmVyW10sXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJlc29sdmVycyA9IHRoaXMucmVzb2x2ZXJzIHx8IFtdO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiByZXNvbHZlciBpbnRlcmZhY2VzIHdpbGwgYmUgZXZhbHVhdGVkIGZvciB0aGUgcGFnZVJlc29sdmVycy5cbiAgICpcbiAgICogVE9PRDogb3B0aW1pemUgYnJvd3NlciB2cyBTU1IgcmVzb2x2ZXJzOyBpbWFnZSwgcm9ib3RzIGFuZCBkZXNjcmlwdGlvblxuICAgKiAgICAgICBhcmVuJ3QgbmVlZGVkIGR1cmluZyBicm93c2luZy5cbiAgICogVE9ETzogd2UgY2FuIG1ha2UgdGhlIGxpc3Qgb2YgcmVzb2x2ZXIgdHlwZXMgY29uZmlndXJhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZXJNZXRob2RzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIHRpdGxlOiAncmVzb2x2ZVRpdGxlJyxcbiAgICBoZWFkaW5nOiAncmVzb2x2ZUhlYWRpbmcnLFxuICAgIGRlc2NyaXB0aW9uOiAncmVzb2x2ZURlc2NyaXB0aW9uJyxcbiAgICBicmVhZGNydW1iczogJ3Jlc29sdmVCcmVhZGNydW1icycsXG4gICAgaW1hZ2U6ICdyZXNvbHZlSW1hZ2UnLFxuICAgIHJvYm90czogJ3Jlc29sdmVSb2JvdHMnLFxuICB9O1xuXG4gIGdldE1ldGEoKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT4ge1xuICAgIHJldHVybiB0aGlzLmNtcy5nZXRDdXJyZW50UGFnZSgpLnBpcGUoXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2U6IFBhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgbWV0YVJlc29sdmVyID0gdGhpcy5nZXRNZXRhUmVzb2x2ZXIocGFnZSk7XG5cbiAgICAgICAgaWYgKG1ldGFSZXNvbHZlcikge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmUobWV0YVJlc29sdmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3ZSBkbyBub3QgaGF2ZSBhIHBhZ2UgcmVzb2x2ZXJcbiAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIGBQYWdlUmVzb2x2ZXJgIGhhcyBpbXBsZW1lbnRlZCBhIHJlc29sdmVyIGludGVyZmFjZSwgdGhlIHJlc29sdmVkIGRhdGFcbiAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxuICAgKiBAcGFyYW0gbWV0YVJlc29sdmVyXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPiB7XG4gICAgY29uc3QgcmVzb2x2ZU1ldGhvZHM6IGFueVtdID0gT2JqZWN0LmtleXModGhpcy5yZXNvbHZlck1ldGhvZHMpXG4gICAgICAuZmlsdGVyKChrZXkpID0+IG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSlcbiAgICAgIC5tYXAoKGtleSkgPT5cbiAgICAgICAgbWV0YVJlc29sdmVyW3RoaXMucmVzb2x2ZXJNZXRob2RzW2tleV1dKCkucGlwZShcbiAgICAgICAgICBtYXAoKGRhdGEpID0+ICh7XG4gICAgICAgICAgICBba2V5XTogZGF0YSxcbiAgICAgICAgICB9KSlcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KHJlc29sdmVNZXRob2RzKS5waXBlKFxuICAgICAgbWFwKChkYXRhKSA9PiBPYmplY3QuYXNzaWduKHt9LCAuLi5kYXRhKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcmVzb2x2ZXIgd2l0aCB0aGUgYmVzdCBtYXRjaCwgYmFzZWQgb24gYSBzY29yZVxuICAgKiBnZW5lcmF0ZWQgYnkgdGhlIHJlc29sdmVyLlxuICAgKlxuICAgKiBSZXNvbHZlcnMgbWF0Y2ggYnkgZGVmYXVsdCBvbiBgUGFnZVR5cGVgIGFuZCBgcGFnZS50ZW1wbGF0ZWAuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0TWV0YVJlc29sdmVyKHBhZ2U6IFBhZ2UpOiBQYWdlTWV0YVJlc29sdmVyIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFwcGxpY2FibGUodGhpcy5yZXNvbHZlcnMsIFtwYWdlXSwgW3BhZ2VdKTtcbiAgfVxufVxuIl19