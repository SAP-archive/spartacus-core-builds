/**
 * Will grab last synchronously available value from the observable stream
 * at the time of the call.
 *
 * Should be used with caution, as it's not a legitimate way for getting value
 * from the observable. Observable composition or standard subscribe method
 * should be used for most of the cases.
 *
 * @param source
 */
export function getLastValueSync(source) {
    let value;
    source.subscribe((emission) => (value = emission)).unsubscribe();
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWxhc3QtdmFsdWUtc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3V0aWwvZ2V0LWxhc3QtdmFsdWUtc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksTUFBcUI7SUFDdkQsSUFBSSxLQUFvQixDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakUsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFdpbGwgZ3JhYiBsYXN0IHN5bmNocm9ub3VzbHkgYXZhaWxhYmxlIHZhbHVlIGZyb20gdGhlIG9ic2VydmFibGUgc3RyZWFtXG4gKiBhdCB0aGUgdGltZSBvZiB0aGUgY2FsbC5cbiAqXG4gKiBTaG91bGQgYmUgdXNlZCB3aXRoIGNhdXRpb24sIGFzIGl0J3Mgbm90IGEgbGVnaXRpbWF0ZSB3YXkgZm9yIGdldHRpbmcgdmFsdWVcbiAqIGZyb20gdGhlIG9ic2VydmFibGUuIE9ic2VydmFibGUgY29tcG9zaXRpb24gb3Igc3RhbmRhcmQgc3Vic2NyaWJlIG1ldGhvZFxuICogc2hvdWxkIGJlIHVzZWQgZm9yIG1vc3Qgb2YgdGhlIGNhc2VzLlxuICpcbiAqIEBwYXJhbSBzb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RWYWx1ZVN5bmM8VD4oc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogVCB8IHVuZGVmaW5lZCB7XG4gIGxldCB2YWx1ZTogVCB8IHVuZGVmaW5lZDtcbiAgc291cmNlLnN1YnNjcmliZSgoZW1pc3Npb24pID0+ICh2YWx1ZSA9IGVtaXNzaW9uKSkudW5zdWJzY3JpYmUoKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19