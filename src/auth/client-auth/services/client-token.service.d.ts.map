{"version":3,"file":"client-token.service.d.ts","sources":["client-token.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../models/client-token.model';\nimport { StateWithClientAuth } from '../store/client-auth-state';\n/**\n * Serves a role of a facade on client token store.\n */\nexport declare class ClientTokenService {\n    protected store: Store<StateWithClientAuth>;\n    constructor(store: Store<StateWithClientAuth>);\n    /**\n     * Returns a client token. The client token from the store is returned if there is one.\n     * Otherwise a new token is fetched from the backend and saved in the store.\n     */\n    getClientToken(): Observable<ClientToken>;\n    /**\n     * Fetches a clientToken from the backend and saves it in the store where getClientToken can use it.\n     * The new clientToken is returned.\n     */\n    refreshClientToken(): Observable<ClientToken>;\n    protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean;\n}\n"]}