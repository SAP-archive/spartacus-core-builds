{"version":3,"file":"configurable-routes.service.d.ts","sources":["configurable-routes.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken, Injector } from '@angular/core';\nimport { Route, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\nexport declare class ConfigurableRoutesService {\n    protected injector: Injector;\n    protected routingConfigService: RoutingConfigService;\n    protected urlMatcherService: UrlMatcherService;\n    constructor(injector: Injector, routingConfigService: RoutingConfigService, urlMatcherService: UrlMatcherService);\n    protected initCalled: boolean;\n    /**\n     * Enhances existing Angular routes using the routing config of Spartacus.\n     * Can be called only once.\n     */\n    init(): void;\n    /**\n     * Enhances existing Angular routes using the routing config of Spartacus.\n     */\n    protected configure(): void;\n    /**\n     * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n     *\n     * @param routes list of Angular `Route` objects\n     */\n    protected configureRoutes(routes: Routes): Routes;\n    /**\n     * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n     * Uses the property `data.cxRoute` to determine the name of the route.\n     * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n     *\n     * @param route Angular `Route` object\n     */\n    protected configureRoute(route: Route): Route;\n    /**\n     * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n     *\n     * @param route Route object\n     * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n     *  that create UrlMatchers based on the given route.\n     */\n    protected resolveUrlMatchers(route: Route, matchersOrFactories: RouteConfig['matchers']): UrlMatcher;\n    /**\n     * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n     *\n     * @param route Route object\n     * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n     */\n    protected resolveUrlMatcherFactory(route: Route, factoryToken: InjectionToken<UrlMatcherFactory>): UrlMatcher;\n    /**\n     * Returns the name of the Route stored in its property `data.cxRoute`\n     * @param route\n     */\n    protected getRouteName(route: Route): string;\n    protected validateRouteConfig(routeConfig: RouteConfig, routeName: string, route: Route): void;\n    private warn;\n}\n"]}