function isFeatureConfig(config) {
    return typeof config === 'object' && config.features;
}
function isInLevel(level, version) {
    if (level === '*') {
        return true;
    }
    const levelParts = level.split('.');
    const versionParts = version.split('.');
    for (let i = 0; i < versionParts.length; i++) {
        const versionNumberPart = Number(versionParts[i]);
        const levelNumberPart = Number(levelParts[i]) || 0;
        if (versionNumberPart !== levelNumberPart) {
            return levelNumberPart > versionNumberPart;
        }
    }
    return true;
}
export function isFeatureLevel(config, level) {
    if (isFeatureConfig(config)) {
        return level[0] === '!'
            ? !isInLevel(config.features.level, level.substr(1, level.length))
            : isInLevel(config.features.level, level);
    }
}
export function isFeatureEnabled(config, feature) {
    if (isFeatureConfig(config)) {
        const featureConfig = feature[0] === '!'
            ? config.features[feature.substr(1, feature.length)]
            : config.features[feature];
        const result = typeof featureConfig === 'string'
            ? isFeatureLevel(config, featureConfig)
            : featureConfig;
        return feature[0] === '!' ? !result : result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1jb25maWctdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvZmVhdHVyZXMtY29uZmlnL3V0aWxzL2ZlYXR1cmUtY29uZmlnLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsZUFBZSxDQUFDLE1BQVc7SUFDbEMsT0FBTyxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUN2RCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU87SUFDL0IsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuRCxJQUFJLGlCQUFpQixLQUFLLGVBQWUsRUFBRTtZQUN6QyxPQUFPLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztTQUM1QztLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFlLEVBQUUsS0FBYTtJQUMzRCxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMzQixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQ3JCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM3QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsTUFBZSxFQUFFLE9BQWU7SUFDL0QsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDM0IsTUFBTSxhQUFhLEdBQ2pCLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQ2hCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQixNQUFNLE1BQU0sR0FDVixPQUFPLGFBQWEsS0FBSyxRQUFRO1lBQy9CLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQztZQUN2QyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRXBCLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztLQUM5QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGZWF0dXJlc0NvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9mZWF0dXJlcy1jb25maWcnO1xuXG5mdW5jdGlvbiBpc0ZlYXR1cmVDb25maWcoY29uZmlnOiBhbnkpOiBjb25maWcgaXMgRmVhdHVyZXNDb25maWcge1xuICByZXR1cm4gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnLmZlYXR1cmVzO1xufVxuXG5mdW5jdGlvbiBpc0luTGV2ZWwobGV2ZWwsIHZlcnNpb24pIHtcbiAgaWYgKGxldmVsID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBsZXZlbFBhcnRzID0gbGV2ZWwuc3BsaXQoJy4nKTtcbiAgY29uc3QgdmVyc2lvblBhcnRzID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmVyc2lvblBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmVyc2lvbk51bWJlclBhcnQgPSBOdW1iZXIodmVyc2lvblBhcnRzW2ldKTtcbiAgICBjb25zdCBsZXZlbE51bWJlclBhcnQgPSBOdW1iZXIobGV2ZWxQYXJ0c1tpXSkgfHwgMDtcblxuICAgIGlmICh2ZXJzaW9uTnVtYmVyUGFydCAhPT0gbGV2ZWxOdW1iZXJQYXJ0KSB7XG4gICAgICByZXR1cm4gbGV2ZWxOdW1iZXJQYXJ0ID4gdmVyc2lvbk51bWJlclBhcnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGZWF0dXJlTGV2ZWwoY29uZmlnOiB1bmtub3duLCBsZXZlbDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmIChpc0ZlYXR1cmVDb25maWcoY29uZmlnKSkge1xuICAgIHJldHVybiBsZXZlbFswXSA9PT0gJyEnXG4gICAgICA/ICFpc0luTGV2ZWwoY29uZmlnLmZlYXR1cmVzLmxldmVsLCBsZXZlbC5zdWJzdHIoMSwgbGV2ZWwubGVuZ3RoKSlcbiAgICAgIDogaXNJbkxldmVsKGNvbmZpZy5mZWF0dXJlcy5sZXZlbCwgbGV2ZWwpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZlYXR1cmVFbmFibGVkKGNvbmZpZzogdW5rbm93biwgZmVhdHVyZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmIChpc0ZlYXR1cmVDb25maWcoY29uZmlnKSkge1xuICAgIGNvbnN0IGZlYXR1cmVDb25maWcgPVxuICAgICAgZmVhdHVyZVswXSA9PT0gJyEnXG4gICAgICAgID8gY29uZmlnLmZlYXR1cmVzW2ZlYXR1cmUuc3Vic3RyKDEsIGZlYXR1cmUubGVuZ3RoKV1cbiAgICAgICAgOiBjb25maWcuZmVhdHVyZXNbZmVhdHVyZV07XG5cbiAgICBjb25zdCByZXN1bHQgPVxuICAgICAgdHlwZW9mIGZlYXR1cmVDb25maWcgPT09ICdzdHJpbmcnXG4gICAgICAgID8gaXNGZWF0dXJlTGV2ZWwoY29uZmlnLCBmZWF0dXJlQ29uZmlnKVxuICAgICAgICA6IGZlYXR1cmVDb25maWc7XG5cbiAgICByZXR1cm4gZmVhdHVyZVswXSA9PT0gJyEnID8gIXJlc3VsdCA6IHJlc3VsdDtcbiAgfVxufVxuIl19