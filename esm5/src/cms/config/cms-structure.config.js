import { __decorate, __extends } from "tslib";
import { CmsConfig } from './cms-config';
import { Injectable } from '@angular/core';
import { Config } from '../../config';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config.module";
/**
 * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
 * instead of using a backend CMS system. The configuration can be used to build
 * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
 * only require the necessary properties. Adapter logic is applied to serialize
 * the `CmsStructureConfig` into the required UI model.
 */
var CmsStructureConfig = /** @class */ (function (_super) {
    __extends(CmsStructureConfig, _super);
    function CmsStructureConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CmsStructureConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsStructureConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsStructureConfig, providedIn: "root" });
    CmsStructureConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], CmsStructureConfig);
    return CmsStructureConfig;
}(CmsConfig));
export { CmsStructureConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXN0cnVjdHVyZS5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2NvbmZpZy9jbXMtc3RydWN0dXJlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQTBEdEM7Ozs7OztHQU1HO0FBS0g7SUFBaUQsc0NBQVM7SUFBMUQ7O0tBTUM7O0lBTnFCLGtCQUFrQjtRQUp2QyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtZQUNsQixXQUFXLEVBQUUsTUFBTTtTQUNwQixDQUFDO09BQ29CLGtCQUFrQixDQU12Qzs2QkE5RUQ7Q0E4RUMsQUFORCxDQUFpRCxTQUFTLEdBTXpEO1NBTnFCLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB9IGZyb20gJy4uL21vZGVsL2NvbnRlbnQtc2xvdC1jb21wb25lbnQtZGF0YS5tb2RlbCc7XG5pbXBvcnQgeyBDbXNDb25maWcgfSBmcm9tICcuL2Ntcy1jb25maWcnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuLyoqXG4gKiBUaGUgYENtc1BhZ2VDb25maWdgIGlzIHVzZWQgdG8gYnVpbGQgcGFnZXMgYnkgY29uZmlndXJhdGlvbi5cbiAqIFRoZSBpbnRlcmZhY2VzIGFyZSBkZXNpZ25lZCB0byBoYXZlIGEgY2xlYW4gY29uZmlndXJhdGlvbiBmb3JcbiAqIHN0YXRpYyBDTVMgc3RydWN0dXJlLiBPcmRpbmFyeSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG5vdFxuICogcmVxdWlyZWQgZm9yIGNvbmZpZ3VyYWJsZSBwYWdlcyBoYXZlIGJlZW4gbGVmdCBvdXQgYW5kXG4gKiB3aWxsIG5vdCBiZSBzZXJpYWxpemVkIGluIHRoZSBhZGFwdGVyIGxvZ2ljLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENtc1BhZ2VDb25maWcge1xuICAvKipcbiAgICogV2hlbiB0aGUgYGlnbm9yZUJhY2tlbmRgIGlzIHNldCB0byB0cnVlLCB0aGUgQ01TIGJhY2tlbmRcbiAgICogd2lsbCBub3QgYmUgY29uc3VtZWQuIFRoaXMgc2F2ZXMgbmV0d29yayBsYXRlbmN5IGFuZCBpc1xuICAgKiB1c2VmdWwgZm9yIGNvbW1vZGl0eSBjb21tZXJjZSBwYWdlcy5cbiAgICogKi9cbiAgaWdub3JlQmFja2VuZD86IGJvb2xlYW47XG5cbiAgcGFnZUlkPzogc3RyaW5nO1xuXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdlIHRpdGxlIGlzIHR5cGljYWxseSB1c2VkIHRvIGRpc3BsYXkgdGhlIHBhZ2UgaGVhZGluZ1xuICAgKiBhcyB3ZWxsIGFzIGZvciB0aGUgcGFnZSB0aXRsZSB0YWcuIFRoZSBsYXR0ZXIgaXMgdXNlZCBmb3IgYnJvd3NlclxuICAgKiBuYXZpZ2F0aW9uIGFzIHdlbGwgYXMgU0VPIGFuZCBzb2NpYWwgc2hhcmUgcGxhdGZvcm1zLlxuICAgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIHRoZSB0ZW1wbGF0ZSBpcyB1c2VkIHRvIGJpbmQgdG8gdGhlIGxheW91dFxuICAgKiBjb25maWd1cmF0aW9uIGFuZCBjc3MgbGF5b3V0IGNsYXNzXG4gICAqL1xuICB0ZW1wbGF0ZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBhZ2Ugc2xvdHMgcmVwcmVzZW50IHZhcmlvdXMgc2VjdGlvbnMgb24gdGhlIHBhZ2UgdGhhdFxuICAgKiBjYW4gY29udGFpbiBjb21wb25lbnRzLlxuICAgKi9cbiAgc2xvdHM6IHsgW2tleTogc3RyaW5nXTogQ21zUGFnZVNsb3RDb25maWcgfTtcbn1cblxuLyoqXG4gKiBUaGUgYENtc1BhZ2VTbG90c0NvbmZpZ2AgKHBsdXJhbCkgaG9sZHMgYENtc1BhZ2VTbG90Q29uZmlnYCBvYmplY3RzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENtc1BhZ2VTbG90c0NvbmZpZyB7XG4gIFtrZXk6IHN0cmluZ106IENtc1BhZ2VTbG90Q29uZmlnO1xufVxuXG4vKipcbiAqIFRoZSBgQ21zUGFnZVNsb3RDb25maWdgIGlzIGEgc2ltcGxpZmllZCBjb25maWd1cmF0aW9uIG1vZGVsXG4gKiB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbmZpZ3VyZSBzbG90cyBpbiBzdGF0aWMgY29uZmlndXJhdGlvbixcbiAqIHJhdGhlciB0aGFuIGxvYWRpbmcgZnJvbSBhIGJhY2tlbmQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ21zUGFnZVNsb3RDb25maWcge1xuICBjb21wb25lbnRJZHM/OiBzdHJpbmdbXTtcbiAgcHJvcGVydGllcz86IGFueTtcbn1cblxuLyoqXG4gKiBUaGUgYENtc1N0cnVjdHVyZUNvbmZpZ2AgaXMgdXNlZCB0byBidWlsZCBwYWdlcyBpbiBTcGFydGFjdXMgYnkgY29uZmlndXJhdGlvblxuICogaW5zdGVhZCBvZiB1c2luZyBhIGJhY2tlbmQgQ01TIHN5c3RlbS4gVGhlIGNvbmZpZ3VyYXRpb24gY2FuIGJlIHVzZWQgdG8gYnVpbGRcbiAqIGNvbXBsZXRlIHBhZ2VzIG9yIHBhcnRzIG9mIGEgcGFnZS4gVGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdgIGlzIG9wdGltaXplZCB0b1xuICogb25seSByZXF1aXJlIHRoZSBuZWNlc3NhcnkgcHJvcGVydGllcy4gQWRhcHRlciBsb2dpYyBpcyBhcHBsaWVkIHRvIHNlcmlhbGl6ZVxuICogdGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdgIGludG8gdGhlIHJlcXVpcmVkIFVJIG1vZGVsLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ21zU3RydWN0dXJlQ29uZmlnIGV4dGVuZHMgQ21zQ29uZmlnIHtcbiAgY21zU3RydWN0dXJlOiB7XG4gICAgY29tcG9uZW50cz86IHsgW2tleTogc3RyaW5nXTogQ29udGVudFNsb3RDb21wb25lbnREYXRhIHwgYW55IH07XG4gICAgcGFnZXM/OiBDbXNQYWdlQ29uZmlnW107XG4gICAgc2xvdHM/OiBDbXNQYWdlU2xvdHNDb25maWc7XG4gIH07XG59XG4iXX0=