import { EntityFailAction, EntityLoadAction, EntitySuccessAction, EntityLoaderResetAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';
export const LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
export const LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
export const LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
export const RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
export const SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
export const SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
export const SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
export class LoadPaymentTypes extends EntityLoadAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = LOAD_PAYMENT_TYPES;
    }
}
export class LoadPaymentTypesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_FAIL;
    }
}
export class LoadPaymentTypesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_SUCCESS;
    }
}
export class ResetLoadPaymentTypesProcess extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
    }
}
export class SetPaymentType {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE;
    }
}
export class SetPaymentTypeFail {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_FAIL;
    }
}
export class SetPaymentTypeSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2hlY2tvdXQvc3RvcmUvYWN0aW9ucy9wYXltZW50LXR5cGVzLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsdUJBQXVCLEdBQ3hCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWpFLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLCtCQUErQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLG9DQUFvQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUNyQyx1Q0FBdUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FDOUMsNENBQTRDLENBQUM7QUFFL0MsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsNkJBQTZCLENBQUM7QUFDOUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsa0NBQWtDLENBQUM7QUFDeEUsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcscUNBQXFDLENBQUM7QUFFOUUsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGdCQUFnQjtJQUVwRDtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUY5QyxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFHbkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGdCQUFnQjtJQUV4RCxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQURwQyxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyx1QkFBdUIsQ0FBQztJQUd4QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsbUJBQW1CO0lBRTlELFlBQW1CLE9BQXNCO1FBQ3ZDLEtBQUssQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQURwQyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBRGhDLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQUczQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsdUJBQXVCO0lBRXZFO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRjlDLFNBQUksR0FBRyxtQ0FBbUMsQ0FBQztJQUdwRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBYztJQUV6QixZQUNTLE9BS047UUFMTSxZQUFPLEdBQVAsT0FBTyxDQUtiO1FBUE0sU0FBSSxHQUFHLGdCQUFnQixDQUFDO0lBUTlCLENBQUM7Q0FDTDtBQUVELE1BQU0sT0FBTyxrQkFBa0I7SUFFN0IsWUFBbUIsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0osQ0FBQztDQUNwQztBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFFaEMsWUFBbUIsT0FBYTtRQUFiLFlBQU8sR0FBUCxPQUFPLENBQU07UUFEdkIsU0FBSSxHQUFHLHdCQUF3QixDQUFDO0lBQ04sQ0FBQztDQUNyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFBheW1lbnRUeXBlLCBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQge1xuICBFbnRpdHlGYWlsQWN0aW9uLFxuICBFbnRpdHlMb2FkQWN0aW9uLFxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxuICBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbic7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHsgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCB9IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfUEFZTUVOVF9UWVBFUyA9ICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTX0ZBSUwgPSAnW0NoZWNrb3V0XSBMb2FkIFBheW1lbnQgVHlwZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTX1NVQ0NFU1MgPVxuICAnW0NoZWNrb3V0XSBMb2FkIFBheW1lbnQgVHlwZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVTRVRfTE9BRF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQgPVxuICAnW0NoZWNrb3V0XSBSZXNldCBMb2FkIFBheW1lbnQgVHlwZSBQcm9jZXNzJztcblxuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEUgPSAnW0NoZWNrb3V0XSBTZXQgUGF5bWVudCBUeXBlJztcbmV4cG9ydCBjb25zdCBTRVRfUEFZTUVOVF9UWVBFX0ZBSUwgPSAnW0NoZWNrb3V0XSBTZXQgUGF5bWVudCBUeXBlIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEVfU1VDQ0VTUyA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUgU3VjY2Vzcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkUGF5bWVudFR5cGVzIGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXNGYWlsIGV4dGVuZHMgRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXNTdWNjZXNzIGV4dGVuZHMgRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IFBheW1lbnRUeXBlW10pIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIEdFVF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldExvYWRQYXltZW50VHlwZXNQcm9jZXNzIGV4dGVuZHMgRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfTE9BRF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQ7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNldFBheW1lbnRUeXBlIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9QQVlNRU5UX1RZUEU7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ6IHN0cmluZztcbiAgICAgIGNhcnRJZDogc3RyaW5nO1xuICAgICAgdHlwZUNvZGU6IHN0cmluZztcbiAgICAgIHBvTnVtYmVyPzogc3RyaW5nO1xuICAgIH1cbiAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UGF5bWVudFR5cGVGYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9QQVlNRU5UX1RZUEVfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFNldFBheW1lbnRUeXBlU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRVRfUEFZTUVOVF9UWVBFX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBDYXJ0KSB7fVxufVxuXG5leHBvcnQgdHlwZSBQYXltZW50VHlwZXNBY3Rpb24gPVxuICB8IExvYWRQYXltZW50VHlwZXNcbiAgfCBMb2FkUGF5bWVudFR5cGVzRmFpbFxuICB8IExvYWRQYXltZW50VHlwZXNTdWNjZXNzXG4gIHwgUmVzZXRMb2FkUGF5bWVudFR5cGVzUHJvY2Vzc1xuICB8IFNldFBheW1lbnRUeXBlXG4gIHwgU2V0UGF5bWVudFR5cGVGYWlsXG4gIHwgU2V0UGF5bWVudFR5cGVTdWNjZXNzO1xuIl19