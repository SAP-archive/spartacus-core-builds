import { Injectable } from '@angular/core';
import { Config } from '../../config/config-tokens';
import { OccConfig } from '../../occ/config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config-tokens";
export const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
export class CmsConfig extends OccConfig {
}
CmsConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsConfig, providedIn: "root" });
CmsConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2Ntcy9jb25maWcvY21zLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7QUErQnhELE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLHFCQUFxQixDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGtCQUFrQixDQUFDO0FBeUMxRCxnRUFBZ0U7QUFDaEUsTUFBTSxDQUFOLElBQVksb0JBS1g7QUFMRCxXQUFZLG9CQUFvQjtJQUM5QixrRkFBa0Y7SUFDbEYsa0RBQTBCLENBQUE7SUFDMUIsMkVBQTJFO0lBQzNFLG1EQUEyQixDQUFBO0FBQzdCLENBQUMsRUFMVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSy9CO0FBMkJELE1BQU0sT0FBZ0IsU0FBVSxTQUFRLFNBQVM7Ozs7WUFKaEQsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixXQUFXLEVBQUUsTUFBTTthQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLXRva2Vucyc7XG5pbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vLi4vb2NjL2NvbmZpZy9vY2MtY29uZmlnJztcblxuZXhwb3J0IGludGVyZmFjZSBTdGFuZGFyZENtc0NvbXBvbmVudENvbmZpZyB7XG4gIENNU1NpdGVDb250ZXh0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ01TTGlua0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNpbXBsZVJlc3BvbnNpdmVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBTaW1wbGVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDTVNQYXJhZ3JhcGhDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBCcmVhZGNydW1iQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEZvb3Rlck5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDYXRlZ29yeU5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0QWRkVG9DYXJ0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTWluaUNhcnRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0Q2Fyb3VzZWxDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBTZWFyY2hCb3hDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0UmVmZXJlbmNlc0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENNU1RhYlBhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIExvZ2luQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKc3BJbmNsdWRlQ21zQ29tcG9uZW50Q29uZmlnIHtcbiAgQWNjb3VudEFkZHJlc3NCb29rQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgRm9yZ290UGFzc3dvcmRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBSZXNldFBhc3N3b3JkQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdERldGFpbHNUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0U3BlY3NUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0UmV2aWV3c1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBKU1BfSU5DTFVERV9DTVNfQ09NUE9ORU5UX1RZUEUgPSAnSnNwSW5jbHVkZUNvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgQ01TX0ZMRVhfQ09NUE9ORU5UX1RZUEUgPSAnQ01TRmxleENvbXBvbmVudCc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvZiB0aGUgQ01TIGNvbXBvbmVudCdzIGNoaWxkIHJvdXRlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENtc0NvbXBvbmVudENoaWxkUm91dGVzQ29uZmlnIHtcbiAgLyoqXG4gICAqIFJvdXRlIGBkYXRhYCBwcm9wZXJ0eSB0byBhcHBseSBvbiB0aGUgcGFyZW50IChob3N0KSByb3V0ZSBvZiB0aGUgQ01TIGNoaWxkIHJvdXRlcy5cbiAgICovXG4gIHBhcmVudD86IFBpY2s8Um91dGUsICdkYXRhJz47XG5cbiAgLyoqXG4gICAqIENoaWxkIHJvdXRlcyBkZWZpbmVkIGJ5IHRoZSBleGlzdGVuY2Ugb2YgdGhlIENNUyBjb21wb25lbnQgb24gdGhlIHBhZ2UuXG4gICAqL1xuICBjaGlsZHJlbj86IFJvdXRlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ21zQ29tcG9uZW50TWFwcGluZzxUID0gQ21zQ29tcG9uZW50PiB7XG4gIGNvbXBvbmVudD86IGFueTtcbiAgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXTtcbiAgY2hpbGRSb3V0ZXM/OiBSb3V0ZVtdIHwgQ21zQ29tcG9uZW50Q2hpbGRSb3V0ZXNDb25maWc7XG4gIGRpc2FibGVTU1I/OiBib29sZWFuO1xuICBpMThuS2V5cz86IHN0cmluZ1tdO1xuICBndWFyZHM/OiBhbnlbXTtcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBkYXRhIGNhbiBiZSBzdGF0aWNhbGx5IGNvbmZpZ3VyZWQuIFRoZSBkYXRhIGNhbiBiZSB1c2VkIGZvciB2YXJpb3VzIHJlYXNvbnM6XG4gICAqIC0gSW1wcm92ZSBwZXJmb3JtYW5jZSB3aXRoIGFuIGluaXRpYWwgZGF0YSB0aGF0IGRvZXNuJ3QgcmVxdWlyZSBBUEkgcmVzcG9uc2VcbiAgICogLSBJbnRyb2R1Y2UgVUkgcHJvcGVydGllcyB0aGF0IGFyZSBub3QgYXZhaWxhYmxlIG9uIHRoZSBBUElcbiAgICogLSBCdWlsZCBnaG9zdCBkZXNpZ24gYmFzZWQgb24gdGhlIGluaXRpYWwgZGF0YSB0aGF0IGlzIHVzZWQgcHJpb3IgdG8gdGhlIGJhY2tlbmQgZGF0YSBpcyBsb2FkZWRcbiAgICovXG4gIGRhdGE/OiBUO1xuXG4gIC8qKlxuICAgKiBEZWZlckxvYWRpbmcgY2FuIGJlIHNwZWNpZmllZCBnbG9iYWxseSwgYnV0IGFsc28gcGVyIGNvbXBvbmVudC5cbiAgICogU29tZSBjb21wb25lbnRzIHJlcXVpcmUgZGlyZWN0IGxvYWRpbmcgd2hpbGUgaXQncyBub3QgaW5pdGlhbGx5XG4gICAqIGluIHRoZSB2aWV3cG9ydC5cbiAgICovXG4gIGRlZmVyTG9hZGluZz86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xufVxuXG4vKiogU3RyYXRlZ3kgdG8gY29udHJvbCB0aGUgbG9hZGluZyBzdHJhdGVneSBvZiBET00gZWxlbWVudHMuICovXG5leHBvcnQgZW51bSBEZWZlckxvYWRpbmdTdHJhdGVneSB7XG4gIC8qKiBEZWZlcnMgbG9hZGluZyBvZiBET00gZWxlbWVudHMgdW50aWwgZWxlbWVudCBpcyBuZWFyL2luIHRoZSB1c2VycyB2aWV3IHBvcnQgKi9cbiAgREVGRVIgPSAnREVGRVJSRUQtTE9BRElORycsXG4gIC8qKiBSZW5kZXJzIHRoZSBET00gaW5zdGFudGx5IHdpdGhvdXQgYmVpbmcgY29uY2VybmVkIHdpdGggdGhlIHZpZXcgcG9ydCAqL1xuICBJTlNUQU5UID0gJ0lOU1RBTlQtTE9BRElORycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ01TQ29tcG9uZW50Q29uZmlnXG4gIGV4dGVuZHMgU3RhbmRhcmRDbXNDb21wb25lbnRDb25maWcsXG4gICAgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XG4gIFtjb21wb25lbnRUeXBlOiBzdHJpbmddOiBDbXNDb21wb25lbnRNYXBwaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVNb2R1bGVDb25maWcge1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBmZWF0dXJlIG1vZHVsZVxuICAgKi9cbiAgbW9kdWxlPzogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBkZXBlbmRlbmN5IG1vZHVsZXNcbiAgICovXG4gIGRlcGVuZGVuY2llcz86ICgoKSA9PiBQcm9taXNlPGFueT4pW107XG4gIC8qKlxuICAgKiBDbXMgY29tcG9uZW50cyBjb3ZlcmVkIGJ5IHRoaXMgZmVhdHVyZVxuICAgKi9cbiAgY21zQ29tcG9uZW50cz86IHN0cmluZ1tdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ21zQ29uZmlnIGV4dGVuZHMgT2NjQ29uZmlnIHtcbiAgZmVhdHVyZU1vZHVsZXM/OiB7IFtmZWF0dXJlTmFtZTogc3RyaW5nXTogRmVhdHVyZU1vZHVsZUNvbmZpZyB9O1xuICBjbXNDb21wb25lbnRzPzogQ01TQ29tcG9uZW50Q29uZmlnO1xufVxuIl19