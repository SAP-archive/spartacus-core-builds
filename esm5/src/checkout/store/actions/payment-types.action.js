import { __extends } from "tslib";
import { EntityFailAction, EntityLoadAction, EntitySuccessAction, EntityLoaderResetAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';
export var LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
export var LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
export var LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
export var RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
export var SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
export var SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
export var SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
var LoadPaymentTypes = /** @class */ (function (_super) {
    __extends(LoadPaymentTypes, _super);
    function LoadPaymentTypes() {
        var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
        _this.type = LOAD_PAYMENT_TYPES;
        return _this;
    }
    return LoadPaymentTypes;
}(EntityLoadAction));
export { LoadPaymentTypes };
var LoadPaymentTypesFail = /** @class */ (function (_super) {
    __extends(LoadPaymentTypesFail, _super);
    function LoadPaymentTypesFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = LOAD_PAYMENT_TYPES_FAIL;
        return _this;
    }
    return LoadPaymentTypesFail;
}(EntityFailAction));
export { LoadPaymentTypesFail };
var LoadPaymentTypesSuccess = /** @class */ (function (_super) {
    __extends(LoadPaymentTypesSuccess, _super);
    function LoadPaymentTypesSuccess(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = LOAD_PAYMENT_TYPES_SUCCESS;
        return _this;
    }
    return LoadPaymentTypesSuccess;
}(EntitySuccessAction));
export { LoadPaymentTypesSuccess };
var ResetLoadPaymentTypesProcess = /** @class */ (function (_super) {
    __extends(ResetLoadPaymentTypesProcess, _super);
    function ResetLoadPaymentTypesProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
        _this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
        return _this;
    }
    return ResetLoadPaymentTypesProcess;
}(EntityLoaderResetAction));
export { ResetLoadPaymentTypesProcess };
var SetPaymentType = /** @class */ (function () {
    function SetPaymentType(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE;
    }
    return SetPaymentType;
}());
export { SetPaymentType };
var SetPaymentTypeFail = /** @class */ (function () {
    function SetPaymentTypeFail(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_FAIL;
    }
    return SetPaymentTypeFail;
}());
export { SetPaymentTypeFail };
var SetPaymentTypeSuccess = /** @class */ (function () {
    function SetPaymentTypeSuccess(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_SUCCESS;
    }
    return SetPaymentTypeSuccess;
}());
export { SetPaymentTypeSuccess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2hlY2tvdXQvc3RvcmUvYWN0aW9ucy9wYXltZW50LXR5cGVzLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLHVCQUF1QixHQUN4QixNQUFNLHlEQUF5RCxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRSxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRywrQkFBK0IsQ0FBQztBQUNsRSxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxvQ0FBb0MsQ0FBQztBQUM1RSxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FDckMsdUNBQXVDLENBQUM7QUFDMUMsTUFBTSxDQUFDLElBQU0sbUNBQW1DLEdBQzlDLDRDQUE0QyxDQUFDO0FBRS9DLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLDZCQUE2QixDQUFDO0FBQzlELE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLGtDQUFrQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHLHFDQUFxQyxDQUFDO0FBRTlFO0lBQXNDLG9DQUFnQjtJQUVwRDtRQUFBLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLDRCQUE0QixDQUFDLFNBQ3JEO1FBSFEsVUFBSSxHQUFHLGtCQUFrQixDQUFDOztJQUduQyxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBc0MsZ0JBQWdCLEdBS3JEOztBQUVEO0lBQTBDLHdDQUFnQjtJQUV4RCw4QkFBbUIsT0FBWTtRQUEvQixZQUNFLGtCQUFNLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxTQUNyRDtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFVBQUksR0FBRyx1QkFBdUIsQ0FBQzs7SUFHeEMsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FBQyxBQUxELENBQTBDLGdCQUFnQixHQUt6RDs7QUFFRDtJQUE2QywyQ0FBbUI7SUFFOUQsaUNBQW1CLE9BQXNCO1FBQXpDLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLDRCQUE0QixDQUFDLFNBQ3JEO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQWU7UUFEaEMsVUFBSSxHQUFHLDBCQUEwQixDQUFDOztJQUczQyxDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBNkMsbUJBQW1CLEdBSy9EOztBQUVEO0lBQWtELGdEQUF1QjtJQUV2RTtRQUFBLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLDRCQUE0QixDQUFDLFNBQ3JEO1FBSFEsVUFBSSxHQUFHLG1DQUFtQyxDQUFDOztJQUdwRCxDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBa0QsdUJBQXVCLEdBS3hFOztBQUVEO0lBRUUsd0JBQ1MsT0FLTjtRQUxNLFlBQU8sR0FBUCxPQUFPLENBS2I7UUFQTSxTQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFROUIsQ0FBQztJQUNOLHFCQUFDO0FBQUQsQ0FBQyxBQVZELElBVUM7O0FBRUQ7SUFFRSw0QkFBbUIsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0osQ0FBQztJQUNyQyx5QkFBQztBQUFELENBQUMsQUFIRCxJQUdDOztBQUVEO0lBRUUsK0JBQW1CLE9BQWE7UUFBYixZQUFPLEdBQVAsT0FBTyxDQUFNO1FBRHZCLFNBQUksR0FBRyx3QkFBd0IsQ0FBQztJQUNOLENBQUM7SUFDdEMsNEJBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFBheW1lbnRUeXBlLCBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQge1xuICBFbnRpdHlGYWlsQWN0aW9uLFxuICBFbnRpdHlMb2FkQWN0aW9uLFxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxuICBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbic7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHsgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCB9IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfUEFZTUVOVF9UWVBFUyA9ICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTX0ZBSUwgPSAnW0NoZWNrb3V0XSBMb2FkIFBheW1lbnQgVHlwZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTX1NVQ0NFU1MgPVxuICAnW0NoZWNrb3V0XSBMb2FkIFBheW1lbnQgVHlwZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVTRVRfTE9BRF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQgPVxuICAnW0NoZWNrb3V0XSBSZXNldCBMb2FkIFBheW1lbnQgVHlwZSBQcm9jZXNzJztcblxuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEUgPSAnW0NoZWNrb3V0XSBTZXQgUGF5bWVudCBUeXBlJztcbmV4cG9ydCBjb25zdCBTRVRfUEFZTUVOVF9UWVBFX0ZBSUwgPSAnW0NoZWNrb3V0XSBTZXQgUGF5bWVudCBUeXBlIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEVfU1VDQ0VTUyA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUgU3VjY2Vzcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkUGF5bWVudFR5cGVzIGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXNGYWlsIGV4dGVuZHMgRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXNTdWNjZXNzIGV4dGVuZHMgRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IFBheW1lbnRUeXBlW10pIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIEdFVF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldExvYWRQYXltZW50VHlwZXNQcm9jZXNzIGV4dGVuZHMgRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfTE9BRF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQ7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNldFBheW1lbnRUeXBlIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9QQVlNRU5UX1RZUEU7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ6IHN0cmluZztcbiAgICAgIGNhcnRJZDogc3RyaW5nO1xuICAgICAgdHlwZUNvZGU6IHN0cmluZztcbiAgICAgIHBvTnVtYmVyPzogc3RyaW5nO1xuICAgIH1cbiAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UGF5bWVudFR5cGVGYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9QQVlNRU5UX1RZUEVfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFNldFBheW1lbnRUeXBlU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRVRfUEFZTUVOVF9UWVBFX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBDYXJ0KSB7fVxufVxuXG5leHBvcnQgdHlwZSBQYXltZW50VHlwZXNBY3Rpb24gPVxuICB8IExvYWRQYXltZW50VHlwZXNcbiAgfCBMb2FkUGF5bWVudFR5cGVzRmFpbFxuICB8IExvYWRQYXltZW50VHlwZXNTdWNjZXNzXG4gIHwgUmVzZXRMb2FkUGF5bWVudFR5cGVzUHJvY2Vzc1xuICB8IFNldFBheW1lbnRUeXBlXG4gIHwgU2V0UGF5bWVudFR5cGVGYWlsXG4gIHwgU2V0UGF5bWVudFR5cGVTdWNjZXNzO1xuIl19