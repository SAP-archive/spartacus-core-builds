import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { GIVE_CONSENT_PROCESS_ID, USER_CONSENTS, WITHDRAW_CONSENT_PROCESS_ID, } from '../user-state';
export const LOAD_USER_CONSENTS = '[User] Load User Consents';
export const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';
export const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';
export const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';
export const GIVE_USER_CONSENT = '[User] Give User Consent';
export const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';
export const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';
export const RESET_GIVE_USER_CONSENT_PROCESS = '[User] Reset Give User Consent Process';
export const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';
export const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';
export const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';
export const WITHDRAW_USER_CONSENT_SUCCESS = '[User] Withdraw User Consent Success';
export const RESET_WITHDRAW_USER_CONSENT_PROCESS = '[User] Reset Withdraw User Consent Process';
export class LoadUserConsents extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_CONSENTS);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS;
    }
}
export class LoadUserConsentsFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_CONSENTS, payload);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS_FAIL;
    }
}
export class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_CONSENTS);
        this.payload = payload;
        this.type = LOAD_USER_CONSENTS_SUCCESS;
    }
}
export class ResetLoadUserConsents extends StateUtils.LoaderResetAction {
    constructor() {
        super(USER_CONSENTS);
        this.type = RESET_LOAD_USER_CONSENTS;
    }
}
export class GiveUserConsent extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.payload = payload;
        this.type = GIVE_USER_CONSENT;
    }
}
export class GiveUserConsentFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);
        this.type = GIVE_USER_CONSENT_FAIL;
    }
}
export class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {
    constructor(consentTemplate) {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.consentTemplate = consentTemplate;
        this.type = GIVE_USER_CONSENT_SUCCESS;
    }
}
export class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);
        this.type = RESET_GIVE_USER_CONSENT_PROCESS;
    }
}
export class TransferAnonymousConsent {
    constructor(payload) {
        this.payload = payload;
        this.type = TRANSFER_ANONYMOUS_CONSENT;
    }
}
export class WithdrawUserConsent extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.payload = payload;
        this.type = WITHDRAW_USER_CONSENT;
    }
}
export class WithdrawUserConsentFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);
        this.type = WITHDRAW_USER_CONSENT_FAIL;
    }
}
export class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.type = WITHDRAW_USER_CONSENT_SUCCESS;
    }
}
export class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);
        this.type = RESET_WITHDRAW_USER_CONSENT_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jb25zZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL3VzZXItY29uc2VudHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixhQUFhLEVBQ2IsMkJBQTJCLEdBQzVCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLG1DQUFtQyxDQUFDO0FBQzlFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGdDQUFnQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLGlDQUFpQyxDQUFDO0FBRTFFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLCtCQUErQixDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUMxQyx3Q0FBd0MsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyw4QkFBOEIsQ0FBQztBQUNwRSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM5RSxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FDeEMsc0NBQXNDLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sbUNBQW1DLEdBQzlDLDRDQUE0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QUksR0FBRyw2QkFBNkIsQ0FBQztJQUc5QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsVUFBVSxDQUFDLHVCQUF1QjtJQUVyRjtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUY3QyxTQUFJLEdBQUcsbUNBQW1DLENBQUM7SUFHcEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc2VudFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7XG4gIEdJVkVfQ09OU0VOVF9QUk9DRVNTX0lELFxuICBVU0VSX0NPTlNFTlRTLFxuICBXSVRIRFJBV19DT05TRU5UX1BST0NFU1NfSUQsXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX0NPTlNFTlRTID0gJ1tVc2VyXSBMb2FkIFVzZXIgQ29uc2VudHMnO1xuZXhwb3J0IGNvbnN0IExPQURfVVNFUl9DT05TRU5UU19TVUNDRVNTID0gJ1tVc2VyXSBMb2FkIFVzZXIgQ29uc2VudHMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX0NPTlNFTlRTX0ZBSUwgPSAnW1VzZXJdIExvYWQgVXNlciBDb25zZW50cyBGYWlsJztcbmV4cG9ydCBjb25zdCBSRVNFVF9MT0FEX1VTRVJfQ09OU0VOVFMgPSAnW1VzZXJdIFJlc2V0IExvYWQgVXNlciBDb25zZW50cyc7XG5cbmV4cG9ydCBjb25zdCBHSVZFX1VTRVJfQ09OU0VOVCA9ICdbVXNlcl0gR2l2ZSBVc2VyIENvbnNlbnQnO1xuZXhwb3J0IGNvbnN0IEdJVkVfVVNFUl9DT05TRU5UX0ZBSUwgPSAnW1VzZXJdIEdpdmUgVXNlciBDb25zZW50IEZhaWwnO1xuZXhwb3J0IGNvbnN0IEdJVkVfVVNFUl9DT05TRU5UX1NVQ0NFU1MgPSAnW1VzZXJdIEdpdmUgVXNlciBDb25zZW50IFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0dJVkVfVVNFUl9DT05TRU5UX1BST0NFU1MgPVxuICAnW1VzZXJdIFJlc2V0IEdpdmUgVXNlciBDb25zZW50IFByb2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFRSQU5TRkVSX0FOT05ZTU9VU19DT05TRU5UID0gJ1tVc2VyXSBUcmFuc2ZlciBBbm9ueW1vdXMgQ29uc2VudCc7XG5cbmV4cG9ydCBjb25zdCBXSVRIRFJBV19VU0VSX0NPTlNFTlQgPSAnW1VzZXJdIFdpdGhkcmF3IFVzZXIgQ29uc2VudCc7XG5leHBvcnQgY29uc3QgV0lUSERSQVdfVVNFUl9DT05TRU5UX0ZBSUwgPSAnW1VzZXJdIFdpdGhkcmF3IFVzZXIgQ29uc2VudCBGYWlsJztcbmV4cG9ydCBjb25zdCBXSVRIRFJBV19VU0VSX0NPTlNFTlRfU1VDQ0VTUyA9XG4gICdbVXNlcl0gV2l0aGRyYXcgVXNlciBDb25zZW50IFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX1dJVEhEUkFXX1VTRVJfQ09OU0VOVF9QUk9DRVNTID1cbiAgJ1tVc2VyXSBSZXNldCBXaXRoZHJhdyBVc2VyIENvbnNlbnQgUHJvY2Vzcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlckNvbnNlbnRzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9DT05TRU5UUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykge1xuICAgIHN1cGVyKFVTRVJfQ09OU0VOVFMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlckNvbnNlbnRzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfQ09OU0VOVFNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFVTRVJfQ09OU0VOVFMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlckNvbnNlbnRzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfQ09OU0VOVFNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IENvbnNlbnRUZW1wbGF0ZVtdKSB7XG4gICAgc3VwZXIoVVNFUl9DT05TRU5UUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0TG9hZFVzZXJDb25zZW50cyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfTE9BRF9VU0VSX0NPTlNFTlRTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihVU0VSX0NPTlNFTlRTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2l2ZVVzZXJDb25zZW50IGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEdJVkVfVVNFUl9DT05TRU5UO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBjb25zZW50VGVtcGxhdGVJZDogc3RyaW5nO1xuICAgICAgY29uc2VudFRlbXBsYXRlVmVyc2lvbjogbnVtYmVyO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHSVZFX0NPTlNFTlRfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdpdmVVc2VyQ29uc2VudEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gR0lWRV9VU0VSX0NPTlNFTlRfRkFJTDtcbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHSVZFX0NPTlNFTlRfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdpdmVVc2VyQ29uc2VudFN1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gR0lWRV9VU0VSX0NPTlNFTlRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIGNvbnNlbnRUZW1wbGF0ZTogQ29uc2VudFRlbXBsYXRlKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHSVZFX0NPTlNFTlRfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0R2l2ZVVzZXJDb25zZW50UHJvY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfR0lWRV9VU0VSX0NPTlNFTlRfUFJPQ0VTUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBHSVZFX0NPTlNFTlRfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyQW5vbnltb3VzQ29uc2VudCB7XG4gIHJlYWRvbmx5IHR5cGUgPSBUUkFOU0ZFUl9BTk9OWU1PVVNfQ09OU0VOVDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgY29uc2VudFRlbXBsYXRlSWQ6IHN0cmluZztcbiAgICAgIGNvbnNlbnRUZW1wbGF0ZVZlcnNpb246IG51bWJlcjtcbiAgICB9XG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFdpdGhkcmF3VXNlckNvbnNlbnQgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gV0lUSERSQVdfVVNFUl9DT05TRU5UO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBjb25zZW50Q29kZTogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBXSVRIRFJBV19DT05TRU5UX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXaXRoZHJhd1VzZXJDb25zZW50RmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBXSVRIRFJBV19VU0VSX0NPTlNFTlRfRkFJTDtcbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBXSVRIRFJBV19DT05TRU5UX1BST0NFU1NfSUQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXaXRoZHJhd1VzZXJDb25zZW50U3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBXSVRIRFJBV19VU0VSX0NPTlNFTlRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBXSVRIRFJBV19DT05TRU5UX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldFdpdGhkcmF3VXNlckNvbnNlbnRQcm9jZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9XSVRIRFJBV19VU0VSX0NPTlNFTlRfUFJPQ0VTUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBXSVRIRFJBV19DT05TRU5UX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFVzZXJDb25zZW50c0FjdGlvbiA9XG4gIHwgTG9hZFVzZXJDb25zZW50c1xuICB8IExvYWRVc2VyQ29uc2VudHNGYWlsXG4gIHwgTG9hZFVzZXJDb25zZW50c1N1Y2Nlc3NcbiAgfCBSZXNldExvYWRVc2VyQ29uc2VudHNcbiAgfCBHaXZlVXNlckNvbnNlbnRcbiAgfCBHaXZlVXNlckNvbnNlbnRGYWlsXG4gIHwgR2l2ZVVzZXJDb25zZW50U3VjY2Vzc1xuICB8IFJlc2V0R2l2ZVVzZXJDb25zZW50UHJvY2Vzc1xuICB8IFdpdGhkcmF3VXNlckNvbnNlbnRcbiAgfCBXaXRoZHJhd1VzZXJDb25zZW50RmFpbFxuICB8IFdpdGhkcmF3VXNlckNvbnNlbnRTdWNjZXNzXG4gIHwgUmVzZXRXaXRoZHJhd1VzZXJDb25zZW50UHJvY2VzcztcbiJdfQ==